
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e8c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800a080  0800a080  0001a080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1b0  0800a1b0  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1b0  0800a1b0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800a1b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e0  20000108  0800a2c0  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016e8  0800a2c0  000216e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015648  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387b  00000000  00000000  000357bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f82  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cad1  00000000  00000000  0003b392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab01  00000000  00000000  00057e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4034  00000000  00000000  00072964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b08  00000000  00000000  00116998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000108 	.word	0x20000108
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a064 	.word	0x0800a064

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000010c 	.word	0x2000010c
 800022c:	0800a064 	.word	0x0800a064

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <reverseBits>:

#ifndef INC_CRC_H_
#define INC_CRC_H_

uint8_t reverseBits(uint8_t value)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	e010      	b.n	8001192 <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b25a      	sxtb	r2, r3
 8001176:	79f9      	ldrb	r1, [r7, #7]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	fa41 f303 	asr.w	r3, r1, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b07      	cmp	r3, #7
 8001196:	ddeb      	ble.n	8001170 <reverseBits+0x14>
	}
	return result;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 80011c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d049      	beq.n	800125c <crc8+0xb8>
 80011c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d045      	beq.n	800125c <crc8+0xb8>
		crc = reverseBits(crc);
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffc1 	bl	800115c <reverseBits>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffba 	bl	800115c <reverseBits>
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	e028      	b.n	8001244 <crc8+0xa0>
			crc ^= data[i];
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4413      	add	r3, r2
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011fe:	4053      	eors	r3, r2
 8001200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	e016      	b.n	8001238 <crc8+0x94>
 800120a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <crc8+0x82>
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4053      	eors	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	e003      	b.n	800122e <crc8+0x8a>
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b07      	cmp	r3, #7
 800123c:	dde5      	ble.n	800120a <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3301      	adds	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3d2      	bcc.n	80011f2 <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 800124c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001250:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001254:	4053      	eors	r3, r2
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125a:	e056      	b.n	800130a <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	e037      	b.n	80012d2 <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 8001262:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <crc8+0xd8>
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff72 	bl	800115c <reverseBits>
 8001278:	4603      	mov	r3, r0
 800127a:	e003      	b.n	8001284 <crc8+0xe0>
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25a      	sxtb	r2, r3
 8001286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128a:	4053      	eors	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e016      	b.n	80012c6 <crc8+0x122>
 8001298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800129c:	2b00      	cmp	r3, #0
 800129e:	da09      	bge.n	80012b4 <crc8+0x110>
 80012a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4053      	eors	r3, r2
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e003      	b.n	80012bc <crc8+0x118>
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	dde5      	ble.n	8001298 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3c3      	bcc.n	8001262 <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80012da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <crc8+0x156>
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff38 	bl	800115c <reverseBits>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012f4:	4053      	eors	r3, r2
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	e005      	b.n	8001306 <crc8+0x162>
 80012fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001302:	4053      	eors	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 800130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800130e:	4618      	mov	r0, r3
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af04      	add	r7, sp, #16
 800131e:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <checkCRC+0x50>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <checkCRC+0x54>)
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	9102      	str	r1, [sp, #8]
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	2231      	movs	r2, #49	; 0x31
 8001334:	2109      	movs	r1, #9
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff34 	bl	80011a4 <crc8>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3309      	adds	r3, #9
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <checkCRC+0x36>
			return 1;
 800134a:	2301      	movs	r3, #1
 800134c:	e007      	b.n	800135e <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3309      	adds	r3, #9
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <checkCRC+0x44>
			return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <checkCRC+0x46>
		}
	else return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	20000001 	.word	0x20000001

08001370 <receiveFromBuffer>:

void receiveFromBuffer()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001374:	2219      	movs	r2, #25
 8001376:	4904      	ldr	r1, [pc, #16]	; (8001388 <receiveFromBuffer+0x18>)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <receiveFromBuffer+0x1c>)
 800137a:	f005 fd78 	bl	8006e6e <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <receiveFromBuffer+0x20>)
 8001380:	f000 f836 	bl	80013f0 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000128 	.word	0x20000128
 800138c:	20000620 	.word	0x20000620
 8001390:	2000015c 	.word	0x2000015c

08001394 <send>:

void send(uint8_t crc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if(crc)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d011      	beq.n	80013c8 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <send+0x48>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <send+0x4c>)
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	9102      	str	r1, [sp, #8]
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	2231      	movs	r2, #49	; 0x31
 80013b8:	2109      	movs	r1, #9
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <send+0x50>)
 80013bc:	f7ff fef2 	bl	80011a4 <crc8>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <send+0x50>)
 80013c6:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 80013c8:	230a      	movs	r3, #10
 80013ca:	220a      	movs	r2, #10
 80013cc:	4905      	ldr	r1, [pc, #20]	; (80013e4 <send+0x50>)
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <send+0x54>)
 80013d0:	f005 fcc2 	bl	8006d58 <HAL_UART_Transmit>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000001 	.word	0x20000001
 80013e4:	20000174 	.word	0x20000174
 80013e8:	20000620 	.word	0x20000620
 80013ec:	00000000 	.word	0x00000000

080013f0 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 812f 	bne.w	8001662 <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 8001404:	4b9e      	ldr	r3, [pc, #632]	; (8001680 <Parse_DMA_All+0x290>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 800140c:	4b9c      	ldr	r3, [pc, #624]	; (8001680 <Parse_DMA_All+0x290>)
 800140e:	785a      	ldrb	r2, [r3, #1]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 8001414:	4b9a      	ldr	r3, [pc, #616]	; (8001680 <Parse_DMA_All+0x290>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b98      	ldr	r3, [pc, #608]	; (8001680 <Parse_DMA_All+0x290>)
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 8001428:	8afb      	ldrh	r3, [r7, #22]
 800142a:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 800142c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db14      	blt.n	800145e <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001434:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc4f 	bl	8000cdc <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc9d 	bl	8000d84 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	498d      	ldr	r1, [pc, #564]	; (8001684 <Parse_DMA_All+0x294>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd4c 	bl	8000eec <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	e013      	b.n	8001486 <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800145e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc3a 	bl	8000cdc <__aeabi_i2f>
 8001468:	4603      	mov	r3, r0
 800146a:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc88 	bl	8000d84 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4984      	ldr	r1, [pc, #528]	; (8001688 <Parse_DMA_All+0x298>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd37 	bl	8000eec <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 8001486:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <Parse_DMA_All+0x290>)
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <Parse_DMA_All+0x290>)
 8001490:	795b      	ldrb	r3, [r3, #5]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 800149a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <Parse_DMA_All+0x29c>)
 80014a0:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <Parse_DMA_All+0x29c>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014ac:	dd11      	ble.n	80014d2 <Parse_DMA_All+0xe2>
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <Parse_DMA_All+0x29c>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <Parse_DMA_All+0x29c>)
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <Parse_DMA_All+0x29c>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <Parse_DMA_All+0x29c>)
 80014d0:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 80014d2:	4b6e      	ldr	r3, [pc, #440]	; (800168c <Parse_DMA_All+0x29c>)
 80014d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <Parse_DMA_All+0x290>)
 80014de:	799a      	ldrb	r2, [r3, #6]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <Parse_DMA_All+0x290>)
 80014e6:	79db      	ldrb	r3, [r3, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbf3 	bl	8000cd4 <__aeabi_ui2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4967      	ldr	r1, [pc, #412]	; (8001690 <Parse_DMA_All+0x2a0>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc46 	bl	8000d84 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f804 	bl	8000508 <__aeabi_f2d>
 8001500:	a35d      	add	r3, pc, #372	; (adr r3, 8001678 <Parse_DMA_All+0x288>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f981 	bl	800080c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f008 fc93 	bl	8009e3c <round>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fafb 	bl	8000b18 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <Parse_DMA_All+0x290>)
 800152c:	7a1a      	ldrb	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <Parse_DMA_All+0x2a4>)
 800153c:	785a      	ldrb	r2, [r3, #1]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 8001542:	4b54      	ldr	r3, [pc, #336]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <Parse_DMA_All+0x2a4>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db14      	blt.n	800158c <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbb8 	bl	8000cdc <__aeabi_i2f>
 800156c:	4603      	mov	r3, r0
 800156e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc06 	bl	8000d84 <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
 800157a:	4942      	ldr	r1, [pc, #264]	; (8001684 <Parse_DMA_All+0x294>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fcb5 	bl	8000eec <__aeabi_fdiv>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	e013      	b.n	80015b4 <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800158c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fba3 	bl	8000cdc <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fbf1 	bl	8000d84 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4938      	ldr	r1, [pc, #224]	; (8001688 <Parse_DMA_All+0x298>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fca0 	bl	8000eec <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <Parse_DMA_All+0x2a4>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <Parse_DMA_All+0x2a4>)
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 80015c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015ce:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80015da:	dd11      	ble.n	8001600 <Parse_DMA_All+0x210>
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015fe:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <Parse_DMA_All+0x2a8>)
 8001602:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <Parse_DMA_All+0x2a4>)
 800160c:	799a      	ldrb	r2, [r3, #6]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001614:	79db      	ldrb	r3, [r3, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb5c 	bl	8000cd4 <__aeabi_ui2f>
 800161c:	4603      	mov	r3, r0
 800161e:	491c      	ldr	r1, [pc, #112]	; (8001690 <Parse_DMA_All+0x2a0>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fbaf 	bl	8000d84 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff6d 	bl	8000508 <__aeabi_f2d>
 800162e:	a312      	add	r3, pc, #72	; (adr r3, 8001678 <Parse_DMA_All+0x288>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f8ea 	bl	800080c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f008 fbfc 	bl	8009e3c <round>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa64 	bl	8000b18 <__aeabi_d2iz>
 8001650:	4603      	mov	r3, r0
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <Parse_DMA_All+0x2a4>)
 800165a:	7a1a      	ldrb	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 8001660:	e005      	b.n	800166e <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	81da      	strh	r2, [r3, #14]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	00000000 	.word	0x00000000
 800167c:	406fe000 	.word	0x406fe000
 8001680:	20000144 	.word	0x20000144
 8001684:	46fffe00 	.word	0x46fffe00
 8001688:	c6fffe00 	.word	0xc6fffe00
 800168c:	20000126 	.word	0x20000126
 8001690:	43b40000 	.word	0x43b40000
 8001694:	20000150 	.word	0x20000150
 8001698:	20000124 	.word	0x20000124

0800169c <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	460b      	mov	r3, r1
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 80016ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80016b6:	dd02      	ble.n	80016be <setVelocity+0x22>
 80016b8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80016bc:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 80016be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80016c6:	da02      	bge.n	80016ce <setVelocity+0x32>
 80016c8:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 80016cc:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 80016ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bfb8      	it	lt
 80016d6:	425b      	neglt	r3, r3
 80016d8:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80016da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da06      	bge.n	80016f0 <setVelocity+0x54>
 80016e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <setVelocity+0x54>
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	425b      	negs	r3, r3
 80016ee:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80016f0:	8bfb      	ldrh	r3, [r7, #30]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	733b      	strb	r3, [r7, #12]
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	737b      	strb	r3, [r7, #13]
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	73bb      	strb	r3, [r7, #14]
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	2300      	movs	r3, #0
 800170e:	743b      	strb	r3, [r7, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	747b      	strb	r3, [r7, #17]
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	74bb      	strb	r3, [r7, #18]
 8001718:	2300      	movs	r3, #0
 800171a:	74fb      	strb	r3, [r7, #19]
 800171c:	2300      	movs	r3, #0
 800171e:	753b      	strb	r3, [r7, #20]
 8001720:	2300      	movs	r3, #0
 8001722:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	e00c      	b.n	8001744 <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4413      	add	r3, r2
 8001732:	7819      	ldrb	r1, [r3, #0]
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <setVelocity+0xc0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4413      	add	r3, r2
 800173a:	460a      	mov	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3301      	adds	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b09      	cmp	r3, #9
 8001748:	ddef      	ble.n	800172a <setVelocity+0x8e>
	}
	send(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fe22 	bl	8001394 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000174 	.word	0x20000174

08001760 <SR04_Init>:

SR04_PulseType pulse;
SR04_PulseType pulse2;

void SR04_Init()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <SR04_Init+0x24>)
 8001766:	f004 fb49 	bl	8005dfc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800176a:	2100      	movs	r1, #0
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <SR04_Init+0x24>)
 800176e:	f004 fbfd 	bl	8005f6c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <SR04_Init+0x28>)
 8001774:	f004 fb42 	bl	8005dfc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <SR04_Init+0x28>)
 800177c:	f004 fbf6 	bl	8005f6c <HAL_TIM_IC_Start_IT>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000500 	.word	0x20000500
 8001788:	20000548 	.word	0x20000548

0800178c <SR04_Start>:
void SR04_Start()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2102      	movs	r1, #2
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <SR04_Start+0x44>)
 8001796:	f002 fe52 	bl	800443e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <SR04_Start+0x44>)
 80017a0:	f002 fe4d 	bl	800443e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f001 fee9 	bl	800357c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2102      	movs	r1, #2
 80017ae:	4808      	ldr	r0, [pc, #32]	; (80017d0 <SR04_Start+0x44>)
 80017b0:	f002 fe45 	bl	800443e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <SR04_Start+0x44>)
 80017ba:	f002 fe40 	bl	800443e <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SR04_Start+0x48>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SR04_Start+0x4c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	731a      	strb	r2, [r3, #12]
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010800 	.word	0x40010800
 80017d4:	20000180 	.word	0x20000180
 80017d8:	20000190 	.word	0x20000190

080017dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d138      	bne.n	800185e <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 80017f4:	2100      	movs	r1, #0
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80017f8:	f004 ff26 	bl	8006648 <HAL_TIM_ReadCapturedValue>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001802:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020a 	bic.w	r2, r2, #10
 8001812:	621a      	str	r2, [r3, #32]
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0202 	orr.w	r2, r2, #2
 8001822:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001826:	2200      	movs	r2, #0
 8001828:	731a      	strb	r2, [r3, #12]
 800182a:	e018      	b.n	800185e <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020a 	bic.w	r2, r2, #10
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a12      	ldr	r2, [r2, #32]
 8001846:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8001848:	2100      	movs	r1, #0
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800184c:	f004 fefc 	bl	8006648 <HAL_TIM_ReadCapturedValue>
 8001850:	4603      	mov	r3, r0
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001856:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 800185a:	2201      	movs	r2, #1
 800185c:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d138      	bne.n	80018d8 <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 8001868:	7b1b      	ldrb	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01b      	beq.n	80018a6 <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001872:	f004 fee9 	bl	8006648 <HAL_TIM_ReadCapturedValue>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 800187c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 020a 	bic.w	r2, r2, #10
 800188c:	621a      	str	r2, [r3, #32]
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0202 	orr.w	r2, r2, #2
 800189c:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	731a      	strb	r2, [r3, #12]
			pulse2.rising_flag = 1;
		}
	}


}
 80018a4:	e018      	b.n	80018d8 <HAL_TIM_IC_CaptureCallback+0xfc>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020a 	bic.w	r2, r2, #10
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a12      	ldr	r2, [r2, #32]
 80018c0:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018c6:	f004 febf 	bl	8006648 <HAL_TIM_ReadCapturedValue>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018d0:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	731a      	strb	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000500 	.word	0x20000500
 80018e4:	20000180 	.word	0x20000180
 80018e8:	20000548 	.word	0x20000548
 80018ec:	20000190 	.word	0x20000190

080018f0 <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	885a      	ldrh	r2, [r3, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d908      	bls.n	8001916 <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	885a      	ldrh	r2, [r3, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	809a      	strh	r2, [r3, #4]
 8001914:	e00b      	b.n	800192e <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	885a      	ldrh	r2, [r3, #2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001926:	3310      	adds	r3, #16
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9d2 	bl	8000cdc <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4910      	ldr	r1, [pc, #64]	; (800197c <SR04_Calculate+0x8c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa21 	bl	8000d84 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <SR04_Calculate+0x90>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fa1c 	bl	8000d84 <__aeabi_fmul>
 800194c:	4603      	mov	r3, r0
 800194e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff faca 	bl	8000eec <__aeabi_fdiv>
 8001958:	4603      	mov	r3, r0
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <SR04_Calculate+0x94>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fac5 	bl	8000eec <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <SR04_Calculate+0x94>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fac0 	bl	8000eec <__aeabi_fdiv>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	43aa0000 	.word	0x43aa0000
 8001980:	42c80000 	.word	0x42c80000
 8001984:	447a0000 	.word	0x447a0000

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_DMA_Init+0x88>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <MX_DMA_Init+0x88>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6153      	str	r3, [r2, #20]
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_DMA_Init+0x88>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	200c      	movs	r0, #12
 80019ac:	f001 fee1 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019b0:	200c      	movs	r0, #12
 80019b2:	f001 fefa 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	200d      	movs	r0, #13
 80019bc:	f001 fed9 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019c0:	200d      	movs	r0, #13
 80019c2:	f001 fef2 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	200e      	movs	r0, #14
 80019cc:	f001 fed1 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019d0:	200e      	movs	r0, #14
 80019d2:	f001 feea 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	200f      	movs	r0, #15
 80019dc:	f001 fec9 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019e0:	200f      	movs	r0, #15
 80019e2:	f001 fee2 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	2010      	movs	r0, #16
 80019ec:	f001 fec1 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019f0:	2010      	movs	r0, #16
 80019f2:	f001 feda 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	2011      	movs	r0, #17
 80019fc:	f001 feb9 	bl	8003772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a00:	2011      	movs	r0, #17
 8001a02:	f001 fed2 	bl	80037aa <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <checksum>:
extern SR04_PulseType pulse2;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t checksum(uint8_t* data, uint8_t len) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]
 8001a28:	e009      	b.n	8001a3e <checksum+0x2a>
       crc += data[i];
 8001a2a:	7bbb      	ldrb	r3, [r7, #14]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4413      	add	r3, r2
 8001a36:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <checksum+0x16>
    }
    return crc;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl* motors)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
 8001a62:	e00b      	b.n	8001a7c <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	441a      	add	r2, r3
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	3318      	adds	r3, #24
 8001a70:	443b      	add	r3, r7
 8001a72:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	75fb      	strb	r3, [r7, #23]
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d9f0      	bls.n	8001a64 <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data,8);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2108      	movs	r1, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffc3 	bl	8001a14 <checksum>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	7dba      	ldrb	r2, [r7, #22]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d117      	bne.n	8001aca <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 8001a9a:	7b7a      	ldrb	r2, [r7, #13]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 8001ab2:	7c3a      	ldrb	r2, [r7, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8001ab8:	7c7b      	ldrb	r3, [r7, #17]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	7cbb      	ldrb	r3, [r7, #18]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8001aca:	2204      	movs	r2, #4
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f007 fa96 	bl	8009000 <memset>
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <d80nk_read>:

void d80nk_read()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae6:	481c      	ldr	r0, [pc, #112]	; (8001b58 <d80nk_read+0x7c>)
 8001ae8:	f002 fc92 	bl	8004410 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af4:	4818      	ldr	r0, [pc, #96]	; (8001b58 <d80nk_read+0x7c>)
 8001af6:	f002 fc8b 	bl	8004410 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b02:	4815      	ldr	r0, [pc, #84]	; (8001b58 <d80nk_read+0x7c>)
 8001b04:	f002 fc84 	bl	8004410 <HAL_GPIO_ReadPin>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <d80nk_read+0x7c>)
 8001b12:	f002 fc7d 	bl	8004410 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<4;i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e013      	b.n	8001b48 <d80nk_read+0x6c>
	{
		if(pinStates[i] == GPIO_PIN_SET)
 8001b20:	1d3a      	adds	r2, r7, #4
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <d80nk_read+0x80>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e004      	b.n	8001b42 <d80nk_read+0x66>

		}
		else
		{
			d80nk_[i] = '1';
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <d80nk_read+0x80>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2231      	movs	r2, #49	; 0x31
 8001b40:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	dde8      	ble.n	8001b20 <d80nk_read+0x44>
//			sprintf(message,"Sensor ON\n");
//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	200001a0 	.word	0x200001a0

08001b60 <distance_Calculate>:

void distance_Calculate()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001b64:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <distance_Calculate+0x48>)
 8001b66:	f7ff fec3 	bl	80018f0 <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <distance_Calculate+0x4c>)
 8001b6c:	f7ff fec0 	bl	80018f0 <SR04_Calculate>
	if(pulse.distance > 80.0) pulse.distance = 80.0;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <distance_Calculate+0x48>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <distance_Calculate+0x50>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fac0 	bl	80010fc <__aeabi_fcmpgt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <distance_Calculate+0x28>
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <distance_Calculate+0x48>)
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <distance_Calculate+0x50>)
 8001b86:	609a      	str	r2, [r3, #8]
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <distance_Calculate+0x4c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <distance_Calculate+0x50>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fab4 	bl	80010fc <__aeabi_fcmpgt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <distance_Calculate+0x3c>
}
 8001b9a:	e002      	b.n	8001ba2 <distance_Calculate+0x42>
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <distance_Calculate+0x4c>)
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <distance_Calculate+0x50>)
 8001ba0:	609a      	str	r2, [r3, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000180 	.word	0x20000180
 8001bac:	20000190 	.word	0x20000190
 8001bb0:	42a00000 	.word	0x42a00000

08001bb4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <vApplicationGetIdleTaskMemory+0x28>)
 8001bc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000250 	.word	0x20000250
 8001be0:	200002a4 	.word	0x200002a4

08001be4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 4, &Serial_Task_Handler);
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_FREERTOS_Init+0x60>)
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2304      	movs	r3, #4
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	4914      	ldr	r1, [pc, #80]	; (8001c48 <MX_FREERTOS_Init+0x64>)
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_FREERTOS_Init+0x68>)
 8001bfa:	f006 f963 	bl	8007ec4 <xTaskCreate>
  xTaskCreate(Sensor_Task, "Sensor_Task", 128, NULL, 3,&Sensor_Task_Handler);
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_FREERTOS_Init+0x6c>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2303      	movs	r3, #3
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <MX_FREERTOS_Init+0x70>)
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_FREERTOS_Init+0x74>)
 8001c0e:	f006 f959 	bl	8007ec4 <xTaskCreate>
  xTaskCreate(IMU_Task, "IMU_Task", 128, NULL, 3, IMU_Task_Handler);
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_FREERTOS_Init+0x78>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2303      	movs	r3, #3
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	490f      	ldr	r1, [pc, #60]	; (8001c60 <MX_FREERTOS_Init+0x7c>)
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <MX_FREERTOS_Init+0x80>)
 8001c24:	f006 f94e 	bl	8007ec4 <xTaskCreate>
  xTaskCreate(Feedback_Task, "Feedback_Task", 128, NULL, 3, Feedback_Task_Handler);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_FREERTOS_Init+0x84>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <MX_FREERTOS_Init+0x88>)
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_FREERTOS_Init+0x8c>)
 8001c3a:	f006 f943 	bl	8007ec4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000240 	.word	0x20000240
 8001c48:	0800a080 	.word	0x0800a080
 8001c4c:	08001e11 	.word	0x08001e11
 8001c50:	20000244 	.word	0x20000244
 8001c54:	0800a090 	.word	0x0800a090
 8001c58:	08002041 	.word	0x08002041
 8001c5c:	20000248 	.word	0x20000248
 8001c60:	0800a09c 	.word	0x0800a09c
 8001c64:	0800205d 	.word	0x0800205d
 8001c68:	2000024c 	.word	0x2000024c
 8001c6c:	0800a0a8 	.word	0x0800a0a8
 8001c70:	08001eb9 	.word	0x08001eb9

08001c74 <HAL_TIM_PeriodElapsedCallback>:
//}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d117      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(huart2Received)
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			huart2Received = 0; // Reset the flag
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
			timerCounter = 0; // Reset the timer counter
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
			{
				timerCounter = 1;
			}
		}
	}
}
 8001c9a:	e00b      	b.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
			timerCounter++;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ca4:	6013      	str	r3, [r2, #0]
			if(timerCounter >= 2) // Adjust the value based on your timer period (e.g., 2 for 1 second if the timer period is 0.5 seconds)
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d902      	bls.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
				timerCounter = 1;
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000590 	.word	0x20000590
 8001cc4:	20000238 	.word	0x20000238
 8001cc8:	2000023c 	.word	0x2000023c

08001ccc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <HAL_UART_RxCpltCallback+0x11c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10e      	bne.n	8001cfa <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_UART_RxCpltCallback+0x120>)
 8001cde:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_UART_RxCpltCallback+0x124>)
 8001ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce4:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 8001ce8:	4942      	ldr	r1, [pc, #264]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001cea:	4840      	ldr	r0, [pc, #256]	; (8001dec <HAL_UART_RxCpltCallback+0x120>)
 8001cec:	f7ff feb2 	bl	8001a54 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	493f      	ldr	r1, [pc, #252]	; (8001df0 <HAL_UART_RxCpltCallback+0x124>)
 8001cf4:	483c      	ldr	r0, [pc, #240]	; (8001de8 <HAL_UART_RxCpltCallback+0x11c>)
 8001cf6:	f005 f8ba 	bl	8006e6e <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <HAL_UART_RxCpltCallback+0x12c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d16e      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0x114>
	{
		huart2Received = 1;
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_UART_RxCpltCallback+0x130>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		timerCounter = 0;
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_UART_RxCpltCallback+0x134>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
		short len = strlen(responseBuffer);
 8001d0e:	483d      	ldr	r0, [pc, #244]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d10:	f7fe fa8e 	bl	8000230 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	847b      	strh	r3, [r7, #34]	; 0x22
		short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001d18:	2319      	movs	r3, #25
 8001d1a:	843b      	strh	r3, [r7, #32]
		for(int i=0;i<arraysz;i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e04f      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0xf6>
		{
			if(responseBuffer[i]==motors.LeftID)
 8001d22:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	4413      	add	r3, r2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11e      	bne.n	8001d70 <HAL_UART_RxCpltCallback+0xa4>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d36:	441a      	add	r2, r3
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	6810      	ldr	r0, [r2, #0]
 8001d3e:	6851      	ldr	r1, [r2, #4]
 8001d40:	c303      	stmia	r3!, {r0, r1}
 8001d42:	8912      	ldrh	r2, [r2, #8]
 8001d44:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fae4 	bl	8001318 <checkCRC>
 8001d50:	4603      	mov	r3, r0
 8001d52:	77bb      	strb	r3, [r7, #30]
				if(checking)
 8001d54:	7fbb      	ldrb	r3, [r7, #30]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d030      	beq.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferL, &responseBuffer[i], 10);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d5e:	441a      	add	r2, r3
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_UART_RxCpltCallback+0x13c>)
 8001d62:	6810      	ldr	r0, [r2, #0]
 8001d64:	6851      	ldr	r1, [r2, #4]
 8001d66:	6018      	str	r0, [r3, #0]
 8001d68:	6059      	str	r1, [r3, #4]
 8001d6a:	8912      	ldrh	r2, [r2, #8]
 8001d6c:	811a      	strh	r2, [r3, #8]
 8001d6e:	e025      	b.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				}
			}
			else if(responseBuffer[i]==motors.RightID)
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	4413      	add	r3, r2
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d11d      	bne.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d84:	441a      	add	r2, r3
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	6810      	ldr	r0, [r2, #0]
 8001d8c:	6851      	ldr	r1, [r2, #4]
 8001d8e:	c303      	stmia	r3!, {r0, r1}
 8001d90:	8912      	ldrh	r2, [r2, #8]
 8001d92:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fabd 	bl	8001318 <checkCRC>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	77fb      	strb	r3, [r7, #31]
				if(checking)
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferH, &responseBuffer[i], 10);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dac:	441a      	add	r2, r3
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_UART_RxCpltCallback+0x140>)
 8001db0:	6810      	ldr	r0, [r2, #0]
 8001db2:	6851      	ldr	r1, [r2, #4]
 8001db4:	6018      	str	r0, [r3, #0]
 8001db6:	6059      	str	r1, [r3, #4]
 8001db8:	8912      	ldrh	r2, [r2, #8]
 8001dba:	811a      	strh	r2, [r3, #8]
		for(int i=0;i<arraysz;i++)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbaa      	blt.n	8001d22 <HAL_UART_RxCpltCallback+0x56>
				}
			}
		}
		memset(responseBuffer, 0, sizeof(responseBuffer));
 8001dcc:	2219      	movs	r2, #25
 8001dce:	2100      	movs	r1, #0
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dd2:	f007 f915 	bl	8009000 <memset>
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001dd6:	2219      	movs	r2, #25
 8001dd8:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <HAL_UART_RxCpltCallback+0x12c>)
 8001ddc:	f005 f847 	bl	8006e6e <HAL_UART_Receive_DMA>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200005d8 	.word	0x200005d8
 8001dec:	200001a4 	.word	0x200001a4
 8001df0:	200001ac 	.word	0x200001ac
 8001df4:	200001b4 	.word	0x200001b4
 8001df8:	20000620 	.word	0x20000620
 8001dfc:	20000238 	.word	0x20000238
 8001e00:	2000023c 	.word	0x2000023c
 8001e04:	20000128 	.word	0x20000128
 8001e08:	20000150 	.word	0x20000150
 8001e0c:	20000144 	.word	0x20000144

08001e10 <Serial_Task>:

void Serial_Task(void *argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8001e18:	481e      	ldr	r0, [pc, #120]	; (8001e94 <Serial_Task+0x84>)
 8001e1a:	f003 ffef 	bl	8005dfc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e1e:	2208      	movs	r2, #8
 8001e20:	491d      	ldr	r1, [pc, #116]	; (8001e98 <Serial_Task+0x88>)
 8001e22:	481e      	ldr	r0, [pc, #120]	; (8001e9c <Serial_Task+0x8c>)
 8001e24:	f005 f823 	bl	8006e6e <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001e28:	2219      	movs	r2, #25
 8001e2a:	491d      	ldr	r1, [pc, #116]	; (8001ea0 <Serial_Task+0x90>)
 8001e2c:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <Serial_Task+0x94>)
 8001e2e:	f005 f81e 	bl	8006e6e <HAL_UART_Receive_DMA>
	uint32_t send_delay = pdMS_TO_TICKS(100);
 8001e32:	2364      	movs	r3, #100	; 0x64
 8001e34:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <Serial_Task+0x98>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <Serial_Task+0x98>)
 8001e3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7ff fc29 	bl	800169c <setVelocity>
	  vTaskDelay(L_R_delay);
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <Serial_Task+0x9c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f006 f96e 	bl	8008130 <vTaskDelay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <Serial_Task+0x98>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <Serial_Task+0x98>)
 8001e5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7ff fc1a 	bl	800169c <setVelocity>
	  receiveFromBuffer();
 8001e68:	f7ff fa82 	bl	8001370 <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor, timerCounter);
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <Serial_Task+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4810      	ldr	r0, [pc, #64]	; (8001eb4 <Serial_Task+0xa4>)
 8001e74:	f7ff fabc 	bl	80013f0 <Parse_DMA_All>
//	  uint8_t str[10];
//	  sprintf(str, "%d\n", (int)timerCounter);
//	  HAL_UART_Transmit(&huart3, str, sizeof(str), HAL_MAX_DELAY);
	  vTaskDelay(send_delay);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f006 f959 	bl	8008130 <vTaskDelay>
	  HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001e7e:	2219      	movs	r2, #25
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <Serial_Task+0x90>)
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <Serial_Task+0x94>)
 8001e84:	f004 fff3 	bl	8006e6e <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e88:	2208      	movs	r2, #8
 8001e8a:	4903      	ldr	r1, [pc, #12]	; (8001e98 <Serial_Task+0x88>)
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <Serial_Task+0x8c>)
 8001e8e:	f004 ffee 	bl	8006e6e <HAL_UART_Receive_DMA>
	{
 8001e92:	e7d0      	b.n	8001e36 <Serial_Task+0x26>
 8001e94:	20000590 	.word	0x20000590
 8001e98:	200001ac 	.word	0x200001ac
 8001e9c:	200005d8 	.word	0x200005d8
 8001ea0:	20000128 	.word	0x20000128
 8001ea4:	20000620 	.word	0x20000620
 8001ea8:	200001b4 	.word	0x200001b4
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	2000023c 	.word	0x2000023c
 8001eb4:	2000015c 	.word	0x2000015c

08001eb8 <Feedback_Task>:
	}
}

void Feedback_Task(void *argument)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 8001ec0:	23c8      	movs	r3, #200	; 0xc8
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		uint8_t sendData[30];
		sendData[0] = 0x00;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	733b      	strb	r3, [r7, #12]
		sendData[1] = (wheelsensor.leftii) & 0xFF;
 8001ec8:	4b57      	ldr	r3, [pc, #348]	; (8002028 <Feedback_Task+0x170>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	737b      	strb	r3, [r7, #13]
		sendData[2] = ((wheelsensor.LeftVelocity)>>8) & 0xFF;
 8001ece:	4b56      	ldr	r3, [pc, #344]	; (8002028 <Feedback_Task+0x170>)
 8001ed0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ed4:	121b      	asrs	r3, r3, #8
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73bb      	strb	r3, [r7, #14]
		sendData[3] = wheelsensor.LeftVelocity & 0xFF;
 8001edc:	4b52      	ldr	r3, [pc, #328]	; (8002028 <Feedback_Task+0x170>)
 8001ede:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	73fb      	strb	r3, [r7, #15]
		sendData[4] = wheelsensor.reightii & 0xFF;
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <Feedback_Task+0x170>)
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	743b      	strb	r3, [r7, #16]
		sendData[5] = ((wheelsensor.RightVelocity)>>8) & 0xFF;
 8001eec:	4b4e      	ldr	r3, [pc, #312]	; (8002028 <Feedback_Task+0x170>)
 8001eee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ef2:	121b      	asrs	r3, r3, #8
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	747b      	strb	r3, [r7, #17]
		sendData[6] = wheelsensor.RightVelocity & 0xFF;
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <Feedback_Task+0x170>)
 8001efc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	74bb      	strb	r3, [r7, #18]
		sendData[7] = (MPU6050.Accel_X_RAW >> 8) & 0xFF;
 8001f04:	4b49      	ldr	r3, [pc, #292]	; (800202c <Feedback_Task+0x174>)
 8001f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0a:	121b      	asrs	r3, r3, #8
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	74fb      	strb	r3, [r7, #19]
		sendData[8] = MPU6050.Accel_X_RAW & 0XFF;
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <Feedback_Task+0x174>)
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	753b      	strb	r3, [r7, #20]
		sendData[9] = (MPU6050.Accel_Y_RAW >> 8) & 0XFF;
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <Feedback_Task+0x174>)
 8001f1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f22:	121b      	asrs	r3, r3, #8
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	757b      	strb	r3, [r7, #21]
		sendData[10] = MPU6050.Accel_Y_RAW & 0xFF;
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <Feedback_Task+0x174>)
 8001f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	75bb      	strb	r3, [r7, #22]
		sendData[11] = (MPU6050.Accel_Z_RAW >> 8) & 0xFF;
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <Feedback_Task+0x174>)
 8001f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f3a:	121b      	asrs	r3, r3, #8
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	75fb      	strb	r3, [r7, #23]
		sendData[12] = MPU6050.Accel_Z_RAW & 0xFF;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <Feedback_Task+0x174>)
 8001f44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	763b      	strb	r3, [r7, #24]
		sendData[13] = (MPU6050.Gyro_X_RAW >> 8) & 0XFF;
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <Feedback_Task+0x174>)
 8001f4e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	767b      	strb	r3, [r7, #25]
		sendData[14] = MPU6050.Gyro_X_RAW & 0xFF;
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <Feedback_Task+0x174>)
 8001f5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	76bb      	strb	r3, [r7, #26]
		sendData[15] = (MPU6050.Gyro_Y_RAW >> 8) & 0XFF;
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <Feedback_Task+0x174>)
 8001f66:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f6a:	121b      	asrs	r3, r3, #8
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	76fb      	strb	r3, [r7, #27]
		sendData[16] = MPU6050.Gyro_Y_RAW & 0xFF;
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <Feedback_Task+0x174>)
 8001f74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	773b      	strb	r3, [r7, #28]
		sendData[17] = (MPU6050.Gyro_Z_RAW >> 8) & 0XFF;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <Feedback_Task+0x174>)
 8001f7e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f82:	121b      	asrs	r3, r3, #8
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	777b      	strb	r3, [r7, #29]
		sendData[18] = MPU6050.Gyro_Z_RAW & 0xFF;
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <Feedback_Task+0x174>)
 8001f8c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	77bb      	strb	r3, [r7, #30]
		sendData[19] = (((int)pulse.distance) >> 8) & 0xFF;
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <Feedback_Task+0x178>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f8b9 	bl	8001110 <__aeabi_f2iz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	121b      	asrs	r3, r3, #8
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	77fb      	strb	r3, [r7, #31]
		sendData[20] = ((int)pulse.distance) & 0xFF;
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <Feedback_Task+0x178>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8b0 	bl	8001110 <__aeabi_f2iz>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f887 3020 	strb.w	r3, [r7, #32]
		sendData[21] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <Feedback_Task+0x17c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f8a7 	bl	8001110 <__aeabi_f2iz>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	121b      	asrs	r3, r3, #8
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		sendData[22] = ((int)pulse2.distance) & 0xFF;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <Feedback_Task+0x17c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f89d 	bl	8001110 <__aeabi_f2iz>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		sendData[23] = d80nk_[0] & 0xFF;
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <Feedback_Task+0x180>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		sendData[24] = d80nk_[1] & 0xFF;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <Feedback_Task+0x180>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sendData[25] = d80nk_[2] & 0xFF;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <Feedback_Task+0x180>)
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		sendData[26] = d80nk_[3] & 0xFF;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <Feedback_Task+0x180>)
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		sendData[27] = checksum(sendData, 28);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	211c      	movs	r1, #28
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fd05 	bl	8001a14 <checksum>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(&huart1, sendData, 28, HAL_MAX_DELAY);
 8002010:	f107 010c 	add.w	r1, r7, #12
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	221c      	movs	r2, #28
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <Feedback_Task+0x184>)
 800201c:	f004 fe9c 	bl	8006d58 <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8002020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002022:	f006 f885 	bl	8008130 <vTaskDelay>
	{
 8002026:	e74d      	b.n	8001ec4 <Feedback_Task+0xc>
 8002028:	2000015c 	.word	0x2000015c
 800202c:	200001c0 	.word	0x200001c0
 8002030:	20000180 	.word	0x20000180
 8002034:	20000190 	.word	0x20000190
 8002038:	200001a0 	.word	0x200001a0
 800203c:	200005d8 	.word	0x200005d8

08002040 <Sensor_Task>:
	}
}

void Sensor_Task(void *argument)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	SR04_Init();
 8002048:	f7ff fb8a 	bl	8001760 <SR04_Init>
	while(1)
	{
		SR04_Start();
 800204c:	f7ff fb9e 	bl	800178c <SR04_Start>
		d80nk_read();
 8002050:	f7ff fd44 	bl	8001adc <d80nk_read>
		distance_Calculate();
 8002054:	f7ff fd84 	bl	8001b60 <distance_Calculate>
		SR04_Start();
 8002058:	e7f8      	b.n	800204c <Sensor_Task+0xc>
	...

0800205c <IMU_Task>:
	}
}

void IMU_Task(void *argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(500);
 8002064:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (MPU6050_Init(&hi2c1) == 1)
 800206a:	e010      	b.n	800208e <IMU_Task+0x32>
	{
	  uint8_t message[30];
	  sprintf(message,"Device not found. Retry...\n");
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <IMU_Task+0x48>)
 8002072:	4618      	mov	r0, r3
 8002074:	f006 ffa4 	bl	8008fc0 <siprintf>
	  HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
 8002078:	f107 010c 	add.w	r1, r7, #12
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	221e      	movs	r2, #30
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <IMU_Task+0x4c>)
 8002084:	f004 fe68 	bl	8006d58 <HAL_UART_Transmit>
	  vTaskDelay(tick_delay);
 8002088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800208a:	f006 f851 	bl	8008130 <vTaskDelay>
	while (MPU6050_Init(&hi2c1) == 1)
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <IMU_Task+0x50>)
 8002090:	f000 f93b 	bl	800230a <MPU6050_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d0e8      	beq.n	800206c <IMU_Task+0x10>
	};
	while(1)
	{
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 800209a:	4905      	ldr	r1, [pc, #20]	; (80020b0 <IMU_Task+0x54>)
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <IMU_Task+0x50>)
 800209e:	f000 f98b 	bl	80023b8 <MPU6050_Read_All>
 80020a2:	e7fa      	b.n	800209a <IMU_Task+0x3e>
 80020a4:	0800a0b8 	.word	0x0800a0b8
 80020a8:	20000668 	.word	0x20000668
 80020ac:	200004a4 	.word	0x200004a4
 80020b0:	200001c0 	.word	0x200001c0

080020b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a22      	ldr	r2, [pc, #136]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <MX_GPIO_Init+0xa4>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_GPIO_Init+0xa4>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	2182      	movs	r1, #130	; 0x82
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_GPIO_Init+0xa8>)
 8002116:	f002 f992 	bl	800443e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800211a:	2382      	movs	r3, #130	; 0x82
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	480a      	ldr	r0, [pc, #40]	; (800215c <MX_GPIO_Init+0xa8>)
 8002132:	f001 ffd9 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002136:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800213a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_GPIO_Init+0xac>)
 800214c:	f001 ffcc 	bl	80040e8 <HAL_GPIO_Init>

}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00

08002164 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C1_Init+0x50>)
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <MX_I2C1_Init+0x54>)
 800216c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_I2C1_Init+0x50>)
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MX_I2C1_Init+0x58>)
 8002172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C1_Init+0x50>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_I2C1_Init+0x50>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_I2C1_Init+0x50>)
 8002182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <MX_I2C1_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_I2C1_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <MX_I2C1_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_I2C1_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_I2C1_Init+0x50>)
 80021a2:	f002 f965 	bl	8004470 <HAL_I2C_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021ac:	f000 f8a8 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200004a4 	.word	0x200004a4
 80021b8:	40005400 	.word	0x40005400
 80021bc:	00061a80 	.word	0x00061a80

080021c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_I2C_MspInit+0x70>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d123      	bne.n	8002228 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_I2C_MspInit+0x74>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a13      	ldr	r2, [pc, #76]	; (8002234 <HAL_I2C_MspInit+0x74>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_I2C_MspInit+0x74>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f8:	23c0      	movs	r3, #192	; 0xc0
 80021fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fc:	2312      	movs	r3, #18
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4619      	mov	r1, r3
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <HAL_I2C_MspInit+0x78>)
 800220c:	f001 ff6c 	bl	80040e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_I2C_MspInit+0x74>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_I2C_MspInit+0x74>)
 8002216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800221a:	61d3      	str	r3, [r2, #28]
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_I2C_MspInit+0x74>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40005400 	.word	0x40005400
 8002234:	40021000 	.word	0x40021000
 8002238:	40010c00 	.word	0x40010c00

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002240:	f001 f93a 	bl	80034b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002244:	f000 f817 	bl	8002276 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002248:	f7ff ff34 	bl	80020b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800224c:	f7ff fb9c 	bl	8001988 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002250:	f000 feb4 	bl	8002fbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002254:	f000 fedc 	bl	8003010 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002258:	f000 ff04 	bl	8003064 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800225c:	f7ff ff82 	bl	8002164 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002260:	f000 fcea 	bl	8002c38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002264:	f000 fd58 	bl	8002d18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002268:	f000 fdc6 	bl	8002df8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800226c:	f7ff fcba 	bl	8001be4 <MX_FREERTOS_Init>

  /* Start scheduler */
  vTaskStartScheduler();
 8002270:	f005 ff92 	bl	8008198 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002274:	e7fe      	b.n	8002274 <main+0x38>

08002276 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b090      	sub	sp, #64	; 0x40
 800227a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	2228      	movs	r2, #40	; 0x28
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f006 febb 	bl	8009000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022aa:	2302      	movs	r3, #2
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 f93c 	bl	800553c <HAL_RCC_OscConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022ca:	f000 f819 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2302      	movs	r3, #2
 80022d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2102      	movs	r1, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fba9 	bl	8005a40 <HAL_RCC_ClockConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022f4:	f000 f804 	bl	8002300 <Error_Handler>
  }
}
 80022f8:	bf00      	nop
 80022fa:	3740      	adds	r7, #64	; 0x40
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	e7fe      	b.n	8002308 <Error_Handler+0x8>

0800230a <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800230a:	b580      	push	{r7, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af04      	add	r7, sp, #16
 8002310:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002312:	2364      	movs	r3, #100	; 0x64
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	2301      	movs	r3, #1
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	f107 030f 	add.w	r3, r7, #15
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2275      	movs	r2, #117	; 0x75
 8002324:	21d0      	movs	r1, #208	; 0xd0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f002 fae0 	bl	80048ec <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b68      	cmp	r3, #104	; 0x68
 8002330:	d13d      	bne.n	80023ae <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002336:	2364      	movs	r3, #100	; 0x64
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f107 030e 	add.w	r3, r7, #14
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	226b      	movs	r2, #107	; 0x6b
 8002348:	21d0      	movs	r1, #208	; 0xd0
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f002 f9d4 	bl	80046f8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002350:	2307      	movs	r3, #7
 8002352:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 030e 	add.w	r3, r7, #14
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	2219      	movs	r2, #25
 8002366:	21d0      	movs	r1, #208	; 0xd0
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f002 f9c5 	bl	80046f8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 800236e:	2318      	movs	r3, #24
 8002370:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002372:	2364      	movs	r3, #100	; 0x64
 8002374:	9302      	str	r3, [sp, #8]
 8002376:	2301      	movs	r3, #1
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	f107 030e 	add.w	r3, r7, #14
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2301      	movs	r3, #1
 8002382:	221c      	movs	r2, #28
 8002384:	21d0      	movs	r1, #208	; 0xd0
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f002 f9b6 	bl	80046f8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 800238c:	2318      	movs	r3, #24
 800238e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002390:	2364      	movs	r3, #100	; 0x64
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2301      	movs	r3, #1
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	f107 030e 	add.w	r3, r7, #14
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	221b      	movs	r2, #27
 80023a2:	21d0      	movs	r1, #208	; 0xd0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f002 f9a7 	bl	80046f8 <HAL_I2C_Mem_Write>
        return 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <MPU6050_Init+0xa6>
    }
    return 1;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b094      	sub	sp, #80	; 0x50
 80023be:	af04      	add	r7, sp, #16
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80023c4:	2364      	movs	r3, #100	; 0x64
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	230e      	movs	r3, #14
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	223b      	movs	r2, #59	; 0x3b
 80023d6:	21d0      	movs	r1, #208	; 0xd0
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f002 fa87 	bl	80048ec <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80023de:	7a3b      	ldrb	r3, [r7, #8]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	7a7b      	ldrb	r3, [r7, #9]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80023f0:	7abb      	ldrb	r3, [r7, #10]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002402:	7b3b      	ldrb	r3, [r7, #12]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	b21a      	sxth	r2, r3
 8002408:	7b7b      	ldrb	r3, [r7, #13]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21a      	sxth	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b21a      	sxth	r2, r3
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002422:	7c3b      	ldrb	r3, [r7, #16]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b21a      	sxth	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002434:	7cbb      	ldrb	r3, [r7, #18]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	b21a      	sxth	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002446:	7d3b      	ldrb	r3, [r7, #20]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b21a      	sxth	r2, r3
 800244c:	7d7b      	ldrb	r3, [r7, #21]
 800244e:	b21b      	sxth	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	b21a      	sxth	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f840 	bl	80004e4 <__aeabi_i2d>
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b95      	ldr	r3, [pc, #596]	; (80026c0 <MPU6050_Read_All+0x308>)
 800246a:	f7fe f9cf 	bl	800080c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f830 	bl	80004e4 <__aeabi_i2d>
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <MPU6050_Read_All+0x308>)
 800248a:	f7fe f9bf 	bl	800080c <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f820 	bl	80004e4 <__aeabi_i2d>
 80024a4:	a380      	add	r3, pc, #512	; (adr r3, 80026a8 <MPU6050_Read_All+0x2f0>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f9af 	bl	800080c <__aeabi_ddiv>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80024b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fc0d 	bl	8000cdc <__aeabi_i2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	497f      	ldr	r1, [pc, #508]	; (80026c4 <MPU6050_Read_All+0x30c>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd10 	bl	8000eec <__aeabi_fdiv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	497e      	ldr	r1, [pc, #504]	; (80026c8 <MPU6050_Read_All+0x310>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fb4f 	bl	8000b74 <__addsf3>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fffd 	bl	80004e4 <__aeabi_i2d>
 80024ea:	a371      	add	r3, pc, #452	; (adr r3, 80026b0 <MPU6050_Read_All+0x2f8>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f98c 	bl	800080c <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffed 	bl	80004e4 <__aeabi_i2d>
 800250a:	a369      	add	r3, pc, #420	; (adr r3, 80026b0 <MPU6050_Read_All+0x2f8>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f97c 	bl	800080c <__aeabi_ddiv>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ffdd 	bl	80004e4 <__aeabi_i2d>
 800252a:	a361      	add	r3, pc, #388	; (adr r3, 80026b0 <MPU6050_Read_All+0x2f8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f96c 	bl	800080c <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800253e:	f001 f813 	bl	8003568 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	4b61      	ldr	r3, [pc, #388]	; (80026cc <MPU6050_Read_All+0x314>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ffba 	bl	80004c4 <__aeabi_ui2d>
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <MPU6050_Read_All+0x318>)
 8002556:	f7fe f959 	bl	800080c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002562:	f001 f801 	bl	8003568 <HAL_GetTick>
 8002566:	4603      	mov	r3, r0
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <MPU6050_Read_All+0x314>)
 800256a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	461a      	mov	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffa6 	bl	80004e4 <__aeabi_i2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f007 f9c1 	bl	8009926 <sqrt>
 80025a4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025b4:	f7fe fa68 	bl	8000a88 <__aeabi_dcmpeq>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d119      	bne.n	80025f2 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff8d 	bl	80004e4 <__aeabi_i2d>
 80025ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ce:	f7fe f91d 	bl	800080c <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f007 f9c9 	bl	8009970 <atan>
 80025de:	a336      	add	r3, pc, #216	; (adr r3, 80026b8 <MPU6050_Read_All+0x300>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd ffe8 	bl	80005b8 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80025f0:	e005      	b.n	80025fe <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002604:	425b      	negs	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff6c 	bl	80004e4 <__aeabi_i2d>
 800260c:	4682      	mov	sl, r0
 800260e:	468b      	mov	fp, r1
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff64 	bl	80004e4 <__aeabi_i2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4650      	mov	r0, sl
 8002622:	4659      	mov	r1, fp
 8002624:	f007 f97d 	bl	8009922 <atan2>
 8002628:	a323      	add	r3, pc, #140	; (adr r3, 80026b8 <MPU6050_Read_All+0x300>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd ffc3 	bl	80005b8 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <MPU6050_Read_All+0x31c>)
 8002640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002644:	f7fe fa2a 	bl	8000a9c <__aeabi_dcmplt>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <MPU6050_Read_All+0x2ac>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <MPU6050_Read_All+0x320>)
 800265a:	f7fe fa3d 	bl	8000ad8 <__aeabi_dcmpgt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d114      	bne.n	800268e <MPU6050_Read_All+0x2d6>
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <MPU6050_Read_All+0x320>)
 800266a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800266e:	f7fe fa33 	bl	8000ad8 <__aeabi_dcmpgt>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d033      	beq.n	80026e0 <MPU6050_Read_All+0x328>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MPU6050_Read_All+0x31c>)
 8002684:	f7fe fa0a 	bl	8000a9c <__aeabi_dcmplt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d028      	beq.n	80026e0 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 800268e:	4913      	ldr	r1, [pc, #76]	; (80026dc <MPU6050_Read_All+0x324>)
 8002690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002694:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80026a2:	e030      	b.n	8002706 <MPU6050_Read_All+0x34e>
 80026a4:	f3af 8000 	nop.w
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40cc2900 	.word	0x40cc2900
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40606000 	.word	0x40606000
 80026b8:	1a63c1f8 	.word	0x1a63c1f8
 80026bc:	404ca5dc 	.word	0x404ca5dc
 80026c0:	40d00000 	.word	0x40d00000
 80026c4:	43aa0000 	.word	0x43aa0000
 80026c8:	42121eb8 	.word	0x42121eb8
 80026cc:	200004f8 	.word	0x200004f8
 80026d0:	408f4000 	.word	0x408f4000
 80026d4:	c0568000 	.word	0xc0568000
 80026d8:	40568000 	.word	0x40568000
 80026dc:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026ee:	e9cd 2300 	strd	r2, r3, [sp]
 80026f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f6:	481c      	ldr	r0, [pc, #112]	; (8002768 <MPU6050_Read_All+0x3b0>)
 80026f8:	f000 f83c 	bl	8002774 <Kalman_getAngle>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800270c:	4690      	mov	r8, r2
 800270e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <MPU6050_Read_All+0x3b4>)
 8002718:	4640      	mov	r0, r8
 800271a:	4649      	mov	r1, r9
 800271c:	f7fe f9dc 	bl	8000ad8 <__aeabi_dcmpgt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800272c:	4614      	mov	r4, r2
 800272e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800273e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002746:	e9cd 2300 	strd	r2, r3, [sp]
 800274a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800274e:	4808      	ldr	r0, [pc, #32]	; (8002770 <MPU6050_Read_All+0x3b8>)
 8002750:	f000 f810 	bl	8002774 <Kalman_getAngle>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800275e:	bf00      	nop
 8002760:	3740      	adds	r7, #64	; 0x40
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002768:	20000050 	.word	0x20000050
 800276c:	40568000 	.word	0x40568000
 8002770:	20000008 	.word	0x20000008

08002774 <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b092      	sub	sp, #72	; 0x48
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002786:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800278a:	f7fd fd5d 	bl	8000248 <__aeabi_dsub>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800279c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027a4:	f7fd ff08 	bl	80005b8 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fd4c 	bl	800024c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027ce:	f7fd fef3 	bl	80005b8 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027e0:	f7fd fd32 	bl	8000248 <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027f2:	f7fd fd29 	bl	8000248 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fd fd22 	bl	800024c <__adddf3>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002814:	f7fd fed0 	bl	80005b8 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4620      	mov	r0, r4
 800281e:	4629      	mov	r1, r5
 8002820:	f7fd fd14 	bl	800024c <__adddf3>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800283a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800283e:	f7fd febb 	bl	80005b8 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fcfd 	bl	8000248 <__aeabi_dsub>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002864:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002868:	f7fd fea6 	bl	80005b8 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fd fce8 	bl	8000248 <__aeabi_dsub>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800288e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002892:	f7fd fe91 	bl	80005b8 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fcd5 	bl	800024c <__adddf3>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028b8:	f7fd fcc8 	bl	800024c <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028ce:	f7fd ff9d 	bl	800080c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80028e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028e4:	f7fd ff92 	bl	800080c <__aeabi_ddiv>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028fa:	f7fd fca5 	bl	8000248 <__aeabi_dsub>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800290c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002910:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002914:	f7fd fe50 	bl	80005b8 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4620      	mov	r0, r4
 800291e:	4629      	mov	r1, r5
 8002920:	f7fd fc94 	bl	800024c <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002934:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800293c:	f7fd fe3c 	bl	80005b8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fc80 	bl	800024c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800295c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002966:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002978:	f7fd fe1e 	bl	80005b8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fc60 	bl	8000248 <__aeabi_dsub>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002998:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800299c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a0:	f7fd fe0a 	bl	80005b8 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fc4c 	bl	8000248 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80029c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c8:	f7fd fdf6 	bl	80005b8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fc38 	bl	8000248 <__aeabi_dsub>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80029e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029f0:	f7fd fde2 	bl	80005b8 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fd fc24 	bl	8000248 <__aeabi_dsub>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	3748      	adds	r7, #72	; 0x48
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_MspInit+0x68>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_MspInit+0x68>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6193      	str	r3, [r2, #24]
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_MspInit+0x68>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_MspInit+0x68>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_MspInit+0x68>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_MspInit+0x68>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	210f      	movs	r1, #15
 8002a56:	f06f 0001 	mvn.w	r0, #1
 8002a5a:	f000 fe8a 	bl	8003772 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_MspInit+0x6c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_MspInit+0x6c>)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a90:	e7fe      	b.n	8002a90 <NMI_Handler+0x4>

08002a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <HardFault_Handler+0x4>

08002a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <MemManage_Handler+0x4>

08002a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <BusFault_Handler+0x4>

08002aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <UsageFault_Handler+0x4>

08002aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aba:	f000 fd43 	bl	8003544 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002abe:	f005 fe5d 	bl	800877c <xTaskGetSchedulerState>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d001      	beq.n	8002acc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ac8:	f006 f84e 	bl	8008b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <DMA1_Channel2_IRQHandler+0x10>)
 8002ad6:	f001 f89d 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000804 	.word	0x20000804

08002ae4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA1_Channel3_IRQHandler+0x10>)
 8002aea:	f001 f893 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200007c0 	.word	0x200007c0

08002af8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA1_Channel4_IRQHandler+0x10>)
 8002afe:	f001 f889 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200006f4 	.word	0x200006f4

08002b0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA1_Channel5_IRQHandler+0x10>)
 8002b12:	f001 f87f 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200006b0 	.word	0x200006b0

08002b20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA1_Channel6_IRQHandler+0x10>)
 8002b26:	f001 f875 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000738 	.word	0x20000738

08002b34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <DMA1_Channel7_IRQHandler+0x10>)
 8002b3a:	f001 f86b 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000077c 	.word	0x2000077c

08002b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <TIM2_IRQHandler+0x10>)
 8002b4e:	f003 fb27 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000500 	.word	0x20000500

08002b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM3_IRQHandler+0x10>)
 8002b62:	f003 fb1d 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000548 	.word	0x20000548

08002b70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM4_IRQHandler+0x10>)
 8002b76:	f003 fb13 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000590 	.word	0x20000590

08002b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <USART1_IRQHandler+0x10>)
 8002b8a:	f004 f995 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200005d8 	.word	0x200005d8

08002b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <USART2_IRQHandler+0x10>)
 8002b9e:	f004 f98b 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000620 	.word	0x20000620

08002bac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <USART3_IRQHandler+0x10>)
 8002bb2:	f004 f981 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000668 	.word	0x20000668

08002bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <_sbrk+0x5c>)
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_sbrk+0x60>)
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <_sbrk+0x64>)
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <_sbrk+0x68>)
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d207      	bcs.n	8002c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf0:	f006 fa0e 	bl	8009010 <__errno>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e009      	b.n	8002c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_sbrk+0x64>)
 8002c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	2000c000 	.word	0x2000c000
 8002c20:	00000400 	.word	0x00000400
 8002c24:	200004fc 	.word	0x200004fc
 8002c28:	200016e8 	.word	0x200016e8

08002c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3e:	f107 0318 	add.w	r3, r7, #24
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c56:	463b      	mov	r3, r7
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c6c:	2247      	movs	r2, #71	; 0x47
 8002c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002c8c:	f003 f866 	bl	8005d5c <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002c96:	f7ff fb33 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0318 	add.w	r3, r7, #24
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	481b      	ldr	r0, [pc, #108]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002ca8:	f003 fc06 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cb2:	f7ff fb25 	bl	8002300 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cb6:	4817      	ldr	r0, [pc, #92]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002cb8:	f003 f900 	bl	8005ebc <HAL_TIM_IC_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002cc2:	f7ff fb1d 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002cd6:	f003 ff71 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002ce0:	f7ff fb0e 	bl	8002300 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4806      	ldr	r0, [pc, #24]	; (8002d14 <MX_TIM2_Init+0xdc>)
 8002cfc:	f003 fb40 	bl	8006380 <HAL_TIM_IC_ConfigChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002d06:	f7ff fafb 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000500 	.word	0x20000500

08002d18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0318 	add.w	r3, r7, #24
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d36:	463b      	mov	r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d44:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <MX_TIM3_Init+0xdc>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d4a:	2247      	movs	r2, #71	; 0x47
 8002d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d68:	4821      	ldr	r0, [pc, #132]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d6a:	f002 fff7 	bl	8005d5c <HAL_TIM_Base_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002d74:	f7ff fac4 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0318 	add.w	r3, r7, #24
 8002d82:	4619      	mov	r1, r3
 8002d84:	481a      	ldr	r0, [pc, #104]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d86:	f003 fb97 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002d90:	f7ff fab6 	bl	8002300 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002d94:	4816      	ldr	r0, [pc, #88]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002d96:	f003 f891 	bl	8005ebc <HAL_TIM_IC_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002da0:	f7ff faae 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4619      	mov	r1, r3
 8002db2:	480f      	ldr	r0, [pc, #60]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002db4:	f003 ff02 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002dbe:	f7ff fa9f 	bl	8002300 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_TIM3_Init+0xd8>)
 8002dda:	f003 fad1 	bl	8006380 <HAL_TIM_IC_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002de4:	f7ff fa8c 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000548 	.word	0x20000548
 8002df4:	40000400 	.word	0x40000400

08002df8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <MX_TIM4_Init+0x98>)
 8002e18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e1c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e3c:	4813      	ldr	r0, [pc, #76]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e3e:	f002 ff8d 	bl	8005d5c <HAL_TIM_Base_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e48:	f7ff fa5a 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	4619      	mov	r1, r3
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e5a:	f003 fb2d 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e64:	f7ff fa4c 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e70:	463b      	mov	r3, r7
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_TIM4_Init+0x94>)
 8002e76:	f003 fea1 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e80:	f7ff fa3e 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000590 	.word	0x20000590
 8002e90:	40000800 	.word	0x40000800

08002e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0320 	add.w	r3, r7, #32
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d12c      	bne.n	8002f0e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	61d3      	str	r3, [r2, #28]
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	482e      	ldr	r0, [pc, #184]	; (8002fb0 <HAL_TIM_Base_MspInit+0x11c>)
 8002ef8:	f001 f8f6 	bl	80040e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002efc:	2200      	movs	r2, #0
 8002efe:	2105      	movs	r1, #5
 8002f00:	201c      	movs	r0, #28
 8002f02:	f000 fc36 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f06:	201c      	movs	r0, #28
 8002f08:	f000 fc4f 	bl	80037aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f0c:	e04a      	b.n	8002fa4 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_TIM_Base_MspInit+0x120>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d12c      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	61d3      	str	r3, [r2, #28]
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6193      	str	r3, [r2, #24]
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f54:	f107 0320 	add.w	r3, r7, #32
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4815      	ldr	r0, [pc, #84]	; (8002fb0 <HAL_TIM_Base_MspInit+0x11c>)
 8002f5c:	f001 f8c4 	bl	80040e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2105      	movs	r1, #5
 8002f64:	201d      	movs	r0, #29
 8002f66:	f000 fc04 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f6a:	201d      	movs	r0, #29
 8002f6c:	f000 fc1d 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 8002f70:	e018      	b.n	8002fa4 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_TIM_Base_MspInit+0x124>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d113      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	61d3      	str	r3, [r2, #28]
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_TIM_Base_MspInit+0x118>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2105      	movs	r1, #5
 8002f98:	201e      	movs	r0, #30
 8002f9a:	f000 fbea 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f9e:	201e      	movs	r0, #30
 8002fa0:	f000 fc03 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 8002fa4:	bf00      	nop
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010800 	.word	0x40010800
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800

08002fbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <MX_USART1_UART_Init+0x50>)
 8002fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_USART1_UART_Init+0x4c>)
 8002ff4:	f003 fe60 	bl	8006cb8 <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ffe:	f7ff f97f 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200005d8 	.word	0x200005d8
 800300c:	40013800 	.word	0x40013800

08003010 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <MX_USART2_UART_Init+0x50>)
 8003018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <MX_USART2_UART_Init+0x4c>)
 800301c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_USART2_UART_Init+0x4c>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_USART2_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <MX_USART2_UART_Init+0x4c>)
 8003048:	f003 fe36 	bl	8006cb8 <HAL_UART_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003052:	f7ff f955 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000620 	.word	0x20000620
 8003060:	40004400 	.word	0x40004400

08003064 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <MX_USART3_UART_Init+0x50>)
 800306c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 8003070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 800308a:	220c      	movs	r2, #12
 800308c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <MX_USART3_UART_Init+0x4c>)
 800309c:	f003 fe0c 	bl	8006cb8 <HAL_UART_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030a6:	f7ff f92b 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000668 	.word	0x20000668
 80030b4:	40004800 	.word	0x40004800

080030b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0320 	add.w	r3, r7, #32
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a8b      	ldr	r2, [pc, #556]	; (8003300 <HAL_UART_MspInit+0x248>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f040 8087 	bne.w	80031e8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030da:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	4a89      	ldr	r2, [pc, #548]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6193      	str	r3, [r2, #24]
 80030e6:	4b87      	ldr	r3, [pc, #540]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6193      	str	r3, [r2, #24]
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_UART_MspInit+0x24c>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800310a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003118:	f107 0320 	add.w	r3, r7, #32
 800311c:	4619      	mov	r1, r3
 800311e:	487a      	ldr	r0, [pc, #488]	; (8003308 <HAL_UART_MspInit+0x250>)
 8003120:	f000 ffe2 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 0320 	add.w	r3, r7, #32
 8003136:	4619      	mov	r1, r3
 8003138:	4873      	ldr	r0, [pc, #460]	; (8003308 <HAL_UART_MspInit+0x250>)
 800313a:	f000 ffd5 	bl	80040e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800313e:	4b73      	ldr	r3, [pc, #460]	; (800330c <HAL_UART_MspInit+0x254>)
 8003140:	4a73      	ldr	r2, [pc, #460]	; (8003310 <HAL_UART_MspInit+0x258>)
 8003142:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003144:	4b71      	ldr	r3, [pc, #452]	; (800330c <HAL_UART_MspInit+0x254>)
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314a:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_UART_MspInit+0x254>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003150:	4b6e      	ldr	r3, [pc, #440]	; (800330c <HAL_UART_MspInit+0x254>)
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_UART_MspInit+0x254>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800315c:	4b6b      	ldr	r3, [pc, #428]	; (800330c <HAL_UART_MspInit+0x254>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_UART_MspInit+0x254>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_UART_MspInit+0x254>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800316e:	4867      	ldr	r0, [pc, #412]	; (800330c <HAL_UART_MspInit+0x254>)
 8003170:	f000 fb36 	bl	80037e0 <HAL_DMA_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800317a:	f7ff f8c1 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a62      	ldr	r2, [pc, #392]	; (800330c <HAL_UART_MspInit+0x254>)
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
 8003184:	4a61      	ldr	r2, [pc, #388]	; (800330c <HAL_UART_MspInit+0x254>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800318a:	4b62      	ldr	r3, [pc, #392]	; (8003314 <HAL_UART_MspInit+0x25c>)
 800318c:	4a62      	ldr	r2, [pc, #392]	; (8003318 <HAL_UART_MspInit+0x260>)
 800318e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_UART_MspInit+0x25c>)
 8003192:	2210      	movs	r2, #16
 8003194:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_UART_MspInit+0x25c>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_UART_MspInit+0x25c>)
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031ae:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031b4:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031ba:	4856      	ldr	r0, [pc, #344]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031bc:	f000 fb10 	bl	80037e0 <HAL_DMA_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80031c6:	f7ff f89b 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_UART_MspInit+0x25c>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2105      	movs	r1, #5
 80031da:	2025      	movs	r0, #37	; 0x25
 80031dc:	f000 fac9 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031e0:	2025      	movs	r0, #37	; 0x25
 80031e2:	f000 fae2 	bl	80037aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031e6:	e12f      	b.n	8003448 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4b      	ldr	r2, [pc, #300]	; (800331c <HAL_UART_MspInit+0x264>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 809e 	bne.w	8003330 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4a42      	ldr	r2, [pc, #264]	; (8003304 <HAL_UART_MspInit+0x24c>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fe:	61d3      	str	r3, [r2, #28]
 8003200:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_UART_MspInit+0x24c>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320c:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_UART_MspInit+0x24c>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <HAL_UART_MspInit+0x24c>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_UART_MspInit+0x24c>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003224:	2304      	movs	r3, #4
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	f107 0320 	add.w	r3, r7, #32
 8003234:	4619      	mov	r1, r3
 8003236:	4834      	ldr	r0, [pc, #208]	; (8003308 <HAL_UART_MspInit+0x250>)
 8003238:	f000 ff56 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800323c:	2308      	movs	r3, #8
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0320 	add.w	r3, r7, #32
 800324c:	4619      	mov	r1, r3
 800324e:	482e      	ldr	r0, [pc, #184]	; (8003308 <HAL_UART_MspInit+0x250>)
 8003250:	f000 ff4a 	bl	80040e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_UART_MspInit+0x26c>)
 8003258:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_UART_MspInit+0x268>)
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003260:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_UART_MspInit+0x268>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_UART_MspInit+0x268>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003280:	2200      	movs	r2, #0
 8003282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003284:	4826      	ldr	r0, [pc, #152]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003286:	f000 faab 	bl	80037e0 <HAL_DMA_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8003290:	f7ff f836 	bl	8002300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_UART_MspInit+0x268>)
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_UART_MspInit+0x268>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_UART_MspInit+0x274>)
 80032a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032a8:	2210      	movs	r2, #16
 80032aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032d0:	4815      	ldr	r0, [pc, #84]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032d2:	f000 fa85 	bl	80037e0 <HAL_DMA_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80032dc:	f7ff f810 	bl	8002300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_UART_MspInit+0x270>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2105      	movs	r1, #5
 80032f0:	2026      	movs	r0, #38	; 0x26
 80032f2:	f000 fa3e 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032f6:	2026      	movs	r0, #38	; 0x26
 80032f8:	f000 fa57 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 80032fc:	e0a4      	b.n	8003448 <HAL_UART_MspInit+0x390>
 80032fe:	bf00      	nop
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	40010800 	.word	0x40010800
 800330c:	200006b0 	.word	0x200006b0
 8003310:	40020058 	.word	0x40020058
 8003314:	200006f4 	.word	0x200006f4
 8003318:	40020044 	.word	0x40020044
 800331c:	40004400 	.word	0x40004400
 8003320:	20000738 	.word	0x20000738
 8003324:	4002006c 	.word	0x4002006c
 8003328:	2000077c 	.word	0x2000077c
 800332c:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a46      	ldr	r2, [pc, #280]	; (8003450 <HAL_UART_MspInit+0x398>)
 8003336:	4293      	cmp	r3, r2
 8003338:	f040 8086 	bne.w	8003448 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 800333c:	4b45      	ldr	r3, [pc, #276]	; (8003454 <HAL_UART_MspInit+0x39c>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4a44      	ldr	r2, [pc, #272]	; (8003454 <HAL_UART_MspInit+0x39c>)
 8003342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003346:	61d3      	str	r3, [r2, #28]
 8003348:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_UART_MspInit+0x39c>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_UART_MspInit+0x39c>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	4a3e      	ldr	r2, [pc, #248]	; (8003454 <HAL_UART_MspInit+0x39c>)
 800335a:	f043 0308 	orr.w	r3, r3, #8
 800335e:	6193      	str	r3, [r2, #24]
 8003360:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <HAL_UART_MspInit+0x39c>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800336c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337a:	f107 0320 	add.w	r3, r7, #32
 800337e:	4619      	mov	r1, r3
 8003380:	4835      	ldr	r0, [pc, #212]	; (8003458 <HAL_UART_MspInit+0x3a0>)
 8003382:	f000 feb1 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f107 0320 	add.w	r3, r7, #32
 8003398:	4619      	mov	r1, r3
 800339a:	482f      	ldr	r0, [pc, #188]	; (8003458 <HAL_UART_MspInit+0x3a0>)
 800339c:	f000 fea4 	bl	80040e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033a2:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <HAL_UART_MspInit+0x3a8>)
 80033a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b8:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80033d0:	4822      	ldr	r0, [pc, #136]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033d2:	f000 fa05 	bl	80037e0 <HAL_DMA_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80033dc:	f7fe ff90 	bl	8002300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_UART_MspInit+0x3a4>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_UART_MspInit+0x3b0>)
 80033f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 80033f4:	2210      	movs	r2, #16
 80033f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 800340c:	2200      	movs	r2, #0
 800340e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003412:	2200      	movs	r2, #0
 8003414:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003418:	2200      	movs	r2, #0
 800341a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800341c:	4811      	ldr	r0, [pc, #68]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 800341e:	f000 f9df 	bl	80037e0 <HAL_DMA_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8003428:	f7fe ff6a 	bl	8002300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
 8003432:	4a0c      	ldr	r2, [pc, #48]	; (8003464 <HAL_UART_MspInit+0x3ac>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2105      	movs	r1, #5
 800343c:	2027      	movs	r0, #39	; 0x27
 800343e:	f000 f998 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003442:	2027      	movs	r0, #39	; 0x27
 8003444:	f000 f9b1 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 8003448:	bf00      	nop
 800344a:	3730      	adds	r7, #48	; 0x30
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40004800 	.word	0x40004800
 8003454:	40021000 	.word	0x40021000
 8003458:	40010c00 	.word	0x40010c00
 800345c:	200007c0 	.word	0x200007c0
 8003460:	40020030 	.word	0x40020030
 8003464:	20000804 	.word	0x20000804
 8003468:	4002001c 	.word	0x4002001c

0800346c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800346c:	f7ff fbde 	bl	8002c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003472:	490c      	ldr	r1, [pc, #48]	; (80034a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003478:	e002      	b.n	8003480 <LoopCopyDataInit>

0800347a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347e:	3304      	adds	r3, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003484:	d3f9      	bcc.n	800347a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003488:	4c09      	ldr	r4, [pc, #36]	; (80034b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800348c:	e001      	b.n	8003492 <LoopFillZerobss>

0800348e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003490:	3204      	adds	r2, #4

08003492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003494:	d3fb      	bcc.n	800348e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003496:	f005 fdc1 	bl	800901c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800349a:	f7fe fecf 	bl	800223c <main>
  bx lr
 800349e:	4770      	bx	lr
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80034a8:	0800a1b8 	.word	0x0800a1b8
  ldr r2, =_sbss
 80034ac:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80034b0:	200016e8 	.word	0x200016e8

080034b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_2_IRQHandler>
	...

080034b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_Init+0x28>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <HAL_Init+0x28>)
 80034c2:	f043 0310 	orr.w	r3, r3, #16
 80034c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c8:	2003      	movs	r0, #3
 80034ca:	f000 f947 	bl	800375c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ce:	200f      	movs	r0, #15
 80034d0:	f000 f808 	bl	80034e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d4:	f7ff faa2 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000

080034e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_InitTick+0x54>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_InitTick+0x58>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f95f 	bl	80037c6 <HAL_SYSTICK_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00e      	b.n	8003530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80a      	bhi.n	800352e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f000 f927 	bl	8003772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003524:	4a06      	ldr	r2, [pc, #24]	; (8003540 <HAL_InitTick+0x5c>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000098 	.word	0x20000098
 800353c:	200000a0 	.word	0x200000a0
 8003540:	2000009c 	.word	0x2000009c

08003544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_IncTick+0x1c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_IncTick+0x20>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_IncTick+0x20>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	200000a0 	.word	0x200000a0
 8003564:	20000848 	.word	0x20000848

08003568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return uwTick;
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <HAL_GetTick+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000848 	.word	0x20000848

0800357c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff fff0 	bl	8003568 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d005      	beq.n	80035a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_Delay+0x44>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035a2:	bf00      	nop
 80035a4:	f7ff ffe0 	bl	8003568 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d8f7      	bhi.n	80035a4 <HAL_Delay+0x28>
  {
  }
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200000a0 	.word	0x200000a0

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4906      	ldr	r1, [pc, #24]	; (800365c <__NVIC_EnableIRQ+0x34>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
         );
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d301      	bcc.n	800372e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372a:	2301      	movs	r3, #1
 800372c:	e00f      	b.n	800374e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <SysTick_Config+0x40>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003736:	210f      	movs	r1, #15
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f7ff ff90 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SysTick_Config+0x40>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SysTick_Config+0x40>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000e010 	.word	0xe000e010

0800375c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff2d 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff42 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff90 	bl	80036b4 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5f 	bl	8003660 <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff35 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ffa2 	bl	8003718 <SysTick_Config>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e059      	b.n	80038aa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_DMA_Init+0xd4>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d80f      	bhi.n	8003822 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_DMA_Init+0xd8>)
 800380a:	4413      	add	r3, r2
 800380c:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <HAL_DMA_Init+0xdc>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	009a      	lsls	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <HAL_DMA_Init+0xe0>)
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003820:	e00e      	b.n	8003840 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_DMA_Init+0xe4>)
 800382a:	4413      	add	r3, r2
 800382c:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_DMA_Init+0xdc>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_DMA_Init+0xe8>)
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003856:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800385a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40020407 	.word	0x40020407
 80038b8:	bffdfff8 	.word	0xbffdfff8
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	40020000 	.word	0x40020000
 80038c4:	bffdfbf8 	.word	0xbffdfbf8
 80038c8:	40020400 	.word	0x40020400

080038cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_Start_IT+0x20>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e04b      	b.n	8003984 <HAL_DMA_Start_IT+0xb8>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d13a      	bne.n	8003976 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fbb1 	bl	800408c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 020e 	orr.w	r2, r2, #14
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e00f      	b.n	8003964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 020a 	orr.w	r2, r2, #10
 8003962:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e005      	b.n	8003982 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d008      	beq.n	80039b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e020      	b.n	80039f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 020e 	bic.w	r2, r2, #14
 80039c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d005      	beq.n	8003a28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e0d6      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020e 	bic.w	r2, r2, #14
 8003a36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_DMA_Abort_IT+0x1dc>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d958      	bls.n	8003b06 <HAL_DMA_Abort_IT+0x102>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a62      	ldr	r2, [pc, #392]	; (8003be4 <HAL_DMA_Abort_IT+0x1e0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04f      	beq.n	8003afe <HAL_DMA_Abort_IT+0xfa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a61      	ldr	r2, [pc, #388]	; (8003be8 <HAL_DMA_Abort_IT+0x1e4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d048      	beq.n	8003afa <HAL_DMA_Abort_IT+0xf6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5f      	ldr	r2, [pc, #380]	; (8003bec <HAL_DMA_Abort_IT+0x1e8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d040      	beq.n	8003af4 <HAL_DMA_Abort_IT+0xf0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <HAL_DMA_Abort_IT+0x1ec>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d038      	beq.n	8003aee <HAL_DMA_Abort_IT+0xea>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_DMA_Abort_IT+0x1f0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d030      	beq.n	8003ae8 <HAL_DMA_Abort_IT+0xe4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_DMA_Abort_IT+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d028      	beq.n	8003ae2 <HAL_DMA_Abort_IT+0xde>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_DMA_Abort_IT+0x1dc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d020      	beq.n	8003adc <HAL_DMA_Abort_IT+0xd8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a57      	ldr	r2, [pc, #348]	; (8003bfc <HAL_DMA_Abort_IT+0x1f8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d019      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0xd4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a55      	ldr	r2, [pc, #340]	; (8003c00 <HAL_DMA_Abort_IT+0x1fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d012      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0xd0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a54      	ldr	r2, [pc, #336]	; (8003c04 <HAL_DMA_Abort_IT+0x200>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00a      	beq.n	8003ace <HAL_DMA_Abort_IT+0xca>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_DMA_Abort_IT+0x204>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d102      	bne.n	8003ac8 <HAL_DMA_Abort_IT+0xc4>
 8003ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac6:	e01b      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003acc:	e018      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad2:	e015      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	e013      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e011      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae0:	e00e      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae6:	e00b      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aec:	e008      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af2:	e005      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af8:	e002      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003afa:	2310      	movs	r3, #16
 8003afc:	e000      	b.n	8003b00 <HAL_DMA_Abort_IT+0xfc>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_DMA_Abort_IT+0x208>)
 8003b02:	6053      	str	r3, [r2, #4]
 8003b04:	e057      	b.n	8003bb6 <HAL_DMA_Abort_IT+0x1b2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a36      	ldr	r2, [pc, #216]	; (8003be4 <HAL_DMA_Abort_IT+0x1e0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04f      	beq.n	8003bb0 <HAL_DMA_Abort_IT+0x1ac>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a34      	ldr	r2, [pc, #208]	; (8003be8 <HAL_DMA_Abort_IT+0x1e4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d048      	beq.n	8003bac <HAL_DMA_Abort_IT+0x1a8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a33      	ldr	r2, [pc, #204]	; (8003bec <HAL_DMA_Abort_IT+0x1e8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x1a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <HAL_DMA_Abort_IT+0x1ec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d038      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0x19c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a30      	ldr	r2, [pc, #192]	; (8003bf4 <HAL_DMA_Abort_IT+0x1f0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d030      	beq.n	8003b9a <HAL_DMA_Abort_IT+0x196>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2e      	ldr	r2, [pc, #184]	; (8003bf8 <HAL_DMA_Abort_IT+0x1f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d028      	beq.n	8003b94 <HAL_DMA_Abort_IT+0x190>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a26      	ldr	r2, [pc, #152]	; (8003be0 <HAL_DMA_Abort_IT+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d020      	beq.n	8003b8e <HAL_DMA_Abort_IT+0x18a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <HAL_DMA_Abort_IT+0x1f8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d019      	beq.n	8003b8a <HAL_DMA_Abort_IT+0x186>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <HAL_DMA_Abort_IT+0x1fc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x182>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <HAL_DMA_Abort_IT+0x200>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00a      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x17c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <HAL_DMA_Abort_IT+0x204>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <HAL_DMA_Abort_IT+0x176>
 8003b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b78:	e01b      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b7e:	e018      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b84:	e015      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b86:	2310      	movs	r3, #16
 8003b88:	e013      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e011      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b92:	e00e      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b98:	e00b      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9e:	e008      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	e005      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003baa:	e002      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003bac:	2310      	movs	r3, #16
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_Abort_IT+0x1ae>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_DMA_Abort_IT+0x20c>)
 8003bb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
    } 
  }
  return status;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40020080 	.word	0x40020080
 8003be4:	40020008 	.word	0x40020008
 8003be8:	4002001c 	.word	0x4002001c
 8003bec:	40020030 	.word	0x40020030
 8003bf0:	40020044 	.word	0x40020044
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	4002006c 	.word	0x4002006c
 8003bfc:	40020408 	.word	0x40020408
 8003c00:	4002041c 	.word	0x4002041c
 8003c04:	40020430 	.word	0x40020430
 8003c08:	40020444 	.word	0x40020444
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020000 	.word	0x40020000

08003c14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2204      	movs	r2, #4
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80f1 	beq.w	8003e20 <HAL_DMA_IRQHandler+0x20c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80eb 	beq.w	8003e20 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_DMA_IRQHandler+0x1d8>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d958      	bls.n	8003d26 <HAL_DMA_IRQHandler+0x112>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04f      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x10a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d048      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x106>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d040      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x100>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_DMA_IRQHandler+0x1e8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d038      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xfa>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_DMA_IRQHandler+0x1ec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d030      	beq.n	8003d08 <HAL_DMA_IRQHandler+0xf4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_DMA_IRQHandler+0x1f0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d028      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xee>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	; (8003dec <HAL_DMA_IRQHandler+0x1d8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d020      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xe8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_DMA_IRQHandler+0x1f4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d019      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0xe4>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a50      	ldr	r2, [pc, #320]	; (8003e0c <HAL_DMA_IRQHandler+0x1f8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d012      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0xe0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4f      	ldr	r2, [pc, #316]	; (8003e10 <HAL_DMA_IRQHandler+0x1fc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00a      	beq.n	8003cee <HAL_DMA_IRQHandler+0xda>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4d      	ldr	r2, [pc, #308]	; (8003e14 <HAL_DMA_IRQHandler+0x200>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d102      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0xd4>
 8003ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce6:	e01b      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cec:	e018      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf2:	e015      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003cf4:	2340      	movs	r3, #64	; 0x40
 8003cf6:	e013      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e011      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d00:	e00e      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d06:	e00b      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d0c:	e008      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d12:	e005      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d18:	e002      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0x10c>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <HAL_DMA_IRQHandler+0x204>)
 8003d22:	6053      	str	r3, [r2, #4]
 8003d24:	e057      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x1c2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a31      	ldr	r2, [pc, #196]	; (8003df0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04f      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x1bc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2f      	ldr	r2, [pc, #188]	; (8003df4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d048      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x1b8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	; (8003df8 <HAL_DMA_IRQHandler+0x1e4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x1b2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_DMA_IRQHandler+0x1e8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d038      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x1ac>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <HAL_DMA_IRQHandler+0x1ec>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d030      	beq.n	8003dba <HAL_DMA_IRQHandler+0x1a6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_DMA_IRQHandler+0x1f0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d028      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x1a0>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_DMA_IRQHandler+0x1d8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d020      	beq.n	8003dae <HAL_DMA_IRQHandler+0x19a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_DMA_IRQHandler+0x1f4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_DMA_IRQHandler+0x196>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a24      	ldr	r2, [pc, #144]	; (8003e0c <HAL_DMA_IRQHandler+0x1f8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d012      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x192>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_DMA_IRQHandler+0x1fc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x18c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_DMA_IRQHandler+0x200>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x186>
 8003d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d98:	e01b      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003d9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d9e:	e018      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da4:	e015      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003da6:	2340      	movs	r3, #64	; 0x40
 8003da8:	e013      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e011      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003db2:	e00e      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003db4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db8:	e00b      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dbe:	e008      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dc4:	e005      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dca:	e002      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dcc:	2340      	movs	r3, #64	; 0x40
 8003dce:	e000      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x1be>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_DMA_IRQHandler+0x208>)
 8003dd4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8136 	beq.w	800404c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003de8:	e130      	b.n	800404c <HAL_DMA_IRQHandler+0x438>
 8003dea:	bf00      	nop
 8003dec:	40020080 	.word	0x40020080
 8003df0:	40020008 	.word	0x40020008
 8003df4:	4002001c 	.word	0x4002001c
 8003df8:	40020030 	.word	0x40020030
 8003dfc:	40020044 	.word	0x40020044
 8003e00:	40020058 	.word	0x40020058
 8003e04:	4002006c 	.word	0x4002006c
 8003e08:	40020408 	.word	0x40020408
 8003e0c:	4002041c 	.word	0x4002041c
 8003e10:	40020430 	.word	0x40020430
 8003e14:	40020444 	.word	0x40020444
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2202      	movs	r2, #2
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80dd 	beq.w	8003fec <HAL_DMA_IRQHandler+0x3d8>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80d7 	beq.w	8003fec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020a 	bic.w	r2, r2, #10
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b7b      	ldr	r3, [pc, #492]	; (8004058 <HAL_DMA_IRQHandler+0x444>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d958      	bls.n	8003f22 <HAL_DMA_IRQHandler+0x30e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a79      	ldr	r2, [pc, #484]	; (800405c <HAL_DMA_IRQHandler+0x448>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04f      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x306>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a78      	ldr	r2, [pc, #480]	; (8004060 <HAL_DMA_IRQHandler+0x44c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d048      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x302>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a76      	ldr	r2, [pc, #472]	; (8004064 <HAL_DMA_IRQHandler+0x450>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2fc>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a75      	ldr	r2, [pc, #468]	; (8004068 <HAL_DMA_IRQHandler+0x454>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d038      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x2f6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_DMA_IRQHandler+0x458>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d030      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x2f0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a72      	ldr	r2, [pc, #456]	; (8004070 <HAL_DMA_IRQHandler+0x45c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d028      	beq.n	8003efe <HAL_DMA_IRQHandler+0x2ea>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_DMA_IRQHandler+0x444>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d020      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x2e4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6e      	ldr	r2, [pc, #440]	; (8004074 <HAL_DMA_IRQHandler+0x460>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d019      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x2e0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6c      	ldr	r2, [pc, #432]	; (8004078 <HAL_DMA_IRQHandler+0x464>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d012      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2dc>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6b      	ldr	r2, [pc, #428]	; (800407c <HAL_DMA_IRQHandler+0x468>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00a      	beq.n	8003eea <HAL_DMA_IRQHandler+0x2d6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a69      	ldr	r2, [pc, #420]	; (8004080 <HAL_DMA_IRQHandler+0x46c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d102      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x2d0>
 8003ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee2:	e01b      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee8:	e018      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eee:	e015      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e013      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e011      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003efc:	e00e      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003efe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f02:	e00b      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f08:	e008      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0e:	e005      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f14:	e002      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003f16:	2320      	movs	r3, #32
 8003f18:	e000      	b.n	8003f1c <HAL_DMA_IRQHandler+0x308>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	4a59      	ldr	r2, [pc, #356]	; (8004084 <HAL_DMA_IRQHandler+0x470>)
 8003f1e:	6053      	str	r3, [r2, #4]
 8003f20:	e057      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x3be>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4d      	ldr	r2, [pc, #308]	; (800405c <HAL_DMA_IRQHandler+0x448>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04f      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x3b8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <HAL_DMA_IRQHandler+0x44c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d048      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x3b4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_DMA_IRQHandler+0x450>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x3ae>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a48      	ldr	r2, [pc, #288]	; (8004068 <HAL_DMA_IRQHandler+0x454>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d038      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x3a8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a47      	ldr	r2, [pc, #284]	; (800406c <HAL_DMA_IRQHandler+0x458>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d030      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3a2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a45      	ldr	r2, [pc, #276]	; (8004070 <HAL_DMA_IRQHandler+0x45c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d028      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x39c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3d      	ldr	r2, [pc, #244]	; (8004058 <HAL_DMA_IRQHandler+0x444>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d020      	beq.n	8003faa <HAL_DMA_IRQHandler+0x396>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a41      	ldr	r2, [pc, #260]	; (8004074 <HAL_DMA_IRQHandler+0x460>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d019      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x392>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <HAL_DMA_IRQHandler+0x464>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d012      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x38e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3e      	ldr	r2, [pc, #248]	; (800407c <HAL_DMA_IRQHandler+0x468>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00a      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x388>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <HAL_DMA_IRQHandler+0x46c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d102      	bne.n	8003f96 <HAL_DMA_IRQHandler+0x382>
 8003f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f94:	e01b      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f9a:	e018      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa0:	e015      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e013      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e011      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fae:	e00e      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fb4:	e00b      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fba:	e008      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc0:	e005      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc6:	e002      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e000      	b.n	8003fce <HAL_DMA_IRQHandler+0x3ba>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	4a2e      	ldr	r2, [pc, #184]	; (8004088 <HAL_DMA_IRQHandler+0x474>)
 8003fd0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d034      	beq.n	800404c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fea:	e02f      	b.n	800404c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d028      	beq.n	800404e <HAL_DMA_IRQHandler+0x43a>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d023      	beq.n	800404e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 020e 	bic.w	r2, r2, #14
 8004014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
    }
  }
  return;
 800404c:	bf00      	nop
 800404e:	bf00      	nop
}
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40020080 	.word	0x40020080
 800405c:	40020008 	.word	0x40020008
 8004060:	4002001c 	.word	0x4002001c
 8004064:	40020030 	.word	0x40020030
 8004068:	40020044 	.word	0x40020044
 800406c:	40020058 	.word	0x40020058
 8004070:	4002006c 	.word	0x4002006c
 8004074:	40020408 	.word	0x40020408
 8004078:	4002041c 	.word	0x4002041c
 800407c:	40020430 	.word	0x40020430
 8004080:	40020444 	.word	0x40020444
 8004084:	40020400 	.word	0x40020400
 8004088:	40020000 	.word	0x40020000

0800408c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d108      	bne.n	80040cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040ca:	e007      	b.n	80040dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b08b      	sub	sp, #44	; 0x2c
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fa:	e179      	b.n	80043f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040fc:	2201      	movs	r2, #1
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	429a      	cmp	r2, r3
 8004116:	f040 8168 	bne.w	80043ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a96      	ldr	r2, [pc, #600]	; (8004378 <HAL_GPIO_Init+0x290>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d05e      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
 8004124:	4a94      	ldr	r2, [pc, #592]	; (8004378 <HAL_GPIO_Init+0x290>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d875      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 800412a:	4a94      	ldr	r2, [pc, #592]	; (800437c <HAL_GPIO_Init+0x294>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d058      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
 8004130:	4a92      	ldr	r2, [pc, #584]	; (800437c <HAL_GPIO_Init+0x294>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d86f      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 8004136:	4a92      	ldr	r2, [pc, #584]	; (8004380 <HAL_GPIO_Init+0x298>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d052      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
 800413c:	4a90      	ldr	r2, [pc, #576]	; (8004380 <HAL_GPIO_Init+0x298>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d869      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 8004142:	4a90      	ldr	r2, [pc, #576]	; (8004384 <HAL_GPIO_Init+0x29c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04c      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
 8004148:	4a8e      	ldr	r2, [pc, #568]	; (8004384 <HAL_GPIO_Init+0x29c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d863      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 800414e:	4a8e      	ldr	r2, [pc, #568]	; (8004388 <HAL_GPIO_Init+0x2a0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d046      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
 8004154:	4a8c      	ldr	r2, [pc, #560]	; (8004388 <HAL_GPIO_Init+0x2a0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d85d      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 800415a:	2b12      	cmp	r3, #18
 800415c:	d82a      	bhi.n	80041b4 <HAL_GPIO_Init+0xcc>
 800415e:	2b12      	cmp	r3, #18
 8004160:	d859      	bhi.n	8004216 <HAL_GPIO_Init+0x12e>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <HAL_GPIO_Init+0x80>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	080041e3 	.word	0x080041e3
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080041cf 	.word	0x080041cf
 8004174:	08004211 	.word	0x08004211
 8004178:	08004217 	.word	0x08004217
 800417c:	08004217 	.word	0x08004217
 8004180:	08004217 	.word	0x08004217
 8004184:	08004217 	.word	0x08004217
 8004188:	08004217 	.word	0x08004217
 800418c:	08004217 	.word	0x08004217
 8004190:	08004217 	.word	0x08004217
 8004194:	08004217 	.word	0x08004217
 8004198:	08004217 	.word	0x08004217
 800419c:	08004217 	.word	0x08004217
 80041a0:	08004217 	.word	0x08004217
 80041a4:	08004217 	.word	0x08004217
 80041a8:	08004217 	.word	0x08004217
 80041ac:	080041c5 	.word	0x080041c5
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	4a75      	ldr	r2, [pc, #468]	; (800438c <HAL_GPIO_Init+0x2a4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041ba:	e02c      	b.n	8004216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	623b      	str	r3, [r7, #32]
          break;
 80041c2:	e029      	b.n	8004218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	3304      	adds	r3, #4
 80041ca:	623b      	str	r3, [r7, #32]
          break;
 80041cc:	e024      	b.n	8004218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	3308      	adds	r3, #8
 80041d4:	623b      	str	r3, [r7, #32]
          break;
 80041d6:	e01f      	b.n	8004218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	330c      	adds	r3, #12
 80041de:	623b      	str	r3, [r7, #32]
          break;
 80041e0:	e01a      	b.n	8004218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041ea:	2304      	movs	r3, #4
 80041ec:	623b      	str	r3, [r7, #32]
          break;
 80041ee:	e013      	b.n	8004218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041f8:	2308      	movs	r3, #8
 80041fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	611a      	str	r2, [r3, #16]
          break;
 8004202:	e009      	b.n	8004218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004204:	2308      	movs	r3, #8
 8004206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	615a      	str	r2, [r3, #20]
          break;
 800420e:	e003      	b.n	8004218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004210:	2300      	movs	r3, #0
 8004212:	623b      	str	r3, [r7, #32]
          break;
 8004214:	e000      	b.n	8004218 <HAL_GPIO_Init+0x130>
          break;
 8004216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2bff      	cmp	r3, #255	; 0xff
 800421c:	d801      	bhi.n	8004222 <HAL_GPIO_Init+0x13a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	e001      	b.n	8004226 <HAL_GPIO_Init+0x13e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2bff      	cmp	r3, #255	; 0xff
 800422c:	d802      	bhi.n	8004234 <HAL_GPIO_Init+0x14c>
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	e002      	b.n	800423a <HAL_GPIO_Init+0x152>
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	3b08      	subs	r3, #8
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	210f      	movs	r1, #15
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80c1 	beq.w	80043ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_GPIO_Init+0x2a8>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a48      	ldr	r2, [pc, #288]	; (8004390 <HAL_GPIO_Init+0x2a8>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_GPIO_Init+0x2a8>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004280:	4a44      	ldr	r2, [pc, #272]	; (8004394 <HAL_GPIO_Init+0x2ac>)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3c      	ldr	r2, [pc, #240]	; (8004398 <HAL_GPIO_Init+0x2b0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d01f      	beq.n	80042ec <HAL_GPIO_Init+0x204>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_GPIO_Init+0x2b4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d019      	beq.n	80042e8 <HAL_GPIO_Init+0x200>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <HAL_GPIO_Init+0x2b8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_GPIO_Init+0x1fc>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a39      	ldr	r2, [pc, #228]	; (80043a4 <HAL_GPIO_Init+0x2bc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00d      	beq.n	80042e0 <HAL_GPIO_Init+0x1f8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a38      	ldr	r2, [pc, #224]	; (80043a8 <HAL_GPIO_Init+0x2c0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <HAL_GPIO_Init+0x1f4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a37      	ldr	r2, [pc, #220]	; (80043ac <HAL_GPIO_Init+0x2c4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <HAL_GPIO_Init+0x1f0>
 80042d4:	2305      	movs	r3, #5
 80042d6:	e00a      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042d8:	2306      	movs	r3, #6
 80042da:	e008      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042dc:	2304      	movs	r3, #4
 80042de:	e006      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042e0:	2303      	movs	r3, #3
 80042e2:	e004      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e002      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_GPIO_Init+0x206>
 80042ec:	2300      	movs	r3, #0
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	f002 0203 	and.w	r2, r2, #3
 80042f4:	0092      	lsls	r2, r2, #2
 80042f6:	4093      	lsls	r3, r2
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042fe:	4925      	ldr	r1, [pc, #148]	; (8004394 <HAL_GPIO_Init+0x2ac>)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	3302      	adds	r3, #2
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	4924      	ldr	r1, [pc, #144]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
 8004324:	e006      	b.n	8004334 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	43db      	mvns	r3, r3
 800432e:	4920      	ldr	r1, [pc, #128]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004330:	4013      	ands	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	60cb      	str	r3, [r1, #12]
 800434c:	e006      	b.n	800435c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	43db      	mvns	r3, r3
 8004356:	4916      	ldr	r1, [pc, #88]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 8004358:	4013      	ands	r3, r2
 800435a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d025      	beq.n	80043b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4910      	ldr	r1, [pc, #64]	; (80043b0 <HAL_GPIO_Init+0x2c8>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	e025      	b.n	80043c2 <HAL_GPIO_Init+0x2da>
 8004376:	bf00      	nop
 8004378:	10320000 	.word	0x10320000
 800437c:	10310000 	.word	0x10310000
 8004380:	10220000 	.word	0x10220000
 8004384:	10210000 	.word	0x10210000
 8004388:	10120000 	.word	0x10120000
 800438c:	10110000 	.word	0x10110000
 8004390:	40021000 	.word	0x40021000
 8004394:	40010000 	.word	0x40010000
 8004398:	40010800 	.word	0x40010800
 800439c:	40010c00 	.word	0x40010c00
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	40011800 	.word	0x40011800
 80043ac:	40011c00 	.word	0x40011c00
 80043b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043b4:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_GPIO_Init+0x324>)
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	4913      	ldr	r1, [pc, #76]	; (800440c <HAL_GPIO_Init+0x324>)
 80043be:	4013      	ands	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_GPIO_Init+0x324>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	490e      	ldr	r1, [pc, #56]	; (800440c <HAL_GPIO_Init+0x324>)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
 80043da:	e006      	b.n	80043ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_GPIO_Init+0x324>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	4909      	ldr	r1, [pc, #36]	; (800440c <HAL_GPIO_Init+0x324>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	3301      	adds	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f47f ae7e 	bne.w	80040fc <HAL_GPIO_Init+0x14>
  }
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	372c      	adds	r7, #44	; 0x2c
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40010400 	.word	0x40010400

08004410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e001      	b.n	8004432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	807b      	strh	r3, [r7, #2]
 800444a:	4613      	mov	r3, r2
 800444c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800444e:	787b      	ldrb	r3, [r7, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800445a:	e003      	b.n	8004464 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	041a      	lsls	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	611a      	str	r2, [r3, #16]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
	...

08004470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e12b      	b.n	80046da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd fe92 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	; 0x24
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044d4:	f001 fbfc 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4a81      	ldr	r2, [pc, #516]	; (80046e4 <HAL_I2C_Init+0x274>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d807      	bhi.n	80044f4 <HAL_I2C_Init+0x84>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a80      	ldr	r2, [pc, #512]	; (80046e8 <HAL_I2C_Init+0x278>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bf94      	ite	ls
 80044ec:	2301      	movls	r3, #1
 80044ee:	2300      	movhi	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e006      	b.n	8004502 <HAL_I2C_Init+0x92>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a7d      	ldr	r2, [pc, #500]	; (80046ec <HAL_I2C_Init+0x27c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	bf94      	ite	ls
 80044fc:	2301      	movls	r3, #1
 80044fe:	2300      	movhi	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0e7      	b.n	80046da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a78      	ldr	r2, [pc, #480]	; (80046f0 <HAL_I2C_Init+0x280>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	0c9b      	lsrs	r3, r3, #18
 8004514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a6a      	ldr	r2, [pc, #424]	; (80046e4 <HAL_I2C_Init+0x274>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d802      	bhi.n	8004544 <HAL_I2C_Init+0xd4>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3301      	adds	r3, #1
 8004542:	e009      	b.n	8004558 <HAL_I2C_Init+0xe8>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_I2C_Init+0x284>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	099b      	lsrs	r3, r3, #6
 8004556:	3301      	adds	r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	430b      	orrs	r3, r1
 800455e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800456a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	495c      	ldr	r1, [pc, #368]	; (80046e4 <HAL_I2C_Init+0x274>)
 8004574:	428b      	cmp	r3, r1
 8004576:	d819      	bhi.n	80045ac <HAL_I2C_Init+0x13c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1e59      	subs	r1, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fbb1 f3f3 	udiv	r3, r1, r3
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	f640 73fc 	movw	r3, #4092	; 0xffc
 800458c:	400b      	ands	r3, r1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_I2C_Init+0x138>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1e59      	subs	r1, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fbb1 f3f3 	udiv	r3, r1, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a6:	e051      	b.n	800464c <HAL_I2C_Init+0x1dc>
 80045a8:	2304      	movs	r3, #4
 80045aa:	e04f      	b.n	800464c <HAL_I2C_Init+0x1dc>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d111      	bne.n	80045d8 <HAL_I2C_Init+0x168>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e58      	subs	r0, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	440b      	add	r3, r1
 80045c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e012      	b.n	80045fe <HAL_I2C_Init+0x18e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e58      	subs	r0, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	0099      	lsls	r1, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ee:	3301      	adds	r3, #1
 80045f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Init+0x196>
 8004602:	2301      	movs	r3, #1
 8004604:	e022      	b.n	800464c <HAL_I2C_Init+0x1dc>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10e      	bne.n	800462c <HAL_I2C_Init+0x1bc>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1e58      	subs	r0, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	440b      	add	r3, r1
 800461c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004620:	3301      	adds	r3, #1
 8004622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	e00f      	b.n	800464c <HAL_I2C_Init+0x1dc>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1e58      	subs	r0, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	0099      	lsls	r1, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004642:	3301      	adds	r3, #1
 8004644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	6809      	ldr	r1, [r1, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800467a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6911      	ldr	r1, [r2, #16]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	430b      	orrs	r3, r1
 800468e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	000186a0 	.word	0x000186a0
 80046e8:	001e847f 	.word	0x001e847f
 80046ec:	003d08ff 	.word	0x003d08ff
 80046f0:	431bde83 	.word	0x431bde83
 80046f4:	10624dd3 	.word	0x10624dd3

080046f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4603      	mov	r3, r0
 8004708:	817b      	strh	r3, [r7, #10]
 800470a:	460b      	mov	r3, r1
 800470c:	813b      	strh	r3, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004712:	f7fe ff29 	bl	8003568 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b20      	cmp	r3, #32
 8004722:	f040 80d9 	bne.w	80048d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2319      	movs	r3, #25
 800472c:	2201      	movs	r2, #1
 800472e:	496d      	ldr	r1, [pc, #436]	; (80048e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fccd 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	e0cc      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_I2C_Mem_Write+0x56>
 800474a:	2302      	movs	r3, #2
 800474c:	e0c5      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d007      	beq.n	8004774 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2221      	movs	r2, #33	; 0x21
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a4d      	ldr	r2, [pc, #308]	; (80048e8 <HAL_I2C_Mem_Write+0x1f0>)
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047b6:	88f8      	ldrh	r0, [r7, #6]
 80047b8:	893a      	ldrh	r2, [r7, #8]
 80047ba:	8979      	ldrh	r1, [r7, #10]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4603      	mov	r3, r0
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fb04 	bl	8004dd4 <I2C_RequestMemoryWrite>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d052      	beq.n	8004878 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e081      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fd92 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d107      	bne.n	80047fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_I2C_Mem_Write+0x180>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1aa      	bne.n	80047d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fd85 	bl	8005394 <I2C_WaitOnBTFFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b04      	cmp	r3, #4
 8004896:	d107      	bne.n	80048a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e016      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	00100002 	.word	0x00100002
 80048e8:	ffff0000 	.word	0xffff0000

080048ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800490a:	f7fe fe2d 	bl	8003568 <HAL_GetTick>
 800490e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	f040 8250 	bne.w	8004dbe <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2319      	movs	r3, #25
 8004924:	2201      	movs	r2, #1
 8004926:	4982      	ldr	r1, [pc, #520]	; (8004b30 <HAL_I2C_Mem_Read+0x244>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fbd1 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
 8004936:	e243      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Mem_Read+0x5a>
 8004942:	2302      	movs	r3, #2
 8004944:	e23c      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d007      	beq.n	800496c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2222      	movs	r2, #34	; 0x22
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a62      	ldr	r2, [pc, #392]	; (8004b34 <HAL_I2C_Mem_Read+0x248>)
 80049ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ae:	88f8      	ldrh	r0, [r7, #6]
 80049b0:	893a      	ldrh	r2, [r7, #8]
 80049b2:	8979      	ldrh	r1, [r7, #10]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4603      	mov	r3, r0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fa9e 	bl	8004f00 <I2C_RequestMemoryRead>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1f8      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d113      	bne.n	80049fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e1cc      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d11e      	bne.n	8004a44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a16:	b672      	cpsid	i
}
 8004a18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a40:	b662      	cpsie	i
}
 8004a42:	e035      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d11e      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a5c:	b672      	cpsid	i
}
 8004a5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a86:	b662      	cpsie	i
}
 8004a88:	e012      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ab0:	e172      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	f200 811f 	bhi.w	8004cfa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d123      	bne.n	8004b0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fcab 	bl	8005424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e173      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b0a:	e145      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d152      	bne.n	8004bba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4906      	ldr	r1, [pc, #24]	; (8004b38 <HAL_I2C_Mem_Read+0x24c>)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fad6 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e148      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
 8004b2e:	bf00      	nop
 8004b30:	00100002 	.word	0x00100002
 8004b34:	ffff0000 	.word	0xffff0000
 8004b38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b3c:	b672      	cpsid	i
}
 8004b3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b82:	b662      	cpsie	i
}
 8004b84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb8:	e0ee      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4981      	ldr	r1, [pc, #516]	; (8004dc8 <HAL_I2C_Mem_Read+0x4dc>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fa83 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0f5      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004be4:	b672      	cpsid	i
}
 8004be6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c1a:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <HAL_I2C_Mem_Read+0x4e0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	4a6b      	ldr	r2, [pc, #428]	; (8004dd0 <HAL_I2C_Mem_Read+0x4e4>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0a1a      	lsrs	r2, r3, #8
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00da      	lsls	r2, r3, #3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d118      	bne.n	8004c72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c62:	b662      	cpsie	i
}
 8004c64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0a6      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d1d9      	bne.n	8004c34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cc2:	b662      	cpsie	i
}
 8004cc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf8:	e04e      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fb90 	bl	8005424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e058      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d124      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f47f ae88 	bne.w	8004ab2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e000      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	; 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	00010004 	.word	0x00010004
 8004dcc:	20000098 	.word	0x20000098
 8004dd0:	14f8b589 	.word	0x14f8b589

08004dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	817b      	strh	r3, [r7, #10]
 8004de6:	460b      	mov	r3, r1
 8004de8:	813b      	strh	r3, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f960 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e24:	d103      	bne.n	8004e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e05f      	b.n	8004ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	492d      	ldr	r1, [pc, #180]	; (8004efc <I2C_RequestMemoryWrite+0x128>)
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f9bb 	bl	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e04c      	b.n	8004ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fa46 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d107      	bne.n	8004e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e02b      	b.n	8004ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ea0:	893b      	ldrh	r3, [r7, #8]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	611a      	str	r2, [r3, #16]
 8004eaa:	e021      	b.n	8004ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004eac:	893b      	ldrh	r3, [r7, #8]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fa20 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d107      	bne.n	8004ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e005      	b.n	8004ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee6:	893b      	ldrh	r3, [r7, #8]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	00010002 	.word	0x00010002

08004f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	817b      	strh	r3, [r7, #10]
 8004f12:	460b      	mov	r3, r1
 8004f14:	813b      	strh	r3, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f8c2 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f60:	d103      	bne.n	8004f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0aa      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	4952      	ldr	r1, [pc, #328]	; (80050cc <I2C_RequestMemoryRead+0x1cc>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f91d 	bl	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e097      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f9a8 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e076      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fdc:	893b      	ldrh	r3, [r7, #8]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e021      	b.n	800502c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe8:	893b      	ldrh	r3, [r7, #8]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	6a39      	ldr	r1, [r7, #32]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f982 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b04      	cmp	r3, #4
 800500c:	d107      	bne.n	800501e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e050      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005022:	893b      	ldrh	r3, [r7, #8]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502e:	6a39      	ldr	r1, [r7, #32]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f967 	bl	8005304 <I2C_WaitOnTXEFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00d      	beq.n	8005058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2b04      	cmp	r3, #4
 8005042:	d107      	bne.n	8005054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e035      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2200      	movs	r2, #0
 8005070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f82b 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d103      	bne.n	8005098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e013      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800509c:	897b      	ldrh	r3, [r7, #10]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	4906      	ldr	r1, [pc, #24]	; (80050cc <I2C_RequestMemoryRead+0x1cc>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f886 	bl	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	00010002 	.word	0x00010002

080050d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e0:	e048      	b.n	8005174 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d044      	beq.n	8005174 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fe fa3d 	bl	8003568 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d139      	bne.n	8005174 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10d      	bne.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x56>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	43da      	mvns	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	e00c      	b.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	43da      	mvns	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	429a      	cmp	r2, r3
 8005144:	d116      	bne.n	8005174 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e023      	b.n	80051bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10d      	bne.n	800519a <I2C_WaitOnFlagUntilTimeout+0xca>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	43da      	mvns	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	e00c      	b.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	43da      	mvns	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4013      	ands	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d093      	beq.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d2:	e071      	b.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d123      	bne.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	f043 0204 	orr.w	r2, r3, #4
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e067      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d041      	beq.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005234:	f7fe f998 	bl	8003568 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d136      	bne.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10c      	bne.n	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	43da      	mvns	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf14      	ite	ne
 8005266:	2301      	movne	r3, #1
 8005268:	2300      	moveq	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e00b      	b.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	43da      	mvns	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e021      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d10c      	bne.n	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e00b      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	43da      	mvns	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f47f af6d 	bne.w	80051d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005310:	e034      	b.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f8e3 	bl	80054de <I2C_IsAcknowledgeFailed>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e034      	b.n	800538c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d028      	beq.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532a:	f7fe f91d 	bl	8003568 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d302      	bcc.n	8005340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11d      	bne.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d016      	beq.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e007      	b.n	800538c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d1c3      	bne.n	8005312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a0:	e034      	b.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f89b 	bl	80054de <I2C_IsAcknowledgeFailed>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e034      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d028      	beq.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fe f8d5 	bl	8003568 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11d      	bne.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d016      	beq.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e007      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d1c3      	bne.n	80053a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005430:	e049      	b.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d119      	bne.n	8005474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0210 	mvn.w	r2, #16
 8005448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e030      	b.n	80054d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fe f878 	bl	8003568 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11d      	bne.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d016      	beq.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e007      	b.n	80054d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d1ae      	bne.n	8005432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d11b      	bne.n	800552e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e272      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8087 	beq.w	800566a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800555c:	4b92      	ldr	r3, [pc, #584]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b04      	cmp	r3, #4
 8005566:	d00c      	beq.n	8005582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005568:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d112      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
 8005574:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d10b      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d06c      	beq.n	8005668 <HAL_RCC_OscConfig+0x12c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d168      	bne.n	8005668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e24c      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x76>
 80055a4:	4b80      	ldr	r3, [pc, #512]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a7f      	ldr	r2, [pc, #508]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e02e      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x98>
 80055ba:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e01d      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0xbc>
 80055de:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6e      	ldr	r2, [pc, #440]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e00b      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055f8:	4b6b      	ldr	r3, [pc, #428]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a67      	ldr	r2, [pc, #412]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800560a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd ffa6 	bl	8003568 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd ffa2 	bl	8003568 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e200      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	4b5d      	ldr	r3, [pc, #372]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0xe4>
 800563e:	e014      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fd ff92 	bl	8003568 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005648:	f7fd ff8e 	bl	8003568 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1ec      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x10c>
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d063      	beq.n	800573e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005676:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b08      	cmp	r3, #8
 800568c:	d11c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1c0      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4939      	ldr	r1, [pc, #228]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c6:	e03a      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d0:	4b36      	ldr	r3, [pc, #216]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fd ff47 	bl	8003568 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056de:	f7fd ff43 	bl	8003568 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1a1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4927      	ldr	r1, [pc, #156]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]
 8005710:	e015      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd ff26 	bl	8003568 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005720:	f7fd ff22 	bl	8003568 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e180      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03a      	beq.n	80057c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d019      	beq.n	8005786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005758:	f7fd ff06 	bl	8003568 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005760:	f7fd ff02 	bl	8003568 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e160      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f000 face 	bl	8005d20 <RCC_Delay>
 8005784:	e01c      	b.n	80057c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578c:	f7fd feec 	bl	8003568 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005792:	e00f      	b.n	80057b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fd fee8 	bl	8003568 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d908      	bls.n	80057b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e146      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	42420000 	.word	0x42420000
 80057b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e9      	bne.n	8005794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a6 	beq.w	800591a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d2:	4b8b      	ldr	r3, [pc, #556]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4a87      	ldr	r2, [pc, #540]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	61d3      	str	r3, [r2, #28]
 80057ea:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b82      	ldr	r3, [pc, #520]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005806:	4b7f      	ldr	r3, [pc, #508]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7e      	ldr	r2, [pc, #504]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fd fea9 	bl	8003568 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fd fea5 	bl	8003568 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b64      	cmp	r3, #100	; 0x64
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e103      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	4b75      	ldr	r3, [pc, #468]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
 8005840:	4b6f      	ldr	r3, [pc, #444]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6213      	str	r3, [r2, #32]
 800584c:	e02d      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x334>
 8005856:	4b6a      	ldr	r3, [pc, #424]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	4b67      	ldr	r3, [pc, #412]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4a66      	ldr	r2, [pc, #408]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6213      	str	r3, [r2, #32]
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x356>
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6213      	str	r3, [r2, #32]
 8005884:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	4a5d      	ldr	r2, [pc, #372]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6213      	str	r3, [r2, #32]
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005892:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4a5a      	ldr	r2, [pc, #360]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6213      	str	r3, [r2, #32]
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b2:	f7fd fe59 	bl	8003568 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd fe55 	bl	8003568 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0b1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x37e>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fd fe43 	bl	8003568 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fd fe3f 	bl	8003568 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e09b      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b3c      	ldr	r3, [pc, #240]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8087 	beq.w	8005a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d061      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d146      	bne.n	80059c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b33      	ldr	r3, [pc, #204]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd fe13 	bl	8003568 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fd fe0f 	bl	8003568 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e06d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005958:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d108      	bne.n	8005980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4921      	ldr	r1, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a19      	ldr	r1, [r3, #32]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	430b      	orrs	r3, r1
 8005992:	491b      	ldr	r1, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7fd fde3 	bl	8003568 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a6:	f7fd fddf 	bl	8003568 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e03d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x46a>
 80059c4:	e035      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fd fdcc 	bl	8003568 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fd fdc8 	bl	8003568 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e026      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x498>
 80059f2:	e01e      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e019      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x500>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40021000 	.word	0x40021000

08005a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d0      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a54:	4b6a      	ldr	r3, [pc, #424]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d910      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 0207 	bic.w	r2, r3, #7
 8005a6a:	4965      	ldr	r1, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b8      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a52      	ldr	r2, [pc, #328]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	494d      	ldr	r1, [pc, #308]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d040      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afe:	4b41      	ldr	r3, [pc, #260]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e073      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e06b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4936      	ldr	r1, [pc, #216]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b30:	f7fd fd1a 	bl	8003568 <HAL_GetTick>
 8005b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b38:	f7fd fd16 	bl	8003568 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e053      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 020c 	and.w	r2, r3, #12
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d1eb      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d210      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 0207 	bic.w	r2, r3, #7
 8005b76:	4922      	ldr	r1, [pc, #136]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e032      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4916      	ldr	r1, [pc, #88]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bce:	f000 f821 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x1c8>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1cc>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fc78 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800a0dc 	.word	0x0800a0dc
 8005c0c:	20000098 	.word	0x20000098
 8005c10:	2000009c 	.word	0x2000009c

08005c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d002      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x30>
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_GetSysClockFreq+0x36>
 8005c42:	e027      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c46:	613b      	str	r3, [r7, #16]
      break;
 8005c48:	e027      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	0c9b      	lsrs	r3, r3, #18
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c54:	5cd3      	ldrb	r3, [r2, r3]
 8005c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	0c5b      	lsrs	r3, r3, #17
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c6e:	5cd3      	ldrb	r3, [r2, r3]
 8005c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c76:	fb03 f202 	mul.w	r2, r3, r2
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e004      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	613b      	str	r3, [r7, #16]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c96:	613b      	str	r3, [r7, #16]
      break;
 8005c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9a:	693b      	ldr	r3, [r7, #16]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	007a1200 	.word	0x007a1200
 8005cb0:	0800a0f4 	.word	0x0800a0f4
 8005cb4:	0800a104 	.word	0x0800a104
 8005cb8:	003d0900 	.word	0x003d0900

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc0:	4b02      	ldr	r3, [pc, #8]	; (8005ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	20000098 	.word	0x20000098

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cd4:	f7ff fff2 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	0800a0ec 	.word	0x0800a0ec

08005cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cfc:	f7ff ffde 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0adb      	lsrs	r3, r3, #11
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800a0ec 	.word	0x0800a0ec

08005d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <RCC_Delay+0x34>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <RCC_Delay+0x38>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d3c:	bf00      	nop
  }
  while (Delay --);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f9      	bne.n	8005d3c <RCC_Delay+0x1c>
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	20000098 	.word	0x20000098
 8005d58:	10624dd3 	.word	0x10624dd3

08005d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e041      	b.n	8005df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fd f886 	bl	8002e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f000 fcb4 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d001      	beq.n	8005e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e044      	b.n	8005e9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xac>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_TIM_Base_Start_IT+0xb0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d111      	bne.n	8005e8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d010      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8a:	e007      	b.n	8005e9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00

08005ebc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e041      	b.n	8005f52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f839 	bl	8005f5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f000 fc04 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0x1e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e013      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x46>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0x2e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e00b      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x46>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_IC_Start_IT+0x3e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e003      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x46>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIM_IC_Start_IT+0x58>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e013      	b.n	8005fec <HAL_TIM_IC_Start_IT+0x80>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d104      	bne.n	8005fd4 <HAL_TIM_IC_Start_IT+0x68>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e00b      	b.n	8005fec <HAL_TIM_IC_Start_IT+0x80>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d104      	bne.n	8005fe4 <HAL_TIM_IC_Start_IT+0x78>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e003      	b.n	8005fec <HAL_TIM_IC_Start_IT+0x80>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d102      	bne.n	8005ffa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ff4:	7b7b      	ldrb	r3, [r7, #13]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0c2      	b.n	8006184 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_TIM_IC_Start_IT+0xa2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600c:	e013      	b.n	8006036 <HAL_TIM_IC_Start_IT+0xca>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d104      	bne.n	800601e <HAL_TIM_IC_Start_IT+0xb2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601c:	e00b      	b.n	8006036 <HAL_TIM_IC_Start_IT+0xca>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d104      	bne.n	800602e <HAL_TIM_IC_Start_IT+0xc2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	e003      	b.n	8006036 <HAL_TIM_IC_Start_IT+0xca>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <HAL_TIM_IC_Start_IT+0xda>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006044:	e013      	b.n	800606e <HAL_TIM_IC_Start_IT+0x102>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b04      	cmp	r3, #4
 800604a:	d104      	bne.n	8006056 <HAL_TIM_IC_Start_IT+0xea>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006054:	e00b      	b.n	800606e <HAL_TIM_IC_Start_IT+0x102>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d104      	bne.n	8006066 <HAL_TIM_IC_Start_IT+0xfa>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006064:	e003      	b.n	800606e <HAL_TIM_IC_Start_IT+0x102>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d841      	bhi.n	80060f8 <HAL_TIM_IC_Start_IT+0x18c>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_TIM_IC_Start_IT+0x110>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060f9 	.word	0x080060f9
 8006084:	080060f9 	.word	0x080060f9
 8006088:	080060f9 	.word	0x080060f9
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060f9 	.word	0x080060f9
 8006094:	080060f9 	.word	0x080060f9
 8006098:	080060f9 	.word	0x080060f9
 800609c:	080060d5 	.word	0x080060d5
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	080060f9 	.word	0x080060f9
 80060ac:	080060e7 	.word	0x080060e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0202 	orr.w	r2, r2, #2
 80060be:	60da      	str	r2, [r3, #12]
      break;
 80060c0:	e01d      	b.n	80060fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0204 	orr.w	r2, r2, #4
 80060d0:	60da      	str	r2, [r3, #12]
      break;
 80060d2:	e014      	b.n	80060fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	60da      	str	r2, [r3, #12]
      break;
 80060e4:	e00b      	b.n	80060fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0210 	orr.w	r2, r2, #16
 80060f4:	60da      	str	r2, [r3, #12]
      break;
 80060f6:	e002      	b.n	80060fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
      break;
 80060fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d13e      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2201      	movs	r2, #1
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fd30 	bl	8006b72 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1d      	ldr	r2, [pc, #116]	; (800618c <HAL_TIM_IC_Start_IT+0x220>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d018      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_TIM_IC_Start_IT+0x224>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d00e      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <HAL_TIM_IC_Start_IT+0x228>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a16      	ldr	r2, [pc, #88]	; (8006198 <HAL_TIM_IC_Start_IT+0x22c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_TIM_IC_Start_IT+0x230>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d010      	beq.n	8006182 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	e007      	b.n	8006182 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00

080061a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0202 	mvn.w	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb faf6 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa6c 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa72 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01b      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fad0 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa46 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa4c 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d020      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0208 	mvn.w	r2, #8
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fb faaa 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa20 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fa26 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0210 	mvn.w	r2, #16
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2208      	movs	r2, #8
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fa84 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9fa 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa00 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0201 	mvn.w	r2, #1
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fcb4 	bl	8001c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fcbb 	bl	8006ca6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f9d0 	bl	80066f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0220 	mvn.w	r2, #32
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc8e 	bl	8006c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_TIM_IC_ConfigChannel+0x1e>
 800639a:	2302      	movs	r3, #2
 800639c:	e088      	b.n	80064b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063bc:	f000 fa2a 	bl	8006814 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 020c 	bic.w	r2, r2, #12
 80063ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6999      	ldr	r1, [r3, #24]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	619a      	str	r2, [r3, #24]
 80063e2:	e060      	b.n	80064a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d11c      	bne.n	8006424 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063fa:	f000 fa9f 	bl	800693c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800640c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	021a      	lsls	r2, r3, #8
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	619a      	str	r2, [r3, #24]
 8006422:	e040      	b.n	80064a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b08      	cmp	r3, #8
 8006428:	d11b      	bne.n	8006462 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800643a:	f000 faea 	bl	8006a12 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 020c 	bic.w	r2, r2, #12
 800644c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69d9      	ldr	r1, [r3, #28]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	61da      	str	r2, [r3, #28]
 8006460:	e021      	b.n	80064a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d11c      	bne.n	80064a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006478:	f000 fb06 	bl	8006a88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800648a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69d9      	ldr	r1, [r3, #28]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	61da      	str	r2, [r3, #28]
 80064a0:	e001      	b.n	80064a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e0b4      	b.n	800663e <HAL_TIM_ConfigClockSource+0x186>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d03e      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xd4>
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006512:	f200 8087 	bhi.w	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	f000 8086 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x172>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d87f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b70      	cmp	r3, #112	; 0x70
 8006526:	d01a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0xa6>
 8006528:	2b70      	cmp	r3, #112	; 0x70
 800652a:	d87b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b60      	cmp	r3, #96	; 0x60
 800652e:	d050      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006530:	2b60      	cmp	r3, #96	; 0x60
 8006532:	d877      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	d03c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006538:	2b50      	cmp	r3, #80	; 0x50
 800653a:	d873      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d058      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d86f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d064      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d86b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d060      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d867      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d05a      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 800655c:	e062      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800656e:	f000 fae1 	bl	8006b34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	609a      	str	r2, [r3, #8]
      break;
 800658a:	e04f      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	f000 faca 	bl	8006b34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ae:	609a      	str	r2, [r3, #8]
      break;
 80065b0:	e03c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065be:	461a      	mov	r2, r3
 80065c0:	f000 f98e 	bl	80068e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2150      	movs	r1, #80	; 0x50
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa98 	bl	8006b00 <TIM_ITRx_SetConfig>
      break;
 80065d0:	e02c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 f9e8 	bl	80069b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2160      	movs	r1, #96	; 0x60
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa88 	bl	8006b00 <TIM_ITRx_SetConfig>
      break;
 80065f0:	e01c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fe:	461a      	mov	r2, r3
 8006600:	f000 f96e 	bl	80068e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa78 	bl	8006b00 <TIM_ITRx_SetConfig>
      break;
 8006610:	e00c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f000 fa6f 	bl	8006b00 <TIM_ITRx_SetConfig>
      break;
 8006622:	e003      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e000      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800662a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d831      	bhi.n	80066c0 <HAL_TIM_ReadCapturedValue+0x78>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_TIM_ReadCapturedValue+0x1c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006699 	.word	0x08006699
 8006668:	080066c1 	.word	0x080066c1
 800666c:	080066c1 	.word	0x080066c1
 8006670:	080066c1 	.word	0x080066c1
 8006674:	080066a3 	.word	0x080066a3
 8006678:	080066c1 	.word	0x080066c1
 800667c:	080066c1 	.word	0x080066c1
 8006680:	080066c1 	.word	0x080066c1
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066c1 	.word	0x080066c1
 800668c:	080066c1 	.word	0x080066c1
 8006690:	080066c1 	.word	0x080066c1
 8006694:	080066b7 	.word	0x080066b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	60fb      	str	r3, [r7, #12]

      break;
 80066a0:	e00f      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]

      break;
 80066aa:	e00a      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	60fb      	str	r3, [r7, #12]

      break;
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	60fb      	str	r3, [r7, #12]

      break;
 80066be:	e000      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066c0:	bf00      	nop
  }

  return tmpreg;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
	...

08006708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a39      	ldr	r2, [pc, #228]	; (8006800 <TIM_Base_SetConfig+0xf8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a38      	ldr	r2, [pc, #224]	; (8006804 <TIM_Base_SetConfig+0xfc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00f      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d00b      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a35      	ldr	r2, [pc, #212]	; (8006808 <TIM_Base_SetConfig+0x100>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a34      	ldr	r2, [pc, #208]	; (800680c <TIM_Base_SetConfig+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a33      	ldr	r2, [pc, #204]	; (8006810 <TIM_Base_SetConfig+0x108>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d108      	bne.n	800675a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_Base_SetConfig+0xf8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0x82>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <TIM_Base_SetConfig+0xfc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0x82>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_Base_SetConfig+0x100>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0x82>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_Base_SetConfig+0x104>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0x82>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a22      	ldr	r2, [pc, #136]	; (8006810 <TIM_Base_SetConfig+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <TIM_Base_SetConfig+0xf8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0xc8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <TIM_Base_SetConfig+0xfc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d103      	bne.n	80067d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	611a      	str	r2, [r3, #16]
  }
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40000400 	.word	0x40000400
 800680c:	40000800 	.word	0x40000800
 8006810:	40000c00 	.word	0x40000c00

08006814 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 0201 	bic.w	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a23      	ldr	r2, [pc, #140]	; (80068cc <TIM_TI1_SetConfig+0xb8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <TIM_TI1_SetConfig+0x56>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <TIM_TI1_SetConfig+0xbc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_TI1_SetConfig+0x56>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006850:	d00b      	beq.n	800686a <TIM_TI1_SetConfig+0x56>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <TIM_TI1_SetConfig+0xc0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_TI1_SetConfig+0x56>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <TIM_TI1_SetConfig+0xc4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_TI1_SetConfig+0x56>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <TIM_TI1_SetConfig+0xc8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <TIM_TI1_SetConfig+0x5a>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <TIM_TI1_SetConfig+0x5c>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e003      	b.n	800688e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	b2db      	uxtb	r3, r3
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f023 030a 	bic.w	r3, r3, #10
 80068a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f003 030a 	and.w	r3, r3, #10
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40013400 	.word	0x40013400
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00

080068e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f023 030a 	bic.w	r3, r3, #10
 800691c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 0210 	bic.w	r2, r3, #16
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800697a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	031b      	lsls	r3, r3, #12
 8006980:	b29b      	uxth	r3, r3
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800698e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0210 	bic.w	r2, r3, #16
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	031b      	lsls	r3, r3, #12
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	031b      	lsls	r3, r3, #12
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ada:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	031b      	lsls	r3, r3, #12
 8006ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f043 0307 	orr.w	r3, r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	609a      	str	r2, [r3, #8]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2201      	movs	r2, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	401a      	ands	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	431a      	orrs	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e050      	b.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d00e      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a14      	ldr	r2, [pc, #80]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d10c      	bne.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40013400 	.word	0x40013400
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00

08006c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e042      	b.n	8006d50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc f9ea 	bl	80030b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	; 0x24
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 ff47 	bl	8007b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d175      	bne.n	8006e64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_UART_Transmit+0x2c>
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e06e      	b.n	8006e66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2221      	movs	r2, #33	; 0x21
 8006d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d96:	f7fc fbe7 	bl	8003568 <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	d108      	bne.n	8006dc4 <HAL_UART_Transmit+0x6c>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	e003      	b.n	8006dcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dcc:	e02e      	b.n	8006e2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2180      	movs	r1, #128	; 0x80
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fc23 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e03a      	b.n	8006e66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	3302      	adds	r3, #2
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e007      	b.n	8006e1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	781a      	ldrb	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1cb      	bne.n	8006dce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2140      	movs	r1, #64	; 0x40
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fbef 	bl	8007624 <UART_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e006      	b.n	8006e66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d112      	bne.n	8006eae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_UART_Receive_DMA+0x26>
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e00b      	b.n	8006eb0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fc17 	bl	80076d8 <UART_Start_Receive_DMA>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
  }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b0ba      	sub	sp, #232	; 0xe8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <HAL_UART_IRQHandler+0x66>
 8006f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fd7c 	bl	8007a14 <UART_Receive_IT>
      return;
 8006f1c:	e25b      	b.n	80073d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80de 	beq.w	80070e4 <HAL_UART_IRQHandler+0x22c>
 8006f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80d1 	beq.w	80070e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_UART_IRQHandler+0xae>
 8006f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f043 0201 	orr.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <HAL_UART_IRQHandler+0xd2>
 8006f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	f043 0202 	orr.w	r2, r3, #2
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_UART_IRQHandler+0xf6>
 8006f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	f043 0204 	orr.w	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d011      	beq.n	8006fde <HAL_UART_IRQHandler+0x126>
 8006fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	f043 0208 	orr.w	r2, r3, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 81f2 	beq.w	80073cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_UART_IRQHandler+0x14e>
 8006ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd07 	bl	8007a14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf14      	ite	ne
 8007014:	2301      	movne	r3, #1
 8007016:	2300      	moveq	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <HAL_UART_IRQHandler+0x17a>
 800702a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04f      	beq.n	80070d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fc11 	bl	800785a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d041      	beq.n	80070ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800705c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3314      	adds	r3, #20
 800706e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007072:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800707e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800708a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1d9      	bne.n	8007046 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d013      	beq.n	80070c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	4a7e      	ldr	r2, [pc, #504]	; (8007298 <HAL_UART_IRQHandler+0x3e0>)
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fc fcac 	bl	8003a04 <HAL_DMA_Abort_IT>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d016      	beq.n	80070e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	e00e      	b.n	80070e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f99c 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	e00a      	b.n	80070e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f998 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	e006      	b.n	80070e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f994 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80070de:	e175      	b.n	80073cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	bf00      	nop
    return;
 80070e2:	e173      	b.n	80073cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	f040 814f 	bne.w	800738c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8148 	beq.w	800738c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8141 	beq.w	800738c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710a:	2300      	movs	r3, #0
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80b6 	beq.w	800729c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800713c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8145 	beq.w	80073d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800714a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800714e:	429a      	cmp	r2, r3
 8007150:	f080 813e 	bcs.w	80073d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800715a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b20      	cmp	r3, #32
 8007164:	f000 8088 	beq.w	8007278 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800717e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007194:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1d9      	bne.n	8007168 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3314      	adds	r3, #20
 80071d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e1      	bne.n	80071b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007214:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800721a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e3      	bne.n	80071f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	330c      	adds	r3, #12
 800723c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800725a:	65ba      	str	r2, [r7, #88]	; 0x58
 800725c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e3      	bne.n	8007236 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fb8a 	bl	800398c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007286:	b29b      	uxth	r3, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8bf 	bl	8007412 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007294:	e09c      	b.n	80073d0 <HAL_UART_IRQHandler+0x518>
 8007296:	bf00      	nop
 8007298:	0800791f 	.word	0x0800791f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 808e 	beq.w	80073d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8089 	beq.w	80073d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072e6:	647a      	str	r2, [r7, #68]	; 0x44
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e3      	bne.n	80072c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3314      	adds	r3, #20
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	623b      	str	r3, [r7, #32]
   return(result);
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3314      	adds	r3, #20
 800731a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800731e:	633a      	str	r2, [r7, #48]	; 0x30
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e3      	bne.n	80072fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0310 	bic.w	r3, r3, #16
 8007356:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007364:	61fa      	str	r2, [r7, #28]
 8007366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e3      	bne.n	8007340 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800737e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f844 	bl	8007412 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800738a:	e023      	b.n	80073d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <HAL_UART_IRQHandler+0x4f4>
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 face 	bl	8007946 <UART_Transmit_IT>
    return;
 80073aa:	e014      	b.n	80073d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00e      	beq.n	80073d6 <HAL_UART_IRQHandler+0x51e>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fb0d 	bl	80079e4 <UART_EndTransmit_IT>
    return;
 80073ca:	e004      	b.n	80073d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80073cc:	bf00      	nop
 80073ce:	e002      	b.n	80073d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073d4:	bf00      	nop
  }
}
 80073d6:	37e8      	adds	r7, #232	; 0xe8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr

08007412 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b09c      	sub	sp, #112	; 0x70
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d172      	bne.n	800752a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007446:	2200      	movs	r2, #0
 8007448:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007460:	66bb      	str	r3, [r7, #104]	; 0x68
 8007462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800746a:	65ba      	str	r2, [r7, #88]	; 0x58
 800746c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	667b      	str	r3, [r7, #100]	; 0x64
 8007496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3314      	adds	r3, #20
 800749c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800749e:	647a      	str	r2, [r7, #68]	; 0x44
 80074a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	623b      	str	r3, [r7, #32]
   return(result);
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	663b      	str	r3, [r7, #96]	; 0x60
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3314      	adds	r3, #20
 80074d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074d2:	633a      	str	r2, [r7, #48]	; 0x30
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e5      	bne.n	80074b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d119      	bne.n	800752a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	60fb      	str	r3, [r7, #12]
   return(result);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f023 0310 	bic.w	r3, r3, #16
 800750c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007516:	61fa      	str	r2, [r7, #28]
 8007518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	69b9      	ldr	r1, [r7, #24]
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	617b      	str	r3, [r7, #20]
   return(result);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e5      	bne.n	80074f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	2200      	movs	r2, #0
 800752e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	2b01      	cmp	r3, #1
 8007536:	d106      	bne.n	8007546 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800753c:	4619      	mov	r1, r3
 800753e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007540:	f7ff ff67 	bl	8007412 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007544:	e002      	b.n	800754c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007546:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007548:	f7fa fbc0 	bl	8001ccc <HAL_UART_RxCpltCallback>
}
 800754c:	bf00      	nop
 800754e:	3770      	adds	r7, #112	; 0x70
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	b29b      	uxth	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff ff49 	bl	8007412 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007580:	e002      	b.n	8007588 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff ff33 	bl	80073ee <HAL_UART_RxHalfCpltCallback>
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b21      	cmp	r3, #33	; 0x21
 80075c2:	d108      	bne.n	80075d6 <UART_DMAError+0x46>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80075d0:	68b8      	ldr	r0, [r7, #8]
 80075d2:	f000 f91b 	bl	800780c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b22      	cmp	r3, #34	; 0x22
 80075f6:	d108      	bne.n	800760a <UART_DMAError+0x7a>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007604:	68b8      	ldr	r0, [r7, #8]
 8007606:	f000 f928 	bl	800785a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	f043 0210 	orr.w	r2, r3, #16
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007616:	68b8      	ldr	r0, [r7, #8]
 8007618:	f7ff fef2 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007634:	e03b      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d037      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763e:	f7fb ff93 	bl	8003568 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	6a3a      	ldr	r2, [r7, #32]
 800764a:	429a      	cmp	r2, r3
 800764c:	d302      	bcc.n	8007654 <UART_WaitOnFlagUntilTimeout+0x30>
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e03a      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d023      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b80      	cmp	r3, #128	; 0x80
 800766a:	d020      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d01d      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b08      	cmp	r3, #8
 800767e:	d116      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f8df 	bl	800785a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2208      	movs	r2, #8
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e00f      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d0b4      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b098      	sub	sp, #96	; 0x60
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2222      	movs	r2, #34	; 0x22
 80076fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	4a3e      	ldr	r2, [pc, #248]	; (8007800 <UART_Start_Receive_DMA+0x128>)
 8007706:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	4a3d      	ldr	r2, [pc, #244]	; (8007804 <UART_Start_Receive_DMA+0x12c>)
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	4a3c      	ldr	r2, [pc, #240]	; (8007808 <UART_Start_Receive_DMA+0x130>)
 8007716:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	2200      	movs	r2, #0
 800771e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007720:	f107 0308 	add.w	r3, r7, #8
 8007724:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	f7fc f8c8 	bl	80038cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800773c:	2300      	movs	r3, #0
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d019      	beq.n	800778e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007770:	65bb      	str	r3, [r7, #88]	; 0x58
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800777a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800777c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	657b      	str	r3, [r7, #84]	; 0x54
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3314      	adds	r3, #20
 80077c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	617b      	str	r3, [r7, #20]
   return(result);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d8:	653b      	str	r3, [r7, #80]	; 0x50
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3314      	adds	r3, #20
 80077e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077e2:	627a      	str	r2, [r7, #36]	; 0x24
 80077e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6a39      	ldr	r1, [r7, #32]
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e5      	bne.n	80077c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3760      	adds	r7, #96	; 0x60
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	08007429 	.word	0x08007429
 8007804:	08007555 	.word	0x08007555
 8007808:	08007591 	.word	0x08007591

0800780c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b089      	sub	sp, #36	; 0x24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	61ba      	str	r2, [r7, #24]
 8007836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007850:	bf00      	nop
 8007852:	3724      	adds	r7, #36	; 0x24
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800785a:	b480      	push	{r7}
 800785c:	b095      	sub	sp, #84	; 0x54
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007882:	643a      	str	r2, [r7, #64]	; 0x40
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e5      	bne.n	8007862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3314      	adds	r3, #20
 800789c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e5      	bne.n	8007896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d119      	bne.n	8007906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0310 	bic.w	r3, r3, #16
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f2:	61ba      	str	r2, [r7, #24]
 80078f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6979      	ldr	r1, [r7, #20]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007914:	bf00      	nop
 8007916:	3754      	adds	r7, #84	; 0x54
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fd61 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b21      	cmp	r3, #33	; 0x21
 8007958:	d13e      	bne.n	80079d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007962:	d114      	bne.n	800798e <UART_Transmit_IT+0x48>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d110      	bne.n	800798e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	621a      	str	r2, [r3, #32]
 800798c:	e008      	b.n	80079a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	1c59      	adds	r1, r3, #1
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6211      	str	r1, [r2, #32]
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4619      	mov	r1, r3
 80079ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10f      	bne.n	80079d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e000      	b.n	80079da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079d8:	2302      	movs	r3, #2
  }
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr

080079e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fce9 	bl	80073dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	; 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b22      	cmp	r3, #34	; 0x22
 8007a26:	f040 80ae 	bne.w	8007b86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a32:	d117      	bne.n	8007a64 <UART_Receive_IT+0x50>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d113      	bne.n	8007a64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	1c9a      	adds	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	629a      	str	r2, [r3, #40]	; 0x28
 8007a62:	e026      	b.n	8007ab2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d007      	beq.n	8007a88 <UART_Receive_IT+0x74>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <UART_Receive_IT+0x82>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e008      	b.n	8007aa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d15d      	bne.n	8007b82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0220 	bic.w	r2, r2, #32
 8007ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695a      	ldr	r2, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d135      	bne.n	8007b78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	613b      	str	r3, [r7, #16]
   return(result);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f023 0310 	bic.w	r3, r3, #16
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330c      	adds	r3, #12
 8007b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b32:	623a      	str	r2, [r7, #32]
 8007b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	69f9      	ldr	r1, [r7, #28]
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e5      	bne.n	8007b12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d10a      	bne.n	8007b6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff fc4e 	bl	8007412 <HAL_UARTEx_RxEventCallback>
 8007b76:	e002      	b.n	8007b7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fa f8a7 	bl	8001ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e002      	b.n	8007b88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e000      	b.n	8007b88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b86:	2302      	movs	r3, #2
  }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3730      	adds	r7, #48	; 0x30
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007bca:	f023 030c 	bic.w	r3, r3, #12
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <UART_SetConfig+0x114>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d103      	bne.n	8007c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007bf8:	f7fe f87e 	bl	8005cf8 <HAL_RCC_GetPCLK2Freq>
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	e002      	b.n	8007c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe f866 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8007c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009a      	lsls	r2, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1c:	4a22      	ldr	r2, [pc, #136]	; (8007ca8 <UART_SetConfig+0x118>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	0119      	lsls	r1, r3, #4
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009a      	lsls	r2, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <UART_SetConfig+0x118>)
 8007c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2064      	movs	r0, #100	; 0x64
 8007c46:	fb00 f303 	mul.w	r3, r0, r3
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	3332      	adds	r3, #50	; 0x32
 8007c50:	4a15      	ldr	r2, [pc, #84]	; (8007ca8 <UART_SetConfig+0x118>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5c:	4419      	add	r1, r3
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009a      	lsls	r2, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c74:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <UART_SetConfig+0x118>)
 8007c76:	fba3 0302 	umull	r0, r3, r3, r2
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	2064      	movs	r0, #100	; 0x64
 8007c7e:	fb00 f303 	mul.w	r3, r0, r3
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	3332      	adds	r3, #50	; 0x32
 8007c88:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <UART_SetConfig+0x118>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	f003 020f 	and.w	r2, r3, #15
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	440a      	add	r2, r1
 8007c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40013800 	.word	0x40013800
 8007ca8:	51eb851f 	.word	0x51eb851f

08007cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f103 0208 	add.w	r2, r3, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 0208 	add.w	r2, r3, #8
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f103 0208 	add.w	r2, r3, #8
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d103      	bne.n	8007d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e00c      	b.n	8007d82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e002      	b.n	8007d76 <vListInsert+0x2e>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d2f6      	bcs.n	8007d70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6852      	ldr	r2, [r2, #4]
 8007dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d103      	bne.n	8007dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr

08007e0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b08e      	sub	sp, #56	; 0x38
 8007e0e:	af04      	add	r7, sp, #16
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	61fb      	str	r3, [r7, #28]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e50:	2354      	movs	r3, #84	; 0x54
 8007e52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b54      	cmp	r3, #84	; 0x54
 8007e58:	d00a      	beq.n	8007e70 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	61bb      	str	r3, [r7, #24]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01e      	beq.n	8007eb6 <xTaskCreateStatic+0xac>
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01b      	beq.n	8007eb6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e90:	2300      	movs	r3, #0
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f850 	bl	8007f4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb0:	f000 f8d4 	bl	800805c <prvAddNewTaskToReadyList>
 8007eb4:	e001      	b.n	8007eba <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eba:	697b      	ldr	r3, [r7, #20]
	}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	; 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	; 0x30
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fe89 	bl	8008bf0 <pvPortMalloc>
 8007ede:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ee6:	2054      	movs	r0, #84	; 0x54
 8007ee8:	f000 fe82 	bl	8008bf0 <pvPortMalloc>
 8007eec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8007efa:	e005      	b.n	8007f08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007efc:	6978      	ldr	r0, [r7, #20]
 8007efe:	f000 ff43 	bl	8008d88 <vPortFree>
 8007f02:	e001      	b.n	8007f08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d017      	beq.n	8007f3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f80e 	bl	8007f4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f000 f892 	bl	800805c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e002      	b.n	8007f44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f44:	69bb      	ldr	r3, [r7, #24]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b088      	sub	sp, #32
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f66:	3b01      	subs	r3, #1
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	617b      	str	r3, [r7, #20]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01f      	beq.n	8007fdc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	e012      	b.n	8007fc8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	7819      	ldrb	r1, [r3, #0]
 8007faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	3334      	adds	r3, #52	; 0x34
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	d9e9      	bls.n	8007fa2 <prvInitialiseNewTask+0x54>
 8007fce:	e000      	b.n	8007fd2 <prvInitialiseNewTask+0x84>
			{
				break;
 8007fd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fda:	e003      	b.n	8007fe4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	2b06      	cmp	r3, #6
 8007fe8:	d901      	bls.n	8007fee <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fea:	2306      	movs	r3, #6
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	3304      	adds	r3, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fe70 	bl	8007cea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	3318      	adds	r3, #24
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fe6b 	bl	8007cea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008018:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	f1c3 0207 	rsb	r2, r3, #7
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	2200      	movs	r2, #0
 800802e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	69b8      	ldr	r0, [r7, #24]
 800803e:	f000 fc21 	bl	8008884 <pxPortInitialiseStack>
 8008042:	4602      	mov	r2, r0
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008052:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008054:	bf00      	nop
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008064:	f000 fd02 	bl	8008a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008068:	4b2a      	ldr	r3, [pc, #168]	; (8008114 <prvAddNewTaskToReadyList+0xb8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3301      	adds	r3, #1
 800806e:	4a29      	ldr	r2, [pc, #164]	; (8008114 <prvAddNewTaskToReadyList+0xb8>)
 8008070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008072:	4b29      	ldr	r3, [pc, #164]	; (8008118 <prvAddNewTaskToReadyList+0xbc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800807a:	4a27      	ldr	r2, [pc, #156]	; (8008118 <prvAddNewTaskToReadyList+0xbc>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008080:	4b24      	ldr	r3, [pc, #144]	; (8008114 <prvAddNewTaskToReadyList+0xb8>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d110      	bne.n	80080aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008088:	f000 faba 	bl	8008600 <prvInitialiseTaskLists>
 800808c:	e00d      	b.n	80080aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800808e:	4b23      	ldr	r3, [pc, #140]	; (800811c <prvAddNewTaskToReadyList+0xc0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008096:	4b20      	ldr	r3, [pc, #128]	; (8008118 <prvAddNewTaskToReadyList+0xbc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d802      	bhi.n	80080aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080a4:	4a1c      	ldr	r2, [pc, #112]	; (8008118 <prvAddNewTaskToReadyList+0xbc>)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <prvAddNewTaskToReadyList+0xc4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <prvAddNewTaskToReadyList+0xc4>)
 80080b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	2201      	movs	r2, #1
 80080ba:	409a      	lsls	r2, r3
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <prvAddNewTaskToReadyList+0xc8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	4a18      	ldr	r2, [pc, #96]	; (8008124 <prvAddNewTaskToReadyList+0xc8>)
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4a15      	ldr	r2, [pc, #84]	; (8008128 <prvAddNewTaskToReadyList+0xcc>)
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7ff fe10 	bl	8007d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080e2:	f000 fcf3 	bl	8008acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <prvAddNewTaskToReadyList+0xc0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00e      	beq.n	800810c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080ee:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <prvAddNewTaskToReadyList+0xbc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d207      	bcs.n	800810c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <prvAddNewTaskToReadyList+0xd0>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	2000094c 	.word	0x2000094c
 8008118:	2000084c 	.word	0x2000084c
 800811c:	20000958 	.word	0x20000958
 8008120:	20000968 	.word	0x20000968
 8008124:	20000954 	.word	0x20000954
 8008128:	20000850 	.word	0x20000850
 800812c:	e000ed04 	.word	0xe000ed04

08008130 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008142:	4b13      	ldr	r3, [pc, #76]	; (8008190 <vTaskDelay+0x60>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <vTaskDelay+0x30>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60bb      	str	r3, [r7, #8]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008160:	f000 f87a 	bl	8008258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fb26 	bl	80087b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800816c:	f000 f882 	bl	8008274 <xTaskResumeAll>
 8008170:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008178:	4b06      	ldr	r3, [pc, #24]	; (8008194 <vTaskDelay+0x64>)
 800817a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000974 	.word	0x20000974
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081a6:	463a      	mov	r2, r7
 80081a8:	1d39      	adds	r1, r7, #4
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f9 fd00 	bl	8001bb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	9202      	str	r2, [sp, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	460a      	mov	r2, r1
 80081c6:	491e      	ldr	r1, [pc, #120]	; (8008240 <vTaskStartScheduler+0xa8>)
 80081c8:	481e      	ldr	r0, [pc, #120]	; (8008244 <vTaskStartScheduler+0xac>)
 80081ca:	f7ff fe1e 	bl	8007e0a <xTaskCreateStatic>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <vTaskStartScheduler+0xb0>)
 80081d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081d4:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <vTaskStartScheduler+0xb0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e001      	b.n	80081e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d116      	bne.n	800821a <vTaskStartScheduler+0x82>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	613b      	str	r3, [r7, #16]
}
 80081fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008200:	4b12      	ldr	r3, [pc, #72]	; (800824c <vTaskStartScheduler+0xb4>)
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <vTaskStartScheduler+0xb8>)
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800820e:	4b11      	ldr	r3, [pc, #68]	; (8008254 <vTaskStartScheduler+0xbc>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008214:	f000 fbb8 	bl	8008988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008218:	e00e      	b.n	8008238 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d10a      	bne.n	8008238 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	60fb      	str	r3, [r7, #12]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vTaskStartScheduler+0x9e>
}
 8008238:	bf00      	nop
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	0800a0d4 	.word	0x0800a0d4
 8008244:	080085d1 	.word	0x080085d1
 8008248:	20000970 	.word	0x20000970
 800824c:	2000096c 	.word	0x2000096c
 8008250:	20000958 	.word	0x20000958
 8008254:	20000950 	.word	0x20000950

08008258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <vTaskSuspendAll+0x18>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3301      	adds	r3, #1
 8008262:	4a03      	ldr	r2, [pc, #12]	; (8008270 <vTaskSuspendAll+0x18>)
 8008264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000974 	.word	0x20000974

08008274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008282:	4b41      	ldr	r3, [pc, #260]	; (8008388 <xTaskResumeAll+0x114>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082a0:	f000 fbe4 	bl	8008a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082a4:	4b38      	ldr	r3, [pc, #224]	; (8008388 <xTaskResumeAll+0x114>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4a37      	ldr	r2, [pc, #220]	; (8008388 <xTaskResumeAll+0x114>)
 80082ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ae:	4b36      	ldr	r3, [pc, #216]	; (8008388 <xTaskResumeAll+0x114>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d161      	bne.n	800837a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082b6:	4b35      	ldr	r3, [pc, #212]	; (800838c <xTaskResumeAll+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d05d      	beq.n	800837a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082be:	e02e      	b.n	800831e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c0:	4b33      	ldr	r3, [pc, #204]	; (8008390 <xTaskResumeAll+0x11c>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3318      	adds	r3, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fd73 	bl	8007db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3304      	adds	r3, #4
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff fd6e 	bl	8007db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	2201      	movs	r2, #1
 80082e2:	409a      	lsls	r2, r3
 80082e4:	4b2b      	ldr	r3, [pc, #172]	; (8008394 <xTaskResumeAll+0x120>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <xTaskResumeAll+0x120>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a27      	ldr	r2, [pc, #156]	; (8008398 <xTaskResumeAll+0x124>)
 80082fc:	441a      	add	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f7ff fcfc 	bl	8007d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <xTaskResumeAll+0x128>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008318:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <xTaskResumeAll+0x12c>)
 800831a:	2201      	movs	r2, #1
 800831c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800831e:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <xTaskResumeAll+0x11c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1cc      	bne.n	80082c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800832c:	f000 fa06 	bl	800873c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <xTaskResumeAll+0x130>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d010      	beq.n	800835e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800833c:	f000 f836 	bl	80083ac <xTaskIncrementTick>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008346:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <xTaskResumeAll+0x12c>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3b01      	subs	r3, #1
 8008350:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f1      	bne.n	800833c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <xTaskResumeAll+0x130>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800835e:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <xTaskResumeAll+0x12c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <xTaskResumeAll+0x134>)
 800836c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800837a:	f000 fba7 	bl	8008acc <vPortExitCritical>

	return xAlreadyYielded;
 800837e:	68bb      	ldr	r3, [r7, #8]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000974 	.word	0x20000974
 800838c:	2000094c 	.word	0x2000094c
 8008390:	2000090c 	.word	0x2000090c
 8008394:	20000954 	.word	0x20000954
 8008398:	20000850 	.word	0x20000850
 800839c:	2000084c 	.word	0x2000084c
 80083a0:	20000960 	.word	0x20000960
 80083a4:	2000095c 	.word	0x2000095c
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b6:	4b4e      	ldr	r3, [pc, #312]	; (80084f0 <xTaskIncrementTick+0x144>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 808e 	bne.w	80084dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083c0:	4b4c      	ldr	r3, [pc, #304]	; (80084f4 <xTaskIncrementTick+0x148>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083c8:	4a4a      	ldr	r2, [pc, #296]	; (80084f4 <xTaskIncrementTick+0x148>)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d120      	bne.n	8008416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083d4:	4b48      	ldr	r3, [pc, #288]	; (80084f8 <xTaskIncrementTick+0x14c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	603b      	str	r3, [r7, #0]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xTaskIncrementTick+0x46>
 80083f4:	4b40      	ldr	r3, [pc, #256]	; (80084f8 <xTaskIncrementTick+0x14c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	4b40      	ldr	r3, [pc, #256]	; (80084fc <xTaskIncrementTick+0x150>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a3e      	ldr	r2, [pc, #248]	; (80084f8 <xTaskIncrementTick+0x14c>)
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4a3e      	ldr	r2, [pc, #248]	; (80084fc <xTaskIncrementTick+0x150>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <xTaskIncrementTick+0x154>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	4a3c      	ldr	r2, [pc, #240]	; (8008500 <xTaskIncrementTick+0x154>)
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	f000 f993 	bl	800873c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008416:	4b3b      	ldr	r3, [pc, #236]	; (8008504 <xTaskIncrementTick+0x158>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	d348      	bcc.n	80084b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008420:	4b35      	ldr	r3, [pc, #212]	; (80084f8 <xTaskIncrementTick+0x14c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842a:	4b36      	ldr	r3, [pc, #216]	; (8008504 <xTaskIncrementTick+0x158>)
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	601a      	str	r2, [r3, #0]
					break;
 8008432:	e03e      	b.n	80084b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008434:	4b30      	ldr	r3, [pc, #192]	; (80084f8 <xTaskIncrementTick+0x14c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d203      	bcs.n	8008454 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800844c:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <xTaskIncrementTick+0x158>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008452:	e02e      	b.n	80084b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fcad 	bl	8007db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	3318      	adds	r3, #24
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fca4 	bl	8007db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	2201      	movs	r2, #1
 8008476:	409a      	lsls	r2, r3
 8008478:	4b23      	ldr	r3, [pc, #140]	; (8008508 <xTaskIncrementTick+0x15c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4313      	orrs	r3, r2
 800847e:	4a22      	ldr	r2, [pc, #136]	; (8008508 <xTaskIncrementTick+0x15c>)
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4a1f      	ldr	r2, [pc, #124]	; (800850c <xTaskIncrementTick+0x160>)
 8008490:	441a      	add	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f7ff fc32 	bl	8007d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <xTaskIncrementTick+0x164>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d3b9      	bcc.n	8008420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b0:	e7b6      	b.n	8008420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <xTaskIncrementTick+0x164>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	4914      	ldr	r1, [pc, #80]	; (800850c <xTaskIncrementTick+0x160>)
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d901      	bls.n	80084ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084ce:	4b11      	ldr	r3, [pc, #68]	; (8008514 <xTaskIncrementTick+0x168>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e004      	b.n	80084e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <xTaskIncrementTick+0x16c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <xTaskIncrementTick+0x16c>)
 80084e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084e6:	697b      	ldr	r3, [r7, #20]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000974 	.word	0x20000974
 80084f4:	20000950 	.word	0x20000950
 80084f8:	20000904 	.word	0x20000904
 80084fc:	20000908 	.word	0x20000908
 8008500:	20000964 	.word	0x20000964
 8008504:	2000096c 	.word	0x2000096c
 8008508:	20000954 	.word	0x20000954
 800850c:	20000850 	.word	0x20000850
 8008510:	2000084c 	.word	0x2000084c
 8008514:	20000960 	.word	0x20000960
 8008518:	2000095c 	.word	0x2000095c

0800851c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008522:	4b26      	ldr	r3, [pc, #152]	; (80085bc <vTaskSwitchContext+0xa0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800852a:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <vTaskSwitchContext+0xa4>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008530:	e03f      	b.n	80085b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008532:	4b23      	ldr	r3, [pc, #140]	; (80085c0 <vTaskSwitchContext+0xa4>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008538:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <vTaskSwitchContext+0xa8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	fab3 f383 	clz	r3, r3
 8008544:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f1c3 031f 	rsb	r3, r3, #31
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	491e      	ldr	r1, [pc, #120]	; (80085c8 <vTaskSwitchContext+0xac>)
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	607b      	str	r3, [r7, #4]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <vTaskSwitchContext+0x5a>
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <vTaskSwitchContext+0xac>)
 8008584:	4413      	add	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3308      	adds	r3, #8
 800859a:	429a      	cmp	r2, r3
 800859c:	d104      	bne.n	80085a8 <vTaskSwitchContext+0x8c>
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4a07      	ldr	r2, [pc, #28]	; (80085cc <vTaskSwitchContext+0xb0>)
 80085b0:	6013      	str	r3, [r2, #0]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	20000974 	.word	0x20000974
 80085c0:	20000960 	.word	0x20000960
 80085c4:	20000954 	.word	0x20000954
 80085c8:	20000850 	.word	0x20000850
 80085cc:	2000084c 	.word	0x2000084c

080085d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d8:	f000 f852 	bl	8008680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <prvIdleTask+0x28>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d9f9      	bls.n	80085d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <prvIdleTask+0x2c>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085f4:	e7f0      	b.n	80085d8 <prvIdleTask+0x8>
 80085f6:	bf00      	nop
 80085f8:	20000850 	.word	0x20000850
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]
 800860a:	e00c      	b.n	8008626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a12      	ldr	r2, [pc, #72]	; (8008660 <prvInitialiseTaskLists+0x60>)
 8008618:	4413      	add	r3, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fb46 	bl	8007cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3301      	adds	r3, #1
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b06      	cmp	r3, #6
 800862a:	d9ef      	bls.n	800860c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800862c:	480d      	ldr	r0, [pc, #52]	; (8008664 <prvInitialiseTaskLists+0x64>)
 800862e:	f7ff fb3d 	bl	8007cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008632:	480d      	ldr	r0, [pc, #52]	; (8008668 <prvInitialiseTaskLists+0x68>)
 8008634:	f7ff fb3a 	bl	8007cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008638:	480c      	ldr	r0, [pc, #48]	; (800866c <prvInitialiseTaskLists+0x6c>)
 800863a:	f7ff fb37 	bl	8007cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800863e:	480c      	ldr	r0, [pc, #48]	; (8008670 <prvInitialiseTaskLists+0x70>)
 8008640:	f7ff fb34 	bl	8007cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008644:	480b      	ldr	r0, [pc, #44]	; (8008674 <prvInitialiseTaskLists+0x74>)
 8008646:	f7ff fb31 	bl	8007cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvInitialiseTaskLists+0x78>)
 800864c:	4a05      	ldr	r2, [pc, #20]	; (8008664 <prvInitialiseTaskLists+0x64>)
 800864e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <prvInitialiseTaskLists+0x7c>)
 8008652:	4a05      	ldr	r2, [pc, #20]	; (8008668 <prvInitialiseTaskLists+0x68>)
 8008654:	601a      	str	r2, [r3, #0]
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000850 	.word	0x20000850
 8008664:	200008dc 	.word	0x200008dc
 8008668:	200008f0 	.word	0x200008f0
 800866c:	2000090c 	.word	0x2000090c
 8008670:	20000920 	.word	0x20000920
 8008674:	20000938 	.word	0x20000938
 8008678:	20000904 	.word	0x20000904
 800867c:	20000908 	.word	0x20000908

08008680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008686:	e019      	b.n	80086bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008688:	f000 f9f0 	bl	8008a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <prvCheckTasksWaitingTermination+0x50>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fb8d 	bl	8007db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800869e:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <prvCheckTasksWaitingTermination+0x54>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	4a0b      	ldr	r2, [pc, #44]	; (80086d4 <prvCheckTasksWaitingTermination+0x54>)
 80086a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a8:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086b2:	f000 fa0b 	bl	8008acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f810 	bl	80086dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e1      	bne.n	8008688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000920 	.word	0x20000920
 80086d4:	2000094c 	.word	0x2000094c
 80086d8:	20000934 	.word	0x20000934

080086dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d108      	bne.n	8008700 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fb48 	bl	8008d88 <vPortFree>
				vPortFree( pxTCB );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb45 	bl	8008d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086fe:	e018      	b.n	8008732 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008706:	2b01      	cmp	r3, #1
 8008708:	d103      	bne.n	8008712 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fb3c 	bl	8008d88 <vPortFree>
	}
 8008710:	e00f      	b.n	8008732 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008718:	2b02      	cmp	r3, #2
 800871a:	d00a      	beq.n	8008732 <prvDeleteTCB+0x56>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60fb      	str	r3, [r7, #12]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <prvDeleteTCB+0x54>
	}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <prvResetNextTaskUnblockTime+0x38>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <prvResetNextTaskUnblockTime+0x3c>)
 800874e:	f04f 32ff 	mov.w	r2, #4294967295
 8008752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008754:	e008      	b.n	8008768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <prvResetNextTaskUnblockTime+0x38>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4a04      	ldr	r2, [pc, #16]	; (8008778 <prvResetNextTaskUnblockTime+0x3c>)
 8008766:	6013      	str	r3, [r2, #0]
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000904 	.word	0x20000904
 8008778:	2000096c 	.word	0x2000096c

0800877c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <xTaskGetSchedulerState+0x34>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800878a:	2301      	movs	r3, #1
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	e008      	b.n	80087a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008790:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <xTaskGetSchedulerState+0x38>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008798:	2302      	movs	r3, #2
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	e001      	b.n	80087a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800879e:	2300      	movs	r3, #0
 80087a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087a2:	687b      	ldr	r3, [r7, #4]
	}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000958 	.word	0x20000958
 80087b4:	20000974 	.word	0x20000974

080087b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087c8:	4b28      	ldr	r3, [pc, #160]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff faf2 	bl	8007db8 <uxListRemove>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087da:	4b24      	ldr	r3, [pc, #144]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	2201      	movs	r2, #1
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43da      	mvns	r2, r3
 80087e8:	4b21      	ldr	r3, [pc, #132]	; (8008870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4013      	ands	r3, r2
 80087ee:	4a20      	ldr	r2, [pc, #128]	; (8008870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d10a      	bne.n	8008810 <prvAddCurrentTaskToDelayedList+0x58>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	481a      	ldr	r0, [pc, #104]	; (8008874 <prvAddCurrentTaskToDelayedList+0xbc>)
 800880a:	f7ff fa7a 	bl	8007d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800880e:	e026      	b.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	429a      	cmp	r2, r3
 8008826:	d209      	bcs.n	800883c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <prvAddCurrentTaskToDelayedList+0xc0>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7ff fa87 	bl	8007d48 <vListInsert>
}
 800883a:	e010      	b.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <prvAddCurrentTaskToDelayedList+0xc4>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7ff fa7d 	bl	8007d48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d202      	bcs.n	800885e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvAddCurrentTaskToDelayedList+0xc8>)
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6013      	str	r3, [r2, #0]
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000950 	.word	0x20000950
 800886c:	2000084c 	.word	0x2000084c
 8008870:	20000954 	.word	0x20000954
 8008874:	20000938 	.word	0x20000938
 8008878:	20000908 	.word	0x20000908
 800887c:	20000904 	.word	0x20000904
 8008880:	2000096c 	.word	0x2000096c

08008884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3b04      	subs	r3, #4
 8008894:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 0201 	bic.w	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b4:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <pxPortInitialiseStack+0x54>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3b14      	subs	r3, #20
 80088be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3b20      	subs	r3, #32
 80088ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr
 80088d8:	080088dd 	.word	0x080088dd

080088dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e6:	4b12      	ldr	r3, [pc, #72]	; (8008930 <prvTaskExitError+0x54>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d00a      	beq.n	8008906 <prvTaskExitError+0x2a>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <prvTaskExitError+0x28>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60bb      	str	r3, [r7, #8]
}
 8008918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800891a:	bf00      	nop
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0fc      	beq.n	800891c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	bc80      	pop	{r7}
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	200000a4 	.word	0x200000a4
	...

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	f04e 0e0d 	orr.w	lr, lr, #13
 800895e:	4770      	bx	lr

08008960 <pxCurrentTCBConst2>:
 8008960:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008968:	4806      	ldr	r0, [pc, #24]	; (8008984 <prvPortStartFirstTask+0x1c>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	b662      	cpsie	i
 8008974:	b661      	cpsie	f
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	df00      	svc	0
 8008980:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008982:	bf00      	nop
 8008984:	e000ed08 	.word	0xe000ed08

08008988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <xPortStartScheduler+0xd0>)
 8008990:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	22ff      	movs	r2, #255	; 0xff
 800899e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	4b2a      	ldr	r3, [pc, #168]	; (8008a5c <xPortStartScheduler+0xd4>)
 80089b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089b6:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <xPortStartScheduler+0xd8>)
 80089b8:	2207      	movs	r2, #7
 80089ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089bc:	e009      	b.n	80089d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80089be:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <xPortStartScheduler+0xd8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	4a26      	ldr	r2, [pc, #152]	; (8008a60 <xPortStartScheduler+0xd8>)
 80089c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089da:	2b80      	cmp	r3, #128	; 0x80
 80089dc:	d0ef      	beq.n	80089be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089de:	4b20      	ldr	r3, [pc, #128]	; (8008a60 <xPortStartScheduler+0xd8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1c3 0307 	rsb	r3, r3, #7
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d00a      	beq.n	8008a00 <xPortStartScheduler+0x78>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60bb      	str	r3, [r7, #8]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a00:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <xPortStartScheduler+0xd8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	4a16      	ldr	r2, [pc, #88]	; (8008a60 <xPortStartScheduler+0xd8>)
 8008a08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a0a:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <xPortStartScheduler+0xd8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a12:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <xPortStartScheduler+0xd8>)
 8008a14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <xPortStartScheduler+0xdc>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <xPortStartScheduler+0xdc>)
 8008a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <xPortStartScheduler+0xdc>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <xPortStartScheduler+0xdc>)
 8008a30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a36:	f000 f8b9 	bl	8008bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <xPortStartScheduler+0xe0>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a40:	f7ff ff92 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a44:	f7ff fd6a 	bl	800851c <vTaskSwitchContext>
	prvTaskExitError();
 8008a48:	f7ff ff48 	bl	80088dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	e000e400 	.word	0xe000e400
 8008a5c:	20000978 	.word	0x20000978
 8008a60:	2000097c 	.word	0x2000097c
 8008a64:	e000ed20 	.word	0xe000ed20
 8008a68:	200000a4 	.word	0x200000a4

08008a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
}
 8008a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a86:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <vPortEnterCritical+0x58>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a0d      	ldr	r2, [pc, #52]	; (8008ac4 <vPortEnterCritical+0x58>)
 8008a8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a90:	4b0c      	ldr	r3, [pc, #48]	; (8008ac4 <vPortEnterCritical+0x58>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d10f      	bne.n	8008ab8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <vPortEnterCritical+0x5c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	603b      	str	r3, [r7, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vPortEnterCritical+0x4a>
	}
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200000a4 	.word	0x200000a4
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ad2:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <vPortExitCritical+0x4c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <vPortExitCritical+0x24>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <vPortExitCritical+0x4c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <vPortExitCritical+0x4c>)
 8008af8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <vPortExitCritical+0x4c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <vPortExitCritical+0x42>
 8008b02:	2300      	movs	r3, #0
 8008b04:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr
 8008b18:	200000a4 	.word	0x200000a4
 8008b1c:	00000000 	.word	0x00000000

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <pxCurrentTCBConst>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008b36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b3a:	f380 8811 	msr	BASEPRI, r0
 8008b3e:	f7ff fced 	bl	800851c <vTaskSwitchContext>
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8811 	msr	BASEPRI, r0
 8008b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b4e:	6819      	ldr	r1, [r3, #0]
 8008b50:	6808      	ldr	r0, [r1, #0]
 8008b52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b56:	f380 8809 	msr	PSP, r0
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	4770      	bx	lr

08008b60 <pxCurrentTCBConst>:
 8008b60:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b82:	f7ff fc13 	bl	80083ac <xTaskIncrementTick>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <xPortSysTickHandler+0x40>)
 8008b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	2300      	movs	r3, #0
 8008b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
}
 8008b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <vPortSetupTimerInterrupt+0x30>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <vPortSetupTimerInterrupt+0x34>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <vPortSetupTimerInterrupt+0x38>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <vPortSetupTimerInterrupt+0x3c>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	099b      	lsrs	r3, r3, #6
 8008bc8:	4a08      	ldr	r2, [pc, #32]	; (8008bec <vPortSetupTimerInterrupt+0x40>)
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <vPortSetupTimerInterrupt+0x30>)
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr
 8008bdc:	e000e010 	.word	0xe000e010
 8008be0:	e000e018 	.word	0xe000e018
 8008be4:	20000098 	.word	0x20000098
 8008be8:	10624dd3 	.word	0x10624dd3
 8008bec:	e000e014 	.word	0xe000e014

08008bf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	; 0x28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bfc:	f7ff fb2c 	bl	8008258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c00:	4b5b      	ldr	r3, [pc, #364]	; (8008d70 <pvPortMalloc+0x180>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c08:	f000 f920 	bl	8008e4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c0c:	4b59      	ldr	r3, [pc, #356]	; (8008d74 <pvPortMalloc+0x184>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4013      	ands	r3, r2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 8093 	bne.w	8008d40 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01d      	beq.n	8008c5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c20:	2208      	movs	r2, #8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d014      	beq.n	8008c5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f023 0307 	bic.w	r3, r3, #7
 8008c38:	3308      	adds	r3, #8
 8008c3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <pvPortMalloc+0x6c>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	617b      	str	r3, [r7, #20]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d06e      	beq.n	8008d40 <pvPortMalloc+0x150>
 8008c62:	4b45      	ldr	r3, [pc, #276]	; (8008d78 <pvPortMalloc+0x188>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d869      	bhi.n	8008d40 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c6c:	4b43      	ldr	r3, [pc, #268]	; (8008d7c <pvPortMalloc+0x18c>)
 8008c6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c70:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <pvPortMalloc+0x18c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c76:	e004      	b.n	8008c82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <pvPortMalloc+0xa4>
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f1      	bne.n	8008c78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c94:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <pvPortMalloc+0x180>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d050      	beq.n	8008d40 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	4413      	add	r3, r2
 8008ca6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	2308      	movs	r3, #8
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d91f      	bls.n	8008d00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <pvPortMalloc+0xf8>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	613b      	str	r3, [r7, #16]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	1ad2      	subs	r2, r2, r3
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cfa:	69b8      	ldr	r0, [r7, #24]
 8008cfc:	f000 f908 	bl	8008f10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <pvPortMalloc+0x188>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	4a1b      	ldr	r2, [pc, #108]	; (8008d78 <pvPortMalloc+0x188>)
 8008d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d0e:	4b1a      	ldr	r3, [pc, #104]	; (8008d78 <pvPortMalloc+0x188>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <pvPortMalloc+0x190>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d203      	bcs.n	8008d22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d1a:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <pvPortMalloc+0x188>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <pvPortMalloc+0x190>)
 8008d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <pvPortMalloc+0x184>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d36:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <pvPortMalloc+0x194>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	4a11      	ldr	r2, [pc, #68]	; (8008d84 <pvPortMalloc+0x194>)
 8008d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d40:	f7ff fa98 	bl	8008274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <pvPortMalloc+0x174>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	60fb      	str	r3, [r7, #12]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <pvPortMalloc+0x172>
	return pvReturn;
 8008d64:	69fb      	ldr	r3, [r7, #28]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3728      	adds	r7, #40	; 0x28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20001588 	.word	0x20001588
 8008d74:	2000159c 	.word	0x2000159c
 8008d78:	2000158c 	.word	0x2000158c
 8008d7c:	20001580 	.word	0x20001580
 8008d80:	20001590 	.word	0x20001590
 8008d84:	20001594 	.word	0x20001594

08008d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d04d      	beq.n	8008e36 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d9a:	2308      	movs	r3, #8
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4413      	add	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <vPortFree+0xb8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <vPortFree+0x44>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60fb      	str	r3, [r7, #12]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <vPortFree+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60bb      	str	r3, [r7, #8]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <vPortFree+0xb8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4013      	ands	r3, r2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01e      	beq.n	8008e36 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d11a      	bne.n	8008e36 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <vPortFree+0xb8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	401a      	ands	r2, r3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e10:	f7ff fa22 	bl	8008258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <vPortFree+0xbc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	4a09      	ldr	r2, [pc, #36]	; (8008e44 <vPortFree+0xbc>)
 8008e20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e22:	6938      	ldr	r0, [r7, #16]
 8008e24:	f000 f874 	bl	8008f10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e28:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <vPortFree+0xc0>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a06      	ldr	r2, [pc, #24]	; (8008e48 <vPortFree+0xc0>)
 8008e30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e32:	f7ff fa1f 	bl	8008274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e36:	bf00      	nop
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	2000159c 	.word	0x2000159c
 8008e44:	2000158c 	.word	0x2000158c
 8008e48:	20001598 	.word	0x20001598

08008e4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008e56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e58:	4b27      	ldr	r3, [pc, #156]	; (8008ef8 <prvHeapInit+0xac>)
 8008e5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00c      	beq.n	8008e80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3307      	adds	r3, #7
 8008e6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	4a1f      	ldr	r2, [pc, #124]	; (8008ef8 <prvHeapInit+0xac>)
 8008e7c:	4413      	add	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <prvHeapInit+0xb0>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e8a:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <prvHeapInit+0xb0>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e98:	2208      	movs	r2, #8
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0307 	bic.w	r3, r3, #7
 8008ea6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <prvHeapInit+0xb4>)
 8008eac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008eae:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <prvHeapInit+0xb4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eb6:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <prvHeapInit+0xb4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <prvHeapInit+0xb4>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a0a      	ldr	r2, [pc, #40]	; (8008f04 <prvHeapInit+0xb8>)
 8008eda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <prvHeapInit+0xbc>)
 8008ee2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <prvHeapInit+0xc0>)
 8008ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008eea:	601a      	str	r2, [r3, #0]
}
 8008eec:	bf00      	nop
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000980 	.word	0x20000980
 8008efc:	20001580 	.word	0x20001580
 8008f00:	20001588 	.word	0x20001588
 8008f04:	20001590 	.word	0x20001590
 8008f08:	2000158c 	.word	0x2000158c
 8008f0c:	2000159c 	.word	0x2000159c

08008f10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f18:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <prvInsertBlockIntoFreeList+0xa8>)
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e002      	b.n	8008f24 <prvInsertBlockIntoFreeList+0x14>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d8f7      	bhi.n	8008f1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d108      	bne.n	8008f52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	441a      	add	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	441a      	add	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d118      	bne.n	8008f98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <prvInsertBlockIntoFreeList+0xac>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d00d      	beq.n	8008f8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	441a      	add	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e008      	b.n	8008fa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <prvInsertBlockIntoFreeList+0xac>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e003      	b.n	8008fa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d002      	beq.n	8008fae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr
 8008fb8:	20001580 	.word	0x20001580
 8008fbc:	20001588 	.word	0x20001588

08008fc0 <siprintf>:
 8008fc0:	b40e      	push	{r1, r2, r3}
 8008fc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fc6:	b500      	push	{lr}
 8008fc8:	b09c      	sub	sp, #112	; 0x70
 8008fca:	ab1d      	add	r3, sp, #116	; 0x74
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	9006      	str	r0, [sp, #24]
 8008fd0:	9107      	str	r1, [sp, #28]
 8008fd2:	9104      	str	r1, [sp, #16]
 8008fd4:	4808      	ldr	r0, [pc, #32]	; (8008ff8 <siprintf+0x38>)
 8008fd6:	4909      	ldr	r1, [pc, #36]	; (8008ffc <siprintf+0x3c>)
 8008fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	6800      	ldr	r0, [r0, #0]
 8008fe0:	a902      	add	r1, sp, #8
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f000 f99c 	bl	8009320 <_svfiprintf_r>
 8008fe8:	2200      	movs	r2, #0
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	b01c      	add	sp, #112	; 0x70
 8008ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff4:	b003      	add	sp, #12
 8008ff6:	4770      	bx	lr
 8008ff8:	200000f4 	.word	0x200000f4
 8008ffc:	ffff0208 	.word	0xffff0208

08009000 <memset>:
 8009000:	4603      	mov	r3, r0
 8009002:	4402      	add	r2, r0
 8009004:	4293      	cmp	r3, r2
 8009006:	d100      	bne.n	800900a <memset+0xa>
 8009008:	4770      	bx	lr
 800900a:	f803 1b01 	strb.w	r1, [r3], #1
 800900e:	e7f9      	b.n	8009004 <memset+0x4>

08009010 <__errno>:
 8009010:	4b01      	ldr	r3, [pc, #4]	; (8009018 <__errno+0x8>)
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	200000f4 	.word	0x200000f4

0800901c <__libc_init_array>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	2600      	movs	r6, #0
 8009020:	4d0c      	ldr	r5, [pc, #48]	; (8009054 <__libc_init_array+0x38>)
 8009022:	4c0d      	ldr	r4, [pc, #52]	; (8009058 <__libc_init_array+0x3c>)
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	42a6      	cmp	r6, r4
 800902a:	d109      	bne.n	8009040 <__libc_init_array+0x24>
 800902c:	f001 f81a 	bl	800a064 <_init>
 8009030:	2600      	movs	r6, #0
 8009032:	4d0a      	ldr	r5, [pc, #40]	; (800905c <__libc_init_array+0x40>)
 8009034:	4c0a      	ldr	r4, [pc, #40]	; (8009060 <__libc_init_array+0x44>)
 8009036:	1b64      	subs	r4, r4, r5
 8009038:	10a4      	asrs	r4, r4, #2
 800903a:	42a6      	cmp	r6, r4
 800903c:	d105      	bne.n	800904a <__libc_init_array+0x2e>
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	f855 3b04 	ldr.w	r3, [r5], #4
 8009044:	4798      	blx	r3
 8009046:	3601      	adds	r6, #1
 8009048:	e7ee      	b.n	8009028 <__libc_init_array+0xc>
 800904a:	f855 3b04 	ldr.w	r3, [r5], #4
 800904e:	4798      	blx	r3
 8009050:	3601      	adds	r6, #1
 8009052:	e7f2      	b.n	800903a <__libc_init_array+0x1e>
 8009054:	0800a1b0 	.word	0x0800a1b0
 8009058:	0800a1b0 	.word	0x0800a1b0
 800905c:	0800a1b0 	.word	0x0800a1b0
 8009060:	0800a1b4 	.word	0x0800a1b4

08009064 <__retarget_lock_acquire_recursive>:
 8009064:	4770      	bx	lr

08009066 <__retarget_lock_release_recursive>:
 8009066:	4770      	bx	lr

08009068 <memcpy>:
 8009068:	440a      	add	r2, r1
 800906a:	4291      	cmp	r1, r2
 800906c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009070:	d100      	bne.n	8009074 <memcpy+0xc>
 8009072:	4770      	bx	lr
 8009074:	b510      	push	{r4, lr}
 8009076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800907a:	4291      	cmp	r1, r2
 800907c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009080:	d1f9      	bne.n	8009076 <memcpy+0xe>
 8009082:	bd10      	pop	{r4, pc}

08009084 <_free_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4605      	mov	r5, r0
 8009088:	2900      	cmp	r1, #0
 800908a:	d040      	beq.n	800910e <_free_r+0x8a>
 800908c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009090:	1f0c      	subs	r4, r1, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfb8      	it	lt
 8009096:	18e4      	addlt	r4, r4, r3
 8009098:	f000 f8dc 	bl	8009254 <__malloc_lock>
 800909c:	4a1c      	ldr	r2, [pc, #112]	; (8009110 <_free_r+0x8c>)
 800909e:	6813      	ldr	r3, [r2, #0]
 80090a0:	b933      	cbnz	r3, 80090b0 <_free_r+0x2c>
 80090a2:	6063      	str	r3, [r4, #4]
 80090a4:	6014      	str	r4, [r2, #0]
 80090a6:	4628      	mov	r0, r5
 80090a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ac:	f000 b8d8 	b.w	8009260 <__malloc_unlock>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d908      	bls.n	80090c6 <_free_r+0x42>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	1821      	adds	r1, r4, r0
 80090b8:	428b      	cmp	r3, r1
 80090ba:	bf01      	itttt	eq
 80090bc:	6819      	ldreq	r1, [r3, #0]
 80090be:	685b      	ldreq	r3, [r3, #4]
 80090c0:	1809      	addeq	r1, r1, r0
 80090c2:	6021      	streq	r1, [r4, #0]
 80090c4:	e7ed      	b.n	80090a2 <_free_r+0x1e>
 80090c6:	461a      	mov	r2, r3
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	b10b      	cbz	r3, 80090d0 <_free_r+0x4c>
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	d9fa      	bls.n	80090c6 <_free_r+0x42>
 80090d0:	6811      	ldr	r1, [r2, #0]
 80090d2:	1850      	adds	r0, r2, r1
 80090d4:	42a0      	cmp	r0, r4
 80090d6:	d10b      	bne.n	80090f0 <_free_r+0x6c>
 80090d8:	6820      	ldr	r0, [r4, #0]
 80090da:	4401      	add	r1, r0
 80090dc:	1850      	adds	r0, r2, r1
 80090de:	4283      	cmp	r3, r0
 80090e0:	6011      	str	r1, [r2, #0]
 80090e2:	d1e0      	bne.n	80090a6 <_free_r+0x22>
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4408      	add	r0, r1
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	6053      	str	r3, [r2, #4]
 80090ee:	e7da      	b.n	80090a6 <_free_r+0x22>
 80090f0:	d902      	bls.n	80090f8 <_free_r+0x74>
 80090f2:	230c      	movs	r3, #12
 80090f4:	602b      	str	r3, [r5, #0]
 80090f6:	e7d6      	b.n	80090a6 <_free_r+0x22>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	1821      	adds	r1, r4, r0
 80090fc:	428b      	cmp	r3, r1
 80090fe:	bf01      	itttt	eq
 8009100:	6819      	ldreq	r1, [r3, #0]
 8009102:	685b      	ldreq	r3, [r3, #4]
 8009104:	1809      	addeq	r1, r1, r0
 8009106:	6021      	streq	r1, [r4, #0]
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	6054      	str	r4, [r2, #4]
 800910c:	e7cb      	b.n	80090a6 <_free_r+0x22>
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	200016e0 	.word	0x200016e0

08009114 <sbrk_aligned>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	4e0e      	ldr	r6, [pc, #56]	; (8009150 <sbrk_aligned+0x3c>)
 8009118:	460c      	mov	r4, r1
 800911a:	6831      	ldr	r1, [r6, #0]
 800911c:	4605      	mov	r5, r0
 800911e:	b911      	cbnz	r1, 8009126 <sbrk_aligned+0x12>
 8009120:	f000 fbaa 	bl	8009878 <_sbrk_r>
 8009124:	6030      	str	r0, [r6, #0]
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 fba5 	bl	8009878 <_sbrk_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	d00a      	beq.n	8009148 <sbrk_aligned+0x34>
 8009132:	1cc4      	adds	r4, r0, #3
 8009134:	f024 0403 	bic.w	r4, r4, #3
 8009138:	42a0      	cmp	r0, r4
 800913a:	d007      	beq.n	800914c <sbrk_aligned+0x38>
 800913c:	1a21      	subs	r1, r4, r0
 800913e:	4628      	mov	r0, r5
 8009140:	f000 fb9a 	bl	8009878 <_sbrk_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d101      	bne.n	800914c <sbrk_aligned+0x38>
 8009148:	f04f 34ff 	mov.w	r4, #4294967295
 800914c:	4620      	mov	r0, r4
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	200016e4 	.word	0x200016e4

08009154 <_malloc_r>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	1ccd      	adds	r5, r1, #3
 800915a:	f025 0503 	bic.w	r5, r5, #3
 800915e:	3508      	adds	r5, #8
 8009160:	2d0c      	cmp	r5, #12
 8009162:	bf38      	it	cc
 8009164:	250c      	movcc	r5, #12
 8009166:	2d00      	cmp	r5, #0
 8009168:	4607      	mov	r7, r0
 800916a:	db01      	blt.n	8009170 <_malloc_r+0x1c>
 800916c:	42a9      	cmp	r1, r5
 800916e:	d905      	bls.n	800917c <_malloc_r+0x28>
 8009170:	230c      	movs	r3, #12
 8009172:	2600      	movs	r6, #0
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	4630      	mov	r0, r6
 8009178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009250 <_malloc_r+0xfc>
 8009180:	f000 f868 	bl	8009254 <__malloc_lock>
 8009184:	f8d8 3000 	ldr.w	r3, [r8]
 8009188:	461c      	mov	r4, r3
 800918a:	bb5c      	cbnz	r4, 80091e4 <_malloc_r+0x90>
 800918c:	4629      	mov	r1, r5
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ffc0 	bl	8009114 <sbrk_aligned>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	4604      	mov	r4, r0
 8009198:	d155      	bne.n	8009246 <_malloc_r+0xf2>
 800919a:	f8d8 4000 	ldr.w	r4, [r8]
 800919e:	4626      	mov	r6, r4
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	d145      	bne.n	8009230 <_malloc_r+0xdc>
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	d048      	beq.n	800923a <_malloc_r+0xe6>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	4631      	mov	r1, r6
 80091ac:	4638      	mov	r0, r7
 80091ae:	eb04 0903 	add.w	r9, r4, r3
 80091b2:	f000 fb61 	bl	8009878 <_sbrk_r>
 80091b6:	4581      	cmp	r9, r0
 80091b8:	d13f      	bne.n	800923a <_malloc_r+0xe6>
 80091ba:	6821      	ldr	r1, [r4, #0]
 80091bc:	4638      	mov	r0, r7
 80091be:	1a6d      	subs	r5, r5, r1
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7ff ffa7 	bl	8009114 <sbrk_aligned>
 80091c6:	3001      	adds	r0, #1
 80091c8:	d037      	beq.n	800923a <_malloc_r+0xe6>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	442b      	add	r3, r5
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	f8d8 3000 	ldr.w	r3, [r8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d038      	beq.n	800924a <_malloc_r+0xf6>
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	42a2      	cmp	r2, r4
 80091dc:	d12b      	bne.n	8009236 <_malloc_r+0xe2>
 80091de:	2200      	movs	r2, #0
 80091e0:	605a      	str	r2, [r3, #4]
 80091e2:	e00f      	b.n	8009204 <_malloc_r+0xb0>
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	1b52      	subs	r2, r2, r5
 80091e8:	d41f      	bmi.n	800922a <_malloc_r+0xd6>
 80091ea:	2a0b      	cmp	r2, #11
 80091ec:	d917      	bls.n	800921e <_malloc_r+0xca>
 80091ee:	1961      	adds	r1, r4, r5
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	6025      	str	r5, [r4, #0]
 80091f4:	bf18      	it	ne
 80091f6:	6059      	strne	r1, [r3, #4]
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	bf08      	it	eq
 80091fc:	f8c8 1000 	streq.w	r1, [r8]
 8009200:	5162      	str	r2, [r4, r5]
 8009202:	604b      	str	r3, [r1, #4]
 8009204:	4638      	mov	r0, r7
 8009206:	f104 060b 	add.w	r6, r4, #11
 800920a:	f000 f829 	bl	8009260 <__malloc_unlock>
 800920e:	f026 0607 	bic.w	r6, r6, #7
 8009212:	1d23      	adds	r3, r4, #4
 8009214:	1af2      	subs	r2, r6, r3
 8009216:	d0ae      	beq.n	8009176 <_malloc_r+0x22>
 8009218:	1b9b      	subs	r3, r3, r6
 800921a:	50a3      	str	r3, [r4, r2]
 800921c:	e7ab      	b.n	8009176 <_malloc_r+0x22>
 800921e:	42a3      	cmp	r3, r4
 8009220:	6862      	ldr	r2, [r4, #4]
 8009222:	d1dd      	bne.n	80091e0 <_malloc_r+0x8c>
 8009224:	f8c8 2000 	str.w	r2, [r8]
 8009228:	e7ec      	b.n	8009204 <_malloc_r+0xb0>
 800922a:	4623      	mov	r3, r4
 800922c:	6864      	ldr	r4, [r4, #4]
 800922e:	e7ac      	b.n	800918a <_malloc_r+0x36>
 8009230:	4634      	mov	r4, r6
 8009232:	6876      	ldr	r6, [r6, #4]
 8009234:	e7b4      	b.n	80091a0 <_malloc_r+0x4c>
 8009236:	4613      	mov	r3, r2
 8009238:	e7cc      	b.n	80091d4 <_malloc_r+0x80>
 800923a:	230c      	movs	r3, #12
 800923c:	4638      	mov	r0, r7
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	f000 f80e 	bl	8009260 <__malloc_unlock>
 8009244:	e797      	b.n	8009176 <_malloc_r+0x22>
 8009246:	6025      	str	r5, [r4, #0]
 8009248:	e7dc      	b.n	8009204 <_malloc_r+0xb0>
 800924a:	605b      	str	r3, [r3, #4]
 800924c:	deff      	udf	#255	; 0xff
 800924e:	bf00      	nop
 8009250:	200016e0 	.word	0x200016e0

08009254 <__malloc_lock>:
 8009254:	4801      	ldr	r0, [pc, #4]	; (800925c <__malloc_lock+0x8>)
 8009256:	f7ff bf05 	b.w	8009064 <__retarget_lock_acquire_recursive>
 800925a:	bf00      	nop
 800925c:	200016dc 	.word	0x200016dc

08009260 <__malloc_unlock>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__malloc_unlock+0x8>)
 8009262:	f7ff bf00 	b.w	8009066 <__retarget_lock_release_recursive>
 8009266:	bf00      	nop
 8009268:	200016dc 	.word	0x200016dc

0800926c <__ssputs_r>:
 800926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009270:	461f      	mov	r7, r3
 8009272:	688e      	ldr	r6, [r1, #8]
 8009274:	4682      	mov	sl, r0
 8009276:	42be      	cmp	r6, r7
 8009278:	460c      	mov	r4, r1
 800927a:	4690      	mov	r8, r2
 800927c:	680b      	ldr	r3, [r1, #0]
 800927e:	d82c      	bhi.n	80092da <__ssputs_r+0x6e>
 8009280:	898a      	ldrh	r2, [r1, #12]
 8009282:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009286:	d026      	beq.n	80092d6 <__ssputs_r+0x6a>
 8009288:	6965      	ldr	r5, [r4, #20]
 800928a:	6909      	ldr	r1, [r1, #16]
 800928c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009290:	eba3 0901 	sub.w	r9, r3, r1
 8009294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009298:	1c7b      	adds	r3, r7, #1
 800929a:	444b      	add	r3, r9
 800929c:	106d      	asrs	r5, r5, #1
 800929e:	429d      	cmp	r5, r3
 80092a0:	bf38      	it	cc
 80092a2:	461d      	movcc	r5, r3
 80092a4:	0553      	lsls	r3, r2, #21
 80092a6:	d527      	bpl.n	80092f8 <__ssputs_r+0x8c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7ff ff53 	bl	8009154 <_malloc_r>
 80092ae:	4606      	mov	r6, r0
 80092b0:	b360      	cbz	r0, 800930c <__ssputs_r+0xa0>
 80092b2:	464a      	mov	r2, r9
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	f7ff fed7 	bl	8009068 <memcpy>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	6126      	str	r6, [r4, #16]
 80092c8:	444e      	add	r6, r9
 80092ca:	6026      	str	r6, [r4, #0]
 80092cc:	463e      	mov	r6, r7
 80092ce:	6165      	str	r5, [r4, #20]
 80092d0:	eba5 0509 	sub.w	r5, r5, r9
 80092d4:	60a5      	str	r5, [r4, #8]
 80092d6:	42be      	cmp	r6, r7
 80092d8:	d900      	bls.n	80092dc <__ssputs_r+0x70>
 80092da:	463e      	mov	r6, r7
 80092dc:	4632      	mov	r2, r6
 80092de:	4641      	mov	r1, r8
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	f000 faaf 	bl	8009844 <memmove>
 80092e6:	2000      	movs	r0, #0
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	1b9b      	subs	r3, r3, r6
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	4433      	add	r3, r6
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	462a      	mov	r2, r5
 80092fa:	f000 fadb 	bl	80098b4 <_realloc_r>
 80092fe:	4606      	mov	r6, r0
 8009300:	2800      	cmp	r0, #0
 8009302:	d1e0      	bne.n	80092c6 <__ssputs_r+0x5a>
 8009304:	4650      	mov	r0, sl
 8009306:	6921      	ldr	r1, [r4, #16]
 8009308:	f7ff febc 	bl	8009084 <_free_r>
 800930c:	230c      	movs	r3, #12
 800930e:	f8ca 3000 	str.w	r3, [sl]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7e9      	b.n	80092f4 <__ssputs_r+0x88>

08009320 <_svfiprintf_r>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	4698      	mov	r8, r3
 8009326:	898b      	ldrh	r3, [r1, #12]
 8009328:	4607      	mov	r7, r0
 800932a:	061b      	lsls	r3, r3, #24
 800932c:	460d      	mov	r5, r1
 800932e:	4614      	mov	r4, r2
 8009330:	b09d      	sub	sp, #116	; 0x74
 8009332:	d50e      	bpl.n	8009352 <_svfiprintf_r+0x32>
 8009334:	690b      	ldr	r3, [r1, #16]
 8009336:	b963      	cbnz	r3, 8009352 <_svfiprintf_r+0x32>
 8009338:	2140      	movs	r1, #64	; 0x40
 800933a:	f7ff ff0b 	bl	8009154 <_malloc_r>
 800933e:	6028      	str	r0, [r5, #0]
 8009340:	6128      	str	r0, [r5, #16]
 8009342:	b920      	cbnz	r0, 800934e <_svfiprintf_r+0x2e>
 8009344:	230c      	movs	r3, #12
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e0d0      	b.n	80094f0 <_svfiprintf_r+0x1d0>
 800934e:	2340      	movs	r3, #64	; 0x40
 8009350:	616b      	str	r3, [r5, #20]
 8009352:	2300      	movs	r3, #0
 8009354:	9309      	str	r3, [sp, #36]	; 0x24
 8009356:	2320      	movs	r3, #32
 8009358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800935c:	2330      	movs	r3, #48	; 0x30
 800935e:	f04f 0901 	mov.w	r9, #1
 8009362:	f8cd 800c 	str.w	r8, [sp, #12]
 8009366:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009508 <_svfiprintf_r+0x1e8>
 800936a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800936e:	4623      	mov	r3, r4
 8009370:	469a      	mov	sl, r3
 8009372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009376:	b10a      	cbz	r2, 800937c <_svfiprintf_r+0x5c>
 8009378:	2a25      	cmp	r2, #37	; 0x25
 800937a:	d1f9      	bne.n	8009370 <_svfiprintf_r+0x50>
 800937c:	ebba 0b04 	subs.w	fp, sl, r4
 8009380:	d00b      	beq.n	800939a <_svfiprintf_r+0x7a>
 8009382:	465b      	mov	r3, fp
 8009384:	4622      	mov	r2, r4
 8009386:	4629      	mov	r1, r5
 8009388:	4638      	mov	r0, r7
 800938a:	f7ff ff6f 	bl	800926c <__ssputs_r>
 800938e:	3001      	adds	r0, #1
 8009390:	f000 80a9 	beq.w	80094e6 <_svfiprintf_r+0x1c6>
 8009394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009396:	445a      	add	r2, fp
 8009398:	9209      	str	r2, [sp, #36]	; 0x24
 800939a:	f89a 3000 	ldrb.w	r3, [sl]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80a1 	beq.w	80094e6 <_svfiprintf_r+0x1c6>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f04f 32ff 	mov.w	r2, #4294967295
 80093aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ae:	f10a 0a01 	add.w	sl, sl, #1
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	9307      	str	r3, [sp, #28]
 80093b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ba:	931a      	str	r3, [sp, #104]	; 0x68
 80093bc:	4654      	mov	r4, sl
 80093be:	2205      	movs	r2, #5
 80093c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c4:	4850      	ldr	r0, [pc, #320]	; (8009508 <_svfiprintf_r+0x1e8>)
 80093c6:	f000 fa67 	bl	8009898 <memchr>
 80093ca:	9a04      	ldr	r2, [sp, #16]
 80093cc:	b9d8      	cbnz	r0, 8009406 <_svfiprintf_r+0xe6>
 80093ce:	06d0      	lsls	r0, r2, #27
 80093d0:	bf44      	itt	mi
 80093d2:	2320      	movmi	r3, #32
 80093d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d8:	0711      	lsls	r1, r2, #28
 80093da:	bf44      	itt	mi
 80093dc:	232b      	movmi	r3, #43	; 0x2b
 80093de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093e2:	f89a 3000 	ldrb.w	r3, [sl]
 80093e6:	2b2a      	cmp	r3, #42	; 0x2a
 80093e8:	d015      	beq.n	8009416 <_svfiprintf_r+0xf6>
 80093ea:	4654      	mov	r4, sl
 80093ec:	2000      	movs	r0, #0
 80093ee:	f04f 0c0a 	mov.w	ip, #10
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	4621      	mov	r1, r4
 80093f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093fa:	3b30      	subs	r3, #48	; 0x30
 80093fc:	2b09      	cmp	r3, #9
 80093fe:	d94d      	bls.n	800949c <_svfiprintf_r+0x17c>
 8009400:	b1b0      	cbz	r0, 8009430 <_svfiprintf_r+0x110>
 8009402:	9207      	str	r2, [sp, #28]
 8009404:	e014      	b.n	8009430 <_svfiprintf_r+0x110>
 8009406:	eba0 0308 	sub.w	r3, r0, r8
 800940a:	fa09 f303 	lsl.w	r3, r9, r3
 800940e:	4313      	orrs	r3, r2
 8009410:	46a2      	mov	sl, r4
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	e7d2      	b.n	80093bc <_svfiprintf_r+0x9c>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	1d19      	adds	r1, r3, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	9103      	str	r1, [sp, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	bfbb      	ittet	lt
 8009422:	425b      	neglt	r3, r3
 8009424:	f042 0202 	orrlt.w	r2, r2, #2
 8009428:	9307      	strge	r3, [sp, #28]
 800942a:	9307      	strlt	r3, [sp, #28]
 800942c:	bfb8      	it	lt
 800942e:	9204      	strlt	r2, [sp, #16]
 8009430:	7823      	ldrb	r3, [r4, #0]
 8009432:	2b2e      	cmp	r3, #46	; 0x2e
 8009434:	d10c      	bne.n	8009450 <_svfiprintf_r+0x130>
 8009436:	7863      	ldrb	r3, [r4, #1]
 8009438:	2b2a      	cmp	r3, #42	; 0x2a
 800943a:	d134      	bne.n	80094a6 <_svfiprintf_r+0x186>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	3402      	adds	r4, #2
 8009440:	1d1a      	adds	r2, r3, #4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	9203      	str	r2, [sp, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	bfb8      	it	lt
 800944a:	f04f 33ff 	movlt.w	r3, #4294967295
 800944e:	9305      	str	r3, [sp, #20]
 8009450:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800950c <_svfiprintf_r+0x1ec>
 8009454:	2203      	movs	r2, #3
 8009456:	4650      	mov	r0, sl
 8009458:	7821      	ldrb	r1, [r4, #0]
 800945a:	f000 fa1d 	bl	8009898 <memchr>
 800945e:	b138      	cbz	r0, 8009470 <_svfiprintf_r+0x150>
 8009460:	2240      	movs	r2, #64	; 0x40
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	eba0 000a 	sub.w	r0, r0, sl
 8009468:	4082      	lsls	r2, r0
 800946a:	4313      	orrs	r3, r2
 800946c:	3401      	adds	r4, #1
 800946e:	9304      	str	r3, [sp, #16]
 8009470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009474:	2206      	movs	r2, #6
 8009476:	4826      	ldr	r0, [pc, #152]	; (8009510 <_svfiprintf_r+0x1f0>)
 8009478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800947c:	f000 fa0c 	bl	8009898 <memchr>
 8009480:	2800      	cmp	r0, #0
 8009482:	d038      	beq.n	80094f6 <_svfiprintf_r+0x1d6>
 8009484:	4b23      	ldr	r3, [pc, #140]	; (8009514 <_svfiprintf_r+0x1f4>)
 8009486:	bb1b      	cbnz	r3, 80094d0 <_svfiprintf_r+0x1b0>
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	3307      	adds	r3, #7
 800948c:	f023 0307 	bic.w	r3, r3, #7
 8009490:	3308      	adds	r3, #8
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009496:	4433      	add	r3, r6
 8009498:	9309      	str	r3, [sp, #36]	; 0x24
 800949a:	e768      	b.n	800936e <_svfiprintf_r+0x4e>
 800949c:	460c      	mov	r4, r1
 800949e:	2001      	movs	r0, #1
 80094a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094a4:	e7a6      	b.n	80093f4 <_svfiprintf_r+0xd4>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f04f 0c0a 	mov.w	ip, #10
 80094ac:	4619      	mov	r1, r3
 80094ae:	3401      	adds	r4, #1
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	4620      	mov	r0, r4
 80094b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b8:	3a30      	subs	r2, #48	; 0x30
 80094ba:	2a09      	cmp	r2, #9
 80094bc:	d903      	bls.n	80094c6 <_svfiprintf_r+0x1a6>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0c6      	beq.n	8009450 <_svfiprintf_r+0x130>
 80094c2:	9105      	str	r1, [sp, #20]
 80094c4:	e7c4      	b.n	8009450 <_svfiprintf_r+0x130>
 80094c6:	4604      	mov	r4, r0
 80094c8:	2301      	movs	r3, #1
 80094ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ce:	e7f0      	b.n	80094b2 <_svfiprintf_r+0x192>
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4638      	mov	r0, r7
 80094d8:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <_svfiprintf_r+0x1f8>)
 80094da:	a904      	add	r1, sp, #16
 80094dc:	f3af 8000 	nop.w
 80094e0:	1c42      	adds	r2, r0, #1
 80094e2:	4606      	mov	r6, r0
 80094e4:	d1d6      	bne.n	8009494 <_svfiprintf_r+0x174>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	065b      	lsls	r3, r3, #25
 80094ea:	f53f af2d 	bmi.w	8009348 <_svfiprintf_r+0x28>
 80094ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094f0:	b01d      	add	sp, #116	; 0x74
 80094f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	462a      	mov	r2, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <_svfiprintf_r+0x1f8>)
 8009500:	a904      	add	r1, sp, #16
 8009502:	f000 f87d 	bl	8009600 <_printf_i>
 8009506:	e7eb      	b.n	80094e0 <_svfiprintf_r+0x1c0>
 8009508:	0800a106 	.word	0x0800a106
 800950c:	0800a10c 	.word	0x0800a10c
 8009510:	0800a110 	.word	0x0800a110
 8009514:	00000000 	.word	0x00000000
 8009518:	0800926d 	.word	0x0800926d

0800951c <_printf_common>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	4616      	mov	r6, r2
 8009522:	4699      	mov	r9, r3
 8009524:	688a      	ldr	r2, [r1, #8]
 8009526:	690b      	ldr	r3, [r1, #16]
 8009528:	4607      	mov	r7, r0
 800952a:	4293      	cmp	r3, r2
 800952c:	bfb8      	it	lt
 800952e:	4613      	movlt	r3, r2
 8009530:	6033      	str	r3, [r6, #0]
 8009532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009536:	460c      	mov	r4, r1
 8009538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800953c:	b10a      	cbz	r2, 8009542 <_printf_common+0x26>
 800953e:	3301      	adds	r3, #1
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	0699      	lsls	r1, r3, #26
 8009546:	bf42      	ittt	mi
 8009548:	6833      	ldrmi	r3, [r6, #0]
 800954a:	3302      	addmi	r3, #2
 800954c:	6033      	strmi	r3, [r6, #0]
 800954e:	6825      	ldr	r5, [r4, #0]
 8009550:	f015 0506 	ands.w	r5, r5, #6
 8009554:	d106      	bne.n	8009564 <_printf_common+0x48>
 8009556:	f104 0a19 	add.w	sl, r4, #25
 800955a:	68e3      	ldr	r3, [r4, #12]
 800955c:	6832      	ldr	r2, [r6, #0]
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	42ab      	cmp	r3, r5
 8009562:	dc2b      	bgt.n	80095bc <_printf_common+0xa0>
 8009564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009568:	1e13      	subs	r3, r2, #0
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	bf18      	it	ne
 800956e:	2301      	movne	r3, #1
 8009570:	0692      	lsls	r2, r2, #26
 8009572:	d430      	bmi.n	80095d6 <_printf_common+0xba>
 8009574:	4649      	mov	r1, r9
 8009576:	4638      	mov	r0, r7
 8009578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d023      	beq.n	80095ca <_printf_common+0xae>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	6922      	ldr	r2, [r4, #16]
 8009586:	f003 0306 	and.w	r3, r3, #6
 800958a:	2b04      	cmp	r3, #4
 800958c:	bf14      	ite	ne
 800958e:	2500      	movne	r5, #0
 8009590:	6833      	ldreq	r3, [r6, #0]
 8009592:	f04f 0600 	mov.w	r6, #0
 8009596:	bf08      	it	eq
 8009598:	68e5      	ldreq	r5, [r4, #12]
 800959a:	f104 041a 	add.w	r4, r4, #26
 800959e:	bf08      	it	eq
 80095a0:	1aed      	subeq	r5, r5, r3
 80095a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80095a6:	bf08      	it	eq
 80095a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ac:	4293      	cmp	r3, r2
 80095ae:	bfc4      	itt	gt
 80095b0:	1a9b      	subgt	r3, r3, r2
 80095b2:	18ed      	addgt	r5, r5, r3
 80095b4:	42b5      	cmp	r5, r6
 80095b6:	d11a      	bne.n	80095ee <_printf_common+0xd2>
 80095b8:	2000      	movs	r0, #0
 80095ba:	e008      	b.n	80095ce <_printf_common+0xb2>
 80095bc:	2301      	movs	r3, #1
 80095be:	4652      	mov	r2, sl
 80095c0:	4649      	mov	r1, r9
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c0      	blx	r8
 80095c6:	3001      	adds	r0, #1
 80095c8:	d103      	bne.n	80095d2 <_printf_common+0xb6>
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	3501      	adds	r5, #1
 80095d4:	e7c1      	b.n	800955a <_printf_common+0x3e>
 80095d6:	2030      	movs	r0, #48	; 0x30
 80095d8:	18e1      	adds	r1, r4, r3
 80095da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095e4:	4422      	add	r2, r4
 80095e6:	3302      	adds	r3, #2
 80095e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095ec:	e7c2      	b.n	8009574 <_printf_common+0x58>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4622      	mov	r2, r4
 80095f2:	4649      	mov	r1, r9
 80095f4:	4638      	mov	r0, r7
 80095f6:	47c0      	blx	r8
 80095f8:	3001      	adds	r0, #1
 80095fa:	d0e6      	beq.n	80095ca <_printf_common+0xae>
 80095fc:	3601      	adds	r6, #1
 80095fe:	e7d9      	b.n	80095b4 <_printf_common+0x98>

08009600 <_printf_i>:
 8009600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	7e0f      	ldrb	r7, [r1, #24]
 8009606:	4691      	mov	r9, r2
 8009608:	2f78      	cmp	r7, #120	; 0x78
 800960a:	4680      	mov	r8, r0
 800960c:	460c      	mov	r4, r1
 800960e:	469a      	mov	sl, r3
 8009610:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009616:	d807      	bhi.n	8009628 <_printf_i+0x28>
 8009618:	2f62      	cmp	r7, #98	; 0x62
 800961a:	d80a      	bhi.n	8009632 <_printf_i+0x32>
 800961c:	2f00      	cmp	r7, #0
 800961e:	f000 80d5 	beq.w	80097cc <_printf_i+0x1cc>
 8009622:	2f58      	cmp	r7, #88	; 0x58
 8009624:	f000 80c1 	beq.w	80097aa <_printf_i+0x1aa>
 8009628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800962c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009630:	e03a      	b.n	80096a8 <_printf_i+0xa8>
 8009632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009636:	2b15      	cmp	r3, #21
 8009638:	d8f6      	bhi.n	8009628 <_printf_i+0x28>
 800963a:	a101      	add	r1, pc, #4	; (adr r1, 8009640 <_printf_i+0x40>)
 800963c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009640:	08009699 	.word	0x08009699
 8009644:	080096ad 	.word	0x080096ad
 8009648:	08009629 	.word	0x08009629
 800964c:	08009629 	.word	0x08009629
 8009650:	08009629 	.word	0x08009629
 8009654:	08009629 	.word	0x08009629
 8009658:	080096ad 	.word	0x080096ad
 800965c:	08009629 	.word	0x08009629
 8009660:	08009629 	.word	0x08009629
 8009664:	08009629 	.word	0x08009629
 8009668:	08009629 	.word	0x08009629
 800966c:	080097b3 	.word	0x080097b3
 8009670:	080096d9 	.word	0x080096d9
 8009674:	0800976d 	.word	0x0800976d
 8009678:	08009629 	.word	0x08009629
 800967c:	08009629 	.word	0x08009629
 8009680:	080097d5 	.word	0x080097d5
 8009684:	08009629 	.word	0x08009629
 8009688:	080096d9 	.word	0x080096d9
 800968c:	08009629 	.word	0x08009629
 8009690:	08009629 	.word	0x08009629
 8009694:	08009775 	.word	0x08009775
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	1d1a      	adds	r2, r3, #4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	602a      	str	r2, [r5, #0]
 80096a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096a8:	2301      	movs	r3, #1
 80096aa:	e0a0      	b.n	80097ee <_printf_i+0x1ee>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	0607      	lsls	r7, r0, #24
 80096b2:	f103 0104 	add.w	r1, r3, #4
 80096b6:	6029      	str	r1, [r5, #0]
 80096b8:	d501      	bpl.n	80096be <_printf_i+0xbe>
 80096ba:	681e      	ldr	r6, [r3, #0]
 80096bc:	e003      	b.n	80096c6 <_printf_i+0xc6>
 80096be:	0646      	lsls	r6, r0, #25
 80096c0:	d5fb      	bpl.n	80096ba <_printf_i+0xba>
 80096c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096c6:	2e00      	cmp	r6, #0
 80096c8:	da03      	bge.n	80096d2 <_printf_i+0xd2>
 80096ca:	232d      	movs	r3, #45	; 0x2d
 80096cc:	4276      	negs	r6, r6
 80096ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d2:	230a      	movs	r3, #10
 80096d4:	4859      	ldr	r0, [pc, #356]	; (800983c <_printf_i+0x23c>)
 80096d6:	e012      	b.n	80096fe <_printf_i+0xfe>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	6029      	str	r1, [r5, #0]
 80096e0:	0605      	lsls	r5, r0, #24
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0xe8>
 80096e4:	681e      	ldr	r6, [r3, #0]
 80096e6:	e002      	b.n	80096ee <_printf_i+0xee>
 80096e8:	0641      	lsls	r1, r0, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0xe4>
 80096ec:	881e      	ldrh	r6, [r3, #0]
 80096ee:	2f6f      	cmp	r7, #111	; 0x6f
 80096f0:	bf0c      	ite	eq
 80096f2:	2308      	moveq	r3, #8
 80096f4:	230a      	movne	r3, #10
 80096f6:	4851      	ldr	r0, [pc, #324]	; (800983c <_printf_i+0x23c>)
 80096f8:	2100      	movs	r1, #0
 80096fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096fe:	6865      	ldr	r5, [r4, #4]
 8009700:	2d00      	cmp	r5, #0
 8009702:	bfa8      	it	ge
 8009704:	6821      	ldrge	r1, [r4, #0]
 8009706:	60a5      	str	r5, [r4, #8]
 8009708:	bfa4      	itt	ge
 800970a:	f021 0104 	bicge.w	r1, r1, #4
 800970e:	6021      	strge	r1, [r4, #0]
 8009710:	b90e      	cbnz	r6, 8009716 <_printf_i+0x116>
 8009712:	2d00      	cmp	r5, #0
 8009714:	d04b      	beq.n	80097ae <_printf_i+0x1ae>
 8009716:	4615      	mov	r5, r2
 8009718:	fbb6 f1f3 	udiv	r1, r6, r3
 800971c:	fb03 6711 	mls	r7, r3, r1, r6
 8009720:	5dc7      	ldrb	r7, [r0, r7]
 8009722:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009726:	4637      	mov	r7, r6
 8009728:	42bb      	cmp	r3, r7
 800972a:	460e      	mov	r6, r1
 800972c:	d9f4      	bls.n	8009718 <_printf_i+0x118>
 800972e:	2b08      	cmp	r3, #8
 8009730:	d10b      	bne.n	800974a <_printf_i+0x14a>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	07de      	lsls	r6, r3, #31
 8009736:	d508      	bpl.n	800974a <_printf_i+0x14a>
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	6861      	ldr	r1, [r4, #4]
 800973c:	4299      	cmp	r1, r3
 800973e:	bfde      	ittt	le
 8009740:	2330      	movle	r3, #48	; 0x30
 8009742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800974a:	1b52      	subs	r2, r2, r5
 800974c:	6122      	str	r2, [r4, #16]
 800974e:	464b      	mov	r3, r9
 8009750:	4621      	mov	r1, r4
 8009752:	4640      	mov	r0, r8
 8009754:	f8cd a000 	str.w	sl, [sp]
 8009758:	aa03      	add	r2, sp, #12
 800975a:	f7ff fedf 	bl	800951c <_printf_common>
 800975e:	3001      	adds	r0, #1
 8009760:	d14a      	bne.n	80097f8 <_printf_i+0x1f8>
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	b004      	add	sp, #16
 8009768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	f043 0320 	orr.w	r3, r3, #32
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	2778      	movs	r7, #120	; 0x78
 8009776:	4832      	ldr	r0, [pc, #200]	; (8009840 <_printf_i+0x240>)
 8009778:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	6829      	ldr	r1, [r5, #0]
 8009780:	061f      	lsls	r7, r3, #24
 8009782:	f851 6b04 	ldr.w	r6, [r1], #4
 8009786:	d402      	bmi.n	800978e <_printf_i+0x18e>
 8009788:	065f      	lsls	r7, r3, #25
 800978a:	bf48      	it	mi
 800978c:	b2b6      	uxthmi	r6, r6
 800978e:	07df      	lsls	r7, r3, #31
 8009790:	bf48      	it	mi
 8009792:	f043 0320 	orrmi.w	r3, r3, #32
 8009796:	6029      	str	r1, [r5, #0]
 8009798:	bf48      	it	mi
 800979a:	6023      	strmi	r3, [r4, #0]
 800979c:	b91e      	cbnz	r6, 80097a6 <_printf_i+0x1a6>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	f023 0320 	bic.w	r3, r3, #32
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	2310      	movs	r3, #16
 80097a8:	e7a6      	b.n	80096f8 <_printf_i+0xf8>
 80097aa:	4824      	ldr	r0, [pc, #144]	; (800983c <_printf_i+0x23c>)
 80097ac:	e7e4      	b.n	8009778 <_printf_i+0x178>
 80097ae:	4615      	mov	r5, r2
 80097b0:	e7bd      	b.n	800972e <_printf_i+0x12e>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	6826      	ldr	r6, [r4, #0]
 80097b6:	1d18      	adds	r0, r3, #4
 80097b8:	6961      	ldr	r1, [r4, #20]
 80097ba:	6028      	str	r0, [r5, #0]
 80097bc:	0635      	lsls	r5, r6, #24
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	d501      	bpl.n	80097c6 <_printf_i+0x1c6>
 80097c2:	6019      	str	r1, [r3, #0]
 80097c4:	e002      	b.n	80097cc <_printf_i+0x1cc>
 80097c6:	0670      	lsls	r0, r6, #25
 80097c8:	d5fb      	bpl.n	80097c2 <_printf_i+0x1c2>
 80097ca:	8019      	strh	r1, [r3, #0]
 80097cc:	2300      	movs	r3, #0
 80097ce:	4615      	mov	r5, r2
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	e7bc      	b.n	800974e <_printf_i+0x14e>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	2100      	movs	r1, #0
 80097d8:	1d1a      	adds	r2, r3, #4
 80097da:	602a      	str	r2, [r5, #0]
 80097dc:	681d      	ldr	r5, [r3, #0]
 80097de:	6862      	ldr	r2, [r4, #4]
 80097e0:	4628      	mov	r0, r5
 80097e2:	f000 f859 	bl	8009898 <memchr>
 80097e6:	b108      	cbz	r0, 80097ec <_printf_i+0x1ec>
 80097e8:	1b40      	subs	r0, r0, r5
 80097ea:	6060      	str	r0, [r4, #4]
 80097ec:	6863      	ldr	r3, [r4, #4]
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	2300      	movs	r3, #0
 80097f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097f6:	e7aa      	b.n	800974e <_printf_i+0x14e>
 80097f8:	462a      	mov	r2, r5
 80097fa:	4649      	mov	r1, r9
 80097fc:	4640      	mov	r0, r8
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	47d0      	blx	sl
 8009802:	3001      	adds	r0, #1
 8009804:	d0ad      	beq.n	8009762 <_printf_i+0x162>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	079b      	lsls	r3, r3, #30
 800980a:	d413      	bmi.n	8009834 <_printf_i+0x234>
 800980c:	68e0      	ldr	r0, [r4, #12]
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	4298      	cmp	r0, r3
 8009812:	bfb8      	it	lt
 8009814:	4618      	movlt	r0, r3
 8009816:	e7a6      	b.n	8009766 <_printf_i+0x166>
 8009818:	2301      	movs	r3, #1
 800981a:	4632      	mov	r2, r6
 800981c:	4649      	mov	r1, r9
 800981e:	4640      	mov	r0, r8
 8009820:	47d0      	blx	sl
 8009822:	3001      	adds	r0, #1
 8009824:	d09d      	beq.n	8009762 <_printf_i+0x162>
 8009826:	3501      	adds	r5, #1
 8009828:	68e3      	ldr	r3, [r4, #12]
 800982a:	9903      	ldr	r1, [sp, #12]
 800982c:	1a5b      	subs	r3, r3, r1
 800982e:	42ab      	cmp	r3, r5
 8009830:	dcf2      	bgt.n	8009818 <_printf_i+0x218>
 8009832:	e7eb      	b.n	800980c <_printf_i+0x20c>
 8009834:	2500      	movs	r5, #0
 8009836:	f104 0619 	add.w	r6, r4, #25
 800983a:	e7f5      	b.n	8009828 <_printf_i+0x228>
 800983c:	0800a117 	.word	0x0800a117
 8009840:	0800a128 	.word	0x0800a128

08009844 <memmove>:
 8009844:	4288      	cmp	r0, r1
 8009846:	b510      	push	{r4, lr}
 8009848:	eb01 0402 	add.w	r4, r1, r2
 800984c:	d902      	bls.n	8009854 <memmove+0x10>
 800984e:	4284      	cmp	r4, r0
 8009850:	4623      	mov	r3, r4
 8009852:	d807      	bhi.n	8009864 <memmove+0x20>
 8009854:	1e43      	subs	r3, r0, #1
 8009856:	42a1      	cmp	r1, r4
 8009858:	d008      	beq.n	800986c <memmove+0x28>
 800985a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800985e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009862:	e7f8      	b.n	8009856 <memmove+0x12>
 8009864:	4601      	mov	r1, r0
 8009866:	4402      	add	r2, r0
 8009868:	428a      	cmp	r2, r1
 800986a:	d100      	bne.n	800986e <memmove+0x2a>
 800986c:	bd10      	pop	{r4, pc}
 800986e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009876:	e7f7      	b.n	8009868 <memmove+0x24>

08009878 <_sbrk_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	2300      	movs	r3, #0
 800987c:	4d05      	ldr	r5, [pc, #20]	; (8009894 <_sbrk_r+0x1c>)
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f9 f99c 	bl	8002bc0 <_sbrk>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_sbrk_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_sbrk_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200016d8 	.word	0x200016d8

08009898 <memchr>:
 8009898:	4603      	mov	r3, r0
 800989a:	b510      	push	{r4, lr}
 800989c:	b2c9      	uxtb	r1, r1
 800989e:	4402      	add	r2, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	d101      	bne.n	80098aa <memchr+0x12>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e003      	b.n	80098b2 <memchr+0x1a>
 80098aa:	7804      	ldrb	r4, [r0, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	428c      	cmp	r4, r1
 80098b0:	d1f6      	bne.n	80098a0 <memchr+0x8>
 80098b2:	bd10      	pop	{r4, pc}

080098b4 <_realloc_r>:
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	4680      	mov	r8, r0
 80098ba:	4614      	mov	r4, r2
 80098bc:	460e      	mov	r6, r1
 80098be:	b921      	cbnz	r1, 80098ca <_realloc_r+0x16>
 80098c0:	4611      	mov	r1, r2
 80098c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	f7ff bc45 	b.w	8009154 <_malloc_r>
 80098ca:	b92a      	cbnz	r2, 80098d8 <_realloc_r+0x24>
 80098cc:	f7ff fbda 	bl	8009084 <_free_r>
 80098d0:	4625      	mov	r5, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d8:	f000 f81b 	bl	8009912 <_malloc_usable_size_r>
 80098dc:	4284      	cmp	r4, r0
 80098de:	4607      	mov	r7, r0
 80098e0:	d802      	bhi.n	80098e8 <_realloc_r+0x34>
 80098e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098e6:	d812      	bhi.n	800990e <_realloc_r+0x5a>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4640      	mov	r0, r8
 80098ec:	f7ff fc32 	bl	8009154 <_malloc_r>
 80098f0:	4605      	mov	r5, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d0ed      	beq.n	80098d2 <_realloc_r+0x1e>
 80098f6:	42bc      	cmp	r4, r7
 80098f8:	4622      	mov	r2, r4
 80098fa:	4631      	mov	r1, r6
 80098fc:	bf28      	it	cs
 80098fe:	463a      	movcs	r2, r7
 8009900:	f7ff fbb2 	bl	8009068 <memcpy>
 8009904:	4631      	mov	r1, r6
 8009906:	4640      	mov	r0, r8
 8009908:	f7ff fbbc 	bl	8009084 <_free_r>
 800990c:	e7e1      	b.n	80098d2 <_realloc_r+0x1e>
 800990e:	4635      	mov	r5, r6
 8009910:	e7df      	b.n	80098d2 <_realloc_r+0x1e>

08009912 <_malloc_usable_size_r>:
 8009912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009916:	1f18      	subs	r0, r3, #4
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbc      	itt	lt
 800991c:	580b      	ldrlt	r3, [r1, r0]
 800991e:	18c0      	addlt	r0, r0, r3
 8009920:	4770      	bx	lr

08009922 <atan2>:
 8009922:	f000 bad1 	b.w	8009ec8 <__ieee754_atan2>

08009926 <sqrt>:
 8009926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009928:	4606      	mov	r6, r0
 800992a:	460f      	mov	r7, r1
 800992c:	f000 f9ae 	bl	8009c8c <__ieee754_sqrt>
 8009930:	4632      	mov	r2, r6
 8009932:	4604      	mov	r4, r0
 8009934:	460d      	mov	r5, r1
 8009936:	463b      	mov	r3, r7
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f7 f8d6 	bl	8000aec <__aeabi_dcmpun>
 8009940:	b990      	cbnz	r0, 8009968 <sqrt+0x42>
 8009942:	2200      	movs	r2, #0
 8009944:	2300      	movs	r3, #0
 8009946:	4630      	mov	r0, r6
 8009948:	4639      	mov	r1, r7
 800994a:	f7f7 f8a7 	bl	8000a9c <__aeabi_dcmplt>
 800994e:	b158      	cbz	r0, 8009968 <sqrt+0x42>
 8009950:	f7ff fb5e 	bl	8009010 <__errno>
 8009954:	2321      	movs	r3, #33	; 0x21
 8009956:	2200      	movs	r2, #0
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	4610      	mov	r0, r2
 800995e:	4619      	mov	r1, r3
 8009960:	f7f6 ff54 	bl	800080c <__aeabi_ddiv>
 8009964:	4604      	mov	r4, r0
 8009966:	460d      	mov	r5, r1
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009970 <atan>:
 8009970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	4bb6      	ldr	r3, [pc, #728]	; (8009c50 <atan+0x2e0>)
 8009976:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800997a:	429e      	cmp	r6, r3
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	468b      	mov	fp, r1
 8009982:	dd17      	ble.n	80099b4 <atan+0x44>
 8009984:	4bb3      	ldr	r3, [pc, #716]	; (8009c54 <atan+0x2e4>)
 8009986:	429e      	cmp	r6, r3
 8009988:	dc01      	bgt.n	800998e <atan+0x1e>
 800998a:	d109      	bne.n	80099a0 <atan+0x30>
 800998c:	b140      	cbz	r0, 80099a0 <atan+0x30>
 800998e:	4622      	mov	r2, r4
 8009990:	462b      	mov	r3, r5
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f6 fc59 	bl	800024c <__adddf3>
 800999a:	4604      	mov	r4, r0
 800999c:	460d      	mov	r5, r1
 800999e:	e005      	b.n	80099ac <atan+0x3c>
 80099a0:	f1bb 0f00 	cmp.w	fp, #0
 80099a4:	4cac      	ldr	r4, [pc, #688]	; (8009c58 <atan+0x2e8>)
 80099a6:	f300 8121 	bgt.w	8009bec <atan+0x27c>
 80099aa:	4dac      	ldr	r5, [pc, #688]	; (8009c5c <atan+0x2ec>)
 80099ac:	4620      	mov	r0, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	4baa      	ldr	r3, [pc, #680]	; (8009c60 <atan+0x2f0>)
 80099b6:	429e      	cmp	r6, r3
 80099b8:	dc11      	bgt.n	80099de <atan+0x6e>
 80099ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099be:	429e      	cmp	r6, r3
 80099c0:	dc0a      	bgt.n	80099d8 <atan+0x68>
 80099c2:	a38b      	add	r3, pc, #556	; (adr r3, 8009bf0 <atan+0x280>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fc40 	bl	800024c <__adddf3>
 80099cc:	2200      	movs	r2, #0
 80099ce:	4ba5      	ldr	r3, [pc, #660]	; (8009c64 <atan+0x2f4>)
 80099d0:	f7f7 f882 	bl	8000ad8 <__aeabi_dcmpgt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1e9      	bne.n	80099ac <atan+0x3c>
 80099d8:	f04f 3aff 	mov.w	sl, #4294967295
 80099dc:	e027      	b.n	8009a2e <atan+0xbe>
 80099de:	f000 f951 	bl	8009c84 <fabs>
 80099e2:	4ba1      	ldr	r3, [pc, #644]	; (8009c68 <atan+0x2f8>)
 80099e4:	4604      	mov	r4, r0
 80099e6:	429e      	cmp	r6, r3
 80099e8:	460d      	mov	r5, r1
 80099ea:	f300 80b8 	bgt.w	8009b5e <atan+0x1ee>
 80099ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099f2:	429e      	cmp	r6, r3
 80099f4:	f300 809c 	bgt.w	8009b30 <atan+0x1c0>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	f7f6 fc26 	bl	800024c <__adddf3>
 8009a00:	2200      	movs	r2, #0
 8009a02:	4b98      	ldr	r3, [pc, #608]	; (8009c64 <atan+0x2f4>)
 8009a04:	f7f6 fc20 	bl	8000248 <__aeabi_dsub>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fc19 	bl	800024c <__adddf3>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f6 fef3 	bl	800080c <__aeabi_ddiv>
 8009a26:	f04f 0a00 	mov.w	sl, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	4622      	mov	r2, r4
 8009a30:	462b      	mov	r3, r5
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fdbf 	bl	80005b8 <__aeabi_dmul>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4680      	mov	r8, r0
 8009a40:	4689      	mov	r9, r1
 8009a42:	f7f6 fdb9 	bl	80005b8 <__aeabi_dmul>
 8009a46:	a36c      	add	r3, pc, #432	; (adr r3, 8009bf8 <atan+0x288>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460f      	mov	r7, r1
 8009a50:	f7f6 fdb2 	bl	80005b8 <__aeabi_dmul>
 8009a54:	a36a      	add	r3, pc, #424	; (adr r3, 8009c00 <atan+0x290>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fbf7 	bl	800024c <__adddf3>
 8009a5e:	4632      	mov	r2, r6
 8009a60:	463b      	mov	r3, r7
 8009a62:	f7f6 fda9 	bl	80005b8 <__aeabi_dmul>
 8009a66:	a368      	add	r3, pc, #416	; (adr r3, 8009c08 <atan+0x298>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f7f6 fbee 	bl	800024c <__adddf3>
 8009a70:	4632      	mov	r2, r6
 8009a72:	463b      	mov	r3, r7
 8009a74:	f7f6 fda0 	bl	80005b8 <__aeabi_dmul>
 8009a78:	a365      	add	r3, pc, #404	; (adr r3, 8009c10 <atan+0x2a0>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fbe5 	bl	800024c <__adddf3>
 8009a82:	4632      	mov	r2, r6
 8009a84:	463b      	mov	r3, r7
 8009a86:	f7f6 fd97 	bl	80005b8 <__aeabi_dmul>
 8009a8a:	a363      	add	r3, pc, #396	; (adr r3, 8009c18 <atan+0x2a8>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fbdc 	bl	800024c <__adddf3>
 8009a94:	4632      	mov	r2, r6
 8009a96:	463b      	mov	r3, r7
 8009a98:	f7f6 fd8e 	bl	80005b8 <__aeabi_dmul>
 8009a9c:	a360      	add	r3, pc, #384	; (adr r3, 8009c20 <atan+0x2b0>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fbd3 	bl	800024c <__adddf3>
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	f7f6 fd85 	bl	80005b8 <__aeabi_dmul>
 8009aae:	a35e      	add	r3, pc, #376	; (adr r3, 8009c28 <atan+0x2b8>)
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f6 fd7c 	bl	80005b8 <__aeabi_dmul>
 8009ac0:	a35b      	add	r3, pc, #364	; (adr r3, 8009c30 <atan+0x2c0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fbbf 	bl	8000248 <__aeabi_dsub>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	f7f6 fd73 	bl	80005b8 <__aeabi_dmul>
 8009ad2:	a359      	add	r3, pc, #356	; (adr r3, 8009c38 <atan+0x2c8>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f7f6 fbb6 	bl	8000248 <__aeabi_dsub>
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	f7f6 fd6a 	bl	80005b8 <__aeabi_dmul>
 8009ae4:	a356      	add	r3, pc, #344	; (adr r3, 8009c40 <atan+0x2d0>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbad 	bl	8000248 <__aeabi_dsub>
 8009aee:	4632      	mov	r2, r6
 8009af0:	463b      	mov	r3, r7
 8009af2:	f7f6 fd61 	bl	80005b8 <__aeabi_dmul>
 8009af6:	a354      	add	r3, pc, #336	; (adr r3, 8009c48 <atan+0x2d8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f6 fba4 	bl	8000248 <__aeabi_dsub>
 8009b00:	4632      	mov	r2, r6
 8009b02:	463b      	mov	r3, r7
 8009b04:	f7f6 fd58 	bl	80005b8 <__aeabi_dmul>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7f6 fb9c 	bl	800024c <__adddf3>
 8009b14:	4622      	mov	r2, r4
 8009b16:	462b      	mov	r3, r5
 8009b18:	f7f6 fd4e 	bl	80005b8 <__aeabi_dmul>
 8009b1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	d144      	bne.n	8009bb0 <atan+0x240>
 8009b26:	4620      	mov	r0, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7f6 fb8d 	bl	8000248 <__aeabi_dsub>
 8009b2e:	e734      	b.n	800999a <atan+0x2a>
 8009b30:	2200      	movs	r2, #0
 8009b32:	4b4c      	ldr	r3, [pc, #304]	; (8009c64 <atan+0x2f4>)
 8009b34:	f7f6 fb88 	bl	8000248 <__aeabi_dsub>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	4b48      	ldr	r3, [pc, #288]	; (8009c64 <atan+0x2f4>)
 8009b44:	f7f6 fb82 	bl	800024c <__adddf3>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 fe5c 	bl	800080c <__aeabi_ddiv>
 8009b54:	f04f 0a01 	mov.w	sl, #1
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	e767      	b.n	8009a2e <atan+0xbe>
 8009b5e:	4b43      	ldr	r3, [pc, #268]	; (8009c6c <atan+0x2fc>)
 8009b60:	429e      	cmp	r6, r3
 8009b62:	da1a      	bge.n	8009b9a <atan+0x22a>
 8009b64:	2200      	movs	r2, #0
 8009b66:	4b42      	ldr	r3, [pc, #264]	; (8009c70 <atan+0x300>)
 8009b68:	f7f6 fb6e 	bl	8000248 <__aeabi_dsub>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	4b3e      	ldr	r3, [pc, #248]	; (8009c70 <atan+0x300>)
 8009b78:	f7f6 fd1e 	bl	80005b8 <__aeabi_dmul>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <atan+0x2f4>)
 8009b80:	f7f6 fb64 	bl	800024c <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 fe3e 	bl	800080c <__aeabi_ddiv>
 8009b90:	f04f 0a02 	mov.w	sl, #2
 8009b94:	4604      	mov	r4, r0
 8009b96:	460d      	mov	r5, r1
 8009b98:	e749      	b.n	8009a2e <atan+0xbe>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	4934      	ldr	r1, [pc, #208]	; (8009c74 <atan+0x304>)
 8009ba2:	f7f6 fe33 	bl	800080c <__aeabi_ddiv>
 8009ba6:	f04f 0a03 	mov.w	sl, #3
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	e73e      	b.n	8009a2e <atan+0xbe>
 8009bb0:	4b31      	ldr	r3, [pc, #196]	; (8009c78 <atan+0x308>)
 8009bb2:	4e32      	ldr	r6, [pc, #200]	; (8009c7c <atan+0x30c>)
 8009bb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fb44 	bl	8000248 <__aeabi_dsub>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	f7f6 fb40 	bl	8000248 <__aeabi_dsub>
 8009bc8:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bd4:	f7f6 fb38 	bl	8000248 <__aeabi_dsub>
 8009bd8:	f1bb 0f00 	cmp.w	fp, #0
 8009bdc:	4604      	mov	r4, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	f6bf aee4 	bge.w	80099ac <atan+0x3c>
 8009be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009be8:	461d      	mov	r5, r3
 8009bea:	e6df      	b.n	80099ac <atan+0x3c>
 8009bec:	4d24      	ldr	r5, [pc, #144]	; (8009c80 <atan+0x310>)
 8009bee:	e6dd      	b.n	80099ac <atan+0x3c>
 8009bf0:	8800759c 	.word	0x8800759c
 8009bf4:	7e37e43c 	.word	0x7e37e43c
 8009bf8:	e322da11 	.word	0xe322da11
 8009bfc:	3f90ad3a 	.word	0x3f90ad3a
 8009c00:	24760deb 	.word	0x24760deb
 8009c04:	3fa97b4b 	.word	0x3fa97b4b
 8009c08:	a0d03d51 	.word	0xa0d03d51
 8009c0c:	3fb10d66 	.word	0x3fb10d66
 8009c10:	c54c206e 	.word	0xc54c206e
 8009c14:	3fb745cd 	.word	0x3fb745cd
 8009c18:	920083ff 	.word	0x920083ff
 8009c1c:	3fc24924 	.word	0x3fc24924
 8009c20:	5555550d 	.word	0x5555550d
 8009c24:	3fd55555 	.word	0x3fd55555
 8009c28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c2c:	bfa2b444 	.word	0xbfa2b444
 8009c30:	52defd9a 	.word	0x52defd9a
 8009c34:	3fadde2d 	.word	0x3fadde2d
 8009c38:	af749a6d 	.word	0xaf749a6d
 8009c3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c40:	fe231671 	.word	0xfe231671
 8009c44:	3fbc71c6 	.word	0x3fbc71c6
 8009c48:	9998ebc4 	.word	0x9998ebc4
 8009c4c:	3fc99999 	.word	0x3fc99999
 8009c50:	440fffff 	.word	0x440fffff
 8009c54:	7ff00000 	.word	0x7ff00000
 8009c58:	54442d18 	.word	0x54442d18
 8009c5c:	bff921fb 	.word	0xbff921fb
 8009c60:	3fdbffff 	.word	0x3fdbffff
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	3ff2ffff 	.word	0x3ff2ffff
 8009c6c:	40038000 	.word	0x40038000
 8009c70:	3ff80000 	.word	0x3ff80000
 8009c74:	bff00000 	.word	0xbff00000
 8009c78:	0800a160 	.word	0x0800a160
 8009c7c:	0800a140 	.word	0x0800a140
 8009c80:	3ff921fb 	.word	0x3ff921fb

08009c84 <fabs>:
 8009c84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4770      	bx	lr

08009c8c <__ieee754_sqrt>:
 8009c8c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009e30 <__ieee754_sqrt+0x1a4>
 8009c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	ea3c 0c01 	bics.w	ip, ip, r1
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	460a      	mov	r2, r1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d10e      	bne.n	8009cc2 <__ieee754_sqrt+0x36>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	f7f6 fc87 	bl	80005b8 <__aeabi_dmul>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4630      	mov	r0, r6
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 facb 	bl	800024c <__adddf3>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460d      	mov	r5, r1
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	dc0d      	bgt.n	8009ce2 <__ieee754_sqrt+0x56>
 8009cc6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009cca:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009cce:	d0f4      	beq.n	8009cba <__ieee754_sqrt+0x2e>
 8009cd0:	b139      	cbz	r1, 8009ce2 <__ieee754_sqrt+0x56>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	f7f6 fab8 	bl	8000248 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	f7f6 fd96 	bl	800080c <__aeabi_ddiv>
 8009ce0:	e7e9      	b.n	8009cb6 <__ieee754_sqrt+0x2a>
 8009ce2:	1512      	asrs	r2, r2, #20
 8009ce4:	f000 8089 	beq.w	8009dfa <__ieee754_sqrt+0x16e>
 8009ce8:	2500      	movs	r5, #0
 8009cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf6:	07d2      	lsls	r2, r2, #31
 8009cf8:	bf5c      	itt	pl
 8009cfa:	005b      	lslpl	r3, r3, #1
 8009cfc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009d00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d04:	bf58      	it	pl
 8009d06:	0064      	lslpl	r4, r4, #1
 8009d08:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009d0c:	0062      	lsls	r2, r4, #1
 8009d0e:	2016      	movs	r0, #22
 8009d10:	4629      	mov	r1, r5
 8009d12:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009d16:	1076      	asrs	r6, r6, #1
 8009d18:	190f      	adds	r7, r1, r4
 8009d1a:	429f      	cmp	r7, r3
 8009d1c:	bfde      	ittt	le
 8009d1e:	1bdb      	suble	r3, r3, r7
 8009d20:	1939      	addle	r1, r7, r4
 8009d22:	192d      	addle	r5, r5, r4
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	3801      	subs	r0, #1
 8009d28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009d2c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d34:	d1f0      	bne.n	8009d18 <__ieee754_sqrt+0x8c>
 8009d36:	4604      	mov	r4, r0
 8009d38:	2720      	movs	r7, #32
 8009d3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009d3e:	428b      	cmp	r3, r1
 8009d40:	eb0c 0e00 	add.w	lr, ip, r0
 8009d44:	dc02      	bgt.n	8009d4c <__ieee754_sqrt+0xc0>
 8009d46:	d113      	bne.n	8009d70 <__ieee754_sqrt+0xe4>
 8009d48:	4596      	cmp	lr, r2
 8009d4a:	d811      	bhi.n	8009d70 <__ieee754_sqrt+0xe4>
 8009d4c:	f1be 0f00 	cmp.w	lr, #0
 8009d50:	eb0e 000c 	add.w	r0, lr, ip
 8009d54:	da56      	bge.n	8009e04 <__ieee754_sqrt+0x178>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	db54      	blt.n	8009e04 <__ieee754_sqrt+0x178>
 8009d5a:	f101 0801 	add.w	r8, r1, #1
 8009d5e:	1a5b      	subs	r3, r3, r1
 8009d60:	4641      	mov	r1, r8
 8009d62:	4596      	cmp	lr, r2
 8009d64:	bf88      	it	hi
 8009d66:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009d6a:	eba2 020e 	sub.w	r2, r2, lr
 8009d6e:	4464      	add	r4, ip
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	3f01      	subs	r7, #1
 8009d74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009d78:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009d7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d80:	d1dd      	bne.n	8009d3e <__ieee754_sqrt+0xb2>
 8009d82:	4313      	orrs	r3, r2
 8009d84:	d01b      	beq.n	8009dbe <__ieee754_sqrt+0x132>
 8009d86:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009e34 <__ieee754_sqrt+0x1a8>
 8009d8a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009e38 <__ieee754_sqrt+0x1ac>
 8009d8e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d92:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d96:	f7f6 fa57 	bl	8000248 <__aeabi_dsub>
 8009d9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4640      	mov	r0, r8
 8009da4:	4649      	mov	r1, r9
 8009da6:	f7f6 fe83 	bl	8000ab0 <__aeabi_dcmple>
 8009daa:	b140      	cbz	r0, 8009dbe <__ieee754_sqrt+0x132>
 8009dac:	e9da 0100 	ldrd	r0, r1, [sl]
 8009db0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009db4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009db8:	d126      	bne.n	8009e08 <__ieee754_sqrt+0x17c>
 8009dba:	463c      	mov	r4, r7
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	106b      	asrs	r3, r5, #1
 8009dc0:	0864      	lsrs	r4, r4, #1
 8009dc2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009dc6:	07ea      	lsls	r2, r5, #31
 8009dc8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009dcc:	bf48      	it	mi
 8009dce:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009dd8:	e76d      	b.n	8009cb6 <__ieee754_sqrt+0x2a>
 8009dda:	0ae3      	lsrs	r3, r4, #11
 8009ddc:	3915      	subs	r1, #21
 8009dde:	0564      	lsls	r4, r4, #21
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0fa      	beq.n	8009dda <__ieee754_sqrt+0x14e>
 8009de4:	02d8      	lsls	r0, r3, #11
 8009de6:	d50a      	bpl.n	8009dfe <__ieee754_sqrt+0x172>
 8009de8:	f1c2 0020 	rsb	r0, r2, #32
 8009dec:	fa24 f000 	lsr.w	r0, r4, r0
 8009df0:	1e55      	subs	r5, r2, #1
 8009df2:	4094      	lsls	r4, r2
 8009df4:	4303      	orrs	r3, r0
 8009df6:	1b4a      	subs	r2, r1, r5
 8009df8:	e776      	b.n	8009ce8 <__ieee754_sqrt+0x5c>
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	e7f0      	b.n	8009de0 <__ieee754_sqrt+0x154>
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	3201      	adds	r2, #1
 8009e02:	e7ef      	b.n	8009de4 <__ieee754_sqrt+0x158>
 8009e04:	4688      	mov	r8, r1
 8009e06:	e7aa      	b.n	8009d5e <__ieee754_sqrt+0xd2>
 8009e08:	f7f6 fa20 	bl	800024c <__adddf3>
 8009e0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	f7f6 fe40 	bl	8000a9c <__aeabi_dcmplt>
 8009e1c:	b120      	cbz	r0, 8009e28 <__ieee754_sqrt+0x19c>
 8009e1e:	1ca1      	adds	r1, r4, #2
 8009e20:	bf08      	it	eq
 8009e22:	3501      	addeq	r5, #1
 8009e24:	3402      	adds	r4, #2
 8009e26:	e7ca      	b.n	8009dbe <__ieee754_sqrt+0x132>
 8009e28:	3401      	adds	r4, #1
 8009e2a:	f024 0401 	bic.w	r4, r4, #1
 8009e2e:	e7c6      	b.n	8009dbe <__ieee754_sqrt+0x132>
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	200000f8 	.word	0x200000f8
 8009e38:	20000100 	.word	0x20000100

08009e3c <round>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009e42:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8009e46:	2a13      	cmp	r2, #19
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	dc18      	bgt.n	8009e82 <round+0x46>
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	da09      	bge.n	8009e68 <round+0x2c>
 8009e54:	3201      	adds	r2, #1
 8009e56:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009e5a:	d103      	bne.n	8009e64 <round+0x28>
 8009e5c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e64:	2200      	movs	r2, #0
 8009e66:	e029      	b.n	8009ebc <round+0x80>
 8009e68:	4816      	ldr	r0, [pc, #88]	; (8009ec4 <round+0x88>)
 8009e6a:	4110      	asrs	r0, r2
 8009e6c:	4001      	ands	r1, r0
 8009e6e:	4329      	orrs	r1, r5
 8009e70:	d011      	beq.n	8009e96 <round+0x5a>
 8009e72:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e76:	fa41 f202 	asr.w	r2, r1, r2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	ea23 0300 	bic.w	r3, r3, r0
 8009e80:	e7f0      	b.n	8009e64 <round+0x28>
 8009e82:	2a33      	cmp	r2, #51	; 0x33
 8009e84:	dd0a      	ble.n	8009e9c <round+0x60>
 8009e86:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009e8a:	d104      	bne.n	8009e96 <round+0x5a>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f7f6 f9dd 	bl	800024c <__adddf3>
 8009e92:	4605      	mov	r5, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	4628      	mov	r0, r5
 8009e98:	4621      	mov	r1, r4
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009ea4:	40f8      	lsrs	r0, r7
 8009ea6:	4228      	tst	r0, r5
 8009ea8:	d0f5      	beq.n	8009e96 <round+0x5a>
 8009eaa:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8009eae:	2201      	movs	r2, #1
 8009eb0:	408a      	lsls	r2, r1
 8009eb2:	1952      	adds	r2, r2, r5
 8009eb4:	bf28      	it	cs
 8009eb6:	3301      	addcs	r3, #1
 8009eb8:	ea22 0200 	bic.w	r2, r2, r0
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	e7e7      	b.n	8009e92 <round+0x56>
 8009ec2:	bf00      	nop
 8009ec4:	000fffff 	.word	0x000fffff

08009ec8 <__ieee754_atan2>:
 8009ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4617      	mov	r7, r2
 8009ece:	4692      	mov	sl, r2
 8009ed0:	4699      	mov	r9, r3
 8009ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ed6:	427b      	negs	r3, r7
 8009ed8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a058 <__ieee754_atan2+0x190>
 8009edc:	433b      	orrs	r3, r7
 8009ede:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ee2:	4543      	cmp	r3, r8
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	d809      	bhi.n	8009efe <__ieee754_atan2+0x36>
 8009eea:	4246      	negs	r6, r0
 8009eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ef0:	4306      	orrs	r6, r0
 8009ef2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009ef6:	4546      	cmp	r6, r8
 8009ef8:	468e      	mov	lr, r1
 8009efa:	4683      	mov	fp, r0
 8009efc:	d908      	bls.n	8009f10 <__ieee754_atan2+0x48>
 8009efe:	4652      	mov	r2, sl
 8009f00:	464b      	mov	r3, r9
 8009f02:	4620      	mov	r0, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7f6 f9a1 	bl	800024c <__adddf3>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	e019      	b.n	8009f44 <__ieee754_atan2+0x7c>
 8009f10:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8009f14:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009f18:	433e      	orrs	r6, r7
 8009f1a:	d103      	bne.n	8009f24 <__ieee754_atan2+0x5c>
 8009f1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	f7ff bd26 	b.w	8009970 <atan>
 8009f24:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009f28:	f006 0602 	and.w	r6, r6, #2
 8009f2c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009f30:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009f34:	d10a      	bne.n	8009f4c <__ieee754_atan2+0x84>
 8009f36:	2e02      	cmp	r6, #2
 8009f38:	d067      	beq.n	800a00a <__ieee754_atan2+0x142>
 8009f3a:	2e03      	cmp	r6, #3
 8009f3c:	d102      	bne.n	8009f44 <__ieee754_atan2+0x7c>
 8009f3e:	a53a      	add	r5, pc, #232	; (adr r5, 800a028 <__ieee754_atan2+0x160>)
 8009f40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	4317      	orrs	r7, r2
 8009f4e:	d106      	bne.n	8009f5e <__ieee754_atan2+0x96>
 8009f50:	f1be 0f00 	cmp.w	lr, #0
 8009f54:	da64      	bge.n	800a020 <__ieee754_atan2+0x158>
 8009f56:	a536      	add	r5, pc, #216	; (adr r5, 800a030 <__ieee754_atan2+0x168>)
 8009f58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f5c:	e7f2      	b.n	8009f44 <__ieee754_atan2+0x7c>
 8009f5e:	4542      	cmp	r2, r8
 8009f60:	d10f      	bne.n	8009f82 <__ieee754_atan2+0xba>
 8009f62:	4293      	cmp	r3, r2
 8009f64:	f106 36ff 	add.w	r6, r6, #4294967295
 8009f68:	d107      	bne.n	8009f7a <__ieee754_atan2+0xb2>
 8009f6a:	2e02      	cmp	r6, #2
 8009f6c:	d851      	bhi.n	800a012 <__ieee754_atan2+0x14a>
 8009f6e:	4b3b      	ldr	r3, [pc, #236]	; (800a05c <__ieee754_atan2+0x194>)
 8009f70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f78:	e7e4      	b.n	8009f44 <__ieee754_atan2+0x7c>
 8009f7a:	2e02      	cmp	r6, #2
 8009f7c:	d84d      	bhi.n	800a01a <__ieee754_atan2+0x152>
 8009f7e:	4b38      	ldr	r3, [pc, #224]	; (800a060 <__ieee754_atan2+0x198>)
 8009f80:	e7f6      	b.n	8009f70 <__ieee754_atan2+0xa8>
 8009f82:	4543      	cmp	r3, r8
 8009f84:	d0e4      	beq.n	8009f50 <__ieee754_atan2+0x88>
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009f8c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f90:	da21      	bge.n	8009fd6 <__ieee754_atan2+0x10e>
 8009f92:	f1b9 0f00 	cmp.w	r9, #0
 8009f96:	da01      	bge.n	8009f9c <__ieee754_atan2+0xd4>
 8009f98:	323c      	adds	r2, #60	; 0x3c
 8009f9a:	db20      	blt.n	8009fde <__ieee754_atan2+0x116>
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 fc32 	bl	800080c <__aeabi_ddiv>
 8009fa8:	f7ff fe6c 	bl	8009c84 <fabs>
 8009fac:	f7ff fce0 	bl	8009970 <atan>
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	2e01      	cmp	r6, #1
 8009fb6:	d015      	beq.n	8009fe4 <__ieee754_atan2+0x11c>
 8009fb8:	2e02      	cmp	r6, #2
 8009fba:	d017      	beq.n	8009fec <__ieee754_atan2+0x124>
 8009fbc:	2e00      	cmp	r6, #0
 8009fbe:	d0c1      	beq.n	8009f44 <__ieee754_atan2+0x7c>
 8009fc0:	a31d      	add	r3, pc, #116	; (adr r3, 800a038 <__ieee754_atan2+0x170>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 f93d 	bl	8000248 <__aeabi_dsub>
 8009fce:	a31c      	add	r3, pc, #112	; (adr r3, 800a040 <__ieee754_atan2+0x178>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	e016      	b.n	800a004 <__ieee754_atan2+0x13c>
 8009fd6:	a51c      	add	r5, pc, #112	; (adr r5, 800a048 <__ieee754_atan2+0x180>)
 8009fd8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fdc:	e7ea      	b.n	8009fb4 <__ieee754_atan2+0xec>
 8009fde:	2400      	movs	r4, #0
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	e7e7      	b.n	8009fb4 <__ieee754_atan2+0xec>
 8009fe4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009fe8:	461d      	mov	r5, r3
 8009fea:	e7ab      	b.n	8009f44 <__ieee754_atan2+0x7c>
 8009fec:	a312      	add	r3, pc, #72	; (adr r3, 800a038 <__ieee754_atan2+0x170>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7f6 f927 	bl	8000248 <__aeabi_dsub>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	a110      	add	r1, pc, #64	; (adr r1, 800a040 <__ieee754_atan2+0x178>)
 800a000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a004:	f7f6 f920 	bl	8000248 <__aeabi_dsub>
 800a008:	e77f      	b.n	8009f0a <__ieee754_atan2+0x42>
 800a00a:	a50d      	add	r5, pc, #52	; (adr r5, 800a040 <__ieee754_atan2+0x178>)
 800a00c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a010:	e798      	b.n	8009f44 <__ieee754_atan2+0x7c>
 800a012:	a50f      	add	r5, pc, #60	; (adr r5, 800a050 <__ieee754_atan2+0x188>)
 800a014:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a018:	e794      	b.n	8009f44 <__ieee754_atan2+0x7c>
 800a01a:	2400      	movs	r4, #0
 800a01c:	2500      	movs	r5, #0
 800a01e:	e791      	b.n	8009f44 <__ieee754_atan2+0x7c>
 800a020:	a509      	add	r5, pc, #36	; (adr r5, 800a048 <__ieee754_atan2+0x180>)
 800a022:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a026:	e78d      	b.n	8009f44 <__ieee754_atan2+0x7c>
 800a028:	54442d18 	.word	0x54442d18
 800a02c:	c00921fb 	.word	0xc00921fb
 800a030:	54442d18 	.word	0x54442d18
 800a034:	bff921fb 	.word	0xbff921fb
 800a038:	33145c07 	.word	0x33145c07
 800a03c:	3ca1a626 	.word	0x3ca1a626
 800a040:	54442d18 	.word	0x54442d18
 800a044:	400921fb 	.word	0x400921fb
 800a048:	54442d18 	.word	0x54442d18
 800a04c:	3ff921fb 	.word	0x3ff921fb
 800a050:	54442d18 	.word	0x54442d18
 800a054:	3fe921fb 	.word	0x3fe921fb
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	0800a180 	.word	0x0800a180
 800a060:	0800a198 	.word	0x0800a198

0800a064 <_init>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr

0800a070 <_fini>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr
