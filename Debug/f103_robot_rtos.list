
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009228  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f0  080094f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080094f0  080094f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094f0  080094f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080094f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  20000068  08009560  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08009560  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fee  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e3  00000000  00000000  000350c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  000388a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5a  00000000  00000000  00039c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c7b9  00000000  00000000  0003abaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5e3  00000000  00000000  00057363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3691  00000000  00000000  00071946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057f4  00000000  00000000  00114fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000068 	.word	0x20000068
 800020c:	00000000 	.word	0x00000000
 8000210:	08009400 	.word	0x08009400

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000006c 	.word	0x2000006c
 800022c:	08009400 	.word	0x08009400

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2iz>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d215      	bcs.n	8000a12 <__aeabi_d2iz+0x36>
 80009e6:	d511      	bpl.n	8000a0c <__aeabi_d2iz+0x30>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d912      	bls.n	8000a18 <__aeabi_d2iz+0x3c>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	fa23 f002 	lsr.w	r0, r3, r2
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a16:	d105      	bne.n	8000a24 <__aeabi_d2iz+0x48>
 8000a18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_frsub>:
 8000a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a30:	e002      	b.n	8000a38 <__addsf3>
 8000a32:	bf00      	nop

08000a34 <__aeabi_fsub>:
 8000a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a38 <__addsf3>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a40:	ea92 0f03 	teqne	r2, r3
 8000a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4c:	d06a      	beq.n	8000b24 <__addsf3+0xec>
 8000a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a56:	bfc1      	itttt	gt
 8000a58:	18d2      	addgt	r2, r2, r3
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	4048      	eorgt	r0, r1
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	bf88      	it	hi
 8000a68:	4770      	bxhi	lr
 8000a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4249      	negne	r1, r1
 8000a8a:	ea92 0f03 	teq	r2, r3
 8000a8e:	d03f      	beq.n	8000b10 <__addsf3+0xd8>
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	fa41 fc03 	asr.w	ip, r1, r3
 8000a98:	eb10 000c 	adds.w	r0, r0, ip
 8000a9c:	f1c3 0320 	rsb	r3, r3, #32
 8000aa0:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__addsf3+0x78>
 8000aaa:	4249      	negs	r1, r1
 8000aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab4:	d313      	bcc.n	8000ade <__addsf3+0xa6>
 8000ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aba:	d306      	bcc.n	8000aca <__addsf3+0x92>
 8000abc:	0840      	lsrs	r0, r0, #1
 8000abe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac2:	f102 0201 	add.w	r2, r2, #1
 8000ac6:	2afe      	cmp	r2, #254	; 0xfe
 8000ac8:	d251      	bcs.n	8000b6e <__addsf3+0x136>
 8000aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad2:	bf08      	it	eq
 8000ad4:	f020 0001 	biceq.w	r0, r0, #1
 8000ad8:	ea40 0003 	orr.w	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	0049      	lsls	r1, r1, #1
 8000ae0:	eb40 0000 	adc.w	r0, r0, r0
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aec:	d2ed      	bcs.n	8000aca <__addsf3+0x92>
 8000aee:	fab0 fc80 	clz	ip, r0
 8000af2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af6:	ebb2 020c 	subs.w	r2, r2, ip
 8000afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afe:	bfaa      	itet	ge
 8000b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b04:	4252      	neglt	r2, r2
 8000b06:	4318      	orrge	r0, r3
 8000b08:	bfbc      	itt	lt
 8000b0a:	40d0      	lsrlt	r0, r2
 8000b0c:	4318      	orrlt	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	f092 0f00 	teq	r2, #0
 8000b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b18:	bf06      	itte	eq
 8000b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1e:	3201      	addeq	r2, #1
 8000b20:	3b01      	subne	r3, #1
 8000b22:	e7b5      	b.n	8000a90 <__addsf3+0x58>
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d021      	beq.n	8000b78 <__addsf3+0x140>
 8000b34:	ea92 0f03 	teq	r2, r3
 8000b38:	d004      	beq.n	8000b44 <__addsf3+0x10c>
 8000b3a:	f092 0f00 	teq	r2, #0
 8000b3e:	bf08      	it	eq
 8000b40:	4608      	moveq	r0, r1
 8000b42:	4770      	bx	lr
 8000b44:	ea90 0f01 	teq	r0, r1
 8000b48:	bf1c      	itt	ne
 8000b4a:	2000      	movne	r0, #0
 8000b4c:	4770      	bxne	lr
 8000b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b52:	d104      	bne.n	8000b5e <__addsf3+0x126>
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	bf28      	it	cs
 8000b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b62:	bf3c      	itt	cc
 8000b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bxcc	lr
 8000b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b7c:	bf16      	itet	ne
 8000b7e:	4608      	movne	r0, r1
 8000b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b84:	4601      	movne	r1, r0
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	bf06      	itte	eq
 8000b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8e:	ea90 0f01 	teqeq	r0, r1
 8000b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ui2f>:
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e004      	b.n	8000ba8 <__aeabi_i2f+0x8>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_i2f>:
 8000ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	bf48      	it	mi
 8000ba6:	4240      	negmi	r0, r0
 8000ba8:	ea5f 0c00 	movs.w	ip, r0
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	e01c      	b.n	8000bf6 <__aeabi_l2f+0x2a>

08000bbc <__aeabi_ul2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e00a      	b.n	8000be0 <__aeabi_l2f+0x14>
 8000bca:	bf00      	nop

08000bcc <__aeabi_l2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__aeabi_l2f+0x14>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	ea5f 0c01 	movs.w	ip, r1
 8000be4:	bf02      	ittt	eq
 8000be6:	4684      	moveq	ip, r0
 8000be8:	4601      	moveq	r1, r0
 8000bea:	2000      	moveq	r0, #0
 8000bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bfa:	fabc f28c 	clz	r2, ip
 8000bfe:	3a08      	subs	r2, #8
 8000c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c04:	db10      	blt.n	8000c28 <__aeabi_l2f+0x5c>
 8000c06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c18:	fa20 f202 	lsr.w	r2, r0, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f102 0220 	add.w	r2, r2, #32
 8000c2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c38:	fa21 f202 	lsr.w	r2, r1, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_fmul>:
 8000c48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c50:	bf1e      	ittt	ne
 8000c52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c56:	ea92 0f0c 	teqne	r2, ip
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d06f      	beq.n	8000d40 <__aeabi_fmul+0xf8>
 8000c60:	441a      	add	r2, r3
 8000c62:	ea80 0c01 	eor.w	ip, r0, r1
 8000c66:	0240      	lsls	r0, r0, #9
 8000c68:	bf18      	it	ne
 8000c6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6e:	d01e      	beq.n	8000cae <__aeabi_fmul+0x66>
 8000c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c88:	bf3e      	ittt	cc
 8000c8a:	0049      	lslcc	r1, r1, #1
 8000c8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c90:	005b      	lslcc	r3, r3, #1
 8000c92:	ea40 0001 	orr.w	r0, r0, r1
 8000c96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c9a:	2afd      	cmp	r2, #253	; 0xfd
 8000c9c:	d81d      	bhi.n	8000cda <__aeabi_fmul+0x92>
 8000c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	4770      	bx	lr
 8000cae:	f090 0f00 	teq	r0, #0
 8000cb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb6:	bf08      	it	eq
 8000cb8:	0249      	lsleq	r1, r1, #9
 8000cba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cc2:	3a7f      	subs	r2, #127	; 0x7f
 8000cc4:	bfc2      	ittt	gt
 8000cc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cce:	4770      	bxgt	lr
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	dc5d      	bgt.n	8000d98 <__aeabi_fmul+0x150>
 8000cdc:	f112 0f19 	cmn.w	r2, #25
 8000ce0:	bfdc      	itt	le
 8000ce2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce6:	4770      	bxle	lr
 8000ce8:	f1c2 0200 	rsb	r2, r2, #0
 8000cec:	0041      	lsls	r1, r0, #1
 8000cee:	fa21 f102 	lsr.w	r1, r1, r2
 8000cf2:	f1c2 0220 	rsb	r2, r2, #32
 8000cf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfe:	f140 0000 	adc.w	r0, r0, #0
 8000d02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d06:	bf08      	it	eq
 8000d08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0c:	4770      	bx	lr
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0040      	lsleq	r0, r0, #1
 8000d1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1e:	3a01      	subeq	r2, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xce>
 8000d22:	ea40 000c 	orr.w	r0, r0, ip
 8000d26:	f093 0f00 	teq	r3, #0
 8000d2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0049      	lsleq	r1, r1, #1
 8000d32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d36:	3b01      	subeq	r3, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fmul+0xe6>
 8000d3a:	ea41 010c 	orr.w	r1, r1, ip
 8000d3e:	e78f      	b.n	8000c60 <__aeabi_fmul+0x18>
 8000d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	bf18      	it	ne
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d00a      	beq.n	8000d66 <__aeabi_fmul+0x11e>
 8000d50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d54:	bf18      	it	ne
 8000d56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d5a:	d1d8      	bne.n	8000d0e <__aeabi_fmul+0xc6>
 8000d5c:	ea80 0001 	eor.w	r0, r0, r1
 8000d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	4770      	bx	lr
 8000d66:	f090 0f00 	teq	r0, #0
 8000d6a:	bf17      	itett	ne
 8000d6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d70:	4608      	moveq	r0, r1
 8000d72:	f091 0f00 	teqne	r1, #0
 8000d76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d7a:	d014      	beq.n	8000da6 <__aeabi_fmul+0x15e>
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	d101      	bne.n	8000d86 <__aeabi_fmul+0x13e>
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	d10f      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d86:	ea93 0f0c 	teq	r3, ip
 8000d8a:	d103      	bne.n	8000d94 <__aeabi_fmul+0x14c>
 8000d8c:	024b      	lsls	r3, r1, #9
 8000d8e:	bf18      	it	ne
 8000d90:	4608      	movne	r0, r1
 8000d92:	d108      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000daa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_fdiv>:
 8000db0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db8:	bf1e      	ittt	ne
 8000dba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dbe:	ea92 0f0c 	teqne	r2, ip
 8000dc2:	ea93 0f0c 	teqne	r3, ip
 8000dc6:	d069      	beq.n	8000e9c <__aeabi_fdiv+0xec>
 8000dc8:	eba2 0203 	sub.w	r2, r2, r3
 8000dcc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd6:	d037      	beq.n	8000e48 <__aeabi_fdiv+0x98>
 8000dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ddc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de8:	428b      	cmp	r3, r1
 8000dea:	bf38      	it	cc
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000df2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df6:	428b      	cmp	r3, r1
 8000df8:	bf24      	itt	cs
 8000dfa:	1a5b      	subcs	r3, r3, r1
 8000dfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e04:	bf24      	itt	cs
 8000e06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e12:	bf24      	itt	cs
 8000e14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e20:	bf24      	itt	cs
 8000e22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	bf18      	it	ne
 8000e2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e32:	d1e0      	bne.n	8000df6 <__aeabi_fdiv+0x46>
 8000e34:	2afd      	cmp	r2, #253	; 0xfd
 8000e36:	f63f af50 	bhi.w	8000cda <__aeabi_fmul+0x92>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e40:	bf08      	it	eq
 8000e42:	f020 0001 	biceq.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e50:	327f      	adds	r2, #127	; 0x7f
 8000e52:	bfc2      	ittt	gt
 8000e54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e5c:	4770      	bxgt	lr
 8000e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	3a01      	subs	r2, #1
 8000e68:	e737      	b.n	8000cda <__aeabi_fmul+0x92>
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xc2>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fdiv+0xda>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e795      	b.n	8000dc8 <__aeabi_fdiv+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d108      	bne.n	8000eb8 <__aeabi_fdiv+0x108>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	f47f af7d 	bne.w	8000da6 <__aeabi_fmul+0x15e>
 8000eac:	ea93 0f0c 	teq	r3, ip
 8000eb0:	f47f af70 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e776      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000eb8:	ea93 0f0c 	teq	r3, ip
 8000ebc:	d104      	bne.n	8000ec8 <__aeabi_fdiv+0x118>
 8000ebe:	024b      	lsls	r3, r1, #9
 8000ec0:	f43f af4c 	beq.w	8000d5c <__aeabi_fmul+0x114>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e76e      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ecc:	bf18      	it	ne
 8000ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	d1ca      	bne.n	8000e6a <__aeabi_fdiv+0xba>
 8000ed4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed8:	f47f af5c 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000edc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee0:	f47f af3c 	bne.w	8000d5c <__aeabi_fmul+0x114>
 8000ee4:	e75f      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ee6:	bf00      	nop

08000ee8 <__gesf2>:
 8000ee8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eec:	e006      	b.n	8000efc <__cmpsf2+0x4>
 8000eee:	bf00      	nop

08000ef0 <__lesf2>:
 8000ef0:	f04f 0c01 	mov.w	ip, #1
 8000ef4:	e002      	b.n	8000efc <__cmpsf2+0x4>
 8000ef6:	bf00      	nop

08000ef8 <__cmpsf2>:
 8000ef8:	f04f 0c01 	mov.w	ip, #1
 8000efc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	bf18      	it	ne
 8000f0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f12:	d011      	beq.n	8000f38 <__cmpsf2+0x40>
 8000f14:	b001      	add	sp, #4
 8000f16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1a:	bf18      	it	ne
 8000f1c:	ea90 0f01 	teqne	r0, r1
 8000f20:	bf58      	it	pl
 8000f22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f26:	bf88      	it	hi
 8000f28:	17c8      	asrhi	r0, r1, #31
 8000f2a:	bf38      	it	cc
 8000f2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f30:	bf18      	it	ne
 8000f32:	f040 0001 	orrne.w	r0, r0, #1
 8000f36:	4770      	bx	lr
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__cmpsf2+0x4c>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d105      	bne.n	8000f50 <__cmpsf2+0x58>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d1e4      	bne.n	8000f14 <__cmpsf2+0x1c>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d0e1      	beq.n	8000f14 <__cmpsf2+0x1c>
 8000f50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_cfrcmple>:
 8000f58:	4684      	mov	ip, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4661      	mov	r1, ip
 8000f5e:	e7ff      	b.n	8000f60 <__aeabi_cfcmpeq>

08000f60 <__aeabi_cfcmpeq>:
 8000f60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f62:	f7ff ffc9 	bl	8000ef8 <__cmpsf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	bf48      	it	mi
 8000f6a:	f110 0f00 	cmnmi.w	r0, #0
 8000f6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f70 <__aeabi_fcmpeq>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff fff4 	bl	8000f60 <__aeabi_cfcmpeq>
 8000f78:	bf0c      	ite	eq
 8000f7a:	2001      	moveq	r0, #1
 8000f7c:	2000      	movne	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmplt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffea 	bl	8000f60 <__aeabi_cfcmpeq>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmple>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffe0 	bl	8000f60 <__aeabi_cfcmpeq>
 8000fa0:	bf94      	ite	ls
 8000fa2:	2001      	movls	r0, #1
 8000fa4:	2000      	movhi	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_fcmpge>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff ffd2 	bl	8000f58 <__aeabi_cfrcmple>
 8000fb4:	bf94      	ite	ls
 8000fb6:	2001      	movls	r0, #1
 8000fb8:	2000      	movhi	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_fcmpgt>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffc8 	bl	8000f58 <__aeabi_cfrcmple>
 8000fc8:	bf34      	ite	cc
 8000fca:	2001      	movcc	r0, #1
 8000fcc:	2000      	movcs	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <reverseBits>:

#ifndef INC_CRC_H_
#define INC_CRC_H_

uint8_t reverseBits(uint8_t value)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	e010      	b.n	8001056 <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b25a      	sxtb	r2, r3
 800103a:	79f9      	ldrb	r1, [r7, #7]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	fa41 f303 	asr.w	r3, r1, r3
 8001042:	b25b      	sxtb	r3, r3
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	b25b      	sxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b25b      	sxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b07      	cmp	r3, #7
 800105a:	ddeb      	ble.n	8001034 <reverseBits+0x14>
	}
	return result;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	460b      	mov	r3, r1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	4613      	mov	r3, r2
 800107c:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 8001084:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001088:	2b00      	cmp	r3, #0
 800108a:	d049      	beq.n	8001120 <crc8+0xb8>
 800108c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001090:	2b00      	cmp	r3, #0
 8001092:	d045      	beq.n	8001120 <crc8+0xb8>
		crc = reverseBits(crc);
 8001094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffc1 	bl	8001020 <reverseBits>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffba 	bl	8001020 <reverseBits>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	e028      	b.n	8001108 <crc8+0xa0>
			crc ^= data[i];
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	4413      	add	r3, r2
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c2:	4053      	eors	r3, r2
 80010c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e016      	b.n	80010fc <crc8+0x94>
 80010ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <crc8+0x82>
 80010da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4053      	eors	r3, r2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	e003      	b.n	80010f2 <crc8+0x8a>
 80010ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ee:	085b      	lsrs	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	dde5      	ble.n	80010ce <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	3301      	adds	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3d2      	bcc.n	80010b6 <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8001110:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001114:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001118:	4053      	eors	r3, r2
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800111e:	e056      	b.n	80011ce <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e037      	b.n	8001196 <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 8001126:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <crc8+0xd8>
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff72 	bl	8001020 <reverseBits>
 800113c:	4603      	mov	r3, r0
 800113e:	e003      	b.n	8001148 <crc8+0xe0>
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800114e:	4053      	eors	r3, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e016      	b.n	800118a <crc8+0x122>
 800115c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001160:	2b00      	cmp	r3, #0
 8001162:	da09      	bge.n	8001178 <crc8+0x110>
 8001164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b25a      	sxtb	r2, r3
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4053      	eors	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	e003      	b.n	8001180 <crc8+0x118>
 8001178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b07      	cmp	r3, #7
 800118e:	dde5      	ble.n	800115c <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	3301      	adds	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3c3      	bcc.n	8001126 <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 800119e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <crc8+0x156>
 80011a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff38 	bl	8001020 <reverseBits>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011b8:	4053      	eors	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	e005      	b.n	80011ca <crc8+0x162>
 80011be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011c6:	4053      	eors	r3, r2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 80011ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <checkCRC+0x50>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <checkCRC+0x54>)
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	2100      	movs	r1, #0
 80011ee:	9102      	str	r1, [sp, #8]
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2231      	movs	r2, #49	; 0x31
 80011f8:	2109      	movs	r1, #9
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff34 	bl	8001068 <crc8>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3309      	adds	r3, #9
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <checkCRC+0x36>
			return 1;
 800120e:	2301      	movs	r3, #1
 8001210:	e007      	b.n	8001222 <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3309      	adds	r3, #9
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <checkCRC+0x44>
			return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <checkCRC+0x46>
		}
	else return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	20000001 	.word	0x20000001

08001234 <receiveFromBuffer>:

void receiveFromBuffer()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001238:	2219      	movs	r2, #25
 800123a:	4904      	ldr	r1, [pc, #16]	; (800124c <receiveFromBuffer+0x18>)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <receiveFromBuffer+0x1c>)
 800123e:	f005 fb42 	bl	80068c6 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <receiveFromBuffer+0x20>)
 8001244:	f000 f834 	bl	80012b0 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000088 	.word	0x20000088
 8001250:	20000514 	.word	0x20000514
 8001254:	200000bc 	.word	0x200000bc

08001258 <send>:

void send(uint8_t crc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af04      	add	r7, sp, #16
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	if(crc)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d011      	beq.n	800128c <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <send+0x48>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <send+0x4c>)
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	2100      	movs	r1, #0
 8001272:	9102      	str	r1, [sp, #8]
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2231      	movs	r2, #49	; 0x31
 800127c:	2109      	movs	r1, #9
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <send+0x50>)
 8001280:	f7ff fef2 	bl	8001068 <crc8>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <send+0x50>)
 800128a:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 800128c:	230a      	movs	r3, #10
 800128e:	220a      	movs	r2, #10
 8001290:	4905      	ldr	r1, [pc, #20]	; (80012a8 <send+0x50>)
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <send+0x54>)
 8001294:	f005 fa8c 	bl	80067b0 <HAL_UART_Transmit>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000001 	.word	0x20000001
 80012a8:	200000d4 	.word	0x200000d4
 80012ac:	20000514 	.word	0x20000514

080012b0 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 812f 	bne.w	8001522 <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <Parse_DMA_All+0x290>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 80012cc:	4b9c      	ldr	r3, [pc, #624]	; (8001540 <Parse_DMA_All+0x290>)
 80012ce:	785a      	ldrb	r2, [r3, #1]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 80012d4:	4b9a      	ldr	r3, [pc, #616]	; (8001540 <Parse_DMA_All+0x290>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b98      	ldr	r3, [pc, #608]	; (8001540 <Parse_DMA_All+0x290>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 80012e8:	8afb      	ldrh	r3, [r7, #22]
 80012ea:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db14      	blt.n	800131e <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 80012f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc51 	bl	8000ba0 <__aeabi_i2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc9f 	bl	8000c48 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	498d      	ldr	r1, [pc, #564]	; (8001544 <Parse_DMA_All+0x294>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fd4e 	bl	8000db0 <__aeabi_fdiv>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	e013      	b.n	8001346 <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800131e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc3c 	bl	8000ba0 <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc8a 	bl	8000c48 <__aeabi_fmul>
 8001334:	4603      	mov	r3, r0
 8001336:	4984      	ldr	r1, [pc, #528]	; (8001548 <Parse_DMA_All+0x298>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd39 	bl	8000db0 <__aeabi_fdiv>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 8001346:	4b7e      	ldr	r3, [pc, #504]	; (8001540 <Parse_DMA_All+0x290>)
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <Parse_DMA_All+0x290>)
 8001350:	795b      	ldrb	r3, [r3, #5]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 800135a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <Parse_DMA_All+0x29c>)
 8001360:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <Parse_DMA_All+0x29c>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800136c:	dd11      	ble.n	8001392 <Parse_DMA_All+0xe2>
 800136e:	4b77      	ldr	r3, [pc, #476]	; (800154c <Parse_DMA_All+0x29c>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	b29b      	uxth	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b73      	ldr	r3, [pc, #460]	; (800154c <Parse_DMA_All+0x29c>)
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	4b72      	ldr	r3, [pc, #456]	; (800154c <Parse_DMA_All+0x29c>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <Parse_DMA_All+0x29c>)
 8001390:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 8001392:	4b6e      	ldr	r3, [pc, #440]	; (800154c <Parse_DMA_All+0x29c>)
 8001394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <Parse_DMA_All+0x290>)
 800139e:	799a      	ldrb	r2, [r3, #6]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80013a4:	4b66      	ldr	r3, [pc, #408]	; (8001540 <Parse_DMA_All+0x290>)
 80013a6:	79db      	ldrb	r3, [r3, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fbf5 	bl	8000b98 <__aeabi_ui2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4967      	ldr	r1, [pc, #412]	; (8001550 <Parse_DMA_All+0x2a0>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc48 	bl	8000c48 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8a4 	bl	8000508 <__aeabi_f2d>
 80013c0:	a35d      	add	r3, pc, #372	; (adr r3, 8001538 <Parse_DMA_All+0x288>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff fa21 	bl	800080c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f007 ffcf 	bl	8009374 <round>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fafd 	bl	80009dc <__aeabi_d2iz>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <Parse_DMA_All+0x290>)
 80013ec:	7a1a      	ldrb	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <Parse_DMA_All+0x2a4>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <Parse_DMA_All+0x2a4>)
 80013fc:	785a      	ldrb	r2, [r3, #1]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <Parse_DMA_All+0x2a4>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b52      	ldr	r3, [pc, #328]	; (8001554 <Parse_DMA_All+0x2a4>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 8001416:	8a3b      	ldrh	r3, [r7, #16]
 8001418:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 800141a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db14      	blt.n	800144c <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fbba 	bl	8000ba0 <__aeabi_i2f>
 800142c:	4603      	mov	r3, r0
 800142e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fc08 	bl	8000c48 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	4942      	ldr	r1, [pc, #264]	; (8001544 <Parse_DMA_All+0x294>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcb7 	bl	8000db0 <__aeabi_fdiv>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	e013      	b.n	8001474 <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800144c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fba5 	bl	8000ba0 <__aeabi_i2f>
 8001456:	4603      	mov	r3, r0
 8001458:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fbf3 	bl	8000c48 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	4938      	ldr	r1, [pc, #224]	; (8001548 <Parse_DMA_All+0x298>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fca2 	bl	8000db0 <__aeabi_fdiv>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <Parse_DMA_All+0x2a4>)
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <Parse_DMA_All+0x2a4>)
 800147e:	795b      	ldrb	r3, [r3, #5]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 8001488:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <Parse_DMA_All+0x2a8>)
 800148e:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Parse_DMA_All+0x2a8>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800149a:	dd11      	ble.n	80014c0 <Parse_DMA_All+0x210>
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <Parse_DMA_All+0x2a8>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Parse_DMA_All+0x2a8>)
 80014ac:	801a      	strh	r2, [r3, #0]
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <Parse_DMA_All+0x2a8>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Parse_DMA_All+0x2a8>)
 80014be:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <Parse_DMA_All+0x2a8>)
 80014c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <Parse_DMA_All+0x2a4>)
 80014cc:	799a      	ldrb	r2, [r3, #6]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <Parse_DMA_All+0x2a4>)
 80014d4:	79db      	ldrb	r3, [r3, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb5e 	bl	8000b98 <__aeabi_ui2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	491c      	ldr	r1, [pc, #112]	; (8001550 <Parse_DMA_All+0x2a0>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbb1 	bl	8000c48 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f80d 	bl	8000508 <__aeabi_f2d>
 80014ee:	a312      	add	r3, pc, #72	; (adr r3, 8001538 <Parse_DMA_All+0x288>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f98a 	bl	800080c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f007 ff38 	bl	8009374 <round>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa66 	bl	80009dc <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	b21a      	sxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <Parse_DMA_All+0x2a4>)
 800151a:	7a1a      	ldrb	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 8001520:	e005      	b.n	800152e <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	81da      	strh	r2, [r3, #14]
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	00000000 	.word	0x00000000
 800153c:	406fe000 	.word	0x406fe000
 8001540:	200000a4 	.word	0x200000a4
 8001544:	46fffe00 	.word	0x46fffe00
 8001548:	c6fffe00 	.word	0xc6fffe00
 800154c:	20000086 	.word	0x20000086
 8001550:	43b40000 	.word	0x43b40000
 8001554:	200000b0 	.word	0x200000b0
 8001558:	20000084 	.word	0x20000084

0800155c <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	460b      	mov	r3, r1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 800156e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001572:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8001576:	dd02      	ble.n	800157e <setVelocity+0x22>
 8001578:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800157c:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 800157e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001582:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8001586:	da02      	bge.n	800158e <setVelocity+0x32>
 8001588:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 800158c:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 800158e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfb8      	it	lt
 8001596:	425b      	neglt	r3, r3
 8001598:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 800159a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da06      	bge.n	80015b0 <setVelocity+0x54>
 80015a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <setVelocity+0x54>
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	425b      	negs	r3, r3
 80015ae:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80015b8:	8bfb      	ldrh	r3, [r7, #30]
 80015ba:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	733b      	strb	r3, [r7, #12]
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	737b      	strb	r3, [r7, #13]
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	73bb      	strb	r3, [r7, #14]
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	2300      	movs	r3, #0
 80015ce:	743b      	strb	r3, [r7, #16]
 80015d0:	2300      	movs	r3, #0
 80015d2:	747b      	strb	r3, [r7, #17]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	74bb      	strb	r3, [r7, #18]
 80015d8:	2300      	movs	r3, #0
 80015da:	74fb      	strb	r3, [r7, #19]
 80015dc:	2300      	movs	r3, #0
 80015de:	753b      	strb	r3, [r7, #20]
 80015e0:	2300      	movs	r3, #0
 80015e2:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e00c      	b.n	8001604 <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 80015ea:	f107 020c 	add.w	r2, r7, #12
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4413      	add	r3, r2
 80015f2:	7819      	ldrb	r1, [r3, #0]
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <setVelocity+0xc0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4413      	add	r3, r2
 80015fa:	460a      	mov	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b09      	cmp	r3, #9
 8001608:	ddef      	ble.n	80015ea <setVelocity+0x8e>
	}
	send(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff fe24 	bl	8001258 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000d4 	.word	0x200000d4

08001620 <SR04_Init>:

SR04_PulseType pulse;
SR04_PulseType pulse2;

void SR04_Init()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <SR04_Init+0x24>)
 8001626:	f004 f915 	bl	8005854 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <SR04_Init+0x24>)
 800162e:	f004 f9c9 	bl	80059c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <SR04_Init+0x28>)
 8001634:	f004 f90e 	bl	8005854 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001638:	2100      	movs	r1, #0
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <SR04_Init+0x28>)
 800163c:	f004 f9c2 	bl	80059c4 <HAL_TIM_IC_Start_IT>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200003f4 	.word	0x200003f4
 8001648:	2000043c 	.word	0x2000043c

0800164c <SR04_Start>:
void SR04_Start()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2102      	movs	r1, #2
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <SR04_Start+0x44>)
 8001656:	f002 fc50 	bl	8003efa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <SR04_Start+0x44>)
 8001660:	f002 fc4b 	bl	8003efa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001664:	2001      	movs	r0, #1
 8001666:	f001 fce7 	bl	8003038 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2102      	movs	r1, #2
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <SR04_Start+0x44>)
 8001670:	f002 fc43 	bl	8003efa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <SR04_Start+0x44>)
 800167a:	f002 fc3e 	bl	8003efa <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SR04_Start+0x48>)
 8001680:	2201      	movs	r2, #1
 8001682:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SR04_Start+0x4c>)
 8001686:	2201      	movs	r2, #1
 8001688:	731a      	strb	r2, [r3, #12]
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010800 	.word	0x40010800
 8001694:	200000e0 	.word	0x200000e0
 8001698:	200000f0 	.word	0x200000f0

0800169c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d138      	bne.n	800171e <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 80016b4:	2100      	movs	r1, #0
 80016b6:	483a      	ldr	r0, [pc, #232]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016b8:	f004 fcf2 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016c2:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020a 	bic.w	r2, r2, #10
 80016d2:	621a      	str	r2, [r3, #32]
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a1a      	ldr	r2, [r3, #32]
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0202 	orr.w	r2, r2, #2
 80016e2:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	731a      	strb	r2, [r3, #12]
 80016ea:	e018      	b.n	800171e <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020a 	bic.w	r2, r2, #10
 80016fa:	621a      	str	r2, [r3, #32]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6a12      	ldr	r2, [r2, #32]
 8001706:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	4825      	ldr	r0, [pc, #148]	; (80017a0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800170c:	f004 fcc8 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001716:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x108>)
 800171a:	2201      	movs	r2, #1
 800171c:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d138      	bne.n	8001798 <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x110>)
 8001728:	7b1b      	ldrb	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01b      	beq.n	8001766 <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 800172e:	2100      	movs	r1, #0
 8001730:	481d      	ldr	r0, [pc, #116]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001732:	f004 fcb5 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x110>)
 800173c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020a 	bic.w	r2, r2, #10
 800174c:	621a      	str	r2, [r3, #32]
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0202 	orr.w	r2, r2, #2
 800175c:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x110>)
 8001760:	2200      	movs	r2, #0
 8001762:	731a      	strb	r2, [r3, #12]
			pulse2.rising_flag = 1;
		}
	}


}
 8001764:	e018      	b.n	8001798 <HAL_TIM_IC_CaptureCallback+0xfc>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020a 	bic.w	r2, r2, #10
 8001774:	621a      	str	r2, [r3, #32]
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a12      	ldr	r2, [r2, #32]
 8001780:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001786:	f004 fc8b 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x110>)
 8001790:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x110>)
 8001794:	2201      	movs	r2, #1
 8001796:	731a      	strb	r2, [r3, #12]
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003f4 	.word	0x200003f4
 80017a4:	200000e0 	.word	0x200000e0
 80017a8:	2000043c 	.word	0x2000043c
 80017ac:	200000f0 	.word	0x200000f0

080017b0 <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	885a      	ldrh	r2, [r3, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d908      	bls.n	80017d6 <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	885a      	ldrh	r2, [r3, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	809a      	strh	r2, [r3, #4]
 80017d4:	e00b      	b.n	80017ee <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	885a      	ldrh	r2, [r3, #2]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80017e6:	3310      	adds	r3, #16
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f9d4 	bl	8000ba0 <__aeabi_i2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4910      	ldr	r1, [pc, #64]	; (800183c <SR04_Calculate+0x8c>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa23 	bl	8000c48 <__aeabi_fmul>
 8001802:	4603      	mov	r3, r0
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <SR04_Calculate+0x90>)
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fa1e 	bl	8000c48 <__aeabi_fmul>
 800180c:	4603      	mov	r3, r0
 800180e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff facc 	bl	8000db0 <__aeabi_fdiv>
 8001818:	4603      	mov	r3, r0
 800181a:	490a      	ldr	r1, [pc, #40]	; (8001844 <SR04_Calculate+0x94>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fac7 	bl	8000db0 <__aeabi_fdiv>
 8001822:	4603      	mov	r3, r0
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <SR04_Calculate+0x94>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fac2 	bl	8000db0 <__aeabi_fdiv>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	43aa0000 	.word	0x43aa0000
 8001840:	42c80000 	.word	0x42c80000
 8001844:	447a0000 	.word	0x447a0000

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_DMA_Init+0x88>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <MX_DMA_Init+0x88>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_DMA_Init+0x88>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	200c      	movs	r0, #12
 800186c:	f001 fcdf 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001870:	200c      	movs	r0, #12
 8001872:	f001 fcf8 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	200d      	movs	r0, #13
 800187c:	f001 fcd7 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001880:	200d      	movs	r0, #13
 8001882:	f001 fcf0 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	200e      	movs	r0, #14
 800188c:	f001 fccf 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001890:	200e      	movs	r0, #14
 8001892:	f001 fce8 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2105      	movs	r1, #5
 800189a:	200f      	movs	r0, #15
 800189c:	f001 fcc7 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018a0:	200f      	movs	r0, #15
 80018a2:	f001 fce0 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	2010      	movs	r0, #16
 80018ac:	f001 fcbf 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018b0:	2010      	movs	r0, #16
 80018b2:	f001 fcd8 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	2011      	movs	r0, #17
 80018bc:	f001 fcb7 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018c0:	2011      	movs	r0, #17
 80018c2:	f001 fcd0 	bl	8003266 <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <checksum>:
extern SR04_PulseType pulse2;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t checksum(uint8_t* data, uint8_t len) {
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80018e4:	2300      	movs	r3, #0
 80018e6:	73bb      	strb	r3, [r7, #14]
 80018e8:	e009      	b.n	80018fe <checksum+0x2a>
       crc += data[i];
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	4413      	add	r3, r2
 80018f6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73bb      	strb	r3, [r7, #14]
 80018fe:	7bba      	ldrb	r2, [r7, #14]
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	3b01      	subs	r3, #1
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <checksum+0x16>
    }
    return crc;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl* motors)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	e00b      	b.n	800193c <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	441a      	add	r2, r3
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	3318      	adds	r3, #24
 8001930:	443b      	add	r3, r7
 8001932:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	3301      	adds	r3, #1
 800193a:	75fb      	strb	r3, [r7, #23]
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9f0      	bls.n	8001924 <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data,8);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ffc3 	bl	80018d4 <checksum>
 800194e:	4603      	mov	r3, r0
 8001950:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001952:	7cfb      	ldrb	r3, [r7, #19]
 8001954:	7dba      	ldrb	r2, [r7, #22]
 8001956:	429a      	cmp	r2, r3
 8001958:	d117      	bne.n	800198a <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 800195a:	7b7a      	ldrb	r2, [r7, #13]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	b21a      	sxth	r2, r3
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21a      	sxth	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 8001972:	7c3a      	ldrb	r2, [r7, #16]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8001978:	7c7b      	ldrb	r3, [r7, #17]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	7cbb      	ldrb	r3, [r7, #18]
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21a      	sxth	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 800198a:	2204      	movs	r2, #4
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f007 f85e 	bl	8008a50 <memset>
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <d80nk_read>:

void d80nk_read()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80019a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <d80nk_read+0x7c>)
 80019a8:	f002 fa90 	bl	8003ecc <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80019b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <d80nk_read+0x7c>)
 80019b6:	f002 fa89 	bl	8003ecc <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	4815      	ldr	r0, [pc, #84]	; (8001a18 <d80nk_read+0x7c>)
 80019c4:	f002 fa82 	bl	8003ecc <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80019cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <d80nk_read+0x7c>)
 80019d2:	f002 fa7b 	bl	8003ecc <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<4;i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e013      	b.n	8001a08 <d80nk_read+0x6c>
	{
		if(pinStates[i] == GPIO_PIN_SET)
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <d80nk_read+0x80>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e004      	b.n	8001a02 <d80nk_read+0x66>

		}
		else
		{
			d80nk_[i] = '1';
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <d80nk_read+0x80>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	2231      	movs	r2, #49	; 0x31
 8001a00:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	dde8      	ble.n	80019e0 <d80nk_read+0x44>
//			sprintf(message,"Sensor ON\n");
//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	20000100 	.word	0x20000100

08001a20 <distance_Calculate>:

void distance_Calculate()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001a24:	4810      	ldr	r0, [pc, #64]	; (8001a68 <distance_Calculate+0x48>)
 8001a26:	f7ff fec3 	bl	80017b0 <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001a2a:	4810      	ldr	r0, [pc, #64]	; (8001a6c <distance_Calculate+0x4c>)
 8001a2c:	f7ff fec0 	bl	80017b0 <SR04_Calculate>
	if(pulse.distance > 80.0) pulse.distance = 80.0;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <distance_Calculate+0x48>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <distance_Calculate+0x50>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fac2 	bl	8000fc0 <__aeabi_fcmpgt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <distance_Calculate+0x28>
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <distance_Calculate+0x48>)
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <distance_Calculate+0x50>)
 8001a46:	609a      	str	r2, [r3, #8]
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <distance_Calculate+0x4c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <distance_Calculate+0x50>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fab6 	bl	8000fc0 <__aeabi_fcmpgt>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <distance_Calculate+0x3c>
}
 8001a5a:	e002      	b.n	8001a62 <distance_Calculate+0x42>
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <distance_Calculate+0x4c>)
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <distance_Calculate+0x50>)
 8001a60:	609a      	str	r2, [r3, #8]
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200000e0 	.word	0x200000e0
 8001a6c:	200000f0 	.word	0x200000f0
 8001a70:	42a00000 	.word	0x42a00000

08001a74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <vApplicationGetIdleTaskMemory+0x28>)
 8001a84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000148 	.word	0x20000148
 8001aa0:	2000019c 	.word	0x2000019c

08001aa4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 4, &Serial_Task_Handler);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_FREERTOS_Init+0x60>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2304      	movs	r3, #4
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	4914      	ldr	r1, [pc, #80]	; (8001b08 <MX_FREERTOS_Init+0x64>)
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_FREERTOS_Init+0x68>)
 8001aba:	f005 ff2f 	bl	800791c <xTaskCreate>
  xTaskCreate(Sensor_Task, "Sensor_Task", 128, NULL, 3,&Sensor_Task_Handler);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_FREERTOS_Init+0x6c>)
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	4912      	ldr	r1, [pc, #72]	; (8001b14 <MX_FREERTOS_Init+0x70>)
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <MX_FREERTOS_Init+0x74>)
 8001ace:	f005 ff25 	bl	800791c <xTaskCreate>
  xTaskCreate(IMU_Task, "IMU_Task", 128, NULL, 3, IMU_Task_Handler);
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_FREERTOS_Init+0x78>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2303      	movs	r3, #3
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	490f      	ldr	r1, [pc, #60]	; (8001b20 <MX_FREERTOS_Init+0x7c>)
 8001ae2:	4810      	ldr	r0, [pc, #64]	; (8001b24 <MX_FREERTOS_Init+0x80>)
 8001ae4:	f005 ff1a 	bl	800791c <xTaskCreate>
  xTaskCreate(Feedback_Task, "Feedback_Task", 128, NULL, 3, Feedback_Task_Handler);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_FREERTOS_Init+0x84>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	2303      	movs	r3, #3
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <MX_FREERTOS_Init+0x88>)
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_FREERTOS_Init+0x8c>)
 8001afa:	f005 ff0f 	bl	800791c <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000138 	.word	0x20000138
 8001b08:	08009418 	.word	0x08009418
 8001b0c:	08001cd1 	.word	0x08001cd1
 8001b10:	2000013c 	.word	0x2000013c
 8001b14:	08009428 	.word	0x08009428
 8001b18:	08001f6d 	.word	0x08001f6d
 8001b1c:	20000140 	.word	0x20000140
 8001b20:	08009434 	.word	0x08009434
 8001b24:	08001f89 	.word	0x08001f89
 8001b28:	20000144 	.word	0x20000144
 8001b2c:	08009440 	.word	0x08009440
 8001b30:	08001d79 	.word	0x08001d79

08001b34 <HAL_TIM_PeriodElapsedCallback>:
//}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d117      	bne.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(huart2Received)
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			huart2Received = 0; // Reset the flag
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
			timerCounter = 0; // Reset the timer counter
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
			{
				timerCounter = 1;
			}
		}
	}
}
 8001b5a:	e00b      	b.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x40>
			timerCounter++;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b64:	6013      	str	r3, [r2, #0]
			if(timerCounter >= 2) // Adjust the value based on your timer period (e.g., 2 for 1 second if the timer period is 0.5 seconds)
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d902      	bls.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x40>
				timerCounter = 1;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000484 	.word	0x20000484
 8001b84:	20000131 	.word	0x20000131
 8001b88:	20000134 	.word	0x20000134

08001b8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_UART_RxCpltCallback+0x11c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d10e      	bne.n	8001bba <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_UART_RxCpltCallback+0x120>)
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_UART_RxCpltCallback+0x124>)
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 8001ba8:	4942      	ldr	r1, [pc, #264]	; (8001cb4 <HAL_UART_RxCpltCallback+0x128>)
 8001baa:	4840      	ldr	r0, [pc, #256]	; (8001cac <HAL_UART_RxCpltCallback+0x120>)
 8001bac:	f7ff feb2 	bl	8001914 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	493f      	ldr	r1, [pc, #252]	; (8001cb0 <HAL_UART_RxCpltCallback+0x124>)
 8001bb4:	483c      	ldr	r0, [pc, #240]	; (8001ca8 <HAL_UART_RxCpltCallback+0x11c>)
 8001bb6:	f004 fe86 	bl	80068c6 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a3e      	ldr	r2, [pc, #248]	; (8001cb8 <HAL_UART_RxCpltCallback+0x12c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d16e      	bne.n	8001ca0 <HAL_UART_RxCpltCallback+0x114>
	{
		huart2Received = 1;
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_UART_RxCpltCallback+0x130>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
		timerCounter = 0;
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_UART_RxCpltCallback+0x134>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
		short len = strlen(responseBuffer);
 8001bce:	483d      	ldr	r0, [pc, #244]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001bd0:	f7fe fb2e 	bl	8000230 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	847b      	strh	r3, [r7, #34]	; 0x22
		short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001bd8:	2319      	movs	r3, #25
 8001bda:	843b      	strh	r3, [r7, #32]
		for(int i=0;i<arraysz;i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e04f      	b.n	8001c82 <HAL_UART_RxCpltCallback+0xf6>
		{
			if(responseBuffer[i]==motors.LeftID)
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	4413      	add	r3, r2
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <HAL_UART_RxCpltCallback+0x128>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11e      	bne.n	8001c30 <HAL_UART_RxCpltCallback+0xa4>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001bf6:	441a      	add	r2, r3
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	6810      	ldr	r0, [r2, #0]
 8001bfe:	6851      	ldr	r1, [r2, #4]
 8001c00:	c303      	stmia	r3!, {r0, r1}
 8001c02:	8912      	ldrh	r2, [r2, #8]
 8001c04:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fae6 	bl	80011dc <checkCRC>
 8001c10:	4603      	mov	r3, r0
 8001c12:	77bb      	strb	r3, [r7, #30]
				if(checking)
 8001c14:	7fbb      	ldrb	r3, [r7, #30]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d030      	beq.n	8001c7c <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferL, &responseBuffer[i], 10);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c1e:	441a      	add	r2, r3
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_UART_RxCpltCallback+0x13c>)
 8001c22:	6810      	ldr	r0, [r2, #0]
 8001c24:	6851      	ldr	r1, [r2, #4]
 8001c26:	6018      	str	r0, [r3, #0]
 8001c28:	6059      	str	r1, [r3, #4]
 8001c2a:	8912      	ldrh	r2, [r2, #8]
 8001c2c:	811a      	strh	r2, [r3, #8]
 8001c2e:	e025      	b.n	8001c7c <HAL_UART_RxCpltCallback+0xf0>
				}
			}
			else if(responseBuffer[i]==motors.RightID)
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	4413      	add	r3, r2
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_UART_RxCpltCallback+0x128>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d11d      	bne.n	8001c7c <HAL_UART_RxCpltCallback+0xf0>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c44:	441a      	add	r2, r3
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	6810      	ldr	r0, [r2, #0]
 8001c4c:	6851      	ldr	r1, [r2, #4]
 8001c4e:	c303      	stmia	r3!, {r0, r1}
 8001c50:	8912      	ldrh	r2, [r2, #8]
 8001c52:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fabf 	bl	80011dc <checkCRC>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	77fb      	strb	r3, [r7, #31]
				if(checking)
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferH, &responseBuffer[i], 10);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c6c:	441a      	add	r2, r3
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_RxCpltCallback+0x140>)
 8001c70:	6810      	ldr	r0, [r2, #0]
 8001c72:	6851      	ldr	r1, [r2, #4]
 8001c74:	6018      	str	r0, [r3, #0]
 8001c76:	6059      	str	r1, [r3, #4]
 8001c78:	8912      	ldrh	r2, [r2, #8]
 8001c7a:	811a      	strh	r2, [r3, #8]
		for(int i=0;i<arraysz;i++)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbaa      	blt.n	8001be2 <HAL_UART_RxCpltCallback+0x56>
				}
			}
		}
		memset(responseBuffer, 0, sizeof(responseBuffer));
 8001c8c:	2219      	movs	r2, #25
 8001c8e:	2100      	movs	r1, #0
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c92:	f006 fedd 	bl	8008a50 <memset>
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001c96:	2219      	movs	r2, #25
 8001c98:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_UART_RxCpltCallback+0x138>)
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <HAL_UART_RxCpltCallback+0x12c>)
 8001c9c:	f004 fe13 	bl	80068c6 <HAL_UART_Receive_DMA>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200004cc 	.word	0x200004cc
 8001cac:	20000104 	.word	0x20000104
 8001cb0:	2000010c 	.word	0x2000010c
 8001cb4:	20000114 	.word	0x20000114
 8001cb8:	20000514 	.word	0x20000514
 8001cbc:	20000131 	.word	0x20000131
 8001cc0:	20000134 	.word	0x20000134
 8001cc4:	20000088 	.word	0x20000088
 8001cc8:	200000b0 	.word	0x200000b0
 8001ccc:	200000a4 	.word	0x200000a4

08001cd0 <Serial_Task>:

void Serial_Task(void *argument)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <Serial_Task+0x84>)
 8001cda:	f003 fdbb 	bl	8005854 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001cde:	2208      	movs	r2, #8
 8001ce0:	491d      	ldr	r1, [pc, #116]	; (8001d58 <Serial_Task+0x88>)
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <Serial_Task+0x8c>)
 8001ce4:	f004 fdef 	bl	80068c6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001ce8:	2219      	movs	r2, #25
 8001cea:	491d      	ldr	r1, [pc, #116]	; (8001d60 <Serial_Task+0x90>)
 8001cec:	481d      	ldr	r0, [pc, #116]	; (8001d64 <Serial_Task+0x94>)
 8001cee:	f004 fdea 	bl	80068c6 <HAL_UART_Receive_DMA>
	uint32_t send_delay = pdMS_TO_TICKS(100);
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <Serial_Task+0x98>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <Serial_Task+0x98>)
 8001cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7ff fc29 	bl	800155c <setVelocity>
	  vTaskDelay(L_R_delay);
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <Serial_Task+0x9c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 ff3a 	bl	8007b88 <vTaskDelay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <Serial_Task+0x98>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <Serial_Task+0x98>)
 8001d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7ff fc1a 	bl	800155c <setVelocity>
	  receiveFromBuffer();
 8001d28:	f7ff fa84 	bl	8001234 <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor, timerCounter);
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <Serial_Task+0xa0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <Serial_Task+0xa4>)
 8001d34:	f7ff fabc 	bl	80012b0 <Parse_DMA_All>
	  vTaskDelay(send_delay);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f005 ff25 	bl	8007b88 <vTaskDelay>
//	  uint8_t str[30];
//	  sprintf(str, "%L: %d R: %d\n", wheelsensor.LeftVelocity,  wheelsensor.RightVelocity);
//	  HAL_UART_Transmit(&huart3, str, sizeof(str), HAL_MAX_DELAY);
	  HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001d3e:	2219      	movs	r2, #25
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <Serial_Task+0x90>)
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <Serial_Task+0x94>)
 8001d44:	f004 fdbf 	bl	80068c6 <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4903      	ldr	r1, [pc, #12]	; (8001d58 <Serial_Task+0x88>)
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <Serial_Task+0x8c>)
 8001d4e:	f004 fdba 	bl	80068c6 <HAL_UART_Receive_DMA>
	{
 8001d52:	e7d0      	b.n	8001cf6 <Serial_Task+0x26>
 8001d54:	20000484 	.word	0x20000484
 8001d58:	2000010c 	.word	0x2000010c
 8001d5c:	200004cc 	.word	0x200004cc
 8001d60:	20000088 	.word	0x20000088
 8001d64:	20000514 	.word	0x20000514
 8001d68:	20000114 	.word	0x20000114
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	20000134 	.word	0x20000134
 8001d74:	200000bc 	.word	0x200000bc

08001d78 <Feedback_Task>:
	}
}

void Feedback_Task(void *argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 8001d80:	23c8      	movs	r3, #200	; 0xc8
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		uint8_t sendData[36];
		sendData[0] = 0x00;
 8001d84:	2300      	movs	r3, #0
 8001d86:	723b      	strb	r3, [r7, #8]
		sendData[1] = (wheelsensor.leftii) & 0xFF;
 8001d88:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <Feedback_Task+0x1dc>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	727b      	strb	r3, [r7, #9]
		sendData[2] = ((wheelsensor.LeftVelocity)>>8) & 0xFF;
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <Feedback_Task+0x1dc>)
 8001d90:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d94:	121b      	asrs	r3, r3, #8
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	72bb      	strb	r3, [r7, #10]
		sendData[3] = wheelsensor.LeftVelocity & 0xFF;
 8001d9c:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <Feedback_Task+0x1dc>)
 8001d9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	72fb      	strb	r3, [r7, #11]
		sendData[4] = wheelsensor.reightii & 0xFF;
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <Feedback_Task+0x1dc>)
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	733b      	strb	r3, [r7, #12]
		sendData[5] = ((wheelsensor.RightVelocity)>>8) & 0xFF;
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <Feedback_Task+0x1dc>)
 8001dae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001db2:	121b      	asrs	r3, r3, #8
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	737b      	strb	r3, [r7, #13]
		sendData[6] = wheelsensor.RightVelocity & 0xFF;
 8001dba:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <Feedback_Task+0x1dc>)
 8001dbc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	73bb      	strb	r3, [r7, #14]
		sendData[7] = (my_95Q.Acc_x >> 8) & 0xFF;
 8001dc4:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <Feedback_Task+0x1e0>)
 8001dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dca:	121b      	asrs	r3, r3, #8
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
		sendData[8] = my_95Q.Acc_x & 0XFF;
 8001dd2:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <Feedback_Task+0x1e0>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	743b      	strb	r3, [r7, #16]
		sendData[9] = (my_95Q.Acc_y >> 8) & 0XFF;
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <Feedback_Task+0x1e0>)
 8001dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001de2:	121b      	asrs	r3, r3, #8
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	747b      	strb	r3, [r7, #17]
		sendData[10] = my_95Q.Acc_y & 0xFF;
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <Feedback_Task+0x1e0>)
 8001dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	74bb      	strb	r3, [r7, #18]
		sendData[11] = (my_95Q.Acc_z >> 8) & 0xFF;
 8001df4:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <Feedback_Task+0x1e0>)
 8001df6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dfa:	121b      	asrs	r3, r3, #8
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	74fb      	strb	r3, [r7, #19]
		sendData[12] = my_95Q.Acc_z & 0xFF;
 8001e02:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	753b      	strb	r3, [r7, #20]
		sendData[13] = (my_95Q.Gyro_x >> 8) & 0XFF;
 8001e0c:	4b52      	ldr	r3, [pc, #328]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e12:	121b      	asrs	r3, r3, #8
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	757b      	strb	r3, [r7, #21]
		sendData[14] = my_95Q.Gyro_x & 0xFF;
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	75bb      	strb	r3, [r7, #22]
		sendData[15] = (my_95Q.Gyro_y >> 8) & 0XFF;
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e2a:	121b      	asrs	r3, r3, #8
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	75fb      	strb	r3, [r7, #23]
		sendData[16] = my_95Q.Gyro_y & 0xFF;
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	763b      	strb	r3, [r7, #24]
		sendData[17] = (my_95Q.Gyro_z >> 8) & 0XFF;
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e42:	121b      	asrs	r3, r3, #8
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	767b      	strb	r3, [r7, #25]
		sendData[18] = my_95Q.Gyro_z >> 8 & 0xFF;
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e50:	121b      	asrs	r3, r3, #8
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	76bb      	strb	r3, [r7, #26]
		sendData[19] = (my_95Q.Q0 >> 8) & 0xFF;
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e5e:	121b      	asrs	r3, r3, #8
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	76fb      	strb	r3, [r7, #27]
		sendData[20] = my_95Q.Q0 & 0xFF;
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	773b      	strb	r3, [r7, #28]
		sendData[21] = (my_95Q.Q1 >> 8) & 0xFF;
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e72:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	777b      	strb	r3, [r7, #29]
		sendData[22] = my_95Q.Q1 & 0xFF;
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	77bb      	strb	r3, [r7, #30]
		sendData[23] = (my_95Q.Q2 >> 8) & 0xFF;
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e8e:	121b      	asrs	r3, r3, #8
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	77fb      	strb	r3, [r7, #31]
		sendData[24] = my_95Q.Q2 & 0xFF;
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <Feedback_Task+0x1e0>)
 8001e98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f887 3020 	strb.w	r3, [r7, #32]
		sendData[25] = (my_95Q.Q3 >> 8) & 0xFF;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <Feedback_Task+0x1e0>)
 8001ea4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ea8:	121b      	asrs	r3, r3, #8
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		sendData[26] = my_95Q.Q3 & 0xFF;
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <Feedback_Task+0x1e0>)
 8001eb4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		sendData[27] = (((int)pulse.distance) >> 8) & 0xFF;
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <Feedback_Task+0x1e4>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f886 	bl	8000fd4 <__aeabi_f2iz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	121b      	asrs	r3, r3, #8
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		sendData[28] = ((int)pulse.distance) & 0xFF;
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <Feedback_Task+0x1e4>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f87c 	bl	8000fd4 <__aeabi_f2iz>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sendData[29] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <Feedback_Task+0x1e8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f873 	bl	8000fd4 <__aeabi_f2iz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	121b      	asrs	r3, r3, #8
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		sendData[30] = ((int)pulse2.distance) & 0xFF;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <Feedback_Task+0x1e8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f869 	bl	8000fd4 <__aeabi_f2iz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		sendData[31] = d80nk_[0] & 0xFF;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <Feedback_Task+0x1ec>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		sendData[32] = d80nk_[1] & 0xFF;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <Feedback_Task+0x1ec>)
 8001f14:	785b      	ldrb	r3, [r3, #1]
 8001f16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		sendData[33] = d80nk_[2] & 0xFF;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <Feedback_Task+0x1ec>)
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		sendData[34] = d80nk_[3] & 0xFF;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <Feedback_Task+0x1ec>)
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		sendData[35] = checksum(sendData, 36);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	2124      	movs	r1, #36	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fccf 	bl	80018d4 <checksum>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart1, sendData, 36, HAL_MAX_DELAY);
 8001f3c:	f107 0108 	add.w	r1, r7, #8
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2224      	movs	r2, #36	; 0x24
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <Feedback_Task+0x1f0>)
 8001f48:	f004 fc32 	bl	80067b0 <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8001f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f4e:	f005 fe1b 	bl	8007b88 <vTaskDelay>
	{
 8001f52:	e717      	b.n	8001d84 <Feedback_Task+0xc>
 8001f54:	200000bc 	.word	0x200000bc
 8001f58:	2000011c 	.word	0x2000011c
 8001f5c:	200000e0 	.word	0x200000e0
 8001f60:	200000f0 	.word	0x200000f0
 8001f64:	20000100 	.word	0x20000100
 8001f68:	200004cc 	.word	0x200004cc

08001f6c <Sensor_Task>:
	}
}

void Sensor_Task(void *argument)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	SR04_Init();
 8001f74:	f7ff fb54 	bl	8001620 <SR04_Init>
	while(1)
	{
		SR04_Start();
 8001f78:	f7ff fb68 	bl	800164c <SR04_Start>
		d80nk_read();
 8001f7c:	f7ff fd0e 	bl	800199c <d80nk_read>
		distance_Calculate();
 8001f80:	f7ff fd4e 	bl	8001a20 <distance_Calculate>
		SR04_Start();
 8001f84:	e7f8      	b.n	8001f78 <Sensor_Task+0xc>
	...

08001f88 <IMU_Task>:
	}
}

void IMU_Task(void *argument)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 8001f90:	23c8      	movs	r3, #200	; 0xc8
 8001f92:	60fb      	str	r3, [r7, #12]
	iic_read(0x02,&td,1);
 8001f94:	2201      	movs	r2, #1
 8001f96:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <IMU_Task+0x40>)
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f000 f871 	bl	8002080 <iic_read>
	while(td != 1)
 8001f9e:	e007      	b.n	8001fb0 <IMU_Task+0x28>
	{
	    iic_read(0x02,&td,1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <IMU_Task+0x40>)
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f000 f86b 	bl	8002080 <iic_read>
		vTaskDelay(tick_delay);
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f005 fdec 	bl	8007b88 <vTaskDelay>
	while(td != 1)
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <IMU_Task+0x40>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d1f3      	bne.n	8001fa0 <IMU_Task+0x18>
	}
	while(1)
	{
		gy95_All(&my_95Q);
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <IMU_Task+0x44>)
 8001fba:	f000 f8ad 	bl	8002118 <gy95_All>
		vTaskDelay(500);
 8001fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc2:	f005 fde1 	bl	8007b88 <vTaskDelay>
		gy95_All(&my_95Q);
 8001fc6:	e7f7      	b.n	8001fb8 <IMU_Task+0x30>
 8001fc8:	20000130 	.word	0x20000130
 8001fcc:	2000011c 	.word	0x2000011c

08001fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <MX_GPIO_Init+0xa4>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <MX_GPIO_Init+0xa4>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_GPIO_Init+0xa4>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_GPIO_Init+0xa4>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <MX_GPIO_Init+0xa4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_GPIO_Init+0xa4>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <MX_GPIO_Init+0xa4>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <MX_GPIO_Init+0xa4>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_GPIO_Init+0xa4>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2182      	movs	r1, #130	; 0x82
 8002030:	4811      	ldr	r0, [pc, #68]	; (8002078 <MX_GPIO_Init+0xa8>)
 8002032:	f001 ff62 	bl	8003efa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002036:	2382      	movs	r3, #130	; 0x82
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480a      	ldr	r0, [pc, #40]	; (8002078 <MX_GPIO_Init+0xa8>)
 800204e:	f001 fda9 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002052:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_GPIO_Init+0xac>)
 8002068:	f001 fd9c 	bl	8003ba4 <HAL_GPIO_Init>

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	40010800 	.word	0x40010800
 800207c:	40010c00 	.word	0x40010c00

08002080 <iic_read>:
#include "usart.h"



void iic_read(uint8_t add, uint8_t *data, uint8_t len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    uint8_t mess[20];

    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iic_add << 1, &add, 1, 100);
 8002090:	1dfa      	adds	r2, r7, #7
 8002092:	2364      	movs	r3, #100	; 0x64
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	21a4      	movs	r1, #164	; 0xa4
 800209a:	481b      	ldr	r0, [pc, #108]	; (8002108 <iic_read+0x88>)
 800209c:	f002 f88a 	bl	80041b4 <HAL_I2C_Master_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <iic_read+0x46>
		sprintf(mess, "not transmit to I2C device\n");
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	4917      	ldr	r1, [pc, #92]	; (800210c <iic_read+0x8c>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f006 fcad 	bl	8008a10 <siprintf>
		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
 80020b6:	f107 0108 	add.w	r1, r7, #8
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	2214      	movs	r2, #20
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <iic_read+0x90>)
 80020c2:	f004 fb75 	bl	80067b0 <HAL_UART_Transmit>
    }
    ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)iic_add << 1, data, len, 100);
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2264      	movs	r2, #100	; 0x64
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	21a4      	movs	r1, #164	; 0xa4
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <iic_read+0x88>)
 80020d4:	f002 f96c 	bl	80043b0 <HAL_I2C_Master_Receive>
 80020d8:	4603      	mov	r3, r0
 80020da:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <iic_read+0x7e>
		sprintf(mess, "no receive from I2C device");
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <iic_read+0x94>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 fc91 	bl	8008a10 <siprintf>
		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
 80020ee:	f107 0108 	add.w	r1, r7, #8
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	2214      	movs	r2, #20
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <iic_read+0x90>)
 80020fa:	f004 fb59 	bl	80067b0 <HAL_UART_Transmit>
    }
    // If everything is OK
//	sprintf(mess, "I2C Read OK\n");
//	HAL_UART_Transmit(&huart1, (uint8_t*)mess, strlen(mess), HAL_MAX_DELAY);

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000039c 	.word	0x2000039c
 800210c:	08009450 	.word	0x08009450
 8002110:	200004cc 	.word	0x200004cc
 8002114:	0800946c 	.word	0x0800946c

08002118 <gy95_All>:


void gy95_All(gy* my_95Q)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	uint8_t data_L;
    uint8_t data_H;

    iic_read(ACC_X_L, &data_L, 1);
 8002120:	f107 030f 	add.w	r3, r7, #15
 8002124:	2201      	movs	r2, #1
 8002126:	4619      	mov	r1, r3
 8002128:	2008      	movs	r0, #8
 800212a:	f7ff ffa9 	bl	8002080 <iic_read>
    iic_read(ACC_X_H, &data_H, 1);
 800212e:	f107 030e 	add.w	r3, r7, #14
 8002132:	2201      	movs	r2, #1
 8002134:	4619      	mov	r1, r3
 8002136:	2009      	movs	r0, #9
 8002138:	f7ff ffa2 	bl	8002080 <iic_read>
    my_95Q->Acc_x = (int16_t)((data_H << 8) | data_L);
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21a      	sxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	801a      	strh	r2, [r3, #0]

    iic_read(ACC_Y_L, &data_L, 1);
 800214e:	f107 030f 	add.w	r3, r7, #15
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	200a      	movs	r0, #10
 8002158:	f7ff ff92 	bl	8002080 <iic_read>
    iic_read(ACC_Y_H, &data_H, 1);
 800215c:	f107 030e 	add.w	r3, r7, #14
 8002160:	2201      	movs	r2, #1
 8002162:	4619      	mov	r1, r3
 8002164:	200b      	movs	r0, #11
 8002166:	f7ff ff8b 	bl	8002080 <iic_read>
    my_95Q->Acc_y = (int16_t)((data_H << 8) | data_L);
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	805a      	strh	r2, [r3, #2]

    iic_read(ACC_Z_L, &data_L, 1);
 800217c:	f107 030f 	add.w	r3, r7, #15
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	200c      	movs	r0, #12
 8002186:	f7ff ff7b 	bl	8002080 <iic_read>
    iic_read(ACC_Z_H, &data_H, 1);
 800218a:	f107 030e 	add.w	r3, r7, #14
 800218e:	2201      	movs	r2, #1
 8002190:	4619      	mov	r1, r3
 8002192:	200d      	movs	r0, #13
 8002194:	f7ff ff74 	bl	8002080 <iic_read>
    my_95Q->Acc_z = (int16_t)((data_H << 8) | data_L);
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	809a      	strh	r2, [r3, #4]

    iic_read(GYRO_X_L, &data_L, 1);
 80021aa:	f107 030f 	add.w	r3, r7, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	4619      	mov	r1, r3
 80021b2:	200e      	movs	r0, #14
 80021b4:	f7ff ff64 	bl	8002080 <iic_read>
    iic_read(GYRO_X_H, &data_H, 1);
 80021b8:	f107 030e 	add.w	r3, r7, #14
 80021bc:	2201      	movs	r2, #1
 80021be:	4619      	mov	r1, r3
 80021c0:	200f      	movs	r0, #15
 80021c2:	f7ff ff5d 	bl	8002080 <iic_read>
    my_95Q->Gyro_x = (int16_t)((data_H << 8) | data_L);
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	80da      	strh	r2, [r3, #6]

    iic_read(GYRO_Y_L, &data_L, 1);
 80021d8:	f107 030f 	add.w	r3, r7, #15
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	2010      	movs	r0, #16
 80021e2:	f7ff ff4d 	bl	8002080 <iic_read>
    iic_read(GYRO_Y_H, &data_H, 1);
 80021e6:	f107 030e 	add.w	r3, r7, #14
 80021ea:	2201      	movs	r2, #1
 80021ec:	4619      	mov	r1, r3
 80021ee:	2011      	movs	r0, #17
 80021f0:	f7ff ff46 	bl	8002080 <iic_read>
    my_95Q->Gyro_y = (int16_t)((data_H << 8) | data_L);
 80021f4:	7bbb      	ldrb	r3, [r7, #14]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b21a      	sxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	811a      	strh	r2, [r3, #8]

    iic_read(GYRO_Z_L, &data_L, 1);
 8002206:	f107 030f 	add.w	r3, r7, #15
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	2012      	movs	r0, #18
 8002210:	f7ff ff36 	bl	8002080 <iic_read>
    iic_read(GYRO_Z_H, &data_H, 1);
 8002214:	f107 030e 	add.w	r3, r7, #14
 8002218:	2201      	movs	r2, #1
 800221a:	4619      	mov	r1, r3
 800221c:	2013      	movs	r0, #19
 800221e:	f7ff ff2f 	bl	8002080 <iic_read>
    my_95Q->Gyro_z = (int16_t)((data_H << 8) | data_L);
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21a      	sxth	r2, r3
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	815a      	strh	r2, [r3, #10]

    iic_read(Q0_L, &data_L, 1);
 8002234:	f107 030f 	add.w	r3, r7, #15
 8002238:	2201      	movs	r2, #1
 800223a:	4619      	mov	r1, r3
 800223c:	2023      	movs	r0, #35	; 0x23
 800223e:	f7ff ff1f 	bl	8002080 <iic_read>
    iic_read(Q0_H, &data_H, 1);
 8002242:	f107 030e 	add.w	r3, r7, #14
 8002246:	2201      	movs	r2, #1
 8002248:	4619      	mov	r1, r3
 800224a:	2024      	movs	r0, #36	; 0x24
 800224c:	f7ff ff18 	bl	8002080 <iic_read>
    my_95Q->Q0 = (int16_t)((data_H << 8) | data_L) / 1000;
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21b      	sxth	r3, r3
 800225e:	4a33      	ldr	r2, [pc, #204]	; (800232c <gy95_All+0x214>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	1192      	asrs	r2, r2, #6
 8002266:	17db      	asrs	r3, r3, #31
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	819a      	strh	r2, [r3, #12]

    iic_read(Q1_L, &data_L, 1);
 8002270:	f107 030f 	add.w	r3, r7, #15
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	2025      	movs	r0, #37	; 0x25
 800227a:	f7ff ff01 	bl	8002080 <iic_read>
	iic_read(Q1_H, &data_H, 1);
 800227e:	f107 030e 	add.w	r3, r7, #14
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	2026      	movs	r0, #38	; 0x26
 8002288:	f7ff fefa 	bl	8002080 <iic_read>
	my_95Q->Q1 = (int16_t)((data_H << 8) | data_L) / 1000;
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <gy95_All+0x214>)
 800229c:	fb82 1203 	smull	r1, r2, r2, r3
 80022a0:	1192      	asrs	r2, r2, #6
 80022a2:	17db      	asrs	r3, r3, #31
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	81da      	strh	r2, [r3, #14]

	iic_read(Q2_L, &data_L, 1);
 80022ac:	f107 030f 	add.w	r3, r7, #15
 80022b0:	2201      	movs	r2, #1
 80022b2:	4619      	mov	r1, r3
 80022b4:	2027      	movs	r0, #39	; 0x27
 80022b6:	f7ff fee3 	bl	8002080 <iic_read>
	iic_read(Q2_H, &data_H, 1);
 80022ba:	f107 030e 	add.w	r3, r7, #14
 80022be:	2201      	movs	r2, #1
 80022c0:	4619      	mov	r1, r3
 80022c2:	2028      	movs	r0, #40	; 0x28
 80022c4:	f7ff fedc 	bl	8002080 <iic_read>
	my_95Q->Q2 = (int16_t)((data_H << 8) | data_L) / 1000;
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <gy95_All+0x214>)
 80022d8:	fb82 1203 	smull	r1, r2, r2, r3
 80022dc:	1192      	asrs	r2, r2, #6
 80022de:	17db      	asrs	r3, r3, #31
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	821a      	strh	r2, [r3, #16]

	iic_read(Q3_L, &data_L, 1);
 80022e8:	f107 030f 	add.w	r3, r7, #15
 80022ec:	2201      	movs	r2, #1
 80022ee:	4619      	mov	r1, r3
 80022f0:	2029      	movs	r0, #41	; 0x29
 80022f2:	f7ff fec5 	bl	8002080 <iic_read>
	iic_read(Q3_H, &data_H, 1);
 80022f6:	f107 030e 	add.w	r3, r7, #14
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	202a      	movs	r0, #42	; 0x2a
 8002300:	f7ff febe 	bl	8002080 <iic_read>
	my_95Q->Q3 = (int16_t)((data_H << 8) | data_L) / 1000;
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <gy95_All+0x214>)
 8002314:	fb82 1203 	smull	r1, r2, r2, r3
 8002318:	1192      	asrs	r2, r2, #6
 800231a:	17db      	asrs	r3, r3, #31
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b21a      	sxth	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	825a      	strh	r2, [r3, #18]
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_I2C1_Init+0x50>)
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <MX_I2C1_Init+0x54>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_I2C1_Init+0x50>)
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_I2C1_Init+0x58>)
 800233e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_I2C1_Init+0x50>)
 800234e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_I2C1_Init+0x50>)
 800236e:	f001 fddd 	bl	8003f2c <HAL_I2C_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002378:	f000 f8a8 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000039c 	.word	0x2000039c
 8002384:	40005400 	.word	0x40005400
 8002388:	00061a80 	.word	0x00061a80

0800238c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_I2C_MspInit+0x70>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d123      	bne.n	80023f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c4:	23c0      	movs	r3, #192	; 0xc0
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4619      	mov	r1, r3
 80023d6:	480b      	ldr	r0, [pc, #44]	; (8002404 <HAL_I2C_MspInit+0x78>)
 80023d8:	f001 fbe4 	bl	8003ba4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023f4:	bf00      	nop
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40005400 	.word	0x40005400
 8002400:	40021000 	.word	0x40021000
 8002404:	40010c00 	.word	0x40010c00

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f000 fdb2 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002410:	f000 f817 	bl	8002442 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f7ff fddc 	bl	8001fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002418:	f7ff fa16 	bl	8001848 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800241c:	f000 fb2c 	bl	8002a78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002420:	f000 fb54 	bl	8002acc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002424:	f000 fb7c 	bl	8002b20 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002428:	f7ff ff82 	bl	8002330 <MX_I2C1_Init>
  MX_TIM2_Init();
 800242c:	f000 f962 	bl	80026f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002430:	f000 f9d0 	bl	80027d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002434:	f000 fa3e 	bl	80028b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002438:	f7ff fb34 	bl	8001aa4 <MX_FREERTOS_Init>

  /* Start scheduler */
  vTaskStartScheduler();
 800243c:	f005 fbd8 	bl	8007bf0 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002440:	e7fe      	b.n	8002440 <main+0x38>

08002442 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b090      	sub	sp, #64	; 0x40
 8002446:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002448:	f107 0318 	add.w	r3, r7, #24
 800244c:	2228      	movs	r2, #40	; 0x28
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f006 fafd 	bl	8008a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002464:	2301      	movs	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800246c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002476:	2302      	movs	r3, #2
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fd82 	bl	8004f94 <HAL_RCC_OscConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002496:	f000 f819 	bl	80024cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2302      	movs	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 ffef 	bl	8005498 <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024c0:	f000 f804 	bl	80024cc <Error_Handler>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3740      	adds	r7, #64	; 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <Error_Handler+0x8>
	...

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_MspInit+0x68>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_MspInit+0x68>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6193      	str	r3, [r2, #24]
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_MspInit+0x68>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_MspInit+0x68>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_MspInit+0x68>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_MspInit+0x68>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	210f      	movs	r1, #15
 8002512:	f06f 0001 	mvn.w	r0, #1
 8002516:	f000 fe8a 	bl	800322e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_MspInit+0x6c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_MspInit+0x6c>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40010000 	.word	0x40010000

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler+0x4>

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 fd43 	bl	8003000 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800257a:	f005 fe2b 	bl	80081d4 <xTaskGetSchedulerState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002584:	f006 f818 	bl	80085b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA1_Channel2_IRQHandler+0x10>)
 8002592:	f001 f89d 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200006f8 	.word	0x200006f8

080025a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA1_Channel3_IRQHandler+0x10>)
 80025a6:	f001 f893 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200006b4 	.word	0x200006b4

080025b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Channel4_IRQHandler+0x10>)
 80025ba:	f001 f889 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200005e8 	.word	0x200005e8

080025c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Channel5_IRQHandler+0x10>)
 80025ce:	f001 f87f 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200005a4 	.word	0x200005a4

080025dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA1_Channel6_IRQHandler+0x10>)
 80025e2:	f001 f875 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000062c 	.word	0x2000062c

080025f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA1_Channel7_IRQHandler+0x10>)
 80025f6:	f001 f86b 	bl	80036d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000670 	.word	0x20000670

08002604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM2_IRQHandler+0x10>)
 800260a:	f003 faf5 	bl	8005bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200003f4 	.word	0x200003f4

08002618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM3_IRQHandler+0x10>)
 800261e:	f003 faeb 	bl	8005bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000043c 	.word	0x2000043c

0800262c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM4_IRQHandler+0x10>)
 8002632:	f003 fae1 	bl	8005bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000484 	.word	0x20000484

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f004 f963 	bl	8006910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200004cc 	.word	0x200004cc

08002654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART2_IRQHandler+0x10>)
 800265a:	f004 f959 	bl	8006910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000514 	.word	0x20000514

08002668 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <USART3_IRQHandler+0x10>)
 800266e:	f004 f94f 	bl	8006910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000055c 	.word	0x2000055c

0800267c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <_sbrk+0x5c>)
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <_sbrk+0x60>)
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <_sbrk+0x64>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <_sbrk+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d207      	bcs.n	80026bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026ac:	f006 f9d8 	bl	8008a60 <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	220c      	movs	r2, #12
 80026b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e009      	b.n	80026d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <_sbrk+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	2000c000 	.word	0x2000c000
 80026dc:	00000400 	.word	0x00000400
 80026e0:	200003f0 	.word	0x200003f0
 80026e4:	200015e0 	.word	0x200015e0

080026e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fa:	f107 0318 	add.w	r3, r7, #24
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002728:	2247      	movs	r2, #71	; 0x47
 800272a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <MX_TIM2_Init+0xdc>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <MX_TIM2_Init+0xdc>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002746:	4822      	ldr	r0, [pc, #136]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002748:	f003 f834 	bl	80057b4 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002752:	f7ff febb 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800275c:	f107 0318 	add.w	r3, r7, #24
 8002760:	4619      	mov	r1, r3
 8002762:	481b      	ldr	r0, [pc, #108]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002764:	f003 fbd4 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800276e:	f7ff fead 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002772:	4817      	ldr	r0, [pc, #92]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002774:	f003 f8ce 	bl	8005914 <HAL_TIM_IC_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800277e:	f7ff fea5 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4619      	mov	r1, r3
 8002790:	480f      	ldr	r0, [pc, #60]	; (80027d0 <MX_TIM2_Init+0xdc>)
 8002792:	f003 ff3f 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800279c:	f7ff fe96 	bl	80024cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027a0:	2300      	movs	r3, #0
 80027a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027a4:	2301      	movs	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027b0:	463b      	mov	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_TIM2_Init+0xdc>)
 80027b8:	f003 fb0e 	bl	8005dd8 <HAL_TIM_IC_ConfigChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80027c2:	f7ff fe83 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200003f4 	.word	0x200003f4

080027d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027f2:	463b      	mov	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <MX_TIM3_Init+0xdc>)
 8002802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002806:	2247      	movs	r2, #71	; 0x47
 8002808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <MX_TIM3_Init+0xd8>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <MX_TIM3_Init+0xd8>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002824:	4821      	ldr	r0, [pc, #132]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002826:	f002 ffc5 	bl	80057b4 <HAL_TIM_Base_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002830:	f7ff fe4c 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002838:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800283a:	f107 0318 	add.w	r3, r7, #24
 800283e:	4619      	mov	r1, r3
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002842:	f003 fb65 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800284c:	f7ff fe3e 	bl	80024cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002850:	4816      	ldr	r0, [pc, #88]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002852:	f003 f85f 	bl	8005914 <HAL_TIM_IC_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800285c:	f7ff fe36 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4619      	mov	r1, r3
 800286e:	480f      	ldr	r0, [pc, #60]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002870:	f003 fed0 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800287a:	f7ff fe27 	bl	80024cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002882:	2301      	movs	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800288e:	463b      	mov	r3, r7
 8002890:	2200      	movs	r2, #0
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_TIM3_Init+0xd8>)
 8002896:	f003 fa9f 	bl	8005dd8 <HAL_TIM_IC_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80028a0:	f7ff fe14 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000043c 	.word	0x2000043c
 80028b0:	40000400 	.word	0x40000400

080028b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <MX_TIM4_Init+0x94>)
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <MX_TIM4_Init+0x98>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <MX_TIM4_Init+0x94>)
 80028d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80028dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <MX_TIM4_Init+0x94>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028e4:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_TIM4_Init+0x94>)
 80028e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <MX_TIM4_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <MX_TIM4_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028f8:	4813      	ldr	r0, [pc, #76]	; (8002948 <MX_TIM4_Init+0x94>)
 80028fa:	f002 ff5b 	bl	80057b4 <HAL_TIM_Base_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002904:	f7ff fde2 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	4619      	mov	r1, r3
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <MX_TIM4_Init+0x94>)
 8002916:	f003 fafb 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002920:	f7ff fdd4 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002924:	2300      	movs	r3, #0
 8002926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800292c:	463b      	mov	r3, r7
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_TIM4_Init+0x94>)
 8002932:	f003 fe6f 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800293c:	f7ff fdc6 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000484 	.word	0x20000484
 800294c:	40000800 	.word	0x40000800

08002950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d12c      	bne.n	80029ca <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	61d3      	str	r3, [r2, #28]
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029a0:	2301      	movs	r3, #1
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0320 	add.w	r3, r7, #32
 80029b0:	4619      	mov	r1, r3
 80029b2:	482e      	ldr	r0, [pc, #184]	; (8002a6c <HAL_TIM_Base_MspInit+0x11c>)
 80029b4:	f001 f8f6 	bl	8003ba4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2105      	movs	r1, #5
 80029bc:	201c      	movs	r0, #28
 80029be:	f000 fc36 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c2:	201c      	movs	r0, #28
 80029c4:	f000 fc4f 	bl	8003266 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029c8:	e04a      	b.n	8002a60 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_TIM_Base_MspInit+0x120>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d12c      	bne.n	8002a2e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	61d3      	str	r3, [r2, #28]
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	4619      	mov	r1, r3
 8002a16:	4815      	ldr	r0, [pc, #84]	; (8002a6c <HAL_TIM_Base_MspInit+0x11c>)
 8002a18:	f001 f8c4 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	201d      	movs	r0, #29
 8002a22:	f000 fc04 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a26:	201d      	movs	r0, #29
 8002a28:	f000 fc1d 	bl	8003266 <HAL_NVIC_EnableIRQ>
}
 8002a2c:	e018      	b.n	8002a60 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_TIM_Base_MspInit+0x124>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d113      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	61d3      	str	r3, [r2, #28]
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_TIM_Base_MspInit+0x118>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2105      	movs	r1, #5
 8002a54:	201e      	movs	r0, #30
 8002a56:	f000 fbea 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a5a:	201e      	movs	r0, #30
 8002a5c:	f000 fc03 	bl	8003266 <HAL_NVIC_EnableIRQ>
}
 8002a60:	bf00      	nop
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <MX_USART1_UART_Init+0x50>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	f003 fe2e 	bl	8006710 <HAL_UART_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aba:	f7ff fd07 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200004cc 	.word	0x200004cc
 8002ac8:	40013800 	.word	0x40013800

08002acc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <MX_USART2_UART_Init+0x50>)
 8002ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002af2:	220c      	movs	r2, #12
 8002af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_USART2_UART_Init+0x4c>)
 8002b04:	f003 fe04 	bl	8006710 <HAL_UART_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b0e:	f7ff fcdd 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000514 	.word	0x20000514
 8002b1c:	40004400 	.word	0x40004400

08002b20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <MX_USART3_UART_Init+0x50>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_USART3_UART_Init+0x4c>)
 8002b58:	f003 fdda 	bl	8006710 <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b62:	f7ff fcb3 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000055c 	.word	0x2000055c
 8002b70:	40004800 	.word	0x40004800

08002b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0320 	add.w	r3, r7, #32
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a8b      	ldr	r2, [pc, #556]	; (8002dbc <HAL_UART_MspInit+0x248>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	f040 8087 	bne.w	8002ca4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b96:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	4a89      	ldr	r2, [pc, #548]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba0:	6193      	str	r3, [r2, #24]
 8002ba2:	4b87      	ldr	r3, [pc, #540]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a83      	ldr	r2, [pc, #524]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 0320 	add.w	r3, r7, #32
 8002bd8:	4619      	mov	r1, r3
 8002bda:	487a      	ldr	r0, [pc, #488]	; (8002dc4 <HAL_UART_MspInit+0x250>)
 8002bdc:	f000 ffe2 	bl	8003ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4873      	ldr	r0, [pc, #460]	; (8002dc4 <HAL_UART_MspInit+0x250>)
 8002bf6:	f000 ffd5 	bl	8003ba4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002bfa:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002bfc:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <HAL_UART_MspInit+0x258>)
 8002bfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0c:	4b6e      	ldr	r3, [pc, #440]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c1e:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c2a:	4867      	ldr	r0, [pc, #412]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c2c:	f000 fb36 	bl	800329c <HAL_DMA_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002c36:	f7ff fc49 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a62      	ldr	r2, [pc, #392]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c40:	4a61      	ldr	r2, [pc, #388]	; (8002dc8 <HAL_UART_MspInit+0x254>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c46:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c48:	4a62      	ldr	r2, [pc, #392]	; (8002dd4 <HAL_UART_MspInit+0x260>)
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c4c:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c4e:	2210      	movs	r2, #16
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c64:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c70:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c76:	4856      	ldr	r0, [pc, #344]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c78:	f000 fb10 	bl	800329c <HAL_DMA_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002c82:	f7ff fc23 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c8c:	4a50      	ldr	r2, [pc, #320]	; (8002dd0 <HAL_UART_MspInit+0x25c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2105      	movs	r1, #5
 8002c96:	2025      	movs	r0, #37	; 0x25
 8002c98:	f000 fac9 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c9c:	2025      	movs	r0, #37	; 0x25
 8002c9e:	f000 fae2 	bl	8003266 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ca2:	e12f      	b.n	8002f04 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_UART_MspInit+0x264>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f040 809e 	bne.w	8002dec <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb0:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cba:	61d3      	str	r3, [r2, #28]
 8002cbc:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6193      	str	r3, [r2, #24]
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_UART_MspInit+0x24c>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0320 	add.w	r3, r7, #32
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4834      	ldr	r0, [pc, #208]	; (8002dc4 <HAL_UART_MspInit+0x250>)
 8002cf4:	f000 ff56 	bl	8003ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 0320 	add.w	r3, r7, #32
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482e      	ldr	r0, [pc, #184]	; (8002dc4 <HAL_UART_MspInit+0x250>)
 8002d0c:	f000 ff4a 	bl	8003ba4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d12:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <HAL_UART_MspInit+0x26c>)
 8002d14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d34:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d40:	4826      	ldr	r0, [pc, #152]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d42:	f000 faab 	bl	800329c <HAL_DMA_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002d4c:	f7ff fbbe 	bl	80024cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_UART_MspInit+0x268>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_UART_MspInit+0x274>)
 8002d60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d64:	2210      	movs	r2, #16
 8002d66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d8c:	4815      	ldr	r0, [pc, #84]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002d8e:	f000 fa85 	bl	800329c <HAL_DMA_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002d98:	f7ff fb98 	bl	80024cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <HAL_UART_MspInit+0x270>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2105      	movs	r1, #5
 8002dac:	2026      	movs	r0, #38	; 0x26
 8002dae:	f000 fa3e 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db2:	2026      	movs	r0, #38	; 0x26
 8002db4:	f000 fa57 	bl	8003266 <HAL_NVIC_EnableIRQ>
}
 8002db8:	e0a4      	b.n	8002f04 <HAL_UART_MspInit+0x390>
 8002dba:	bf00      	nop
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	200005a4 	.word	0x200005a4
 8002dcc:	40020058 	.word	0x40020058
 8002dd0:	200005e8 	.word	0x200005e8
 8002dd4:	40020044 	.word	0x40020044
 8002dd8:	40004400 	.word	0x40004400
 8002ddc:	2000062c 	.word	0x2000062c
 8002de0:	4002006c 	.word	0x4002006c
 8002de4:	20000670 	.word	0x20000670
 8002de8:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a46      	ldr	r2, [pc, #280]	; (8002f0c <HAL_UART_MspInit+0x398>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f040 8086 	bne.w	8002f04 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a44      	ldr	r2, [pc, #272]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a3e      	ldr	r2, [pc, #248]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	; (8002f10 <HAL_UART_MspInit+0x39c>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0320 	add.w	r3, r7, #32
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4835      	ldr	r0, [pc, #212]	; (8002f14 <HAL_UART_MspInit+0x3a0>)
 8002e3e:	f000 feb1 	bl	8003ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 0320 	add.w	r3, r7, #32
 8002e54:	4619      	mov	r1, r3
 8002e56:	482f      	ldr	r0, [pc, #188]	; (8002f14 <HAL_UART_MspInit+0x3a0>)
 8002e58:	f000 fea4 	bl	8003ba4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <HAL_UART_MspInit+0x3a8>)
 8002e60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e62:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e8c:	4822      	ldr	r0, [pc, #136]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002e8e:	f000 fa05 	bl	800329c <HAL_DMA_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_MspInit+0x328>
      Error_Handler();
 8002e98:	f7ff fb18 	bl	80024cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_UART_MspInit+0x3a4>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_UART_MspInit+0x3b0>)
 8002eac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002eda:	f000 f9df 	bl	800329c <HAL_DMA_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8002ee4:	f7ff faf2 	bl	80024cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
 8002eee:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_UART_MspInit+0x3ac>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	2027      	movs	r0, #39	; 0x27
 8002efa:	f000 f998 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002efe:	2027      	movs	r0, #39	; 0x27
 8002f00:	f000 f9b1 	bl	8003266 <HAL_NVIC_EnableIRQ>
}
 8002f04:	bf00      	nop
 8002f06:	3730      	adds	r7, #48	; 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40004800 	.word	0x40004800
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	200006b4 	.word	0x200006b4
 8002f1c:	40020030 	.word	0x40020030
 8002f20:	200006f8 	.word	0x200006f8
 8002f24:	4002001c 	.word	0x4002001c

08002f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f28:	f7ff fbde 	bl	80026e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480b      	ldr	r0, [pc, #44]	; (8002f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f2e:	490c      	ldr	r1, [pc, #48]	; (8002f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f44:	4c09      	ldr	r4, [pc, #36]	; (8002f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f52:	f005 fd8b 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f56:	f7ff fa57 	bl	8002408 <main>
  bx lr
 8002f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002f64:	080094f8 	.word	0x080094f8
  ldr r2, =_sbss
 8002f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f6c:	200015dc 	.word	0x200015dc

08002f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_2_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_Init+0x28>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HAL_Init+0x28>)
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 f947 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f000 f808 	bl	8002fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7ff faa2 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_InitTick+0x54>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_InitTick+0x58>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f95f 	bl	8003282 <HAL_SYSTICK_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00e      	b.n	8002fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d80a      	bhi.n	8002fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f000 f927 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <HAL_InitTick+0x5c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	20000010 	.word	0x20000010
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_IncTick+0x1c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_IncTick+0x20>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a03      	ldr	r2, [pc, #12]	; (8003020 <HAL_IncTick+0x20>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000010 	.word	0x20000010
 8003020:	2000073c 	.word	0x2000073c

08003024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_GetTick+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	2000073c 	.word	0x2000073c

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fff0 	bl	8003024 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffe0 	bl	8003024 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000010 	.word	0x20000010

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db0b      	blt.n	800310e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <__NVIC_EnableIRQ+0x34>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2001      	movs	r0, #1
 8003106:	fa00 f202 	lsl.w	r2, r0, r2
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff90 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff2d 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff42 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff90 	bl	8003170 <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5f 	bl	800311c <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff35 	bl	80030e4 <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <SysTick_Config>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e059      	b.n	8003366 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_DMA_Init+0xd4>)
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d80f      	bhi.n	80032de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_DMA_Init+0xd8>)
 80032c6:	4413      	add	r3, r2
 80032c8:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <HAL_DMA_Init+0xdc>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	009a      	lsls	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a28      	ldr	r2, [pc, #160]	; (800337c <HAL_DMA_Init+0xe0>)
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
 80032dc:	e00e      	b.n	80032fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_DMA_Init+0xe4>)
 80032e6:	4413      	add	r3, r2
 80032e8:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_DMA_Init+0xdc>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_DMA_Init+0xe8>)
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003312:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40020407 	.word	0x40020407
 8003374:	bffdfff8 	.word	0xbffdfff8
 8003378:	cccccccd 	.word	0xcccccccd
 800337c:	40020000 	.word	0x40020000
 8003380:	bffdfbf8 	.word	0xbffdfbf8
 8003384:	40020400 	.word	0x40020400

08003388 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Start_IT+0x20>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e04b      	b.n	8003440 <HAL_DMA_Start_IT+0xb8>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d13a      	bne.n	8003432 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fbb1 	bl	8003b48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 020e 	orr.w	r2, r2, #14
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00f      	b.n	8003420 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 020a 	orr.w	r2, r2, #10
 800341e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e005      	b.n	800343e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d008      	beq.n	8003472 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2204      	movs	r2, #4
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e020      	b.n	80034b4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 020e 	bic.w	r2, r2, #14
 8003480:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d005      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e0d6      	b.n	8003692 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020e 	bic.w	r2, r2, #14
 80034f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b64      	ldr	r3, [pc, #400]	; (800369c <HAL_DMA_Abort_IT+0x1dc>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d958      	bls.n	80035c2 <HAL_DMA_Abort_IT+0x102>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a62      	ldr	r2, [pc, #392]	; (80036a0 <HAL_DMA_Abort_IT+0x1e0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04f      	beq.n	80035ba <HAL_DMA_Abort_IT+0xfa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a61      	ldr	r2, [pc, #388]	; (80036a4 <HAL_DMA_Abort_IT+0x1e4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d048      	beq.n	80035b6 <HAL_DMA_Abort_IT+0xf6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5f      	ldr	r2, [pc, #380]	; (80036a8 <HAL_DMA_Abort_IT+0x1e8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d040      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xf0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5e      	ldr	r2, [pc, #376]	; (80036ac <HAL_DMA_Abort_IT+0x1ec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d038      	beq.n	80035aa <HAL_DMA_Abort_IT+0xea>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5c      	ldr	r2, [pc, #368]	; (80036b0 <HAL_DMA_Abort_IT+0x1f0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d030      	beq.n	80035a4 <HAL_DMA_Abort_IT+0xe4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_DMA_Abort_IT+0x1f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d028      	beq.n	800359e <HAL_DMA_Abort_IT+0xde>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_DMA_Abort_IT+0x1dc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d020      	beq.n	8003598 <HAL_DMA_Abort_IT+0xd8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_DMA_Abort_IT+0x1f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d019      	beq.n	8003594 <HAL_DMA_Abort_IT+0xd4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a55      	ldr	r2, [pc, #340]	; (80036bc <HAL_DMA_Abort_IT+0x1fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d012      	beq.n	8003590 <HAL_DMA_Abort_IT+0xd0>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a54      	ldr	r2, [pc, #336]	; (80036c0 <HAL_DMA_Abort_IT+0x200>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00a      	beq.n	800358a <HAL_DMA_Abort_IT+0xca>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_DMA_Abort_IT+0x204>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d102      	bne.n	8003584 <HAL_DMA_Abort_IT+0xc4>
 800357e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003582:	e01b      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 8003584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003588:	e018      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 800358a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800358e:	e015      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 8003590:	2310      	movs	r3, #16
 8003592:	e013      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 8003594:	2301      	movs	r3, #1
 8003596:	e011      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 8003598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800359c:	e00e      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 800359e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035a2:	e00b      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 80035a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a8:	e008      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 80035aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ae:	e005      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 80035b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b4:	e002      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 80035b6:	2310      	movs	r3, #16
 80035b8:	e000      	b.n	80035bc <HAL_DMA_Abort_IT+0xfc>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4a42      	ldr	r2, [pc, #264]	; (80036c8 <HAL_DMA_Abort_IT+0x208>)
 80035be:	6053      	str	r3, [r2, #4]
 80035c0:	e057      	b.n	8003672 <HAL_DMA_Abort_IT+0x1b2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a36      	ldr	r2, [pc, #216]	; (80036a0 <HAL_DMA_Abort_IT+0x1e0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d04f      	beq.n	800366c <HAL_DMA_Abort_IT+0x1ac>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <HAL_DMA_Abort_IT+0x1e4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d048      	beq.n	8003668 <HAL_DMA_Abort_IT+0x1a8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <HAL_DMA_Abort_IT+0x1e8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d040      	beq.n	8003662 <HAL_DMA_Abort_IT+0x1a2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a31      	ldr	r2, [pc, #196]	; (80036ac <HAL_DMA_Abort_IT+0x1ec>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d038      	beq.n	800365c <HAL_DMA_Abort_IT+0x19c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_DMA_Abort_IT+0x1f0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d030      	beq.n	8003656 <HAL_DMA_Abort_IT+0x196>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <HAL_DMA_Abort_IT+0x1f4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d028      	beq.n	8003650 <HAL_DMA_Abort_IT+0x190>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_DMA_Abort_IT+0x1dc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d020      	beq.n	800364a <HAL_DMA_Abort_IT+0x18a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <HAL_DMA_Abort_IT+0x1f8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d019      	beq.n	8003646 <HAL_DMA_Abort_IT+0x186>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a29      	ldr	r2, [pc, #164]	; (80036bc <HAL_DMA_Abort_IT+0x1fc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d012      	beq.n	8003642 <HAL_DMA_Abort_IT+0x182>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <HAL_DMA_Abort_IT+0x200>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00a      	beq.n	800363c <HAL_DMA_Abort_IT+0x17c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <HAL_DMA_Abort_IT+0x204>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <HAL_DMA_Abort_IT+0x176>
 8003630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003634:	e01b      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363a:	e018      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 800363c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003640:	e015      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003642:	2310      	movs	r3, #16
 8003644:	e013      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003646:	2301      	movs	r3, #1
 8003648:	e011      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 800364a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800364e:	e00e      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003654:	e00b      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365a:	e008      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	e005      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003666:	e002      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 8003668:	2310      	movs	r3, #16
 800366a:	e000      	b.n	800366e <HAL_DMA_Abort_IT+0x1ae>
 800366c:	2301      	movs	r3, #1
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_DMA_Abort_IT+0x20c>)
 8003670:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
    } 
  }
  return status;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40020080 	.word	0x40020080
 80036a0:	40020008 	.word	0x40020008
 80036a4:	4002001c 	.word	0x4002001c
 80036a8:	40020030 	.word	0x40020030
 80036ac:	40020044 	.word	0x40020044
 80036b0:	40020058 	.word	0x40020058
 80036b4:	4002006c 	.word	0x4002006c
 80036b8:	40020408 	.word	0x40020408
 80036bc:	4002041c 	.word	0x4002041c
 80036c0:	40020430 	.word	0x40020430
 80036c4:	40020444 	.word	0x40020444
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020000 	.word	0x40020000

080036d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80f1 	beq.w	80038dc <HAL_DMA_IRQHandler+0x20c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80eb 	beq.w	80038dc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <HAL_DMA_IRQHandler+0x1d8>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d958      	bls.n	80037e2 <HAL_DMA_IRQHandler+0x112>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <HAL_DMA_IRQHandler+0x1dc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04f      	beq.n	80037da <HAL_DMA_IRQHandler+0x10a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_DMA_IRQHandler+0x1e0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d048      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x106>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5a      	ldr	r2, [pc, #360]	; (80038b4 <HAL_DMA_IRQHandler+0x1e4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x100>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a59      	ldr	r2, [pc, #356]	; (80038b8 <HAL_DMA_IRQHandler+0x1e8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d038      	beq.n	80037ca <HAL_DMA_IRQHandler+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a57      	ldr	r2, [pc, #348]	; (80038bc <HAL_DMA_IRQHandler+0x1ec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d030      	beq.n	80037c4 <HAL_DMA_IRQHandler+0xf4>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <HAL_DMA_IRQHandler+0x1f0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d028      	beq.n	80037be <HAL_DMA_IRQHandler+0xee>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4d      	ldr	r2, [pc, #308]	; (80038a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d020      	beq.n	80037b8 <HAL_DMA_IRQHandler+0xe8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_DMA_IRQHandler+0x1f4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d019      	beq.n	80037b4 <HAL_DMA_IRQHandler+0xe4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a50      	ldr	r2, [pc, #320]	; (80038c8 <HAL_DMA_IRQHandler+0x1f8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d012      	beq.n	80037b0 <HAL_DMA_IRQHandler+0xe0>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <HAL_DMA_IRQHandler+0x1fc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00a      	beq.n	80037aa <HAL_DMA_IRQHandler+0xda>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_DMA_IRQHandler+0x200>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d102      	bne.n	80037a4 <HAL_DMA_IRQHandler+0xd4>
 800379e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037a2:	e01b      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037a8:	e018      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ae:	e015      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037b0:	2340      	movs	r3, #64	; 0x40
 80037b2:	e013      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e011      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037bc:	e00e      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037c2:	e00b      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037c8:	e008      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ce:	e005      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d4:	e002      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	e000      	b.n	80037dc <HAL_DMA_IRQHandler+0x10c>
 80037da:	2304      	movs	r3, #4
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_DMA_IRQHandler+0x204>)
 80037de:	6053      	str	r3, [r2, #4]
 80037e0:	e057      	b.n	8003892 <HAL_DMA_IRQHandler+0x1c2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a31      	ldr	r2, [pc, #196]	; (80038ac <HAL_DMA_IRQHandler+0x1dc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04f      	beq.n	800388c <HAL_DMA_IRQHandler+0x1bc>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <HAL_DMA_IRQHandler+0x1e0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d048      	beq.n	8003888 <HAL_DMA_IRQHandler+0x1b8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <HAL_DMA_IRQHandler+0x1e4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d040      	beq.n	8003882 <HAL_DMA_IRQHandler+0x1b2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <HAL_DMA_IRQHandler+0x1e8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d038      	beq.n	800387c <HAL_DMA_IRQHandler+0x1ac>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <HAL_DMA_IRQHandler+0x1ec>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d030      	beq.n	8003876 <HAL_DMA_IRQHandler+0x1a6>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <HAL_DMA_IRQHandler+0x1f0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d028      	beq.n	8003870 <HAL_DMA_IRQHandler+0x1a0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d020      	beq.n	800386a <HAL_DMA_IRQHandler+0x19a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <HAL_DMA_IRQHandler+0x1f4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_DMA_IRQHandler+0x196>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <HAL_DMA_IRQHandler+0x1f8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d012      	beq.n	8003862 <HAL_DMA_IRQHandler+0x192>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a22      	ldr	r2, [pc, #136]	; (80038cc <HAL_DMA_IRQHandler+0x1fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00a      	beq.n	800385c <HAL_DMA_IRQHandler+0x18c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_DMA_IRQHandler+0x200>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <HAL_DMA_IRQHandler+0x186>
 8003850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003854:	e01b      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003856:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800385a:	e018      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 800385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003860:	e015      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	e013      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003866:	2304      	movs	r3, #4
 8003868:	e011      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 800386a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800386e:	e00e      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003874:	e00b      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003876:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800387a:	e008      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 800387c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003880:	e005      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003886:	e002      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 8003888:	2340      	movs	r3, #64	; 0x40
 800388a:	e000      	b.n	800388e <HAL_DMA_IRQHandler+0x1be>
 800388c:	2304      	movs	r3, #4
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <HAL_DMA_IRQHandler+0x208>)
 8003890:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8136 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038a4:	e130      	b.n	8003b08 <HAL_DMA_IRQHandler+0x438>
 80038a6:	bf00      	nop
 80038a8:	40020080 	.word	0x40020080
 80038ac:	40020008 	.word	0x40020008
 80038b0:	4002001c 	.word	0x4002001c
 80038b4:	40020030 	.word	0x40020030
 80038b8:	40020044 	.word	0x40020044
 80038bc:	40020058 	.word	0x40020058
 80038c0:	4002006c 	.word	0x4002006c
 80038c4:	40020408 	.word	0x40020408
 80038c8:	4002041c 	.word	0x4002041c
 80038cc:	40020430 	.word	0x40020430
 80038d0:	40020444 	.word	0x40020444
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2202      	movs	r2, #2
 80038e2:	409a      	lsls	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80dd 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x3d8>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80d7 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 020a 	bic.w	r2, r2, #10
 8003916:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_DMA_IRQHandler+0x444>)
 8003928:	429a      	cmp	r2, r3
 800392a:	d958      	bls.n	80039de <HAL_DMA_IRQHandler+0x30e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a79      	ldr	r2, [pc, #484]	; (8003b18 <HAL_DMA_IRQHandler+0x448>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d04f      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x306>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a78      	ldr	r2, [pc, #480]	; (8003b1c <HAL_DMA_IRQHandler+0x44c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d048      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x302>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a76      	ldr	r2, [pc, #472]	; (8003b20 <HAL_DMA_IRQHandler+0x450>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d040      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2fc>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <HAL_DMA_IRQHandler+0x454>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d038      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x2f6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a73      	ldr	r2, [pc, #460]	; (8003b28 <HAL_DMA_IRQHandler+0x458>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d030      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x2f0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a72      	ldr	r2, [pc, #456]	; (8003b2c <HAL_DMA_IRQHandler+0x45c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d028      	beq.n	80039ba <HAL_DMA_IRQHandler+0x2ea>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <HAL_DMA_IRQHandler+0x444>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d020      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x2e4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_DMA_IRQHandler+0x460>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d019      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2e0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <HAL_DMA_IRQHandler+0x464>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d012      	beq.n	80039ac <HAL_DMA_IRQHandler+0x2dc>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_DMA_IRQHandler+0x468>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00a      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x2d6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_DMA_IRQHandler+0x46c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d102      	bne.n	80039a0 <HAL_DMA_IRQHandler+0x2d0>
 800399a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800399e:	e01b      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a4:	e018      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039aa:	e015      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039ac:	2320      	movs	r3, #32
 80039ae:	e013      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e011      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b8:	e00e      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039be:	e00b      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c4:	e008      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ca:	e005      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d0:	e002      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039d2:	2320      	movs	r3, #32
 80039d4:	e000      	b.n	80039d8 <HAL_DMA_IRQHandler+0x308>
 80039d6:	2302      	movs	r3, #2
 80039d8:	4a59      	ldr	r2, [pc, #356]	; (8003b40 <HAL_DMA_IRQHandler+0x470>)
 80039da:	6053      	str	r3, [r2, #4]
 80039dc:	e057      	b.n	8003a8e <HAL_DMA_IRQHandler+0x3be>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_DMA_IRQHandler+0x448>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04f      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x3b8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4b      	ldr	r2, [pc, #300]	; (8003b1c <HAL_DMA_IRQHandler+0x44c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d048      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x3b4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <HAL_DMA_IRQHandler+0x450>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d040      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x3ae>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_DMA_IRQHandler+0x454>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d038      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x3a8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_DMA_IRQHandler+0x458>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d030      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x3a2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_DMA_IRQHandler+0x45c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d028      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x39c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <HAL_DMA_IRQHandler+0x444>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d020      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x396>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a41      	ldr	r2, [pc, #260]	; (8003b30 <HAL_DMA_IRQHandler+0x460>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x392>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <HAL_DMA_IRQHandler+0x464>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d012      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x38e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3e      	ldr	r2, [pc, #248]	; (8003b38 <HAL_DMA_IRQHandler+0x468>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x388>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <HAL_DMA_IRQHandler+0x46c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d102      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x382>
 8003a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a50:	e01b      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a56:	e018      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5c:	e015      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e013      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e011      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6a:	e00e      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a70:	e00b      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a76:	e008      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7c:	e005      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a82:	e002      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a84:	2320      	movs	r3, #32
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_IRQHandler+0x3ba>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	4a2e      	ldr	r2, [pc, #184]	; (8003b44 <HAL_DMA_IRQHandler+0x474>)
 8003a8c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d034      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aa6:	e02f      	b.n	8003b08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d028      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x43a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d023      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020e 	bic.w	r2, r2, #14
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
    }
  }
  return;
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
}
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40020080 	.word	0x40020080
 8003b18:	40020008 	.word	0x40020008
 8003b1c:	4002001c 	.word	0x4002001c
 8003b20:	40020030 	.word	0x40020030
 8003b24:	40020044 	.word	0x40020044
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	4002006c 	.word	0x4002006c
 8003b30:	40020408 	.word	0x40020408
 8003b34:	4002041c 	.word	0x4002041c
 8003b38:	40020430 	.word	0x40020430
 8003b3c:	40020444 	.word	0x40020444
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020000 	.word	0x40020000

08003b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d108      	bne.n	8003b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b86:	e007      	b.n	8003b98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b08b      	sub	sp, #44	; 0x2c
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e179      	b.n	8003eac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bb8:	2201      	movs	r2, #1
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	f040 8168 	bne.w	8003ea6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a96      	ldr	r2, [pc, #600]	; (8003e34 <HAL_GPIO_Init+0x290>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d05e      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
 8003be0:	4a94      	ldr	r2, [pc, #592]	; (8003e34 <HAL_GPIO_Init+0x290>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d875      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003be6:	4a94      	ldr	r2, [pc, #592]	; (8003e38 <HAL_GPIO_Init+0x294>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d058      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
 8003bec:	4a92      	ldr	r2, [pc, #584]	; (8003e38 <HAL_GPIO_Init+0x294>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d86f      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003bf2:	4a92      	ldr	r2, [pc, #584]	; (8003e3c <HAL_GPIO_Init+0x298>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d052      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
 8003bf8:	4a90      	ldr	r2, [pc, #576]	; (8003e3c <HAL_GPIO_Init+0x298>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d869      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_GPIO_Init+0x29c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04c      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
 8003c04:	4a8e      	ldr	r2, [pc, #568]	; (8003e40 <HAL_GPIO_Init+0x29c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d863      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003c0a:	4a8e      	ldr	r2, [pc, #568]	; (8003e44 <HAL_GPIO_Init+0x2a0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d046      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
 8003c10:	4a8c      	ldr	r2, [pc, #560]	; (8003e44 <HAL_GPIO_Init+0x2a0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d85d      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003c16:	2b12      	cmp	r3, #18
 8003c18:	d82a      	bhi.n	8003c70 <HAL_GPIO_Init+0xcc>
 8003c1a:	2b12      	cmp	r3, #18
 8003c1c:	d859      	bhi.n	8003cd2 <HAL_GPIO_Init+0x12e>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_GPIO_Init+0x80>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c9f 	.word	0x08003c9f
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c8b 	.word	0x08003c8b
 8003c30:	08003ccd 	.word	0x08003ccd
 8003c34:	08003cd3 	.word	0x08003cd3
 8003c38:	08003cd3 	.word	0x08003cd3
 8003c3c:	08003cd3 	.word	0x08003cd3
 8003c40:	08003cd3 	.word	0x08003cd3
 8003c44:	08003cd3 	.word	0x08003cd3
 8003c48:	08003cd3 	.word	0x08003cd3
 8003c4c:	08003cd3 	.word	0x08003cd3
 8003c50:	08003cd3 	.word	0x08003cd3
 8003c54:	08003cd3 	.word	0x08003cd3
 8003c58:	08003cd3 	.word	0x08003cd3
 8003c5c:	08003cd3 	.word	0x08003cd3
 8003c60:	08003cd3 	.word	0x08003cd3
 8003c64:	08003cd3 	.word	0x08003cd3
 8003c68:	08003c81 	.word	0x08003c81
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	4a75      	ldr	r2, [pc, #468]	; (8003e48 <HAL_GPIO_Init+0x2a4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c76:	e02c      	b.n	8003cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	623b      	str	r3, [r7, #32]
          break;
 8003c7e:	e029      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	623b      	str	r3, [r7, #32]
          break;
 8003c88:	e024      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	623b      	str	r3, [r7, #32]
          break;
 8003c92:	e01f      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	623b      	str	r3, [r7, #32]
          break;
 8003c9c:	e01a      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	623b      	str	r3, [r7, #32]
          break;
 8003caa:	e013      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	611a      	str	r2, [r3, #16]
          break;
 8003cbe:	e009      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	615a      	str	r2, [r3, #20]
          break;
 8003cca:	e003      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
          break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x130>
          break;
 8003cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2bff      	cmp	r3, #255	; 0xff
 8003cd8:	d801      	bhi.n	8003cde <HAL_GPIO_Init+0x13a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	e001      	b.n	8003ce2 <HAL_GPIO_Init+0x13e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2bff      	cmp	r3, #255	; 0xff
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_GPIO_Init+0x14c>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	e002      	b.n	8003cf6 <HAL_GPIO_Init+0x152>
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	3b08      	subs	r3, #8
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	210f      	movs	r1, #15
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	401a      	ands	r2, r3
 8003d08:	6a39      	ldr	r1, [r7, #32]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80c1 	beq.w	8003ea6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d24:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <HAL_GPIO_Init+0x2a8>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a48      	ldr	r2, [pc, #288]	; (8003e4c <HAL_GPIO_Init+0x2a8>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_GPIO_Init+0x2a8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d3c:	4a44      	ldr	r2, [pc, #272]	; (8003e50 <HAL_GPIO_Init+0x2ac>)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01f      	beq.n	8003da8 <HAL_GPIO_Init+0x204>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <HAL_GPIO_Init+0x2b4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d019      	beq.n	8003da4 <HAL_GPIO_Init+0x200>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3a      	ldr	r2, [pc, #232]	; (8003e5c <HAL_GPIO_Init+0x2b8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_GPIO_Init+0x1fc>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a39      	ldr	r2, [pc, #228]	; (8003e60 <HAL_GPIO_Init+0x2bc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00d      	beq.n	8003d9c <HAL_GPIO_Init+0x1f8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a38      	ldr	r2, [pc, #224]	; (8003e64 <HAL_GPIO_Init+0x2c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <HAL_GPIO_Init+0x1f4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <HAL_GPIO_Init+0x2c4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_GPIO_Init+0x1f0>
 8003d90:	2305      	movs	r3, #5
 8003d92:	e00a      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003d94:	2306      	movs	r3, #6
 8003d96:	e008      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x206>
 8003da8:	2300      	movs	r3, #0
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dba:	4925      	ldr	r1, [pc, #148]	; (8003e50 <HAL_GPIO_Init+0x2ac>)
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4924      	ldr	r1, [pc, #144]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	4920      	ldr	r1, [pc, #128]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	491a      	ldr	r1, [pc, #104]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60cb      	str	r3, [r1, #12]
 8003e08:	e006      	b.n	8003e18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e0a:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d025      	beq.n	8003e70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4910      	ldr	r1, [pc, #64]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
 8003e30:	e025      	b.n	8003e7e <HAL_GPIO_Init+0x2da>
 8003e32:	bf00      	nop
 8003e34:	10320000 	.word	0x10320000
 8003e38:	10310000 	.word	0x10310000
 8003e3c:	10220000 	.word	0x10220000
 8003e40:	10210000 	.word	0x10210000
 8003e44:	10120000 	.word	0x10120000
 8003e48:	10110000 	.word	0x10110000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010800 	.word	0x40010800
 8003e58:	40010c00 	.word	0x40010c00
 8003e5c:	40011000 	.word	0x40011000
 8003e60:	40011400 	.word	0x40011400
 8003e64:	40011800 	.word	0x40011800
 8003e68:	40011c00 	.word	0x40011c00
 8003e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	4913      	ldr	r1, [pc, #76]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	4909      	ldr	r1, [pc, #36]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f47f ae7e 	bne.w	8003bb8 <HAL_GPIO_Init+0x14>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	372c      	adds	r7, #44	; 0x2c
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40010400 	.word	0x40010400

08003ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e001      	b.n	8003eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	807b      	strh	r3, [r7, #2]
 8003f06:	4613      	mov	r3, r2
 8003f08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f0a:	787b      	ldrb	r3, [r7, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f16:	e003      	b.n	8003f20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	041a      	lsls	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	611a      	str	r2, [r3, #16]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e12b      	b.n	8004196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe fa1a 	bl	800238c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	; 0x24
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f90:	f001 fbca 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 8003f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a81      	ldr	r2, [pc, #516]	; (80041a0 <HAL_I2C_Init+0x274>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d807      	bhi.n	8003fb0 <HAL_I2C_Init+0x84>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a80      	ldr	r2, [pc, #512]	; (80041a4 <HAL_I2C_Init+0x278>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bf94      	ite	ls
 8003fa8:	2301      	movls	r3, #1
 8003faa:	2300      	movhi	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e006      	b.n	8003fbe <HAL_I2C_Init+0x92>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a7d      	ldr	r2, [pc, #500]	; (80041a8 <HAL_I2C_Init+0x27c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	bf94      	ite	ls
 8003fb8:	2301      	movls	r3, #1
 8003fba:	2300      	movhi	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0e7      	b.n	8004196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a78      	ldr	r2, [pc, #480]	; (80041ac <HAL_I2C_Init+0x280>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0c9b      	lsrs	r3, r3, #18
 8003fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a6a      	ldr	r2, [pc, #424]	; (80041a0 <HAL_I2C_Init+0x274>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d802      	bhi.n	8004000 <HAL_I2C_Init+0xd4>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	e009      	b.n	8004014 <HAL_I2C_Init+0xe8>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	4a69      	ldr	r2, [pc, #420]	; (80041b0 <HAL_I2C_Init+0x284>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	3301      	adds	r3, #1
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	430b      	orrs	r3, r1
 800401a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004026:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	495c      	ldr	r1, [pc, #368]	; (80041a0 <HAL_I2C_Init+0x274>)
 8004030:	428b      	cmp	r3, r1
 8004032:	d819      	bhi.n	8004068 <HAL_I2C_Init+0x13c>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e59      	subs	r1, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004048:	400b      	ands	r3, r1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_I2C_Init+0x138>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1e59      	subs	r1, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fbb1 f3f3 	udiv	r3, r1, r3
 800405c:	3301      	adds	r3, #1
 800405e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004062:	e051      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 8004064:	2304      	movs	r3, #4
 8004066:	e04f      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <HAL_I2C_Init+0x168>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e012      	b.n	80040ba <HAL_I2C_Init+0x18e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x196>
 80040be:	2301      	movs	r3, #1
 80040c0:	e022      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10e      	bne.n	80040e8 <HAL_I2C_Init+0x1bc>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e58      	subs	r0, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	440b      	add	r3, r1
 80040d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e6:	e00f      	b.n	8004108 <HAL_I2C_Init+0x1dc>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e58      	subs	r0, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	0099      	lsls	r1, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	6809      	ldr	r1, [r1, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6911      	ldr	r1, [r2, #16]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68d2      	ldr	r2, [r2, #12]
 8004142:	4311      	orrs	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	000186a0 	.word	0x000186a0
 80041a4:	001e847f 	.word	0x001e847f
 80041a8:	003d08ff 	.word	0x003d08ff
 80041ac:	431bde83 	.word	0x431bde83
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	460b      	mov	r3, r1
 80041c2:	817b      	strh	r3, [r7, #10]
 80041c4:	4613      	mov	r3, r2
 80041c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7fe ff2c 	bl	8003024 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	f040 80e0 	bne.w	800439c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2319      	movs	r3, #25
 80041e2:	2201      	movs	r2, #1
 80041e4:	4970      	ldr	r1, [pc, #448]	; (80043a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fc9e 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0d3      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2C_Master_Transmit+0x50>
 8004200:	2302      	movs	r3, #2
 8004202:	e0cc      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d007      	beq.n	800422a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004238:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2210      	movs	r2, #16
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	893a      	ldrh	r2, [r7, #8]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a50      	ldr	r2, [pc, #320]	; (80043ac <HAL_I2C_Master_Transmit+0x1f8>)
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800426c:	8979      	ldrh	r1, [r7, #10]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fb08 	bl	8004888 <I2C_MasterRequestWrite>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e08d      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004298:	e066      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fd5c 	bl	8004d5c <I2C_WaitOnTXEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d107      	bne.n	80042c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06b      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11b      	bne.n	800433c <HAL_I2C_Master_Transmit+0x188>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fd53 	bl	8004dec <I2C_WaitOnBTFFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d107      	bne.n	8004364 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e01a      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d194      	bne.n	800429a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	00100002 	.word	0x00100002
 80043ac:	ffff0000 	.word	0xffff0000

080043b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	; 0x30
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	461a      	mov	r2, r3
 80043bc:	460b      	mov	r3, r1
 80043be:	817b      	strh	r3, [r7, #10]
 80043c0:	4613      	mov	r3, r2
 80043c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7fe fe2c 	bl	8003024 <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	f040 824b 	bne.w	8004872 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2319      	movs	r3, #25
 80043e2:	2201      	movs	r2, #1
 80043e4:	497f      	ldr	r1, [pc, #508]	; (80045e4 <HAL_I2C_Master_Receive+0x234>)
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fb9e 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
 80043f4:	e23e      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_I2C_Master_Receive+0x54>
 8004400:	2302      	movs	r3, #2
 8004402:	e237      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d007      	beq.n	800442a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2222      	movs	r2, #34	; 0x22
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2210      	movs	r2, #16
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	893a      	ldrh	r2, [r7, #8]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a5f      	ldr	r2, [pc, #380]	; (80045e8 <HAL_I2C_Master_Receive+0x238>)
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fa8a 	bl	800498c <I2C_MasterRequestRead>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1f8      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e1cc      	b.n	800484c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d11e      	bne.n	80044f8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ca:	b672      	cpsid	i
}
 80044cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044f4:	b662      	cpsie	i
}
 80044f6:	e035      	b.n	8004564 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d11e      	bne.n	800453e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004510:	b672      	cpsid	i
}
 8004512:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800453a:	b662      	cpsie	i
}
 800453c:	e012      	b.n	8004564 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800454c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004564:	e172      	b.n	800484c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	2b03      	cmp	r3, #3
 800456c:	f200 811f 	bhi.w	80047ae <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	2b01      	cmp	r3, #1
 8004576:	d123      	bne.n	80045c0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fc7d 	bl	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e173      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045be:	e145      	b.n	800484c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d152      	bne.n	800466e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2200      	movs	r2, #0
 80045d0:	4906      	ldr	r1, [pc, #24]	; (80045ec <HAL_I2C_Master_Receive+0x23c>)
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 faa8 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e148      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
 80045e2:	bf00      	nop
 80045e4:	00100002 	.word	0x00100002
 80045e8:	ffff0000 	.word	0xffff0000
 80045ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045f0:	b672      	cpsid	i
}
 80045f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004636:	b662      	cpsie	i
}
 8004638:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800466c:	e0ee      	b.n	800484c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	4981      	ldr	r1, [pc, #516]	; (800487c <HAL_I2C_Master_Receive+0x4cc>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fa55 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0f5      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004698:	b672      	cpsid	i
}
 800469a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046ce:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_I2C_Master_Receive+0x4d0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	4a6b      	ldr	r2, [pc, #428]	; (8004884 <HAL_I2C_Master_Receive+0x4d4>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a1a      	lsrs	r2, r3, #8
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00da      	lsls	r2, r3, #3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d118      	bne.n	8004726 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004716:	b662      	cpsie	i
}
 8004718:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0a6      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d1d9      	bne.n	80046e8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004776:	b662      	cpsie	i
}
 8004778:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ac:	e04e      	b.n	800484c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb62 	bl	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e058      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d124      	bne.n	800484c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004818:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f ae88 	bne.w	8004566 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	00010004 	.word	0x00010004
 8004880:	20000008 	.word	0x20000008
 8004884:	14f8b589 	.word	0x14f8b589

08004888 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	460b      	mov	r3, r1
 8004896:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d006      	beq.n	80048b2 <I2C_MasterRequestWrite+0x2a>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d003      	beq.n	80048b2 <I2C_MasterRequestWrite+0x2a>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b0:	d108      	bne.n	80048c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e00b      	b.n	80048dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	2b12      	cmp	r3, #18
 80048ca:	d107      	bne.n	80048dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f91d 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d103      	bne.n	800490c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e035      	b.n	800497c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004918:	d108      	bne.n	800492c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491a:	897b      	ldrh	r3, [r7, #10]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004928:	611a      	str	r2, [r3, #16]
 800492a:	e01b      	b.n	8004964 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	11db      	asrs	r3, r3, #7
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f063 030f 	orn	r3, r3, #15
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <I2C_MasterRequestWrite+0xfc>)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f966 	bl	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e010      	b.n	800497c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4907      	ldr	r1, [pc, #28]	; (8004988 <I2C_MasterRequestWrite+0x100>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f956 	bl	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	00010008 	.word	0x00010008
 8004988:	00010002 	.word	0x00010002

0800498c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	460b      	mov	r3, r1
 800499a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d006      	beq.n	80049c6 <I2C_MasterRequestRead+0x3a>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d003      	beq.n	80049c6 <I2C_MasterRequestRead+0x3a>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049c4:	d108      	bne.n	80049d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e00b      	b.n	80049f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b11      	cmp	r3, #17
 80049de:	d107      	bne.n	80049f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f893 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d103      	bne.n	8004a20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e079      	b.n	8004b18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2c:	d108      	bne.n	8004a40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]
 8004a3e:	e05f      	b.n	8004b00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a40:	897b      	ldrh	r3, [r7, #10]
 8004a42:	11db      	asrs	r3, r3, #7
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0306 	and.w	r3, r3, #6
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f063 030f 	orn	r3, r3, #15
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4930      	ldr	r1, [pc, #192]	; (8004b20 <I2C_MasterRequestRead+0x194>)
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8dc 	bl	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e054      	b.n	8004b18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4929      	ldr	r1, [pc, #164]	; (8004b24 <I2C_MasterRequestRead+0x198>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f8cc 	bl	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e044      	b.n	8004b18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f831 	bl	8004b28 <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ada:	d103      	bne.n	8004ae4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e017      	b.n	8004b18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ae8:	897b      	ldrh	r3, [r7, #10]
 8004aea:	11db      	asrs	r3, r3, #7
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 0306 	and.w	r3, r3, #6
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f063 030e 	orn	r3, r3, #14
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <I2C_MasterRequestRead+0x198>)
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f888 	bl	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	00010008 	.word	0x00010008
 8004b24:	00010002 	.word	0x00010002

08004b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b38:	e048      	b.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d044      	beq.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7fe fa6f 	bl	8003024 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d139      	bne.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10d      	bne.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	e00c      	b.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	43da      	mvns	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d116      	bne.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e023      	b.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10d      	bne.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	e00c      	b.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d093      	beq.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2a:	e071      	b.n	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d123      	bne.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e067      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d041      	beq.n	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8c:	f7fe f9ca 	bl	8003024 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d136      	bne.n	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10c      	bne.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf14      	ite	ne
 8004cbe:	2301      	movne	r3, #1
 8004cc0:	2300      	moveq	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	e00b      	b.n	8004cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	43da      	mvns	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e021      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10c      	bne.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e00b      	b.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af6d 	bne.w	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d68:	e034      	b.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f8e3 	bl	8004f36 <I2C_IsAcknowledgeFailed>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e034      	b.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d028      	beq.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fe f94f 	bl	8003024 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11d      	bne.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d016      	beq.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e007      	b.n	8004de4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d1c3      	bne.n	8004d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df8:	e034      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f89b 	bl	8004f36 <I2C_IsAcknowledgeFailed>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e034      	b.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d028      	beq.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fe f907 	bl	8003024 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11d      	bne.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d016      	beq.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e007      	b.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d1c3      	bne.n	8004dfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e88:	e049      	b.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d119      	bne.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0210 	mvn.w	r2, #16
 8004ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e030      	b.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ecc:	f7fe f8aa 	bl	8003024 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11d      	bne.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d016      	beq.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e007      	b.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d1ae      	bne.n	8004e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d11b      	bne.n	8004f86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e272      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8087 	beq.w	80050c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb4:	4b92      	ldr	r3, [pc, #584]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d00c      	beq.n	8004fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc0:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d112      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x5e>
 8004fcc:	4b8c      	ldr	r3, [pc, #560]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fda:	4b89      	ldr	r3, [pc, #548]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d06c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x12c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d168      	bne.n	80050c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e24c      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffa:	d106      	bne.n	800500a <HAL_RCC_OscConfig+0x76>
 8004ffc:	4b80      	ldr	r3, [pc, #512]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a7f      	ldr	r2, [pc, #508]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e02e      	b.n	8005068 <HAL_RCC_OscConfig+0xd4>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x98>
 8005012:	4b7b      	ldr	r3, [pc, #492]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7a      	ldr	r2, [pc, #488]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b78      	ldr	r3, [pc, #480]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a77      	ldr	r2, [pc, #476]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e01d      	b.n	8005068 <HAL_RCC_OscConfig+0xd4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0xbc>
 8005036:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a71      	ldr	r2, [pc, #452]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800503c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6e      	ldr	r2, [pc, #440]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0xd4>
 8005050:	4b6b      	ldr	r3, [pc, #428]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6a      	ldr	r2, [pc, #424]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b68      	ldr	r3, [pc, #416]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a67      	ldr	r2, [pc, #412]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fd ffd8 	bl	8003024 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7fd ffd4 	bl	8003024 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e200      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	4b5d      	ldr	r3, [pc, #372]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0xe4>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd ffc4 	bl	8003024 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fd ffc0 	bl	8003024 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1ec      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b2:	4b53      	ldr	r3, [pc, #332]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x10c>
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d063      	beq.n	8005196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050da:	4b49      	ldr	r3, [pc, #292]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d11c      	bne.n	8005120 <HAL_RCC_OscConfig+0x18c>
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d116      	bne.n	8005120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_RCC_OscConfig+0x176>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d001      	beq.n	800510a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e1c0      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510a:	4b3d      	ldr	r3, [pc, #244]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4939      	ldr	r1, [pc, #228]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511e:	e03a      	b.n	8005196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d020      	beq.n	800516a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005128:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_RCC_OscConfig+0x270>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fd ff79 	bl	8003024 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005136:	f7fd ff75 	bl	8003024 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e1a1      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4927      	ldr	r1, [pc, #156]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]
 8005168:	e015      	b.n	8005196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <HAL_RCC_OscConfig+0x270>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd ff58 	bl	8003024 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005178:	f7fd ff54 	bl	8003024 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e180      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d03a      	beq.n	8005218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d019      	beq.n	80051de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051aa:	4b17      	ldr	r3, [pc, #92]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b0:	f7fd ff38 	bl	8003024 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b8:	f7fd ff34 	bl	8003024 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e160      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051d6:	2001      	movs	r0, #1
 80051d8:	f000 face 	bl	8005778 <RCC_Delay>
 80051dc:	e01c      	b.n	8005218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e4:	f7fd ff1e 	bl	8003024 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ea:	e00f      	b.n	800520c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ec:	f7fd ff1a 	bl	8003024 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d908      	bls.n	800520c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e146      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
 8005204:	42420000 	.word	0x42420000
 8005208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	4b92      	ldr	r3, [pc, #584]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e9      	bne.n	80051ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a6 	beq.w	8005372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522a:	4b8b      	ldr	r3, [pc, #556]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	4b88      	ldr	r3, [pc, #544]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4a87      	ldr	r2, [pc, #540]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	61d3      	str	r3, [r2, #28]
 8005242:	4b85      	ldr	r3, [pc, #532]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005252:	4b82      	ldr	r3, [pc, #520]	; (800545c <HAL_RCC_OscConfig+0x4c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <HAL_RCC_OscConfig+0x4c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7e      	ldr	r2, [pc, #504]	; (800545c <HAL_RCC_OscConfig+0x4c8>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526a:	f7fd fedb 	bl	8003024 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fd fed7 	bl	8003024 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b64      	cmp	r3, #100	; 0x64
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e103      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	4b75      	ldr	r3, [pc, #468]	; (800545c <HAL_RCC_OscConfig+0x4c8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <HAL_RCC_OscConfig+0x312>
 8005298:	4b6f      	ldr	r3, [pc, #444]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4a6e      	ldr	r2, [pc, #440]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6213      	str	r3, [r2, #32]
 80052a4:	e02d      	b.n	8005302 <HAL_RCC_OscConfig+0x36e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x334>
 80052ae:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6213      	str	r3, [r2, #32]
 80052ba:	4b67      	ldr	r3, [pc, #412]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4a66      	ldr	r2, [pc, #408]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	f023 0304 	bic.w	r3, r3, #4
 80052c4:	6213      	str	r3, [r2, #32]
 80052c6:	e01c      	b.n	8005302 <HAL_RCC_OscConfig+0x36e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d10c      	bne.n	80052ea <HAL_RCC_OscConfig+0x356>
 80052d0:	4b61      	ldr	r3, [pc, #388]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a60      	ldr	r2, [pc, #384]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	4b5e      	ldr	r3, [pc, #376]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	4a5d      	ldr	r2, [pc, #372]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6213      	str	r3, [r2, #32]
 80052e8:	e00b      	b.n	8005302 <HAL_RCC_OscConfig+0x36e>
 80052ea:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a5a      	ldr	r2, [pc, #360]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6213      	str	r3, [r2, #32]
 80052f6:	4b58      	ldr	r3, [pc, #352]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4a57      	ldr	r2, [pc, #348]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d015      	beq.n	8005336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fd fe8b 	bl	8003024 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fd fe87 	bl	8003024 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0b1      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005328:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ee      	beq.n	8005312 <HAL_RCC_OscConfig+0x37e>
 8005334:	e014      	b.n	8005360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005336:	f7fd fe75 	bl	8003024 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533c:	e00a      	b.n	8005354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fd fe71 	bl	8003024 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e09b      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005354:	4b40      	ldr	r3, [pc, #256]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1ee      	bne.n	800533e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800536c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8087 	beq.w	800548a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800537c:	4b36      	ldr	r3, [pc, #216]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d061      	beq.n	800544c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d146      	bne.n	800541e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005390:	4b33      	ldr	r3, [pc, #204]	; (8005460 <HAL_RCC_OscConfig+0x4cc>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fd fe45 	bl	8003024 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539e:	f7fd fe41 	bl	8003024 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e06d      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d108      	bne.n	80053d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4921      	ldr	r1, [pc, #132]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a19      	ldr	r1, [r3, #32]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	430b      	orrs	r3, r1
 80053ea:	491b      	ldr	r1, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_RCC_OscConfig+0x4cc>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f6:	f7fd fe15 	bl	8003024 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fd fe11 	bl	8003024 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e03d      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x46a>
 800541c:	e035      	b.n	800548a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <HAL_RCC_OscConfig+0x4cc>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fd fdfe 	bl	8003024 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542c:	f7fd fdfa 	bl	8003024 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e026      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCC_OscConfig+0x4c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x498>
 800544a:	e01e      	b.n	800548a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e019      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
 8005458:	40021000 	.word	0x40021000
 800545c:	40007000 	.word	0x40007000
 8005460:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_OscConfig+0x500>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	429a      	cmp	r2, r3
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d001      	beq.n	800548a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0d0      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ac:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d910      	bls.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b67      	ldr	r3, [pc, #412]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	4965      	ldr	r1, [pc, #404]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b63      	ldr	r3, [pc, #396]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0b8      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f4:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a52      	ldr	r2, [pc, #328]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b50      	ldr	r3, [pc, #320]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	494d      	ldr	r1, [pc, #308]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d040      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d107      	bne.n	800554e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e07f      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e073      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005566:	4b3d      	ldr	r3, [pc, #244]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e06b      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4936      	ldr	r1, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005588:	f7fd fd4c 	bl	8003024 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fd fd48 	bl	8003024 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e053      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b8:	4b27      	ldr	r3, [pc, #156]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d210      	bcs.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e032      	b.n	800564e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4916      	ldr	r1, [pc, #88]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	490e      	ldr	r1, [pc, #56]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005626:	f000 f821 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800562a:	4602      	mov	r2, r0
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	490a      	ldr	r1, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	5ccb      	ldrb	r3, [r1, r3]
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1cc>)
 8005640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_RCC_ClockConfig+0x1d0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd fcaa 	bl	8002fa0 <HAL_InitTick>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40022000 	.word	0x40022000
 800565c:	40021000 	.word	0x40021000
 8005660:	08009490 	.word	0x08009490
 8005664:	20000008 	.word	0x20000008
 8005668:	2000000c 	.word	0x2000000c

0800566c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_GetSysClockFreq+0x94>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b04      	cmp	r3, #4
 8005694:	d002      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x30>
 8005696:	2b08      	cmp	r3, #8
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x36>
 800569a:	e027      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 800569e:	613b      	str	r3, [r7, #16]
      break;
 80056a0:	e027      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0c9b      	lsrs	r3, r3, #18
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_GetSysClockFreq+0x94>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	0c5b      	lsrs	r3, r3, #17
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	4a11      	ldr	r2, [pc, #68]	; (800570c <HAL_RCC_GetSysClockFreq+0xa0>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ce:	fb03 f202 	mul.w	r2, r3, r2
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e004      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	613b      	str	r3, [r7, #16]
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ee:	613b      	str	r3, [r7, #16]
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	693b      	ldr	r3, [r7, #16]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000
 8005704:	007a1200 	.word	0x007a1200
 8005708:	080094a8 	.word	0x080094a8
 800570c:	080094b8 	.word	0x080094b8
 8005710:	003d0900 	.word	0x003d0900

08005714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <HAL_RCC_GetHCLKFreq+0x10>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	20000008 	.word	0x20000008

08005728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800572c:	f7ff fff2 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK1Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	080094a0 	.word	0x080094a0

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005754:	f7ff ffde 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4903      	ldr	r1, [pc, #12]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	080094a0 	.word	0x080094a0

08005778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <RCC_Delay+0x34>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <RCC_Delay+0x38>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	0a5b      	lsrs	r3, r3, #9
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005794:	bf00      	nop
  }
  while (Delay --);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f9      	bne.n	8005794 <RCC_Delay+0x1c>
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	20000008 	.word	0x20000008
 80057b0:	10624dd3 	.word	0x10624dd3

080057b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e041      	b.n	800584a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fd f8b8 	bl	8002950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f000 fcb4 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e044      	b.n	80058f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <HAL_TIM_Base_Start_IT+0xac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x6c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <HAL_TIM_Base_Start_IT+0xb0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x6c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_TIM_Base_Start_IT+0xb4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x6c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <HAL_TIM_Base_Start_IT+0xb8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x6c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <HAL_TIM_Base_Start_IT+0xbc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d111      	bne.n	80058e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d010      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	e007      	b.n	80058f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00

08005914 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e041      	b.n	80059aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f839 	bl	80059b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fc04 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_IC_Start_IT+0x1e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e013      	b.n	8005a0a <HAL_TIM_IC_Start_IT+0x46>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_IC_Start_IT+0x2e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e00b      	b.n	8005a0a <HAL_TIM_IC_Start_IT+0x46>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_IC_Start_IT+0x3e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e003      	b.n	8005a0a <HAL_TIM_IC_Start_IT+0x46>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_TIM_IC_Start_IT+0x58>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e013      	b.n	8005a44 <HAL_TIM_IC_Start_IT+0x80>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d104      	bne.n	8005a2c <HAL_TIM_IC_Start_IT+0x68>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e00b      	b.n	8005a44 <HAL_TIM_IC_Start_IT+0x80>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d104      	bne.n	8005a3c <HAL_TIM_IC_Start_IT+0x78>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e003      	b.n	8005a44 <HAL_TIM_IC_Start_IT+0x80>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a4c:	7b7b      	ldrb	r3, [r7, #13]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0c2      	b.n	8005bdc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_IC_Start_IT+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	e013      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0xca>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_IC_Start_IT+0xb2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0xca>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_IC_Start_IT+0xc2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0xca>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Start_IT+0xda>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a9c:	e013      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x102>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Start_IT+0xea>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aac:	e00b      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x102>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_IC_Start_IT+0xfa>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abc:	e003      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x102>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d841      	bhi.n	8005b50 <HAL_TIM_IC_Start_IT+0x18c>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <HAL_TIM_IC_Start_IT+0x110>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b09 	.word	0x08005b09
 8005ad8:	08005b51 	.word	0x08005b51
 8005adc:	08005b51 	.word	0x08005b51
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b1b 	.word	0x08005b1b
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b51 	.word	0x08005b51
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b3f 	.word	0x08005b3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0202 	orr.w	r2, r2, #2
 8005b16:	60da      	str	r2, [r3, #12]
      break;
 8005b18:	e01d      	b.n	8005b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0204 	orr.w	r2, r2, #4
 8005b28:	60da      	str	r2, [r3, #12]
      break;
 8005b2a:	e014      	b.n	8005b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	60da      	str	r2, [r3, #12]
      break;
 8005b3c:	e00b      	b.n	8005b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0210 	orr.w	r2, r2, #16
 8005b4c:	60da      	str	r2, [r3, #12]
      break;
 8005b4e:	e002      	b.n	8005b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      break;
 8005b54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d13e      	bne.n	8005bda <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fd30 	bl	80065ca <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_TIM_IC_Start_IT+0x220>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIM_IC_Start_IT+0x224>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d00e      	beq.n	8005ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a17      	ldr	r2, [pc, #92]	; (8005bec <HAL_TIM_IC_Start_IT+0x228>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <HAL_TIM_IC_Start_IT+0x22c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <HAL_TIM_IC_Start_IT+0x230>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d111      	bne.n	8005bca <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b06      	cmp	r3, #6
 8005bb6:	d010      	beq.n	8005bda <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	e007      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00

08005bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0202 	mvn.w	r2, #2
 8005c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fb fd2a 	bl	800169c <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa6c 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fa72 	bl	800613a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0204 	mvn.w	r2, #4
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb fd04 	bl	800169c <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa46 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa4c 	bl	800613a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0208 	mvn.w	r2, #8
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb fcde 	bl	800169c <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa20 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa26 	bl	800613a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d020      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0210 	mvn.w	r2, #16
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2208      	movs	r2, #8
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fcb8 	bl	800169c <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9fa 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa00 	bl	800613a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0201 	mvn.w	r2, #1
 8005d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fb fee8 	bl	8001b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fcbb 	bl	80066fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9d0 	bl	800614c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0220 	mvn.w	r2, #32
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fc8e 	bl	80066ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e088      	b.n	8005f08 <HAL_TIM_IC_ConfigChannel+0x130>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11b      	bne.n	8005e3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e14:	f000 fa2a 	bl	800626c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 020c 	bic.w	r2, r2, #12
 8005e26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	619a      	str	r2, [r3, #24]
 8005e3a:	e060      	b.n	8005efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d11c      	bne.n	8005e7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005e52:	f000 fa9f 	bl	8006394 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6999      	ldr	r1, [r3, #24]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	619a      	str	r2, [r3, #24]
 8005e7a:	e040      	b.n	8005efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d11b      	bne.n	8005eba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e92:	f000 faea 	bl	800646a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 020c 	bic.w	r2, r2, #12
 8005ea4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69d9      	ldr	r1, [r3, #28]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	61da      	str	r2, [r3, #28]
 8005eb8:	e021      	b.n	8005efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d11c      	bne.n	8005efa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005ed0:	f000 fb06 	bl	80064e0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ee2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69d9      	ldr	r1, [r3, #28]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	61da      	str	r2, [r3, #28]
 8005ef8:	e001      	b.n	8005efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIM_ConfigClockSource+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0b4      	b.n	8006096 <HAL_TIM_ConfigClockSource+0x186>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f64:	d03e      	beq.n	8005fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	f200 8087 	bhi.w	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	f000 8086 	beq.w	8006082 <HAL_TIM_ConfigClockSource+0x172>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d87f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d01a      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f80:	2b70      	cmp	r3, #112	; 0x70
 8005f82:	d87b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d050      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x11a>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d877      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d03c      	beq.n	800600a <HAL_TIM_ConfigClockSource+0xfa>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d873      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d058      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x13a>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d86f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d064      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b30      	cmp	r3, #48	; 0x30
 8005fa2:	d86b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d060      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d867      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d05c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d05a      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	e062      	b.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	f000 fae1 	bl	800658c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]
      break;
 8005fe2:	e04f      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	f000 faca 	bl	800658c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	609a      	str	r2, [r3, #8]
      break;
 8006008:	e03c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	461a      	mov	r2, r3
 8006018:	f000 f98e 	bl	8006338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2150      	movs	r1, #80	; 0x50
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa98 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8006028:	e02c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f9e8 	bl	800640c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2160      	movs	r1, #96	; 0x60
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fa88 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8006048:	e01c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f96e 	bl	8006338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fa78 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8006068:	e00c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 fa6f 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 800607a:	e003      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	e000      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	d831      	bhi.n	8006118 <HAL_TIM_ReadCapturedValue+0x78>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006119 	.word	0x08006119
 80060c4:	08006119 	.word	0x08006119
 80060c8:	08006119 	.word	0x08006119
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	08006119 	.word	0x08006119
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006119 	.word	0x08006119
 80060dc:	08006105 	.word	0x08006105
 80060e0:	08006119 	.word	0x08006119
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006119 	.word	0x08006119
 80060ec:	0800610f 	.word	0x0800610f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	60fb      	str	r3, [r7, #12]

      break;
 80060f8:	e00f      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	60fb      	str	r3, [r7, #12]

      break;
 8006102:	e00a      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	60fb      	str	r3, [r7, #12]

      break;
 800610c:	e005      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	60fb      	str	r3, [r7, #12]

      break;
 8006116:	e000      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006118:	bf00      	nop
  }

  return tmpreg;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop

08006128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
	...

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a39      	ldr	r2, [pc, #228]	; (8006258 <TIM_Base_SetConfig+0xf8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a38      	ldr	r2, [pc, #224]	; (800625c <TIM_Base_SetConfig+0xfc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00f      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a35      	ldr	r2, [pc, #212]	; (8006260 <TIM_Base_SetConfig+0x100>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <TIM_Base_SetConfig+0x104>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a33      	ldr	r2, [pc, #204]	; (8006268 <TIM_Base_SetConfig+0x108>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <TIM_Base_SetConfig+0xf8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <TIM_Base_SetConfig+0x82>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <TIM_Base_SetConfig+0xfc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00f      	beq.n	80061e2 <TIM_Base_SetConfig+0x82>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d00b      	beq.n	80061e2 <TIM_Base_SetConfig+0x82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <TIM_Base_SetConfig+0x100>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d007      	beq.n	80061e2 <TIM_Base_SetConfig+0x82>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <TIM_Base_SetConfig+0x104>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <TIM_Base_SetConfig+0x82>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_Base_SetConfig+0x108>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d108      	bne.n	80061f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a0f      	ldr	r2, [pc, #60]	; (8006258 <TIM_Base_SetConfig+0xf8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0xc8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0e      	ldr	r2, [pc, #56]	; (800625c <TIM_Base_SetConfig+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]
  }
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00

0800626c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 0201 	bic.w	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a23      	ldr	r2, [pc, #140]	; (8006324 <TIM_TI1_SetConfig+0xb8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a22      	ldr	r2, [pc, #136]	; (8006328 <TIM_TI1_SetConfig+0xbc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00f      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d00b      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <TIM_TI1_SetConfig+0xc0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <TIM_TI1_SetConfig+0xc4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <TIM_TI1_SetConfig+0xc8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <TIM_TI1_SetConfig+0x5a>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <TIM_TI1_SetConfig+0x5c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e003      	b.n	80062e6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 030a 	and.w	r3, r3, #10
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00

08006338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f023 030a 	bic.w	r3, r3, #10
 8006374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 0210 	bic.w	r2, r3, #16
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	031b      	lsls	r3, r3, #12
 80063d8:	b29b      	uxth	r3, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f023 0210 	bic.w	r2, r3, #16
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006448:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800646a:	b480      	push	{r7}
 800646c:	b087      	sub	sp, #28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800651e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	031b      	lsls	r3, r3, #12
 8006524:	b29b      	uxth	r3, r3
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006532:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	031b      	lsls	r3, r3, #12
 8006538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	f043 0307 	orr.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	021a      	lsls	r2, r3, #8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b087      	sub	sp, #28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2201      	movs	r2, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	401a      	ands	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006602:	431a      	orrs	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e050      	b.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d018      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d00e      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10c      	bne.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00

080066ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e042      	b.n	80067a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fc fa1c 	bl	8002b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	; 0x24
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 ff47 	bl	80075e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d175      	bne.n	80068bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_UART_Transmit+0x2c>
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e06e      	b.n	80068be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2221      	movs	r2, #33	; 0x21
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ee:	f7fc fc19 	bl	8003024 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	88fa      	ldrh	r2, [r7, #6]
 80067f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d108      	bne.n	800681c <HAL_UART_Transmit+0x6c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e003      	b.n	8006824 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006824:	e02e      	b.n	8006884 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fc23 	bl	800707c <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e03a      	b.n	80068be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800685c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3302      	adds	r3, #2
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e007      	b.n	8006876 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1cb      	bne.n	8006826 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2200      	movs	r2, #0
 8006896:	2140      	movs	r1, #64	; 0x40
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fbef 	bl	800707c <UART_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e006      	b.n	80068be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	4613      	mov	r3, r2
 80068d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d112      	bne.n	8006906 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Receive_DMA+0x26>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e00b      	b.n	8006908 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	461a      	mov	r2, r3
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fc17 	bl	8007130 <UART_Start_Receive_DMA>
 8006902:	4603      	mov	r3, r0
 8006904:	e000      	b.n	8006908 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b0ba      	sub	sp, #232	; 0xe8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006936:	2300      	movs	r3, #0
 8006938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800693c:	2300      	movs	r3, #0
 800693e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800694e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10f      	bne.n	8006976 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <HAL_UART_IRQHandler+0x66>
 8006962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fd7c 	bl	800746c <UART_Receive_IT>
      return;
 8006974:	e25b      	b.n	8006e2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80de 	beq.w	8006b3c <HAL_UART_IRQHandler+0x22c>
 8006980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d106      	bne.n	800699a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80d1 	beq.w	8006b3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_UART_IRQHandler+0xae>
 80069a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_UART_IRQHandler+0xd2>
 80069ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	f043 0202 	orr.w	r2, r3, #2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <HAL_UART_IRQHandler+0xf6>
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	f043 0204 	orr.w	r2, r3, #4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <HAL_UART_IRQHandler+0x126>
 8006a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 81f2 	beq.w	8006e24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_UART_IRQHandler+0x14e>
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fd07 	bl	800746c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf14      	ite	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	2300      	moveq	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <HAL_UART_IRQHandler+0x17a>
 8006a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d04f      	beq.n	8006b2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc11 	bl	80072b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d041      	beq.n	8006b22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3314      	adds	r3, #20
 8006aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3314      	adds	r3, #20
 8006ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1d9      	bne.n	8006a9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d013      	beq.n	8006b1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	4a7e      	ldr	r2, [pc, #504]	; (8006cf0 <HAL_UART_IRQHandler+0x3e0>)
 8006af8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fc fcde 	bl	80034c0 <HAL_DMA_Abort_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d016      	beq.n	8006b38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b18:	e00e      	b.n	8006b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f99c 	bl	8006e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	e00a      	b.n	8006b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f998 	bl	8006e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	e006      	b.n	8006b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f994 	bl	8006e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006b36:	e175      	b.n	8006e24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	bf00      	nop
    return;
 8006b3a:	e173      	b.n	8006e24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	f040 814f 	bne.w	8006de4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8148 	beq.w	8006de4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8141 	beq.w	8006de4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80b6 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8145 	beq.w	8006e28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	f080 813e 	bcs.w	8006e28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	f000 8088 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1d9      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e1      	bne.n	8006c0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e3      	bne.n	8006c48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca0:	f023 0310 	bic.w	r3, r3, #16
 8006ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fc fbbc 	bl	8003448 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8bf 	bl	8006e6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cec:	e09c      	b.n	8006e28 <HAL_UART_IRQHandler+0x518>
 8006cee:	bf00      	nop
 8006cf0:	08007377 	.word	0x08007377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 808e 	beq.w	8006e2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8089 	beq.w	8006e2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e3      	bne.n	8006d1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	623b      	str	r3, [r7, #32]
   return(result);
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3314      	adds	r3, #20
 8006d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d76:	633a      	str	r2, [r7, #48]	; 0x30
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e3      	bne.n	8006d52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dbc:	61fa      	str	r2, [r7, #28]
 8006dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e3      	bne.n	8006d98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f844 	bl	8006e6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006de2:	e023      	b.n	8006e2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <HAL_UART_IRQHandler+0x4f4>
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 face 	bl	800739e <UART_Transmit_IT>
    return;
 8006e02:	e014      	b.n	8006e2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <HAL_UART_IRQHandler+0x51e>
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb0d 	bl	800743c <UART_EndTransmit_IT>
    return;
 8006e22:	e004      	b.n	8006e2e <HAL_UART_IRQHandler+0x51e>
    return;
 8006e24:	bf00      	nop
 8006e26:	e002      	b.n	8006e2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e28:	bf00      	nop
 8006e2a:	e000      	b.n	8006e2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e2c:	bf00      	nop
  }
}
 8006e2e:	37e8      	adds	r7, #232	; 0xe8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b09c      	sub	sp, #112	; 0x70
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d172      	bne.n	8006f82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ec2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ec4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	667b      	str	r3, [r7, #100]	; 0x64
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3314      	adds	r3, #20
 8006ef4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ef6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ef8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3314      	adds	r3, #20
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	623b      	str	r3, [r7, #32]
   return(result);
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f20:	663b      	str	r3, [r7, #96]	; 0x60
 8006f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d119      	bne.n	8006f82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 0310 	bic.w	r3, r3, #16
 8006f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f6e:	61fa      	str	r2, [r7, #28]
 8006f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f84:	2200      	movs	r2, #0
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d106      	bne.n	8006f9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f94:	4619      	mov	r1, r3
 8006f96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f98:	f7ff ff67 	bl	8006e6a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9c:	e002      	b.n	8006fa4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006fa0:	f7fa fdf4 	bl	8001b8c <HAL_UART_RxCpltCallback>
}
 8006fa4:	bf00      	nop
 8006fa6:	3770      	adds	r7, #112	; 0x70
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d108      	bne.n	8006fda <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff ff49 	bl	8006e6a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fd8:	e002      	b.n	8006fe0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff ff33 	bl	8006e46 <HAL_UART_RxHalfCpltCallback>
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b21      	cmp	r3, #33	; 0x21
 800701a:	d108      	bne.n	800702e <UART_DMAError+0x46>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007028:	68b8      	ldr	r0, [r7, #8]
 800702a:	f000 f91b 	bl	8007264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	bf14      	ite	ne
 800703c:	2301      	movne	r3, #1
 800703e:	2300      	moveq	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b22      	cmp	r3, #34	; 0x22
 800704e:	d108      	bne.n	8007062 <UART_DMAError+0x7a>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800705c:	68b8      	ldr	r0, [r7, #8]
 800705e:	f000 f928 	bl	80072b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	f043 0210 	orr.w	r2, r3, #16
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800706e:	68b8      	ldr	r0, [r7, #8]
 8007070:	f7ff fef2 	bl	8006e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708c:	e03b      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d037      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007096:	f7fb ffc5 	bl	8003024 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d302      	bcc.n	80070ac <UART_WaitOnFlagUntilTimeout+0x30>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e03a      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d023      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d020      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d01d      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d116      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f8df 	bl	80072b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2208      	movs	r2, #8
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e00f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	429a      	cmp	r2, r3
 8007122:	d0b4      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	; 0x60
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2222      	movs	r2, #34	; 0x22
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715c:	4a3e      	ldr	r2, [pc, #248]	; (8007258 <UART_Start_Receive_DMA+0x128>)
 800715e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	4a3d      	ldr	r2, [pc, #244]	; (800725c <UART_Start_Receive_DMA+0x12c>)
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	4a3c      	ldr	r2, [pc, #240]	; (8007260 <UART_Start_Receive_DMA+0x130>)
 800716e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	2200      	movs	r2, #0
 8007176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f7fc f8fa 	bl	8003388 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80071d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	657b      	str	r3, [r7, #84]	; 0x54
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007206:	63ba      	str	r2, [r7, #56]	; 0x38
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800720c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3314      	adds	r3, #20
 8007220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	617b      	str	r3, [r7, #20]
   return(result);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007230:	653b      	str	r3, [r7, #80]	; 0x50
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800723a:	627a      	str	r2, [r7, #36]	; 0x24
 800723c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6a39      	ldr	r1, [r7, #32]
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	61fb      	str	r3, [r7, #28]
   return(result);
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3760      	adds	r7, #96	; 0x60
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	08006e81 	.word	0x08006e81
 800725c:	08006fad 	.word	0x08006fad
 8007260:	08006fe9 	.word	0x08006fe9

08007264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	60bb      	str	r3, [r7, #8]
   return(result);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	330c      	adds	r3, #12
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	61ba      	str	r2, [r7, #24]
 800728e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	613b      	str	r3, [r7, #16]
   return(result);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e5      	bne.n	800726c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80072a8:	bf00      	nop
 80072aa:	3724      	adds	r7, #36	; 0x24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr

080072b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b095      	sub	sp, #84	; 0x54
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	330c      	adds	r3, #12
 80072d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072da:	643a      	str	r2, [r7, #64]	; 0x40
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e5      	bne.n	80072ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3314      	adds	r3, #20
 80072f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	64bb      	str	r3, [r7, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800730e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e5      	bne.n	80072ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	2b01      	cmp	r3, #1
 8007328:	d119      	bne.n	800735e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	60bb      	str	r3, [r7, #8]
   return(result);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f023 0310 	bic.w	r3, r3, #16
 8007340:	647b      	str	r3, [r7, #68]	; 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800734a:	61ba      	str	r2, [r7, #24]
 800734c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	613b      	str	r3, [r7, #16]
   return(result);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e5      	bne.n	800732a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800736c:	bf00      	nop
 800736e:	3754      	adds	r7, #84	; 0x54
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr

08007376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fd61 	bl	8006e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b21      	cmp	r3, #33	; 0x21
 80073b0:	d13e      	bne.n	8007430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d114      	bne.n	80073e6 <UART_Transmit_IT+0x48>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d110      	bne.n	80073e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	621a      	str	r2, [r3, #32]
 80073e4:	e008      	b.n	80073f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6211      	str	r1, [r2, #32]
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4619      	mov	r1, r3
 8007406:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10f      	bne.n	800742c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800741a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800742a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007452:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fce9 	bl	8006e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08c      	sub	sp, #48	; 0x30
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b22      	cmp	r3, #34	; 0x22
 800747e:	f040 80ae 	bne.w	80075de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d117      	bne.n	80074bc <UART_Receive_IT+0x50>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d113      	bne.n	80074bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	1c9a      	adds	r2, r3, #2
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	629a      	str	r2, [r3, #40]	; 0x28
 80074ba:	e026      	b.n	800750a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d007      	beq.n	80074e0 <UART_Receive_IT+0x74>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <UART_Receive_IT+0x82>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d106      	bne.n	80074ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e008      	b.n	8007500 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4619      	mov	r1, r3
 8007518:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800751a:	2b00      	cmp	r3, #0
 800751c:	d15d      	bne.n	80075da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0220 	bic.w	r2, r2, #32
 800752c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800753c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695a      	ldr	r2, [r3, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	2b01      	cmp	r3, #1
 8007562:	d135      	bne.n	80075d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	613b      	str	r3, [r7, #16]
   return(result);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f023 0310 	bic.w	r3, r3, #16
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	623a      	str	r2, [r7, #32]
 800758c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	69f9      	ldr	r1, [r7, #28]
 8007590:	6a3a      	ldr	r2, [r7, #32]
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	61bb      	str	r3, [r7, #24]
   return(result);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d10a      	bne.n	80075c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fc4e 	bl	8006e6a <HAL_UARTEx_RxEventCallback>
 80075ce:	e002      	b.n	80075d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fa fadb 	bl	8001b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	e002      	b.n	80075e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3730      	adds	r7, #48	; 0x30
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007622:	f023 030c 	bic.w	r3, r3, #12
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	430b      	orrs	r3, r1
 800762e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a2c      	ldr	r2, [pc, #176]	; (80076fc <UART_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d103      	bne.n	8007658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fe f87e 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	e002      	b.n	800765e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007658:	f7fe f866 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 800765c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009a      	lsls	r2, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	4a22      	ldr	r2, [pc, #136]	; (8007700 <UART_SetConfig+0x118>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	0119      	lsls	r1, r3, #4
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009a      	lsls	r2, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	fbb2 f2f3 	udiv	r2, r2, r3
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <UART_SetConfig+0x118>)
 8007696:	fba3 0302 	umull	r0, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2064      	movs	r0, #100	; 0x64
 800769e:	fb00 f303 	mul.w	r3, r0, r3
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	3332      	adds	r3, #50	; 0x32
 80076a8:	4a15      	ldr	r2, [pc, #84]	; (8007700 <UART_SetConfig+0x118>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b4:	4419      	add	r1, r3
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009a      	lsls	r2, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80076cc:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <UART_SetConfig+0x118>)
 80076ce:	fba3 0302 	umull	r0, r3, r3, r2
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	2064      	movs	r0, #100	; 0x64
 80076d6:	fb00 f303 	mul.w	r3, r0, r3
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	3332      	adds	r3, #50	; 0x32
 80076e0:	4a07      	ldr	r2, [pc, #28]	; (8007700 <UART_SetConfig+0x118>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	f003 020f 	and.w	r2, r3, #15
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	440a      	add	r2, r1
 80076f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40013800 	.word	0x40013800
 8007700:	51eb851f 	.word	0x51eb851f

08007704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f103 0208 	add.w	r2, r3, #8
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f103 0208 	add.w	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f103 0208 	add.w	r2, r3, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e00c      	b.n	80077da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3308      	adds	r3, #8
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e002      	b.n	80077ce <vListInsert+0x2e>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d2f6      	bcs.n	80077c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6892      	ldr	r2, [r2, #8]
 8007826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d103      	bne.n	8007844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr

08007862 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007862:	b580      	push	{r7, lr}
 8007864:	b08e      	sub	sp, #56	; 0x38
 8007866:	af04      	add	r7, sp, #16
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	61fb      	str	r3, [r7, #28]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078a8:	2354      	movs	r3, #84	; 0x54
 80078aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b54      	cmp	r3, #84	; 0x54
 80078b0:	d00a      	beq.n	80078c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61bb      	str	r3, [r7, #24]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <xTaskCreateStatic+0xac>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078e8:	2300      	movs	r3, #0
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f850 	bl	80079a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007908:	f000 f8d4 	bl	8007ab4 <prvAddNewTaskToReadyList>
 800790c:	e001      	b.n	8007912 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
	}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	; 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fe85 	bl	8008640 <pvPortMalloc>
 8007936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800793e:	2054      	movs	r0, #84	; 0x54
 8007940:	f000 fe7e 	bl	8008640 <pvPortMalloc>
 8007944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
 8007952:	e005      	b.n	8007960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f000 ff3f 	bl	80087d8 <vPortFree>
 800795a:	e001      	b.n	8007960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f80e 	bl	80079a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800798a:	69f8      	ldr	r0, [r7, #28]
 800798c:	f000 f892 	bl	8007ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007990:	2301      	movs	r3, #1
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e002      	b.n	800799c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800799c:	69bb      	ldr	r3, [r7, #24]
	}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b088      	sub	sp, #32
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079be:	3b01      	subs	r3, #1
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f023 0307 	bic.w	r3, r3, #7
 80079cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <prvInitialiseNewTask+0x48>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	617b      	str	r3, [r7, #20]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01f      	beq.n	8007a34 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e012      	b.n	8007a20 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	7819      	ldrb	r1, [r3, #0]
 8007a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	3334      	adds	r3, #52	; 0x34
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d006      	beq.n	8007a28 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b0f      	cmp	r3, #15
 8007a24:	d9e9      	bls.n	80079fa <prvInitialiseNewTask+0x54>
 8007a26:	e000      	b.n	8007a2a <prvInitialiseNewTask+0x84>
			{
				break;
 8007a28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a32:	e003      	b.n	8007a3c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d901      	bls.n	8007a46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a42:	2306      	movs	r3, #6
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fe70 	bl	8007742 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	3318      	adds	r3, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe6b 	bl	8007742 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f1c3 0207 	rsb	r2, r3, #7
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2200      	movs	r2, #0
 8007a86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	69b8      	ldr	r0, [r7, #24]
 8007a96:	f000 fc21 	bl	80082dc <pxPortInitialiseStack>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aac:	bf00      	nop
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007abc:	f000 fcfe 	bl	80084bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ad8:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d110      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae0:	f000 faba 	bl	8008058 <prvInitialiseTaskLists>
 8007ae4:	e00d      	b.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d802      	bhi.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007afc:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b02:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	2201      	movs	r2, #1
 8007b12:	409a      	lsls	r2, r3
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <prvAddNewTaskToReadyList+0xcc>)
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7ff fe10 	bl	800775a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b3a:	f000 fcef 	bl	800851c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d207      	bcs.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <prvAddNewTaskToReadyList+0xd0>)
 8007b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000840 	.word	0x20000840
 8007b70:	20000740 	.word	0x20000740
 8007b74:	2000084c 	.word	0x2000084c
 8007b78:	2000085c 	.word	0x2000085c
 8007b7c:	20000848 	.word	0x20000848
 8007b80:	20000744 	.word	0x20000744
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d017      	beq.n	8007bca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <vTaskDelay+0x60>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <vTaskDelay+0x30>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bb8:	f000 f87a 	bl	8007cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fb26 	bl	8008210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bc4:	f000 f882 	bl	8007ccc <xTaskResumeAll>
 8007bc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d107      	bne.n	8007be0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <vTaskDelay+0x64>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000868 	.word	0x20000868
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfe:	463a      	mov	r2, r7
 8007c00:	1d39      	adds	r1, r7, #4
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f9 ff34 	bl	8001a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	491e      	ldr	r1, [pc, #120]	; (8007c98 <vTaskStartScheduler+0xa8>)
 8007c20:	481e      	ldr	r0, [pc, #120]	; (8007c9c <vTaskStartScheduler+0xac>)
 8007c22:	f7ff fe1e 	bl	8007862 <xTaskCreateStatic>
 8007c26:	4603      	mov	r3, r0
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <vTaskStartScheduler+0xb0>)
 8007c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <vTaskStartScheduler+0xb0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e001      	b.n	8007c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d116      	bne.n	8007c72 <vTaskStartScheduler+0x82>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
}
 8007c56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <vTaskStartScheduler+0xb4>)
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <vTaskStartScheduler+0xb8>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c66:	4b11      	ldr	r3, [pc, #68]	; (8007cac <vTaskStartScheduler+0xbc>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c6c:	f000 fbb4 	bl	80083d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c70:	e00e      	b.n	8007c90 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d10a      	bne.n	8007c90 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vTaskStartScheduler+0x9e>
}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	08009488 	.word	0x08009488
 8007c9c:	08008029 	.word	0x08008029
 8007ca0:	20000864 	.word	0x20000864
 8007ca4:	20000860 	.word	0x20000860
 8007ca8:	2000084c 	.word	0x2000084c
 8007cac:	20000844 	.word	0x20000844

08007cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	4a03      	ldr	r2, [pc, #12]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cbe:	bf00      	nop
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000868 	.word	0x20000868

08007ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cda:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	603b      	str	r3, [r7, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf8:	f000 fbe0 	bl	80084bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cfc:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d161      	bne.n	8007dd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d0e:	4b35      	ldr	r3, [pc, #212]	; (8007de4 <xTaskResumeAll+0x118>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d05d      	beq.n	8007dd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d16:	e02e      	b.n	8007d76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3318      	adds	r3, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fd73 	bl	8007810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fd6e 	bl	8007810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <xTaskResumeAll+0x120>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <xTaskResumeAll+0x120>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <xTaskResumeAll+0x124>)
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff fcfc 	bl	800775a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <xTaskResumeAll+0x128>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d76:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1cc      	bne.n	8007d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d84:	f000 fa06 	bl	8008194 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d88:	4b1c      	ldr	r3, [pc, #112]	; (8007dfc <xTaskResumeAll+0x130>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d010      	beq.n	8007db6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d94:	f000 f836 	bl	8007e04 <xTaskIncrementTick>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d9e:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f1      	bne.n	8007d94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <xTaskResumeAll+0x130>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTaskResumeAll+0x134>)
 8007dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd2:	f000 fba3 	bl	800851c <vPortExitCritical>

	return xAlreadyYielded;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000868 	.word	0x20000868
 8007de4:	20000840 	.word	0x20000840
 8007de8:	20000800 	.word	0x20000800
 8007dec:	20000848 	.word	0x20000848
 8007df0:	20000744 	.word	0x20000744
 8007df4:	20000740 	.word	0x20000740
 8007df8:	20000854 	.word	0x20000854
 8007dfc:	20000850 	.word	0x20000850
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0e:	4b4e      	ldr	r3, [pc, #312]	; (8007f48 <xTaskIncrementTick+0x144>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 808e 	bne.w	8007f34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e18:	4b4c      	ldr	r3, [pc, #304]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e20:	4a4a      	ldr	r2, [pc, #296]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d120      	bne.n	8007e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e2c:	4b48      	ldr	r3, [pc, #288]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskIncrementTick+0x46>
 8007e4c:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b40      	ldr	r3, [pc, #256]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a3e      	ldr	r2, [pc, #248]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b3d      	ldr	r3, [pc, #244]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a3c      	ldr	r2, [pc, #240]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f000 f993 	bl	8008194 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d348      	bcc.n	8007f0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e78:	4b35      	ldr	r3, [pc, #212]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	601a      	str	r2, [r3, #0]
					break;
 8007e8a:	e03e      	b.n	8007f0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea4:	4a2d      	ldr	r2, [pc, #180]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eaa:	e02e      	b.n	8007f0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff fcad 	bl	8007810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fca4 	bl	8007810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007ee8:	441a      	add	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7ff fc32 	bl	800775a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3b9      	bcc.n	8007e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f08:	e7b6      	b.n	8007e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	4914      	ldr	r1, [pc, #80]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d901      	bls.n	8007f26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <xTaskIncrementTick+0x168>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e004      	b.n	8007f3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f3e:	697b      	ldr	r3, [r7, #20]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000868 	.word	0x20000868
 8007f4c:	20000844 	.word	0x20000844
 8007f50:	200007f8 	.word	0x200007f8
 8007f54:	200007fc 	.word	0x200007fc
 8007f58:	20000858 	.word	0x20000858
 8007f5c:	20000860 	.word	0x20000860
 8007f60:	20000848 	.word	0x20000848
 8007f64:	20000744 	.word	0x20000744
 8007f68:	20000740 	.word	0x20000740
 8007f6c:	20000854 	.word	0x20000854
 8007f70:	20000850 	.word	0x20000850

08007f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7a:	4b26      	ldr	r3, [pc, #152]	; (8008014 <vTaskSwitchContext+0xa0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f82:	4b25      	ldr	r3, [pc, #148]	; (8008018 <vTaskSwitchContext+0xa4>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f88:	e03f      	b.n	800800a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007f8a:	4b23      	ldr	r3, [pc, #140]	; (8008018 <vTaskSwitchContext+0xa4>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b22      	ldr	r3, [pc, #136]	; (800801c <vTaskSwitchContext+0xa8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	fab3 f383 	clz	r3, r3
 8007f9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	f1c3 031f 	rsb	r3, r3, #31
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	491e      	ldr	r1, [pc, #120]	; (8008020 <vTaskSwitchContext+0xac>)
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vTaskSwitchContext+0x5a>
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a11      	ldr	r2, [pc, #68]	; (8008020 <vTaskSwitchContext+0xac>)
 8007fdc:	4413      	add	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d104      	bne.n	8008000 <vTaskSwitchContext+0x8c>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4a07      	ldr	r2, [pc, #28]	; (8008024 <vTaskSwitchContext+0xb0>)
 8008008:	6013      	str	r3, [r2, #0]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr
 8008014:	20000868 	.word	0x20000868
 8008018:	20000854 	.word	0x20000854
 800801c:	20000848 	.word	0x20000848
 8008020:	20000744 	.word	0x20000744
 8008024:	20000740 	.word	0x20000740

08008028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008030:	f000 f852 	bl	80080d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <prvIdleTask+0x28>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d9f9      	bls.n	8008030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <prvIdleTask+0x2c>)
 800803e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800804c:	e7f0      	b.n	8008030 <prvIdleTask+0x8>
 800804e:	bf00      	nop
 8008050:	20000744 	.word	0x20000744
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e00c      	b.n	800807e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <prvInitialiseTaskLists+0x60>)
 8008070:	4413      	add	r3, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fb46 	bl	8007704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3301      	adds	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d9ef      	bls.n	8008064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008084:	480d      	ldr	r0, [pc, #52]	; (80080bc <prvInitialiseTaskLists+0x64>)
 8008086:	f7ff fb3d 	bl	8007704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800808a:	480d      	ldr	r0, [pc, #52]	; (80080c0 <prvInitialiseTaskLists+0x68>)
 800808c:	f7ff fb3a 	bl	8007704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008090:	480c      	ldr	r0, [pc, #48]	; (80080c4 <prvInitialiseTaskLists+0x6c>)
 8008092:	f7ff fb37 	bl	8007704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008096:	480c      	ldr	r0, [pc, #48]	; (80080c8 <prvInitialiseTaskLists+0x70>)
 8008098:	f7ff fb34 	bl	8007704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800809c:	480b      	ldr	r0, [pc, #44]	; (80080cc <prvInitialiseTaskLists+0x74>)
 800809e:	f7ff fb31 	bl	8007704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <prvInitialiseTaskLists+0x78>)
 80080a4:	4a05      	ldr	r2, [pc, #20]	; (80080bc <prvInitialiseTaskLists+0x64>)
 80080a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <prvInitialiseTaskLists+0x7c>)
 80080aa:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <prvInitialiseTaskLists+0x68>)
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000744 	.word	0x20000744
 80080bc:	200007d0 	.word	0x200007d0
 80080c0:	200007e4 	.word	0x200007e4
 80080c4:	20000800 	.word	0x20000800
 80080c8:	20000814 	.word	0x20000814
 80080cc:	2000082c 	.word	0x2000082c
 80080d0:	200007f8 	.word	0x200007f8
 80080d4:	200007fc 	.word	0x200007fc

080080d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080de:	e019      	b.n	8008114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080e0:	f000 f9ec 	bl	80084bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <prvCheckTasksWaitingTermination+0x50>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fb8d 	bl	8007810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3b01      	subs	r3, #1
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800810a:	f000 fa07 	bl	800851c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f810 	bl	8008134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008114:	4b06      	ldr	r3, [pc, #24]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e1      	bne.n	80080e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000814 	.word	0x20000814
 800812c:	20000840 	.word	0x20000840
 8008130:	20000828 	.word	0x20000828

08008134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008142:	2b00      	cmp	r3, #0
 8008144:	d108      	bne.n	8008158 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fb44 	bl	80087d8 <vPortFree>
				vPortFree( pxTCB );
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb41 	bl	80087d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008156:	e018      	b.n	800818a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800815e:	2b01      	cmp	r3, #1
 8008160:	d103      	bne.n	800816a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb38 	bl	80087d8 <vPortFree>
	}
 8008168:	e00f      	b.n	800818a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008170:	2b02      	cmp	r3, #2
 8008172:	d00a      	beq.n	800818a <prvDeleteTCB+0x56>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <prvDeleteTCB+0x54>
	}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <prvResetNextTaskUnblockTime+0x38>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <prvResetNextTaskUnblockTime+0x3c>)
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081ac:	e008      	b.n	80081c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <prvResetNextTaskUnblockTime+0x38>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <prvResetNextTaskUnblockTime+0x3c>)
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc80      	pop	{r7}
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	200007f8 	.word	0x200007f8
 80081d0:	20000860 	.word	0x20000860

080081d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081da:	4b0b      	ldr	r3, [pc, #44]	; (8008208 <xTaskGetSchedulerState+0x34>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081e2:	2301      	movs	r3, #1
 80081e4:	607b      	str	r3, [r7, #4]
 80081e6:	e008      	b.n	80081fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e8:	4b08      	ldr	r3, [pc, #32]	; (800820c <xTaskGetSchedulerState+0x38>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081f0:	2302      	movs	r3, #2
 80081f2:	607b      	str	r3, [r7, #4]
 80081f4:	e001      	b.n	80081fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081f6:	2300      	movs	r3, #0
 80081f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081fa:	687b      	ldr	r3, [r7, #4]
	}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	2000084c 	.word	0x2000084c
 800820c:	20000868 	.word	0x20000868

08008210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800821a:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3304      	adds	r3, #4
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff faf2 	bl	8007810 <uxListRemove>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10b      	bne.n	800824a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	2201      	movs	r2, #1
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	43da      	mvns	r2, r3
 8008240:	4b21      	ldr	r3, [pc, #132]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4013      	ands	r3, r2
 8008246:	4a20      	ldr	r2, [pc, #128]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008248:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d10a      	bne.n	8008268 <prvAddCurrentTaskToDelayedList+0x58>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4619      	mov	r1, r3
 8008260:	481a      	ldr	r0, [pc, #104]	; (80082cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008262:	f7ff fa7a 	bl	800775a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008266:	e026      	b.n	80082b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	429a      	cmp	r2, r3
 800827e:	d209      	bcs.n	8008294 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7ff fa87 	bl	80077a0 <vListInsert>
}
 8008292:	e010      	b.n	80082b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7ff fa7d 	bl	80077a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d202      	bcs.n	80082b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082b0:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000844 	.word	0x20000844
 80082c4:	20000740 	.word	0x20000740
 80082c8:	20000848 	.word	0x20000848
 80082cc:	2000082c 	.word	0x2000082c
 80082d0:	200007fc 	.word	0x200007fc
 80082d4:	200007f8 	.word	0x200007f8
 80082d8:	20000860 	.word	0x20000860

080082dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3b04      	subs	r3, #4
 80082ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3b04      	subs	r3, #4
 80082fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f023 0201 	bic.w	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3b04      	subs	r3, #4
 800830a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800830c:	4a08      	ldr	r2, [pc, #32]	; (8008330 <pxPortInitialiseStack+0x54>)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3b14      	subs	r3, #20
 8008316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3b20      	subs	r3, #32
 8008322:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008324:	68fb      	ldr	r3, [r7, #12]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr
 8008330:	08008335 	.word	0x08008335

08008334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800833a:	2300      	movs	r3, #0
 800833c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800833e:	4b12      	ldr	r3, [pc, #72]	; (8008388 <prvTaskExitError+0x54>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d00a      	beq.n	800835e <prvTaskExitError+0x2a>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	60fb      	str	r3, [r7, #12]
}
 800835a:	bf00      	nop
 800835c:	e7fe      	b.n	800835c <prvTaskExitError+0x28>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	60bb      	str	r3, [r7, #8]
}
 8008370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008372:	bf00      	nop
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0fc      	beq.n	8008374 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000014 	.word	0x20000014
 800838c:	00000000 	.word	0x00000000

08008390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <pxCurrentTCBConst2>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6808      	ldr	r0, [r1, #0]
 8008396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800839a:	f380 8809 	msr	PSP, r0
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8811 	msr	BASEPRI, r0
 80083aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80083ae:	4770      	bx	lr

080083b0 <pxCurrentTCBConst2>:
 80083b0:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80083b8:	4806      	ldr	r0, [pc, #24]	; (80083d4 <prvPortStartFirstTask+0x1c>)
 80083ba:	6800      	ldr	r0, [r0, #0]
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f380 8808 	msr	MSP, r0
 80083c2:	b662      	cpsie	i
 80083c4:	b661      	cpsie	f
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	df00      	svc	0
 80083d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083d2:	bf00      	nop
 80083d4:	e000ed08 	.word	0xe000ed08

080083d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083de:	4b32      	ldr	r3, [pc, #200]	; (80084a8 <xPortStartScheduler+0xd0>)
 80083e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	22ff      	movs	r2, #255	; 0xff
 80083ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008400:	b2da      	uxtb	r2, r3
 8008402:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <xPortStartScheduler+0xd4>)
 8008404:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008406:	4b2a      	ldr	r3, [pc, #168]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008408:	2207      	movs	r2, #7
 800840a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800840c:	e009      	b.n	8008422 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800840e:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3b01      	subs	r3, #1
 8008414:	4a26      	ldr	r2, [pc, #152]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008416:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842a:	2b80      	cmp	r3, #128	; 0x80
 800842c:	d0ef      	beq.n	800840e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800842e:	4b20      	ldr	r3, [pc, #128]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f1c3 0307 	rsb	r3, r3, #7
 8008436:	2b04      	cmp	r3, #4
 8008438:	d00a      	beq.n	8008450 <xPortStartScheduler+0x78>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	60bb      	str	r3, [r7, #8]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008450:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008458:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800845a:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <xPortStartScheduler+0xd8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008462:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <xPortStartScheduler+0xd8>)
 8008464:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	b2da      	uxtb	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <xPortStartScheduler+0xdc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a10      	ldr	r2, [pc, #64]	; (80084b4 <xPortStartScheduler+0xdc>)
 8008474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <xPortStartScheduler+0xdc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a0d      	ldr	r2, [pc, #52]	; (80084b4 <xPortStartScheduler+0xdc>)
 8008480:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008484:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008486:	f000 f8b9 	bl	80085fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <xPortStartScheduler+0xe0>)
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008490:	f7ff ff92 	bl	80083b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008494:	f7ff fd6e 	bl	8007f74 <vTaskSwitchContext>
	prvTaskExitError();
 8008498:	f7ff ff4c 	bl	8008334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	e000e400 	.word	0xe000e400
 80084ac:	2000086c 	.word	0x2000086c
 80084b0:	20000870 	.word	0x20000870
 80084b4:	e000ed20 	.word	0xe000ed20
 80084b8:	20000014 	.word	0x20000014

080084bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	607b      	str	r3, [r7, #4]
}
 80084d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <vPortEnterCritical+0x58>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3301      	adds	r3, #1
 80084dc:	4a0d      	ldr	r2, [pc, #52]	; (8008514 <vPortEnterCritical+0x58>)
 80084de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <vPortEnterCritical+0x58>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10f      	bne.n	8008508 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <vPortEnterCritical+0x5c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <vPortEnterCritical+0x4c>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	603b      	str	r3, [r7, #0]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <vPortEnterCritical+0x4a>
	}
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000014 	.word	0x20000014
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008522:	4b11      	ldr	r3, [pc, #68]	; (8008568 <vPortExitCritical+0x4c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <vPortExitCritical+0x24>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	607b      	str	r3, [r7, #4]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008540:	4b09      	ldr	r3, [pc, #36]	; (8008568 <vPortExitCritical+0x4c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3b01      	subs	r3, #1
 8008546:	4a08      	ldr	r2, [pc, #32]	; (8008568 <vPortExitCritical+0x4c>)
 8008548:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <vPortExitCritical+0x4c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d105      	bne.n	800855e <vPortExitCritical+0x42>
 8008552:	2300      	movs	r3, #0
 8008554:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800855c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800855e:	bf00      	nop
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr
 8008568:	20000014 	.word	0x20000014
 800856c:	00000000 	.word	0x00000000

08008570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008570:	f3ef 8009 	mrs	r0, PSP
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <pxCurrentTCBConst>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008580:	6010      	str	r0, [r2, #0]
 8008582:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008586:	f04f 0050 	mov.w	r0, #80	; 0x50
 800858a:	f380 8811 	msr	BASEPRI, r0
 800858e:	f7ff fcf1 	bl	8007f74 <vTaskSwitchContext>
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8811 	msr	BASEPRI, r0
 800859a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	6808      	ldr	r0, [r1, #0]
 80085a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085a6:	f380 8809 	msr	PSP, r0
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	4770      	bx	lr

080085b0 <pxCurrentTCBConst>:
 80085b0:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop

080085b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	607b      	str	r3, [r7, #4]
}
 80085d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085d2:	f7ff fc17 	bl	8007e04 <xTaskIncrementTick>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <xPortSysTickHandler+0x40>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	2300      	movs	r3, #0
 80085e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f383 8811 	msr	BASEPRI, r3
}
 80085ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085f0:	bf00      	nop
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <vPortSetupTimerInterrupt+0x30>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <vPortSetupTimerInterrupt+0x34>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800860c:	4b09      	ldr	r3, [pc, #36]	; (8008634 <vPortSetupTimerInterrupt+0x38>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a09      	ldr	r2, [pc, #36]	; (8008638 <vPortSetupTimerInterrupt+0x3c>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	099b      	lsrs	r3, r3, #6
 8008618:	4a08      	ldr	r2, [pc, #32]	; (800863c <vPortSetupTimerInterrupt+0x40>)
 800861a:	3b01      	subs	r3, #1
 800861c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800861e:	4b03      	ldr	r3, [pc, #12]	; (800862c <vPortSetupTimerInterrupt+0x30>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr
 800862c:	e000e010 	.word	0xe000e010
 8008630:	e000e018 	.word	0xe000e018
 8008634:	20000008 	.word	0x20000008
 8008638:	10624dd3 	.word	0x10624dd3
 800863c:	e000e014 	.word	0xe000e014

08008640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08a      	sub	sp, #40	; 0x28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800864c:	f7ff fb30 	bl	8007cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008650:	4b5b      	ldr	r3, [pc, #364]	; (80087c0 <pvPortMalloc+0x180>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008658:	f000 f920 	bl	800889c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800865c:	4b59      	ldr	r3, [pc, #356]	; (80087c4 <pvPortMalloc+0x184>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 8093 	bne.w	8008790 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01d      	beq.n	80086ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008670:	2208      	movs	r2, #8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4413      	add	r3, r2
 8008676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	2b00      	cmp	r3, #0
 8008680:	d014      	beq.n	80086ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f023 0307 	bic.w	r3, r3, #7
 8008688:	3308      	adds	r3, #8
 800868a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <pvPortMalloc+0x6c>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	617b      	str	r3, [r7, #20]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d06e      	beq.n	8008790 <pvPortMalloc+0x150>
 80086b2:	4b45      	ldr	r3, [pc, #276]	; (80087c8 <pvPortMalloc+0x188>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d869      	bhi.n	8008790 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086bc:	4b43      	ldr	r3, [pc, #268]	; (80087cc <pvPortMalloc+0x18c>)
 80086be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086c0:	4b42      	ldr	r3, [pc, #264]	; (80087cc <pvPortMalloc+0x18c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086c6:	e004      	b.n	80086d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d903      	bls.n	80086e4 <pvPortMalloc+0xa4>
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f1      	bne.n	80086c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <pvPortMalloc+0x180>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d050      	beq.n	8008790 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2208      	movs	r2, #8
 80086f4:	4413      	add	r3, r2
 80086f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	1ad2      	subs	r2, r2, r3
 8008708:	2308      	movs	r3, #8
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	429a      	cmp	r2, r3
 800870e:	d91f      	bls.n	8008750 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <pvPortMalloc+0xf8>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	613b      	str	r3, [r7, #16]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800874a:	69b8      	ldr	r0, [r7, #24]
 800874c:	f000 f908 	bl	8008960 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <pvPortMalloc+0x188>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <pvPortMalloc+0x188>)
 800875c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800875e:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <pvPortMalloc+0x188>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <pvPortMalloc+0x190>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d203      	bcs.n	8008772 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <pvPortMalloc+0x188>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <pvPortMalloc+0x190>)
 8008770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	4b13      	ldr	r3, [pc, #76]	; (80087c4 <pvPortMalloc+0x184>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	431a      	orrs	r2, r3
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008786:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <pvPortMalloc+0x194>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4a11      	ldr	r2, [pc, #68]	; (80087d4 <pvPortMalloc+0x194>)
 800878e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008790:	f7ff fa9c 	bl	8007ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <pvPortMalloc+0x174>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	60fb      	str	r3, [r7, #12]
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <pvPortMalloc+0x172>
	return pvReturn;
 80087b4:	69fb      	ldr	r3, [r7, #28]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3728      	adds	r7, #40	; 0x28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000147c 	.word	0x2000147c
 80087c4:	20001490 	.word	0x20001490
 80087c8:	20001480 	.word	0x20001480
 80087cc:	20001474 	.word	0x20001474
 80087d0:	20001484 	.word	0x20001484
 80087d4:	20001488 	.word	0x20001488

080087d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d04d      	beq.n	8008886 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087ea:	2308      	movs	r3, #8
 80087ec:	425b      	negs	r3, r3
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4413      	add	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	4b24      	ldr	r3, [pc, #144]	; (8008890 <vPortFree+0xb8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4013      	ands	r3, r2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <vPortFree+0x44>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	60fb      	str	r3, [r7, #12]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <vPortFree+0x62>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60bb      	str	r3, [r7, #8]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <vPortFree+0xb8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01e      	beq.n	8008886 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d11a      	bne.n	8008886 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <vPortFree+0xb8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	43db      	mvns	r3, r3
 800885a:	401a      	ands	r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008860:	f7ff fa26 	bl	8007cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <vPortFree+0xbc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4413      	add	r3, r2
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <vPortFree+0xbc>)
 8008870:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008872:	6938      	ldr	r0, [r7, #16]
 8008874:	f000 f874 	bl	8008960 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <vPortFree+0xc0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a06      	ldr	r2, [pc, #24]	; (8008898 <vPortFree+0xc0>)
 8008880:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008882:	f7ff fa23 	bl	8007ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008886:	bf00      	nop
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20001490 	.word	0x20001490
 8008894:	20001480 	.word	0x20001480
 8008898:	2000148c 	.word	0x2000148c

0800889c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80088a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088a8:	4b27      	ldr	r3, [pc, #156]	; (8008948 <prvHeapInit+0xac>)
 80088aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3307      	adds	r3, #7
 80088ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0307 	bic.w	r3, r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <prvHeapInit+0xac>)
 80088cc:	4413      	add	r3, r2
 80088ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088d4:	4a1d      	ldr	r2, [pc, #116]	; (800894c <prvHeapInit+0xb0>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088da:	4b1c      	ldr	r3, [pc, #112]	; (800894c <prvHeapInit+0xb0>)
 80088dc:	2200      	movs	r2, #0
 80088de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088e8:	2208      	movs	r2, #8
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a15      	ldr	r2, [pc, #84]	; (8008950 <prvHeapInit+0xb4>)
 80088fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <prvHeapInit+0xb4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008906:	4b12      	ldr	r3, [pc, #72]	; (8008950 <prvHeapInit+0xb4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800891c:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <prvHeapInit+0xb4>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4a0a      	ldr	r2, [pc, #40]	; (8008954 <prvHeapInit+0xb8>)
 800892a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <prvHeapInit+0xbc>)
 8008932:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008934:	4b09      	ldr	r3, [pc, #36]	; (800895c <prvHeapInit+0xc0>)
 8008936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800893a:	601a      	str	r2, [r3, #0]
}
 800893c:	bf00      	nop
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20000874 	.word	0x20000874
 800894c:	20001474 	.word	0x20001474
 8008950:	2000147c 	.word	0x2000147c
 8008954:	20001484 	.word	0x20001484
 8008958:	20001480 	.word	0x20001480
 800895c:	20001490 	.word	0x20001490

08008960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008968:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <prvInsertBlockIntoFreeList+0xa8>)
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e002      	b.n	8008974 <prvInsertBlockIntoFreeList+0x14>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d8f7      	bhi.n	800896e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4413      	add	r3, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	429a      	cmp	r2, r3
 800898e:	d108      	bne.n	80089a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	441a      	add	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	441a      	add	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d118      	bne.n	80089e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <prvInsertBlockIntoFreeList+0xac>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d00d      	beq.n	80089de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	441a      	add	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	e008      	b.n	80089f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <prvInsertBlockIntoFreeList+0xac>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e003      	b.n	80089f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d002      	beq.n	80089fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	20001474 	.word	0x20001474
 8008a0c:	2000147c 	.word	0x2000147c

08008a10 <siprintf>:
 8008a10:	b40e      	push	{r1, r2, r3}
 8008a12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a16:	b500      	push	{lr}
 8008a18:	b09c      	sub	sp, #112	; 0x70
 8008a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a1c:	9002      	str	r0, [sp, #8]
 8008a1e:	9006      	str	r0, [sp, #24]
 8008a20:	9107      	str	r1, [sp, #28]
 8008a22:	9104      	str	r1, [sp, #16]
 8008a24:	4808      	ldr	r0, [pc, #32]	; (8008a48 <siprintf+0x38>)
 8008a26:	4909      	ldr	r1, [pc, #36]	; (8008a4c <siprintf+0x3c>)
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	9105      	str	r1, [sp, #20]
 8008a2e:	6800      	ldr	r0, [r0, #0]
 8008a30:	a902      	add	r1, sp, #8
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f000 f99c 	bl	8008d70 <_svfiprintf_r>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	b01c      	add	sp, #112	; 0x70
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b003      	add	sp, #12
 8008a46:	4770      	bx	lr
 8008a48:	20000064 	.word	0x20000064
 8008a4c:	ffff0208 	.word	0xffff0208

08008a50 <memset>:
 8008a50:	4603      	mov	r3, r0
 8008a52:	4402      	add	r2, r0
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d100      	bne.n	8008a5a <memset+0xa>
 8008a58:	4770      	bx	lr
 8008a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5e:	e7f9      	b.n	8008a54 <memset+0x4>

08008a60 <__errno>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <__errno+0x8>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000064 	.word	0x20000064

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	2600      	movs	r6, #0
 8008a70:	4d0c      	ldr	r5, [pc, #48]	; (8008aa4 <__libc_init_array+0x38>)
 8008a72:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a74:	1b64      	subs	r4, r4, r5
 8008a76:	10a4      	asrs	r4, r4, #2
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	f000 fcc0 	bl	8009400 <_init>
 8008a80:	2600      	movs	r6, #0
 8008a82:	4d0a      	ldr	r5, [pc, #40]	; (8008aac <__libc_init_array+0x40>)
 8008a84:	4c0a      	ldr	r4, [pc, #40]	; (8008ab0 <__libc_init_array+0x44>)
 8008a86:	1b64      	subs	r4, r4, r5
 8008a88:	10a4      	asrs	r4, r4, #2
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	080094f0 	.word	0x080094f0
 8008aa8:	080094f0 	.word	0x080094f0
 8008aac:	080094f0 	.word	0x080094f0
 8008ab0:	080094f4 	.word	0x080094f4

08008ab4 <__retarget_lock_acquire_recursive>:
 8008ab4:	4770      	bx	lr

08008ab6 <__retarget_lock_release_recursive>:
 8008ab6:	4770      	bx	lr

08008ab8 <memcpy>:
 8008ab8:	440a      	add	r2, r1
 8008aba:	4291      	cmp	r1, r2
 8008abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac0:	d100      	bne.n	8008ac4 <memcpy+0xc>
 8008ac2:	4770      	bx	lr
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad0:	d1f9      	bne.n	8008ac6 <memcpy+0xe>
 8008ad2:	bd10      	pop	{r4, pc}

08008ad4 <_free_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d040      	beq.n	8008b5e <_free_r+0x8a>
 8008adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae0:	1f0c      	subs	r4, r1, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfb8      	it	lt
 8008ae6:	18e4      	addlt	r4, r4, r3
 8008ae8:	f000 f8dc 	bl	8008ca4 <__malloc_lock>
 8008aec:	4a1c      	ldr	r2, [pc, #112]	; (8008b60 <_free_r+0x8c>)
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	b933      	cbnz	r3, 8008b00 <_free_r+0x2c>
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6014      	str	r4, [r2, #0]
 8008af6:	4628      	mov	r0, r5
 8008af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afc:	f000 b8d8 	b.w	8008cb0 <__malloc_unlock>
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d908      	bls.n	8008b16 <_free_r+0x42>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	1821      	adds	r1, r4, r0
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf01      	itttt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	e7ed      	b.n	8008af2 <_free_r+0x1e>
 8008b16:	461a      	mov	r2, r3
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	b10b      	cbz	r3, 8008b20 <_free_r+0x4c>
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d9fa      	bls.n	8008b16 <_free_r+0x42>
 8008b20:	6811      	ldr	r1, [r2, #0]
 8008b22:	1850      	adds	r0, r2, r1
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d10b      	bne.n	8008b40 <_free_r+0x6c>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	1850      	adds	r0, r2, r1
 8008b2e:	4283      	cmp	r3, r0
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	d1e0      	bne.n	8008af6 <_free_r+0x22>
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4408      	add	r0, r1
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	6053      	str	r3, [r2, #4]
 8008b3e:	e7da      	b.n	8008af6 <_free_r+0x22>
 8008b40:	d902      	bls.n	8008b48 <_free_r+0x74>
 8008b42:	230c      	movs	r3, #12
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	e7d6      	b.n	8008af6 <_free_r+0x22>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	1821      	adds	r1, r4, r0
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	bf01      	itttt	eq
 8008b50:	6819      	ldreq	r1, [r3, #0]
 8008b52:	685b      	ldreq	r3, [r3, #4]
 8008b54:	1809      	addeq	r1, r1, r0
 8008b56:	6021      	streq	r1, [r4, #0]
 8008b58:	6063      	str	r3, [r4, #4]
 8008b5a:	6054      	str	r4, [r2, #4]
 8008b5c:	e7cb      	b.n	8008af6 <_free_r+0x22>
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	200015d4 	.word	0x200015d4

08008b64 <sbrk_aligned>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4e0e      	ldr	r6, [pc, #56]	; (8008ba0 <sbrk_aligned+0x3c>)
 8008b68:	460c      	mov	r4, r1
 8008b6a:	6831      	ldr	r1, [r6, #0]
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	b911      	cbnz	r1, 8008b76 <sbrk_aligned+0x12>
 8008b70:	f000 fbaa 	bl	80092c8 <_sbrk_r>
 8008b74:	6030      	str	r0, [r6, #0]
 8008b76:	4621      	mov	r1, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 fba5 	bl	80092c8 <_sbrk_r>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d00a      	beq.n	8008b98 <sbrk_aligned+0x34>
 8008b82:	1cc4      	adds	r4, r0, #3
 8008b84:	f024 0403 	bic.w	r4, r4, #3
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d007      	beq.n	8008b9c <sbrk_aligned+0x38>
 8008b8c:	1a21      	subs	r1, r4, r0
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fb9a 	bl	80092c8 <_sbrk_r>
 8008b94:	3001      	adds	r0, #1
 8008b96:	d101      	bne.n	8008b9c <sbrk_aligned+0x38>
 8008b98:	f04f 34ff 	mov.w	r4, #4294967295
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	200015d8 	.word	0x200015d8

08008ba4 <_malloc_r>:
 8008ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	1ccd      	adds	r5, r1, #3
 8008baa:	f025 0503 	bic.w	r5, r5, #3
 8008bae:	3508      	adds	r5, #8
 8008bb0:	2d0c      	cmp	r5, #12
 8008bb2:	bf38      	it	cc
 8008bb4:	250c      	movcc	r5, #12
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	4607      	mov	r7, r0
 8008bba:	db01      	blt.n	8008bc0 <_malloc_r+0x1c>
 8008bbc:	42a9      	cmp	r1, r5
 8008bbe:	d905      	bls.n	8008bcc <_malloc_r+0x28>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ca0 <_malloc_r+0xfc>
 8008bd0:	f000 f868 	bl	8008ca4 <__malloc_lock>
 8008bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd8:	461c      	mov	r4, r3
 8008bda:	bb5c      	cbnz	r4, 8008c34 <_malloc_r+0x90>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7ff ffc0 	bl	8008b64 <sbrk_aligned>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	4604      	mov	r4, r0
 8008be8:	d155      	bne.n	8008c96 <_malloc_r+0xf2>
 8008bea:	f8d8 4000 	ldr.w	r4, [r8]
 8008bee:	4626      	mov	r6, r4
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	d145      	bne.n	8008c80 <_malloc_r+0xdc>
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	d048      	beq.n	8008c8a <_malloc_r+0xe6>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	eb04 0903 	add.w	r9, r4, r3
 8008c02:	f000 fb61 	bl	80092c8 <_sbrk_r>
 8008c06:	4581      	cmp	r9, r0
 8008c08:	d13f      	bne.n	8008c8a <_malloc_r+0xe6>
 8008c0a:	6821      	ldr	r1, [r4, #0]
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	1a6d      	subs	r5, r5, r1
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7ff ffa7 	bl	8008b64 <sbrk_aligned>
 8008c16:	3001      	adds	r0, #1
 8008c18:	d037      	beq.n	8008c8a <_malloc_r+0xe6>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	442b      	add	r3, r5
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	f8d8 3000 	ldr.w	r3, [r8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d038      	beq.n	8008c9a <_malloc_r+0xf6>
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	42a2      	cmp	r2, r4
 8008c2c:	d12b      	bne.n	8008c86 <_malloc_r+0xe2>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	e00f      	b.n	8008c54 <_malloc_r+0xb0>
 8008c34:	6822      	ldr	r2, [r4, #0]
 8008c36:	1b52      	subs	r2, r2, r5
 8008c38:	d41f      	bmi.n	8008c7a <_malloc_r+0xd6>
 8008c3a:	2a0b      	cmp	r2, #11
 8008c3c:	d917      	bls.n	8008c6e <_malloc_r+0xca>
 8008c3e:	1961      	adds	r1, r4, r5
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	6025      	str	r5, [r4, #0]
 8008c44:	bf18      	it	ne
 8008c46:	6059      	strne	r1, [r3, #4]
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	bf08      	it	eq
 8008c4c:	f8c8 1000 	streq.w	r1, [r8]
 8008c50:	5162      	str	r2, [r4, r5]
 8008c52:	604b      	str	r3, [r1, #4]
 8008c54:	4638      	mov	r0, r7
 8008c56:	f104 060b 	add.w	r6, r4, #11
 8008c5a:	f000 f829 	bl	8008cb0 <__malloc_unlock>
 8008c5e:	f026 0607 	bic.w	r6, r6, #7
 8008c62:	1d23      	adds	r3, r4, #4
 8008c64:	1af2      	subs	r2, r6, r3
 8008c66:	d0ae      	beq.n	8008bc6 <_malloc_r+0x22>
 8008c68:	1b9b      	subs	r3, r3, r6
 8008c6a:	50a3      	str	r3, [r4, r2]
 8008c6c:	e7ab      	b.n	8008bc6 <_malloc_r+0x22>
 8008c6e:	42a3      	cmp	r3, r4
 8008c70:	6862      	ldr	r2, [r4, #4]
 8008c72:	d1dd      	bne.n	8008c30 <_malloc_r+0x8c>
 8008c74:	f8c8 2000 	str.w	r2, [r8]
 8008c78:	e7ec      	b.n	8008c54 <_malloc_r+0xb0>
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	6864      	ldr	r4, [r4, #4]
 8008c7e:	e7ac      	b.n	8008bda <_malloc_r+0x36>
 8008c80:	4634      	mov	r4, r6
 8008c82:	6876      	ldr	r6, [r6, #4]
 8008c84:	e7b4      	b.n	8008bf0 <_malloc_r+0x4c>
 8008c86:	4613      	mov	r3, r2
 8008c88:	e7cc      	b.n	8008c24 <_malloc_r+0x80>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	f000 f80e 	bl	8008cb0 <__malloc_unlock>
 8008c94:	e797      	b.n	8008bc6 <_malloc_r+0x22>
 8008c96:	6025      	str	r5, [r4, #0]
 8008c98:	e7dc      	b.n	8008c54 <_malloc_r+0xb0>
 8008c9a:	605b      	str	r3, [r3, #4]
 8008c9c:	deff      	udf	#255	; 0xff
 8008c9e:	bf00      	nop
 8008ca0:	200015d4 	.word	0x200015d4

08008ca4 <__malloc_lock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	; (8008cac <__malloc_lock+0x8>)
 8008ca6:	f7ff bf05 	b.w	8008ab4 <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	200015d0 	.word	0x200015d0

08008cb0 <__malloc_unlock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__malloc_unlock+0x8>)
 8008cb2:	f7ff bf00 	b.w	8008ab6 <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200015d0 	.word	0x200015d0

08008cbc <__ssputs_r>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	461f      	mov	r7, r3
 8008cc2:	688e      	ldr	r6, [r1, #8]
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	42be      	cmp	r6, r7
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4690      	mov	r8, r2
 8008ccc:	680b      	ldr	r3, [r1, #0]
 8008cce:	d82c      	bhi.n	8008d2a <__ssputs_r+0x6e>
 8008cd0:	898a      	ldrh	r2, [r1, #12]
 8008cd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cd6:	d026      	beq.n	8008d26 <__ssputs_r+0x6a>
 8008cd8:	6965      	ldr	r5, [r4, #20]
 8008cda:	6909      	ldr	r1, [r1, #16]
 8008cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ce0:	eba3 0901 	sub.w	r9, r3, r1
 8008ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ce8:	1c7b      	adds	r3, r7, #1
 8008cea:	444b      	add	r3, r9
 8008cec:	106d      	asrs	r5, r5, #1
 8008cee:	429d      	cmp	r5, r3
 8008cf0:	bf38      	it	cc
 8008cf2:	461d      	movcc	r5, r3
 8008cf4:	0553      	lsls	r3, r2, #21
 8008cf6:	d527      	bpl.n	8008d48 <__ssputs_r+0x8c>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7ff ff53 	bl	8008ba4 <_malloc_r>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	b360      	cbz	r0, 8008d5c <__ssputs_r+0xa0>
 8008d02:	464a      	mov	r2, r9
 8008d04:	6921      	ldr	r1, [r4, #16]
 8008d06:	f7ff fed7 	bl	8008ab8 <memcpy>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	6126      	str	r6, [r4, #16]
 8008d18:	444e      	add	r6, r9
 8008d1a:	6026      	str	r6, [r4, #0]
 8008d1c:	463e      	mov	r6, r7
 8008d1e:	6165      	str	r5, [r4, #20]
 8008d20:	eba5 0509 	sub.w	r5, r5, r9
 8008d24:	60a5      	str	r5, [r4, #8]
 8008d26:	42be      	cmp	r6, r7
 8008d28:	d900      	bls.n	8008d2c <__ssputs_r+0x70>
 8008d2a:	463e      	mov	r6, r7
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4641      	mov	r1, r8
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	f000 faaf 	bl	8009294 <memmove>
 8008d36:	2000      	movs	r0, #0
 8008d38:	68a3      	ldr	r3, [r4, #8]
 8008d3a:	1b9b      	subs	r3, r3, r6
 8008d3c:	60a3      	str	r3, [r4, #8]
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	4433      	add	r3, r6
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d48:	462a      	mov	r2, r5
 8008d4a:	f000 fadb 	bl	8009304 <_realloc_r>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d1e0      	bne.n	8008d16 <__ssputs_r+0x5a>
 8008d54:	4650      	mov	r0, sl
 8008d56:	6921      	ldr	r1, [r4, #16]
 8008d58:	f7ff febc 	bl	8008ad4 <_free_r>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	f8ca 3000 	str.w	r3, [sl]
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	e7e9      	b.n	8008d44 <__ssputs_r+0x88>

08008d70 <_svfiprintf_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4698      	mov	r8, r3
 8008d76:	898b      	ldrh	r3, [r1, #12]
 8008d78:	4607      	mov	r7, r0
 8008d7a:	061b      	lsls	r3, r3, #24
 8008d7c:	460d      	mov	r5, r1
 8008d7e:	4614      	mov	r4, r2
 8008d80:	b09d      	sub	sp, #116	; 0x74
 8008d82:	d50e      	bpl.n	8008da2 <_svfiprintf_r+0x32>
 8008d84:	690b      	ldr	r3, [r1, #16]
 8008d86:	b963      	cbnz	r3, 8008da2 <_svfiprintf_r+0x32>
 8008d88:	2140      	movs	r1, #64	; 0x40
 8008d8a:	f7ff ff0b 	bl	8008ba4 <_malloc_r>
 8008d8e:	6028      	str	r0, [r5, #0]
 8008d90:	6128      	str	r0, [r5, #16]
 8008d92:	b920      	cbnz	r0, 8008d9e <_svfiprintf_r+0x2e>
 8008d94:	230c      	movs	r3, #12
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e0d0      	b.n	8008f40 <_svfiprintf_r+0x1d0>
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	616b      	str	r3, [r5, #20]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9309      	str	r3, [sp, #36]	; 0x24
 8008da6:	2320      	movs	r3, #32
 8008da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dac:	2330      	movs	r3, #48	; 0x30
 8008dae:	f04f 0901 	mov.w	r9, #1
 8008db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008f58 <_svfiprintf_r+0x1e8>
 8008dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	469a      	mov	sl, r3
 8008dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc6:	b10a      	cbz	r2, 8008dcc <_svfiprintf_r+0x5c>
 8008dc8:	2a25      	cmp	r2, #37	; 0x25
 8008dca:	d1f9      	bne.n	8008dc0 <_svfiprintf_r+0x50>
 8008dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd0:	d00b      	beq.n	8008dea <_svfiprintf_r+0x7a>
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff ff6f 	bl	8008cbc <__ssputs_r>
 8008dde:	3001      	adds	r0, #1
 8008de0:	f000 80a9 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008de6:	445a      	add	r2, fp
 8008de8:	9209      	str	r2, [sp, #36]	; 0x24
 8008dea:	f89a 3000 	ldrb.w	r3, [sl]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80a1 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dfe:	f10a 0a01 	add.w	sl, sl, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	9307      	str	r3, [sp, #28]
 8008e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e0c:	4654      	mov	r4, sl
 8008e0e:	2205      	movs	r2, #5
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	4850      	ldr	r0, [pc, #320]	; (8008f58 <_svfiprintf_r+0x1e8>)
 8008e16:	f000 fa67 	bl	80092e8 <memchr>
 8008e1a:	9a04      	ldr	r2, [sp, #16]
 8008e1c:	b9d8      	cbnz	r0, 8008e56 <_svfiprintf_r+0xe6>
 8008e1e:	06d0      	lsls	r0, r2, #27
 8008e20:	bf44      	itt	mi
 8008e22:	2320      	movmi	r3, #32
 8008e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e28:	0711      	lsls	r1, r2, #28
 8008e2a:	bf44      	itt	mi
 8008e2c:	232b      	movmi	r3, #43	; 0x2b
 8008e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e32:	f89a 3000 	ldrb.w	r3, [sl]
 8008e36:	2b2a      	cmp	r3, #42	; 0x2a
 8008e38:	d015      	beq.n	8008e66 <_svfiprintf_r+0xf6>
 8008e3a:	4654      	mov	r4, sl
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	4621      	mov	r1, r4
 8008e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e4a:	3b30      	subs	r3, #48	; 0x30
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d94d      	bls.n	8008eec <_svfiprintf_r+0x17c>
 8008e50:	b1b0      	cbz	r0, 8008e80 <_svfiprintf_r+0x110>
 8008e52:	9207      	str	r2, [sp, #28]
 8008e54:	e014      	b.n	8008e80 <_svfiprintf_r+0x110>
 8008e56:	eba0 0308 	sub.w	r3, r0, r8
 8008e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	46a2      	mov	sl, r4
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	e7d2      	b.n	8008e0c <_svfiprintf_r+0x9c>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	1d19      	adds	r1, r3, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	9103      	str	r1, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfbb      	ittet	lt
 8008e72:	425b      	neglt	r3, r3
 8008e74:	f042 0202 	orrlt.w	r2, r2, #2
 8008e78:	9307      	strge	r3, [sp, #28]
 8008e7a:	9307      	strlt	r3, [sp, #28]
 8008e7c:	bfb8      	it	lt
 8008e7e:	9204      	strlt	r2, [sp, #16]
 8008e80:	7823      	ldrb	r3, [r4, #0]
 8008e82:	2b2e      	cmp	r3, #46	; 0x2e
 8008e84:	d10c      	bne.n	8008ea0 <_svfiprintf_r+0x130>
 8008e86:	7863      	ldrb	r3, [r4, #1]
 8008e88:	2b2a      	cmp	r3, #42	; 0x2a
 8008e8a:	d134      	bne.n	8008ef6 <_svfiprintf_r+0x186>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	3402      	adds	r4, #2
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	9203      	str	r2, [sp, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfb8      	it	lt
 8008e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008f5c <_svfiprintf_r+0x1ec>
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	7821      	ldrb	r1, [r4, #0]
 8008eaa:	f000 fa1d 	bl	80092e8 <memchr>
 8008eae:	b138      	cbz	r0, 8008ec0 <_svfiprintf_r+0x150>
 8008eb0:	2240      	movs	r2, #64	; 0x40
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	eba0 000a 	sub.w	r0, r0, sl
 8008eb8:	4082      	lsls	r2, r0
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	4826      	ldr	r0, [pc, #152]	; (8008f60 <_svfiprintf_r+0x1f0>)
 8008ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ecc:	f000 fa0c 	bl	80092e8 <memchr>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d038      	beq.n	8008f46 <_svfiprintf_r+0x1d6>
 8008ed4:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <_svfiprintf_r+0x1f4>)
 8008ed6:	bb1b      	cbnz	r3, 8008f20 <_svfiprintf_r+0x1b0>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	3307      	adds	r3, #7
 8008edc:	f023 0307 	bic.w	r3, r3, #7
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	4433      	add	r3, r6
 8008ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eea:	e768      	b.n	8008dbe <_svfiprintf_r+0x4e>
 8008eec:	460c      	mov	r4, r1
 8008eee:	2001      	movs	r0, #1
 8008ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef4:	e7a6      	b.n	8008e44 <_svfiprintf_r+0xd4>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f04f 0c0a 	mov.w	ip, #10
 8008efc:	4619      	mov	r1, r3
 8008efe:	3401      	adds	r4, #1
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f08:	3a30      	subs	r2, #48	; 0x30
 8008f0a:	2a09      	cmp	r2, #9
 8008f0c:	d903      	bls.n	8008f16 <_svfiprintf_r+0x1a6>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0c6      	beq.n	8008ea0 <_svfiprintf_r+0x130>
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	e7c4      	b.n	8008ea0 <_svfiprintf_r+0x130>
 8008f16:	4604      	mov	r4, r0
 8008f18:	2301      	movs	r3, #1
 8008f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f1e:	e7f0      	b.n	8008f02 <_svfiprintf_r+0x192>
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4638      	mov	r0, r7
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <_svfiprintf_r+0x1f8>)
 8008f2a:	a904      	add	r1, sp, #16
 8008f2c:	f3af 8000 	nop.w
 8008f30:	1c42      	adds	r2, r0, #1
 8008f32:	4606      	mov	r6, r0
 8008f34:	d1d6      	bne.n	8008ee4 <_svfiprintf_r+0x174>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	065b      	lsls	r3, r3, #25
 8008f3a:	f53f af2d 	bmi.w	8008d98 <_svfiprintf_r+0x28>
 8008f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f40:	b01d      	add	sp, #116	; 0x74
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	ab03      	add	r3, sp, #12
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <_svfiprintf_r+0x1f8>)
 8008f50:	a904      	add	r1, sp, #16
 8008f52:	f000 f87d 	bl	8009050 <_printf_i>
 8008f56:	e7eb      	b.n	8008f30 <_svfiprintf_r+0x1c0>
 8008f58:	080094ba 	.word	0x080094ba
 8008f5c:	080094c0 	.word	0x080094c0
 8008f60:	080094c4 	.word	0x080094c4
 8008f64:	00000000 	.word	0x00000000
 8008f68:	08008cbd 	.word	0x08008cbd

08008f6c <_printf_common>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4616      	mov	r6, r2
 8008f72:	4699      	mov	r9, r3
 8008f74:	688a      	ldr	r2, [r1, #8]
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	bfb8      	it	lt
 8008f7e:	4613      	movlt	r3, r2
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f86:	460c      	mov	r4, r1
 8008f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f8c:	b10a      	cbz	r2, 8008f92 <_printf_common+0x26>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	0699      	lsls	r1, r3, #26
 8008f96:	bf42      	ittt	mi
 8008f98:	6833      	ldrmi	r3, [r6, #0]
 8008f9a:	3302      	addmi	r3, #2
 8008f9c:	6033      	strmi	r3, [r6, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	f015 0506 	ands.w	r5, r5, #6
 8008fa4:	d106      	bne.n	8008fb4 <_printf_common+0x48>
 8008fa6:	f104 0a19 	add.w	sl, r4, #25
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	6832      	ldr	r2, [r6, #0]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc2b      	bgt.n	800900c <_printf_common+0xa0>
 8008fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fb8:	1e13      	subs	r3, r2, #0
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	2301      	movne	r3, #1
 8008fc0:	0692      	lsls	r2, r2, #26
 8008fc2:	d430      	bmi.n	8009026 <_printf_common+0xba>
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fcc:	47c0      	blx	r8
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d023      	beq.n	800901a <_printf_common+0xae>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	f003 0306 	and.w	r3, r3, #6
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	bf14      	ite	ne
 8008fde:	2500      	movne	r5, #0
 8008fe0:	6833      	ldreq	r3, [r6, #0]
 8008fe2:	f04f 0600 	mov.w	r6, #0
 8008fe6:	bf08      	it	eq
 8008fe8:	68e5      	ldreq	r5, [r4, #12]
 8008fea:	f104 041a 	add.w	r4, r4, #26
 8008fee:	bf08      	it	eq
 8008ff0:	1aed      	subeq	r5, r5, r3
 8008ff2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ff6:	bf08      	it	eq
 8008ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bfc4      	itt	gt
 8009000:	1a9b      	subgt	r3, r3, r2
 8009002:	18ed      	addgt	r5, r5, r3
 8009004:	42b5      	cmp	r5, r6
 8009006:	d11a      	bne.n	800903e <_printf_common+0xd2>
 8009008:	2000      	movs	r0, #0
 800900a:	e008      	b.n	800901e <_printf_common+0xb2>
 800900c:	2301      	movs	r3, #1
 800900e:	4652      	mov	r2, sl
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d103      	bne.n	8009022 <_printf_common+0xb6>
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
 800901e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009022:	3501      	adds	r5, #1
 8009024:	e7c1      	b.n	8008faa <_printf_common+0x3e>
 8009026:	2030      	movs	r0, #48	; 0x30
 8009028:	18e1      	adds	r1, r4, r3
 800902a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009034:	4422      	add	r2, r4
 8009036:	3302      	adds	r3, #2
 8009038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800903c:	e7c2      	b.n	8008fc4 <_printf_common+0x58>
 800903e:	2301      	movs	r3, #1
 8009040:	4622      	mov	r2, r4
 8009042:	4649      	mov	r1, r9
 8009044:	4638      	mov	r0, r7
 8009046:	47c0      	blx	r8
 8009048:	3001      	adds	r0, #1
 800904a:	d0e6      	beq.n	800901a <_printf_common+0xae>
 800904c:	3601      	adds	r6, #1
 800904e:	e7d9      	b.n	8009004 <_printf_common+0x98>

08009050 <_printf_i>:
 8009050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	7e0f      	ldrb	r7, [r1, #24]
 8009056:	4691      	mov	r9, r2
 8009058:	2f78      	cmp	r7, #120	; 0x78
 800905a:	4680      	mov	r8, r0
 800905c:	460c      	mov	r4, r1
 800905e:	469a      	mov	sl, r3
 8009060:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009066:	d807      	bhi.n	8009078 <_printf_i+0x28>
 8009068:	2f62      	cmp	r7, #98	; 0x62
 800906a:	d80a      	bhi.n	8009082 <_printf_i+0x32>
 800906c:	2f00      	cmp	r7, #0
 800906e:	f000 80d5 	beq.w	800921c <_printf_i+0x1cc>
 8009072:	2f58      	cmp	r7, #88	; 0x58
 8009074:	f000 80c1 	beq.w	80091fa <_printf_i+0x1aa>
 8009078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009080:	e03a      	b.n	80090f8 <_printf_i+0xa8>
 8009082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009086:	2b15      	cmp	r3, #21
 8009088:	d8f6      	bhi.n	8009078 <_printf_i+0x28>
 800908a:	a101      	add	r1, pc, #4	; (adr r1, 8009090 <_printf_i+0x40>)
 800908c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009090:	080090e9 	.word	0x080090e9
 8009094:	080090fd 	.word	0x080090fd
 8009098:	08009079 	.word	0x08009079
 800909c:	08009079 	.word	0x08009079
 80090a0:	08009079 	.word	0x08009079
 80090a4:	08009079 	.word	0x08009079
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009079 	.word	0x08009079
 80090b0:	08009079 	.word	0x08009079
 80090b4:	08009079 	.word	0x08009079
 80090b8:	08009079 	.word	0x08009079
 80090bc:	08009203 	.word	0x08009203
 80090c0:	08009129 	.word	0x08009129
 80090c4:	080091bd 	.word	0x080091bd
 80090c8:	08009079 	.word	0x08009079
 80090cc:	08009079 	.word	0x08009079
 80090d0:	08009225 	.word	0x08009225
 80090d4:	08009079 	.word	0x08009079
 80090d8:	08009129 	.word	0x08009129
 80090dc:	08009079 	.word	0x08009079
 80090e0:	08009079 	.word	0x08009079
 80090e4:	080091c5 	.word	0x080091c5
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0a0      	b.n	800923e <_printf_i+0x1ee>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	682b      	ldr	r3, [r5, #0]
 8009100:	0607      	lsls	r7, r0, #24
 8009102:	f103 0104 	add.w	r1, r3, #4
 8009106:	6029      	str	r1, [r5, #0]
 8009108:	d501      	bpl.n	800910e <_printf_i+0xbe>
 800910a:	681e      	ldr	r6, [r3, #0]
 800910c:	e003      	b.n	8009116 <_printf_i+0xc6>
 800910e:	0646      	lsls	r6, r0, #25
 8009110:	d5fb      	bpl.n	800910a <_printf_i+0xba>
 8009112:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009116:	2e00      	cmp	r6, #0
 8009118:	da03      	bge.n	8009122 <_printf_i+0xd2>
 800911a:	232d      	movs	r3, #45	; 0x2d
 800911c:	4276      	negs	r6, r6
 800911e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009122:	230a      	movs	r3, #10
 8009124:	4859      	ldr	r0, [pc, #356]	; (800928c <_printf_i+0x23c>)
 8009126:	e012      	b.n	800914e <_printf_i+0xfe>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	6029      	str	r1, [r5, #0]
 8009130:	0605      	lsls	r5, r0, #24
 8009132:	d501      	bpl.n	8009138 <_printf_i+0xe8>
 8009134:	681e      	ldr	r6, [r3, #0]
 8009136:	e002      	b.n	800913e <_printf_i+0xee>
 8009138:	0641      	lsls	r1, r0, #25
 800913a:	d5fb      	bpl.n	8009134 <_printf_i+0xe4>
 800913c:	881e      	ldrh	r6, [r3, #0]
 800913e:	2f6f      	cmp	r7, #111	; 0x6f
 8009140:	bf0c      	ite	eq
 8009142:	2308      	moveq	r3, #8
 8009144:	230a      	movne	r3, #10
 8009146:	4851      	ldr	r0, [pc, #324]	; (800928c <_printf_i+0x23c>)
 8009148:	2100      	movs	r1, #0
 800914a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800914e:	6865      	ldr	r5, [r4, #4]
 8009150:	2d00      	cmp	r5, #0
 8009152:	bfa8      	it	ge
 8009154:	6821      	ldrge	r1, [r4, #0]
 8009156:	60a5      	str	r5, [r4, #8]
 8009158:	bfa4      	itt	ge
 800915a:	f021 0104 	bicge.w	r1, r1, #4
 800915e:	6021      	strge	r1, [r4, #0]
 8009160:	b90e      	cbnz	r6, 8009166 <_printf_i+0x116>
 8009162:	2d00      	cmp	r5, #0
 8009164:	d04b      	beq.n	80091fe <_printf_i+0x1ae>
 8009166:	4615      	mov	r5, r2
 8009168:	fbb6 f1f3 	udiv	r1, r6, r3
 800916c:	fb03 6711 	mls	r7, r3, r1, r6
 8009170:	5dc7      	ldrb	r7, [r0, r7]
 8009172:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009176:	4637      	mov	r7, r6
 8009178:	42bb      	cmp	r3, r7
 800917a:	460e      	mov	r6, r1
 800917c:	d9f4      	bls.n	8009168 <_printf_i+0x118>
 800917e:	2b08      	cmp	r3, #8
 8009180:	d10b      	bne.n	800919a <_printf_i+0x14a>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	07de      	lsls	r6, r3, #31
 8009186:	d508      	bpl.n	800919a <_printf_i+0x14a>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	6861      	ldr	r1, [r4, #4]
 800918c:	4299      	cmp	r1, r3
 800918e:	bfde      	ittt	le
 8009190:	2330      	movle	r3, #48	; 0x30
 8009192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800919a:	1b52      	subs	r2, r2, r5
 800919c:	6122      	str	r2, [r4, #16]
 800919e:	464b      	mov	r3, r9
 80091a0:	4621      	mov	r1, r4
 80091a2:	4640      	mov	r0, r8
 80091a4:	f8cd a000 	str.w	sl, [sp]
 80091a8:	aa03      	add	r2, sp, #12
 80091aa:	f7ff fedf 	bl	8008f6c <_printf_common>
 80091ae:	3001      	adds	r0, #1
 80091b0:	d14a      	bne.n	8009248 <_printf_i+0x1f8>
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295
 80091b6:	b004      	add	sp, #16
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	f043 0320 	orr.w	r3, r3, #32
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	2778      	movs	r7, #120	; 0x78
 80091c6:	4832      	ldr	r0, [pc, #200]	; (8009290 <_printf_i+0x240>)
 80091c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	6829      	ldr	r1, [r5, #0]
 80091d0:	061f      	lsls	r7, r3, #24
 80091d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80091d6:	d402      	bmi.n	80091de <_printf_i+0x18e>
 80091d8:	065f      	lsls	r7, r3, #25
 80091da:	bf48      	it	mi
 80091dc:	b2b6      	uxthmi	r6, r6
 80091de:	07df      	lsls	r7, r3, #31
 80091e0:	bf48      	it	mi
 80091e2:	f043 0320 	orrmi.w	r3, r3, #32
 80091e6:	6029      	str	r1, [r5, #0]
 80091e8:	bf48      	it	mi
 80091ea:	6023      	strmi	r3, [r4, #0]
 80091ec:	b91e      	cbnz	r6, 80091f6 <_printf_i+0x1a6>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f023 0320 	bic.w	r3, r3, #32
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	2310      	movs	r3, #16
 80091f8:	e7a6      	b.n	8009148 <_printf_i+0xf8>
 80091fa:	4824      	ldr	r0, [pc, #144]	; (800928c <_printf_i+0x23c>)
 80091fc:	e7e4      	b.n	80091c8 <_printf_i+0x178>
 80091fe:	4615      	mov	r5, r2
 8009200:	e7bd      	b.n	800917e <_printf_i+0x12e>
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	6826      	ldr	r6, [r4, #0]
 8009206:	1d18      	adds	r0, r3, #4
 8009208:	6961      	ldr	r1, [r4, #20]
 800920a:	6028      	str	r0, [r5, #0]
 800920c:	0635      	lsls	r5, r6, #24
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	d501      	bpl.n	8009216 <_printf_i+0x1c6>
 8009212:	6019      	str	r1, [r3, #0]
 8009214:	e002      	b.n	800921c <_printf_i+0x1cc>
 8009216:	0670      	lsls	r0, r6, #25
 8009218:	d5fb      	bpl.n	8009212 <_printf_i+0x1c2>
 800921a:	8019      	strh	r1, [r3, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	4615      	mov	r5, r2
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	e7bc      	b.n	800919e <_printf_i+0x14e>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	2100      	movs	r1, #0
 8009228:	1d1a      	adds	r2, r3, #4
 800922a:	602a      	str	r2, [r5, #0]
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	4628      	mov	r0, r5
 8009232:	f000 f859 	bl	80092e8 <memchr>
 8009236:	b108      	cbz	r0, 800923c <_printf_i+0x1ec>
 8009238:	1b40      	subs	r0, r0, r5
 800923a:	6060      	str	r0, [r4, #4]
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	2300      	movs	r3, #0
 8009242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009246:	e7aa      	b.n	800919e <_printf_i+0x14e>
 8009248:	462a      	mov	r2, r5
 800924a:	4649      	mov	r1, r9
 800924c:	4640      	mov	r0, r8
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	47d0      	blx	sl
 8009252:	3001      	adds	r0, #1
 8009254:	d0ad      	beq.n	80091b2 <_printf_i+0x162>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	079b      	lsls	r3, r3, #30
 800925a:	d413      	bmi.n	8009284 <_printf_i+0x234>
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	4298      	cmp	r0, r3
 8009262:	bfb8      	it	lt
 8009264:	4618      	movlt	r0, r3
 8009266:	e7a6      	b.n	80091b6 <_printf_i+0x166>
 8009268:	2301      	movs	r3, #1
 800926a:	4632      	mov	r2, r6
 800926c:	4649      	mov	r1, r9
 800926e:	4640      	mov	r0, r8
 8009270:	47d0      	blx	sl
 8009272:	3001      	adds	r0, #1
 8009274:	d09d      	beq.n	80091b2 <_printf_i+0x162>
 8009276:	3501      	adds	r5, #1
 8009278:	68e3      	ldr	r3, [r4, #12]
 800927a:	9903      	ldr	r1, [sp, #12]
 800927c:	1a5b      	subs	r3, r3, r1
 800927e:	42ab      	cmp	r3, r5
 8009280:	dcf2      	bgt.n	8009268 <_printf_i+0x218>
 8009282:	e7eb      	b.n	800925c <_printf_i+0x20c>
 8009284:	2500      	movs	r5, #0
 8009286:	f104 0619 	add.w	r6, r4, #25
 800928a:	e7f5      	b.n	8009278 <_printf_i+0x228>
 800928c:	080094cb 	.word	0x080094cb
 8009290:	080094dc 	.word	0x080094dc

08009294 <memmove>:
 8009294:	4288      	cmp	r0, r1
 8009296:	b510      	push	{r4, lr}
 8009298:	eb01 0402 	add.w	r4, r1, r2
 800929c:	d902      	bls.n	80092a4 <memmove+0x10>
 800929e:	4284      	cmp	r4, r0
 80092a0:	4623      	mov	r3, r4
 80092a2:	d807      	bhi.n	80092b4 <memmove+0x20>
 80092a4:	1e43      	subs	r3, r0, #1
 80092a6:	42a1      	cmp	r1, r4
 80092a8:	d008      	beq.n	80092bc <memmove+0x28>
 80092aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b2:	e7f8      	b.n	80092a6 <memmove+0x12>
 80092b4:	4601      	mov	r1, r0
 80092b6:	4402      	add	r2, r0
 80092b8:	428a      	cmp	r2, r1
 80092ba:	d100      	bne.n	80092be <memmove+0x2a>
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c6:	e7f7      	b.n	80092b8 <memmove+0x24>

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	2300      	movs	r3, #0
 80092cc:	4d05      	ldr	r5, [pc, #20]	; (80092e4 <_sbrk_r+0x1c>)
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f9 f9d2 	bl	800267c <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200015cc 	.word	0x200015cc

080092e8 <memchr>:
 80092e8:	4603      	mov	r3, r0
 80092ea:	b510      	push	{r4, lr}
 80092ec:	b2c9      	uxtb	r1, r1
 80092ee:	4402      	add	r2, r0
 80092f0:	4293      	cmp	r3, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	d101      	bne.n	80092fa <memchr+0x12>
 80092f6:	2000      	movs	r0, #0
 80092f8:	e003      	b.n	8009302 <memchr+0x1a>
 80092fa:	7804      	ldrb	r4, [r0, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	428c      	cmp	r4, r1
 8009300:	d1f6      	bne.n	80092f0 <memchr+0x8>
 8009302:	bd10      	pop	{r4, pc}

08009304 <_realloc_r>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	4680      	mov	r8, r0
 800930a:	4614      	mov	r4, r2
 800930c:	460e      	mov	r6, r1
 800930e:	b921      	cbnz	r1, 800931a <_realloc_r+0x16>
 8009310:	4611      	mov	r1, r2
 8009312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009316:	f7ff bc45 	b.w	8008ba4 <_malloc_r>
 800931a:	b92a      	cbnz	r2, 8009328 <_realloc_r+0x24>
 800931c:	f7ff fbda 	bl	8008ad4 <_free_r>
 8009320:	4625      	mov	r5, r4
 8009322:	4628      	mov	r0, r5
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	f000 f81b 	bl	8009362 <_malloc_usable_size_r>
 800932c:	4284      	cmp	r4, r0
 800932e:	4607      	mov	r7, r0
 8009330:	d802      	bhi.n	8009338 <_realloc_r+0x34>
 8009332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009336:	d812      	bhi.n	800935e <_realloc_r+0x5a>
 8009338:	4621      	mov	r1, r4
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff fc32 	bl	8008ba4 <_malloc_r>
 8009340:	4605      	mov	r5, r0
 8009342:	2800      	cmp	r0, #0
 8009344:	d0ed      	beq.n	8009322 <_realloc_r+0x1e>
 8009346:	42bc      	cmp	r4, r7
 8009348:	4622      	mov	r2, r4
 800934a:	4631      	mov	r1, r6
 800934c:	bf28      	it	cs
 800934e:	463a      	movcs	r2, r7
 8009350:	f7ff fbb2 	bl	8008ab8 <memcpy>
 8009354:	4631      	mov	r1, r6
 8009356:	4640      	mov	r0, r8
 8009358:	f7ff fbbc 	bl	8008ad4 <_free_r>
 800935c:	e7e1      	b.n	8009322 <_realloc_r+0x1e>
 800935e:	4635      	mov	r5, r6
 8009360:	e7df      	b.n	8009322 <_realloc_r+0x1e>

08009362 <_malloc_usable_size_r>:
 8009362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009366:	1f18      	subs	r0, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	bfbc      	itt	lt
 800936c:	580b      	ldrlt	r3, [r1, r0]
 800936e:	18c0      	addlt	r0, r0, r3
 8009370:	4770      	bx	lr
	...

08009374 <round>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800937a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800937e:	2a13      	cmp	r2, #19
 8009380:	460b      	mov	r3, r1
 8009382:	4605      	mov	r5, r0
 8009384:	460c      	mov	r4, r1
 8009386:	dc18      	bgt.n	80093ba <round+0x46>
 8009388:	2a00      	cmp	r2, #0
 800938a:	da09      	bge.n	80093a0 <round+0x2c>
 800938c:	3201      	adds	r2, #1
 800938e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009392:	d103      	bne.n	800939c <round+0x28>
 8009394:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009398:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800939c:	2200      	movs	r2, #0
 800939e:	e029      	b.n	80093f4 <round+0x80>
 80093a0:	4816      	ldr	r0, [pc, #88]	; (80093fc <round+0x88>)
 80093a2:	4110      	asrs	r0, r2
 80093a4:	4001      	ands	r1, r0
 80093a6:	4329      	orrs	r1, r5
 80093a8:	d011      	beq.n	80093ce <round+0x5a>
 80093aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80093ae:	fa41 f202 	asr.w	r2, r1, r2
 80093b2:	4413      	add	r3, r2
 80093b4:	ea23 0300 	bic.w	r3, r3, r0
 80093b8:	e7f0      	b.n	800939c <round+0x28>
 80093ba:	2a33      	cmp	r2, #51	; 0x33
 80093bc:	dd0a      	ble.n	80093d4 <round+0x60>
 80093be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80093c2:	d104      	bne.n	80093ce <round+0x5a>
 80093c4:	4602      	mov	r2, r0
 80093c6:	f7f6 ff41 	bl	800024c <__adddf3>
 80093ca:	4605      	mov	r5, r0
 80093cc:	460c      	mov	r4, r1
 80093ce:	4628      	mov	r0, r5
 80093d0:	4621      	mov	r1, r4
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80093dc:	40f8      	lsrs	r0, r7
 80093de:	4228      	tst	r0, r5
 80093e0:	d0f5      	beq.n	80093ce <round+0x5a>
 80093e2:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 80093e6:	2201      	movs	r2, #1
 80093e8:	408a      	lsls	r2, r1
 80093ea:	1952      	adds	r2, r2, r5
 80093ec:	bf28      	it	cs
 80093ee:	3301      	addcs	r3, #1
 80093f0:	ea22 0200 	bic.w	r2, r2, r0
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	e7e7      	b.n	80093ca <round+0x56>
 80093fa:	bf00      	nop
 80093fc:	000fffff 	.word	0x000fffff

08009400 <_init>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr

0800940c <_fini>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr
