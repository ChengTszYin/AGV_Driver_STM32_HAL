
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e7c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800a070  0800a070  0001a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a0  0800a1a0  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1a0  0800a1a0  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1a0  0800a1a0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800a1a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e0  20000108  0800a2b0  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016e8  0800a2b0  000216e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015639  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387b  00000000  00000000  000357ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f82  00000000  00000000  0003a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cad1  00000000  00000000  0003b382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aaf9  00000000  00000000  00057e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4029  00000000  00000000  0007294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b08  00000000  00000000  00116978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000108 	.word	0x20000108
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a054 	.word	0x0800a054

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000010c 	.word	0x2000010c
 800022c:	0800a054 	.word	0x0800a054

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <reverseBits>:

#ifndef INC_CRC_H_
#define INC_CRC_H_

uint8_t reverseBits(uint8_t value)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	e010      	b.n	8001192 <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b25a      	sxtb	r2, r3
 8001176:	79f9      	ldrb	r1, [r7, #7]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	fa41 f303 	asr.w	r3, r1, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b07      	cmp	r3, #7
 8001196:	ddeb      	ble.n	8001170 <reverseBits+0x14>
	}
	return result;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 80011c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d049      	beq.n	800125c <crc8+0xb8>
 80011c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d045      	beq.n	800125c <crc8+0xb8>
		crc = reverseBits(crc);
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffc1 	bl	800115c <reverseBits>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffba 	bl	800115c <reverseBits>
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	e028      	b.n	8001244 <crc8+0xa0>
			crc ^= data[i];
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4413      	add	r3, r2
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011fe:	4053      	eors	r3, r2
 8001200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	e016      	b.n	8001238 <crc8+0x94>
 800120a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <crc8+0x82>
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4053      	eors	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	e003      	b.n	800122e <crc8+0x8a>
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b07      	cmp	r3, #7
 800123c:	dde5      	ble.n	800120a <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3301      	adds	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3d2      	bcc.n	80011f2 <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 800124c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001250:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001254:	4053      	eors	r3, r2
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125a:	e056      	b.n	800130a <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	e037      	b.n	80012d2 <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 8001262:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <crc8+0xd8>
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff72 	bl	800115c <reverseBits>
 8001278:	4603      	mov	r3, r0
 800127a:	e003      	b.n	8001284 <crc8+0xe0>
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25a      	sxtb	r2, r3
 8001286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128a:	4053      	eors	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e016      	b.n	80012c6 <crc8+0x122>
 8001298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800129c:	2b00      	cmp	r3, #0
 800129e:	da09      	bge.n	80012b4 <crc8+0x110>
 80012a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4053      	eors	r3, r2
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e003      	b.n	80012bc <crc8+0x118>
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	dde5      	ble.n	8001298 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3c3      	bcc.n	8001262 <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80012da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <crc8+0x156>
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff38 	bl	800115c <reverseBits>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012f4:	4053      	eors	r3, r2
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	e005      	b.n	8001306 <crc8+0x162>
 80012fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001302:	4053      	eors	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 800130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800130e:	4618      	mov	r0, r3
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af04      	add	r7, sp, #16
 800131e:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <checkCRC+0x50>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <checkCRC+0x54>)
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	9102      	str	r1, [sp, #8]
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	2231      	movs	r2, #49	; 0x31
 8001334:	2109      	movs	r1, #9
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff34 	bl	80011a4 <crc8>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3309      	adds	r3, #9
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <checkCRC+0x36>
			return 1;
 800134a:	2301      	movs	r3, #1
 800134c:	e007      	b.n	800135e <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3309      	adds	r3, #9
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <checkCRC+0x44>
			return 0;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <checkCRC+0x46>
		}
	else return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	20000001 	.word	0x20000001

08001370 <receiveFromBuffer>:

void receiveFromBuffer()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001374:	2219      	movs	r2, #25
 8001376:	4904      	ldr	r1, [pc, #16]	; (8001388 <receiveFromBuffer+0x18>)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <receiveFromBuffer+0x1c>)
 800137a:	f005 fd74 	bl	8006e66 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <receiveFromBuffer+0x20>)
 8001380:	f000 f836 	bl	80013f0 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000128 	.word	0x20000128
 800138c:	20000620 	.word	0x20000620
 8001390:	2000015c 	.word	0x2000015c

08001394 <send>:

void send(uint8_t crc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if(crc)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d011      	beq.n	80013c8 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <send+0x48>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <send+0x4c>)
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	9102      	str	r1, [sp, #8]
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	2231      	movs	r2, #49	; 0x31
 80013b8:	2109      	movs	r1, #9
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <send+0x50>)
 80013bc:	f7ff fef2 	bl	80011a4 <crc8>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <send+0x50>)
 80013c6:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 80013c8:	230a      	movs	r3, #10
 80013ca:	220a      	movs	r2, #10
 80013cc:	4905      	ldr	r1, [pc, #20]	; (80013e4 <send+0x50>)
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <send+0x54>)
 80013d0:	f005 fcbe 	bl	8006d50 <HAL_UART_Transmit>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000001 	.word	0x20000001
 80013e4:	20000174 	.word	0x20000174
 80013e8:	20000620 	.word	0x20000620
 80013ec:	00000000 	.word	0x00000000

080013f0 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 812f 	bne.w	8001662 <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 8001404:	4b9e      	ldr	r3, [pc, #632]	; (8001680 <Parse_DMA_All+0x290>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 800140c:	4b9c      	ldr	r3, [pc, #624]	; (8001680 <Parse_DMA_All+0x290>)
 800140e:	785a      	ldrb	r2, [r3, #1]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 8001414:	4b9a      	ldr	r3, [pc, #616]	; (8001680 <Parse_DMA_All+0x290>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b98      	ldr	r3, [pc, #608]	; (8001680 <Parse_DMA_All+0x290>)
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 8001428:	8afb      	ldrh	r3, [r7, #22]
 800142a:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 800142c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db14      	blt.n	800145e <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001434:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc4f 	bl	8000cdc <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc9d 	bl	8000d84 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	498d      	ldr	r1, [pc, #564]	; (8001684 <Parse_DMA_All+0x294>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd4c 	bl	8000eec <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	e013      	b.n	8001486 <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800145e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc3a 	bl	8000cdc <__aeabi_i2f>
 8001468:	4603      	mov	r3, r0
 800146a:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc88 	bl	8000d84 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4984      	ldr	r1, [pc, #528]	; (8001688 <Parse_DMA_All+0x298>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd37 	bl	8000eec <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 8001486:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <Parse_DMA_All+0x290>)
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <Parse_DMA_All+0x290>)
 8001490:	795b      	ldrb	r3, [r3, #5]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 800149a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <Parse_DMA_All+0x29c>)
 80014a0:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <Parse_DMA_All+0x29c>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014ac:	dd11      	ble.n	80014d2 <Parse_DMA_All+0xe2>
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <Parse_DMA_All+0x29c>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <Parse_DMA_All+0x29c>)
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <Parse_DMA_All+0x29c>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <Parse_DMA_All+0x29c>)
 80014d0:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 80014d2:	4b6e      	ldr	r3, [pc, #440]	; (800168c <Parse_DMA_All+0x29c>)
 80014d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <Parse_DMA_All+0x290>)
 80014de:	799a      	ldrb	r2, [r3, #6]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <Parse_DMA_All+0x290>)
 80014e6:	79db      	ldrb	r3, [r3, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbf3 	bl	8000cd4 <__aeabi_ui2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4967      	ldr	r1, [pc, #412]	; (8001690 <Parse_DMA_All+0x2a0>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc46 	bl	8000d84 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f804 	bl	8000508 <__aeabi_f2d>
 8001500:	a35d      	add	r3, pc, #372	; (adr r3, 8001678 <Parse_DMA_All+0x288>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f981 	bl	800080c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f008 fc8b 	bl	8009e2c <round>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fafb 	bl	8000b18 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <Parse_DMA_All+0x290>)
 800152c:	7a1a      	ldrb	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <Parse_DMA_All+0x2a4>)
 800153c:	785a      	ldrb	r2, [r3, #1]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 8001542:	4b54      	ldr	r3, [pc, #336]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <Parse_DMA_All+0x2a4>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db14      	blt.n	800158c <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbb8 	bl	8000cdc <__aeabi_i2f>
 800156c:	4603      	mov	r3, r0
 800156e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc06 	bl	8000d84 <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
 800157a:	4942      	ldr	r1, [pc, #264]	; (8001684 <Parse_DMA_All+0x294>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fcb5 	bl	8000eec <__aeabi_fdiv>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	e013      	b.n	80015b4 <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800158c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fba3 	bl	8000cdc <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fbf1 	bl	8000d84 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4938      	ldr	r1, [pc, #224]	; (8001688 <Parse_DMA_All+0x298>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fca0 	bl	8000eec <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <Parse_DMA_All+0x2a4>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <Parse_DMA_All+0x2a4>)
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 80015c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015ce:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80015da:	dd11      	ble.n	8001600 <Parse_DMA_All+0x210>
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <Parse_DMA_All+0x2a8>)
 80015fe:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <Parse_DMA_All+0x2a8>)
 8001602:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <Parse_DMA_All+0x2a4>)
 800160c:	799a      	ldrb	r2, [r3, #6]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <Parse_DMA_All+0x2a4>)
 8001614:	79db      	ldrb	r3, [r3, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb5c 	bl	8000cd4 <__aeabi_ui2f>
 800161c:	4603      	mov	r3, r0
 800161e:	491c      	ldr	r1, [pc, #112]	; (8001690 <Parse_DMA_All+0x2a0>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fbaf 	bl	8000d84 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff6d 	bl	8000508 <__aeabi_f2d>
 800162e:	a312      	add	r3, pc, #72	; (adr r3, 8001678 <Parse_DMA_All+0x288>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f8ea 	bl	800080c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f008 fbf4 	bl	8009e2c <round>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa64 	bl	8000b18 <__aeabi_d2iz>
 8001650:	4603      	mov	r3, r0
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <Parse_DMA_All+0x2a4>)
 800165a:	7a1a      	ldrb	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 8001660:	e005      	b.n	800166e <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	81da      	strh	r2, [r3, #14]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	00000000 	.word	0x00000000
 800167c:	406fe000 	.word	0x406fe000
 8001680:	20000144 	.word	0x20000144
 8001684:	46fffe00 	.word	0x46fffe00
 8001688:	c6fffe00 	.word	0xc6fffe00
 800168c:	20000126 	.word	0x20000126
 8001690:	43b40000 	.word	0x43b40000
 8001694:	20000150 	.word	0x20000150
 8001698:	20000124 	.word	0x20000124

0800169c <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	460b      	mov	r3, r1
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 80016ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80016b6:	dd02      	ble.n	80016be <setVelocity+0x22>
 80016b8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80016bc:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 80016be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80016c6:	da02      	bge.n	80016ce <setVelocity+0x32>
 80016c8:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 80016cc:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 80016ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bfb8      	it	lt
 80016d6:	425b      	neglt	r3, r3
 80016d8:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80016da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da06      	bge.n	80016f0 <setVelocity+0x54>
 80016e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <setVelocity+0x54>
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	425b      	negs	r3, r3
 80016ee:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80016f0:	8bfb      	ldrh	r3, [r7, #30]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	733b      	strb	r3, [r7, #12]
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	737b      	strb	r3, [r7, #13]
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	73bb      	strb	r3, [r7, #14]
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	2300      	movs	r3, #0
 800170e:	743b      	strb	r3, [r7, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	747b      	strb	r3, [r7, #17]
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	74bb      	strb	r3, [r7, #18]
 8001718:	2300      	movs	r3, #0
 800171a:	74fb      	strb	r3, [r7, #19]
 800171c:	2300      	movs	r3, #0
 800171e:	753b      	strb	r3, [r7, #20]
 8001720:	2300      	movs	r3, #0
 8001722:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	e00c      	b.n	8001744 <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4413      	add	r3, r2
 8001732:	7819      	ldrb	r1, [r3, #0]
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <setVelocity+0xc0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4413      	add	r3, r2
 800173a:	460a      	mov	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3301      	adds	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b09      	cmp	r3, #9
 8001748:	ddef      	ble.n	800172a <setVelocity+0x8e>
	}
	send(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fe22 	bl	8001394 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000174 	.word	0x20000174

08001760 <SR04_Init>:

SR04_PulseType pulse;
SR04_PulseType pulse2;

void SR04_Init()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <SR04_Init+0x24>)
 8001766:	f004 fb45 	bl	8005df4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800176a:	2100      	movs	r1, #0
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <SR04_Init+0x24>)
 800176e:	f004 fbf9 	bl	8005f64 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <SR04_Init+0x28>)
 8001774:	f004 fb3e 	bl	8005df4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <SR04_Init+0x28>)
 800177c:	f004 fbf2 	bl	8005f64 <HAL_TIM_IC_Start_IT>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000500 	.word	0x20000500
 8001788:	20000548 	.word	0x20000548

0800178c <SR04_Start>:
void SR04_Start()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2102      	movs	r1, #2
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <SR04_Start+0x44>)
 8001796:	f002 fe4e 	bl	8004436 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <SR04_Start+0x44>)
 80017a0:	f002 fe49 	bl	8004436 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f001 fee5 	bl	8003574 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2102      	movs	r1, #2
 80017ae:	4808      	ldr	r0, [pc, #32]	; (80017d0 <SR04_Start+0x44>)
 80017b0:	f002 fe41 	bl	8004436 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <SR04_Start+0x44>)
 80017ba:	f002 fe3c 	bl	8004436 <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SR04_Start+0x48>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SR04_Start+0x4c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	731a      	strb	r2, [r3, #12]
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010800 	.word	0x40010800
 80017d4:	20000180 	.word	0x20000180
 80017d8:	20000190 	.word	0x20000190

080017dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d138      	bne.n	800185e <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 80017f4:	2100      	movs	r1, #0
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80017f8:	f004 ff22 	bl	8006640 <HAL_TIM_ReadCapturedValue>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001802:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020a 	bic.w	r2, r2, #10
 8001812:	621a      	str	r2, [r3, #32]
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0202 	orr.w	r2, r2, #2
 8001822:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001826:	2200      	movs	r2, #0
 8001828:	731a      	strb	r2, [r3, #12]
 800182a:	e018      	b.n	800185e <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020a 	bic.w	r2, r2, #10
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a12      	ldr	r2, [r2, #32]
 8001846:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8001848:	2100      	movs	r1, #0
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x104>)
 800184c:	f004 fef8 	bl	8006640 <HAL_TIM_ReadCapturedValue>
 8001850:	4603      	mov	r3, r0
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001856:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x108>)
 800185a:	2201      	movs	r2, #1
 800185c:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d138      	bne.n	80018d8 <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 8001868:	7b1b      	ldrb	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01b      	beq.n	80018a6 <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001872:	f004 fee5 	bl	8006640 <HAL_TIM_ReadCapturedValue>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 800187c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 020a 	bic.w	r2, r2, #10
 800188c:	621a      	str	r2, [r3, #32]
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0202 	orr.w	r2, r2, #2
 800189c:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	731a      	strb	r2, [r3, #12]
			pulse2.rising_flag = 1;
		}
	}


}
 80018a4:	e018      	b.n	80018d8 <HAL_TIM_IC_CaptureCallback+0xfc>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020a 	bic.w	r2, r2, #10
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a12      	ldr	r2, [r2, #32]
 80018c0:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_1);
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80018c6:	f004 febb 	bl	8006640 <HAL_TIM_ReadCapturedValue>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018d0:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x110>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	731a      	strb	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000500 	.word	0x20000500
 80018e4:	20000180 	.word	0x20000180
 80018e8:	20000548 	.word	0x20000548
 80018ec:	20000190 	.word	0x20000190

080018f0 <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	885a      	ldrh	r2, [r3, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d908      	bls.n	8001916 <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	885a      	ldrh	r2, [r3, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	809a      	strh	r2, [r3, #4]
 8001914:	e00b      	b.n	800192e <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	885a      	ldrh	r2, [r3, #2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001926:	3310      	adds	r3, #16
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9d2 	bl	8000cdc <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4910      	ldr	r1, [pc, #64]	; (800197c <SR04_Calculate+0x8c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa21 	bl	8000d84 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <SR04_Calculate+0x90>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fa1c 	bl	8000d84 <__aeabi_fmul>
 800194c:	4603      	mov	r3, r0
 800194e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff faca 	bl	8000eec <__aeabi_fdiv>
 8001958:	4603      	mov	r3, r0
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <SR04_Calculate+0x94>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fac5 	bl	8000eec <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <SR04_Calculate+0x94>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fac0 	bl	8000eec <__aeabi_fdiv>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	43aa0000 	.word	0x43aa0000
 8001980:	42c80000 	.word	0x42c80000
 8001984:	447a0000 	.word	0x447a0000

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_DMA_Init+0x88>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <MX_DMA_Init+0x88>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6153      	str	r3, [r2, #20]
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_DMA_Init+0x88>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	200c      	movs	r0, #12
 80019ac:	f001 fedd 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019b0:	200c      	movs	r0, #12
 80019b2:	f001 fef6 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	200d      	movs	r0, #13
 80019bc:	f001 fed5 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019c0:	200d      	movs	r0, #13
 80019c2:	f001 feee 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	200e      	movs	r0, #14
 80019cc:	f001 fecd 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019d0:	200e      	movs	r0, #14
 80019d2:	f001 fee6 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	200f      	movs	r0, #15
 80019dc:	f001 fec5 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019e0:	200f      	movs	r0, #15
 80019e2:	f001 fede 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	2010      	movs	r0, #16
 80019ec:	f001 febd 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019f0:	2010      	movs	r0, #16
 80019f2:	f001 fed6 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	2011      	movs	r0, #17
 80019fc:	f001 feb5 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a00:	2011      	movs	r0, #17
 8001a02:	f001 fece 	bl	80037a2 <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <checksum>:
extern SR04_PulseType pulse2;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t checksum(uint8_t* data, uint8_t len) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]
 8001a28:	e009      	b.n	8001a3e <checksum+0x2a>
       crc += data[i];
 8001a2a:	7bbb      	ldrb	r3, [r7, #14]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4413      	add	r3, r2
 8001a36:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <checksum+0x16>
    }
    return crc;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl* motors)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
 8001a62:	e00b      	b.n	8001a7c <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	441a      	add	r2, r3
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	3318      	adds	r3, #24
 8001a70:	443b      	add	r3, r7
 8001a72:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	75fb      	strb	r3, [r7, #23]
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d9f0      	bls.n	8001a64 <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data,8);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2108      	movs	r1, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffc3 	bl	8001a14 <checksum>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	7dba      	ldrb	r2, [r7, #22]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d117      	bne.n	8001aca <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 8001a9a:	7b7a      	ldrb	r2, [r7, #13]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 8001ab2:	7c3a      	ldrb	r2, [r7, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8001ab8:	7c7b      	ldrb	r3, [r7, #17]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	7cbb      	ldrb	r3, [r7, #18]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8001aca:	2204      	movs	r2, #4
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f007 fa8e 	bl	8008ff0 <memset>
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <d80nk_read>:

void d80nk_read()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae6:	481c      	ldr	r0, [pc, #112]	; (8001b58 <d80nk_read+0x7c>)
 8001ae8:	f002 fc8e 	bl	8004408 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af4:	4818      	ldr	r0, [pc, #96]	; (8001b58 <d80nk_read+0x7c>)
 8001af6:	f002 fc87 	bl	8004408 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b02:	4815      	ldr	r0, [pc, #84]	; (8001b58 <d80nk_read+0x7c>)
 8001b04:	f002 fc80 	bl	8004408 <HAL_GPIO_ReadPin>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <d80nk_read+0x7c>)
 8001b12:	f002 fc79 	bl	8004408 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<4;i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e013      	b.n	8001b48 <d80nk_read+0x6c>
	{
		if(pinStates[i] == GPIO_PIN_SET)
 8001b20:	1d3a      	adds	r2, r7, #4
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <d80nk_read+0x80>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e004      	b.n	8001b42 <d80nk_read+0x66>

		}
		else
		{
			d80nk_[i] = '1';
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <d80nk_read+0x80>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2231      	movs	r2, #49	; 0x31
 8001b40:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	dde8      	ble.n	8001b20 <d80nk_read+0x44>
//			sprintf(message,"Sensor ON\n");
//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	200001a0 	.word	0x200001a0

08001b60 <distance_Calculate>:

void distance_Calculate()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001b64:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <distance_Calculate+0x48>)
 8001b66:	f7ff fec3 	bl	80018f0 <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <distance_Calculate+0x4c>)
 8001b6c:	f7ff fec0 	bl	80018f0 <SR04_Calculate>
	if(pulse.distance > 80.0) pulse.distance = 80.0;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <distance_Calculate+0x48>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <distance_Calculate+0x50>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fac0 	bl	80010fc <__aeabi_fcmpgt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <distance_Calculate+0x28>
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <distance_Calculate+0x48>)
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <distance_Calculate+0x50>)
 8001b86:	609a      	str	r2, [r3, #8]
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <distance_Calculate+0x4c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <distance_Calculate+0x50>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fab4 	bl	80010fc <__aeabi_fcmpgt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <distance_Calculate+0x3c>
}
 8001b9a:	e002      	b.n	8001ba2 <distance_Calculate+0x42>
	if(pulse2.distance > 80.0) pulse2.distance = 80.0;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <distance_Calculate+0x4c>)
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <distance_Calculate+0x50>)
 8001ba0:	609a      	str	r2, [r3, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000180 	.word	0x20000180
 8001bac:	20000190 	.word	0x20000190
 8001bb0:	42a00000 	.word	0x42a00000

08001bb4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <vApplicationGetIdleTaskMemory+0x28>)
 8001bc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000250 	.word	0x20000250
 8001be0:	200002a4 	.word	0x200002a4

08001be4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 4, &Serial_Task_Handler);
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_FREERTOS_Init+0x60>)
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2304      	movs	r3, #4
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	4914      	ldr	r1, [pc, #80]	; (8001c48 <MX_FREERTOS_Init+0x64>)
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_FREERTOS_Init+0x68>)
 8001bfa:	f006 f95f 	bl	8007ebc <xTaskCreate>
  xTaskCreate(Sensor_Task, "Sensor_Task", 128, NULL, 3,&Sensor_Task_Handler);
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_FREERTOS_Init+0x6c>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2303      	movs	r3, #3
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <MX_FREERTOS_Init+0x70>)
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_FREERTOS_Init+0x74>)
 8001c0e:	f006 f955 	bl	8007ebc <xTaskCreate>
  xTaskCreate(IMU_Task, "IMU_Task", 128, NULL, 3, IMU_Task_Handler);
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_FREERTOS_Init+0x78>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2303      	movs	r3, #3
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	490f      	ldr	r1, [pc, #60]	; (8001c60 <MX_FREERTOS_Init+0x7c>)
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <MX_FREERTOS_Init+0x80>)
 8001c24:	f006 f94a 	bl	8007ebc <xTaskCreate>
  xTaskCreate(Feedback_Task, "Feedback_Task", 128, NULL, 3, Feedback_Task_Handler);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_FREERTOS_Init+0x84>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <MX_FREERTOS_Init+0x88>)
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_FREERTOS_Init+0x8c>)
 8001c3a:	f006 f93f 	bl	8007ebc <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000240 	.word	0x20000240
 8001c48:	0800a070 	.word	0x0800a070
 8001c4c:	08001e11 	.word	0x08001e11
 8001c50:	20000244 	.word	0x20000244
 8001c54:	0800a080 	.word	0x0800a080
 8001c58:	08001eb1 	.word	0x08001eb1
 8001c5c:	20000248 	.word	0x20000248
 8001c60:	0800a08c 	.word	0x0800a08c
 8001c64:	08002055 	.word	0x08002055
 8001c68:	2000024c 	.word	0x2000024c
 8001c6c:	0800a098 	.word	0x0800a098
 8001c70:	08001ecd 	.word	0x08001ecd

08001c74 <HAL_TIM_PeriodElapsedCallback>:
//}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d117      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(huart2Received)
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			huart2Received = 0; // Reset the flag
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
			timerCounter = 0; // Reset the timer counter
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
			{
				timerCounter = 1;
			}
		}
	}
}
 8001c9a:	e00b      	b.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
			timerCounter++;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ca4:	6013      	str	r3, [r2, #0]
			if(timerCounter >= 2) // Adjust the value based on your timer period (e.g., 2 for 1 second if the timer period is 0.5 seconds)
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d902      	bls.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>
				timerCounter = 1;
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000590 	.word	0x20000590
 8001cc4:	20000238 	.word	0x20000238
 8001cc8:	2000023c 	.word	0x2000023c

08001ccc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <HAL_UART_RxCpltCallback+0x11c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10e      	bne.n	8001cfa <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_UART_RxCpltCallback+0x120>)
 8001cde:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_UART_RxCpltCallback+0x124>)
 8001ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce4:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 8001ce8:	4942      	ldr	r1, [pc, #264]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001cea:	4840      	ldr	r0, [pc, #256]	; (8001dec <HAL_UART_RxCpltCallback+0x120>)
 8001cec:	f7ff feb2 	bl	8001a54 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	493f      	ldr	r1, [pc, #252]	; (8001df0 <HAL_UART_RxCpltCallback+0x124>)
 8001cf4:	483c      	ldr	r0, [pc, #240]	; (8001de8 <HAL_UART_RxCpltCallback+0x11c>)
 8001cf6:	f005 f8b6 	bl	8006e66 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <HAL_UART_RxCpltCallback+0x12c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d16e      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0x114>
	{
		huart2Received = 1;
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_UART_RxCpltCallback+0x130>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		timerCounter = 0;
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_UART_RxCpltCallback+0x134>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
		short len = strlen(responseBuffer);
 8001d0e:	483d      	ldr	r0, [pc, #244]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d10:	f7fe fa8e 	bl	8000230 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	847b      	strh	r3, [r7, #34]	; 0x22
		short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001d18:	2319      	movs	r3, #25
 8001d1a:	843b      	strh	r3, [r7, #32]
		for(int i=0;i<arraysz;i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e04f      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0xf6>
		{
			if(responseBuffer[i]==motors.LeftID)
 8001d22:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	4413      	add	r3, r2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11e      	bne.n	8001d70 <HAL_UART_RxCpltCallback+0xa4>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d36:	441a      	add	r2, r3
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	6810      	ldr	r0, [r2, #0]
 8001d3e:	6851      	ldr	r1, [r2, #4]
 8001d40:	c303      	stmia	r3!, {r0, r1}
 8001d42:	8912      	ldrh	r2, [r2, #8]
 8001d44:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fae4 	bl	8001318 <checkCRC>
 8001d50:	4603      	mov	r3, r0
 8001d52:	77bb      	strb	r3, [r7, #30]
				if(checking)
 8001d54:	7fbb      	ldrb	r3, [r7, #30]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d030      	beq.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferL, &responseBuffer[i], 10);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d5e:	441a      	add	r2, r3
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_UART_RxCpltCallback+0x13c>)
 8001d62:	6810      	ldr	r0, [r2, #0]
 8001d64:	6851      	ldr	r1, [r2, #4]
 8001d66:	6018      	str	r0, [r3, #0]
 8001d68:	6059      	str	r1, [r3, #4]
 8001d6a:	8912      	ldrh	r2, [r2, #8]
 8001d6c:	811a      	strh	r2, [r3, #8]
 8001d6e:	e025      	b.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				}
			}
			else if(responseBuffer[i]==motors.RightID)
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	4413      	add	r3, r2
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_UART_RxCpltCallback+0x128>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d11d      	bne.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001d84:	441a      	add	r2, r3
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	6810      	ldr	r0, [r2, #0]
 8001d8c:	6851      	ldr	r1, [r2, #4]
 8001d8e:	c303      	stmia	r3!, {r0, r1}
 8001d90:	8912      	ldrh	r2, [r2, #8]
 8001d92:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fabd 	bl	8001318 <checkCRC>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	77fb      	strb	r3, [r7, #31]
				if(checking)
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferH, &responseBuffer[i], 10);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dac:	441a      	add	r2, r3
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_UART_RxCpltCallback+0x140>)
 8001db0:	6810      	ldr	r0, [r2, #0]
 8001db2:	6851      	ldr	r1, [r2, #4]
 8001db4:	6018      	str	r0, [r3, #0]
 8001db6:	6059      	str	r1, [r3, #4]
 8001db8:	8912      	ldrh	r2, [r2, #8]
 8001dba:	811a      	strh	r2, [r3, #8]
		for(int i=0;i<arraysz;i++)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbaa      	blt.n	8001d22 <HAL_UART_RxCpltCallback+0x56>
				}
			}
		}
		memset(responseBuffer, 0, sizeof(responseBuffer));
 8001dcc:	2219      	movs	r2, #25
 8001dce:	2100      	movs	r1, #0
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dd2:	f007 f90d 	bl	8008ff0 <memset>
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001dd6:	2219      	movs	r2, #25
 8001dd8:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_UART_RxCpltCallback+0x138>)
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <HAL_UART_RxCpltCallback+0x12c>)
 8001ddc:	f005 f843 	bl	8006e66 <HAL_UART_Receive_DMA>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200005d8 	.word	0x200005d8
 8001dec:	200001a4 	.word	0x200001a4
 8001df0:	200001ac 	.word	0x200001ac
 8001df4:	200001b4 	.word	0x200001b4
 8001df8:	20000620 	.word	0x20000620
 8001dfc:	20000238 	.word	0x20000238
 8001e00:	2000023c 	.word	0x2000023c
 8001e04:	20000128 	.word	0x20000128
 8001e08:	20000150 	.word	0x20000150
 8001e0c:	20000144 	.word	0x20000144

08001e10 <Serial_Task>:

void Serial_Task(void *argument)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8001e18:	481c      	ldr	r0, [pc, #112]	; (8001e8c <Serial_Task+0x7c>)
 8001e1a:	f003 ffeb 	bl	8005df4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e1e:	2208      	movs	r2, #8
 8001e20:	491b      	ldr	r1, [pc, #108]	; (8001e90 <Serial_Task+0x80>)
 8001e22:	481c      	ldr	r0, [pc, #112]	; (8001e94 <Serial_Task+0x84>)
 8001e24:	f005 f81f 	bl	8006e66 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001e28:	2219      	movs	r2, #25
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <Serial_Task+0x88>)
 8001e2c:	481b      	ldr	r0, [pc, #108]	; (8001e9c <Serial_Task+0x8c>)
 8001e2e:	f005 f81a 	bl	8006e66 <HAL_UART_Receive_DMA>
	while(1)
	{
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <Serial_Task+0x90>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <Serial_Task+0x90>)
 8001e3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7ff fc2b 	bl	800169c <setVelocity>
	  vTaskDelay(L_R_delay);
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <Serial_Task+0x94>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f006 f96c 	bl	8008128 <vTaskDelay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <Serial_Task+0x90>)
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	4618      	mov	r0, r3
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <Serial_Task+0x90>)
 8001e58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7ff fc1c 	bl	800169c <setVelocity>
	  receiveFromBuffer();
 8001e64:	f7ff fa84 	bl	8001370 <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor, timerCounter);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <Serial_Task+0x98>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480f      	ldr	r0, [pc, #60]	; (8001eac <Serial_Task+0x9c>)
 8001e70:	f7ff fabe 	bl	80013f0 <Parse_DMA_All>
//	  uint8_t str[20];
//	  sprintf(str, "connected: %d\n", (int)wheelsensor.LeftVelocity);
//	  HAL_UART_Transmit(&huart3, str, sizeof(str), HAL_MAX_DELAY);
	  HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001e74:	2219      	movs	r2, #25
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <Serial_Task+0x88>)
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <Serial_Task+0x8c>)
 8001e7a:	f004 fff4 	bl	8006e66 <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e7e:	2208      	movs	r2, #8
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <Serial_Task+0x80>)
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <Serial_Task+0x84>)
 8001e84:	f004 ffef 	bl	8006e66 <HAL_UART_Receive_DMA>
	{
 8001e88:	e7d3      	b.n	8001e32 <Serial_Task+0x22>
 8001e8a:	bf00      	nop
 8001e8c:	20000590 	.word	0x20000590
 8001e90:	200001ac 	.word	0x200001ac
 8001e94:	200005d8 	.word	0x200005d8
 8001e98:	20000128 	.word	0x20000128
 8001e9c:	20000620 	.word	0x20000620
 8001ea0:	200001b4 	.word	0x200001b4
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	2000023c 	.word	0x2000023c
 8001eac:	2000015c 	.word	0x2000015c

08001eb0 <Sensor_Task>:
	}
}

void Sensor_Task(void *argument)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	SR04_Init();
 8001eb8:	f7ff fc52 	bl	8001760 <SR04_Init>
	while(1)
	{
		SR04_Start();
 8001ebc:	f7ff fc66 	bl	800178c <SR04_Start>
		d80nk_read();
 8001ec0:	f7ff fe0c 	bl	8001adc <d80nk_read>
		distance_Calculate();
 8001ec4:	f7ff fe4c 	bl	8001b60 <distance_Calculate>
		SR04_Start();
 8001ec8:	e7f8      	b.n	8001ebc <Sensor_Task+0xc>
	...

08001ecc <Feedback_Task>:
	}
}

void Feedback_Task(void *argument)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	; 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 8001ed4:	23c8      	movs	r3, #200	; 0xc8
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		uint8_t sendData[30];
		sendData[0] = 0x00;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	733b      	strb	r3, [r7, #12]
		sendData[1] = (wheelsensor.leftii) & 0xFF;
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <Feedback_Task+0x170>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	737b      	strb	r3, [r7, #13]
		sendData[2] = ((wheelsensor.LeftVelocity)>>8) & 0xFF;
 8001ee2:	4b56      	ldr	r3, [pc, #344]	; (800203c <Feedback_Task+0x170>)
 8001ee4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ee8:	121b      	asrs	r3, r3, #8
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	73bb      	strb	r3, [r7, #14]
		sendData[3] = wheelsensor.LeftVelocity & 0xFF;
 8001ef0:	4b52      	ldr	r3, [pc, #328]	; (800203c <Feedback_Task+0x170>)
 8001ef2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	73fb      	strb	r3, [r7, #15]
		sendData[4] = wheelsensor.reightii & 0xFF;
 8001efa:	4b50      	ldr	r3, [pc, #320]	; (800203c <Feedback_Task+0x170>)
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	743b      	strb	r3, [r7, #16]
		sendData[5] = ((wheelsensor.RightVelocity)>>8) & 0xFF;
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <Feedback_Task+0x170>)
 8001f02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f06:	121b      	asrs	r3, r3, #8
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	747b      	strb	r3, [r7, #17]
		sendData[6] = wheelsensor.RightVelocity & 0xFF;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <Feedback_Task+0x170>)
 8001f10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	74bb      	strb	r3, [r7, #18]
		sendData[7] = (MPU6050.Accel_X_RAW >> 8) & 0xFF;
 8001f18:	4b49      	ldr	r3, [pc, #292]	; (8002040 <Feedback_Task+0x174>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	121b      	asrs	r3, r3, #8
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	74fb      	strb	r3, [r7, #19]
		sendData[8] = MPU6050.Accel_X_RAW & 0XFF;
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <Feedback_Task+0x174>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	753b      	strb	r3, [r7, #20]
		sendData[9] = (MPU6050.Accel_Y_RAW >> 8) & 0XFF;
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <Feedback_Task+0x174>)
 8001f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f36:	121b      	asrs	r3, r3, #8
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	757b      	strb	r3, [r7, #21]
		sendData[10] = MPU6050.Accel_Y_RAW & 0xFF;
 8001f3e:	4b40      	ldr	r3, [pc, #256]	; (8002040 <Feedback_Task+0x174>)
 8001f40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	75bb      	strb	r3, [r7, #22]
		sendData[11] = (MPU6050.Accel_Z_RAW >> 8) & 0xFF;
 8001f48:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <Feedback_Task+0x174>)
 8001f4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f4e:	121b      	asrs	r3, r3, #8
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	75fb      	strb	r3, [r7, #23]
		sendData[12] = MPU6050.Accel_Z_RAW & 0xFF;
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <Feedback_Task+0x174>)
 8001f58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	763b      	strb	r3, [r7, #24]
		sendData[13] = (MPU6050.Gyro_X_RAW >> 8) & 0XFF;
 8001f60:	4b37      	ldr	r3, [pc, #220]	; (8002040 <Feedback_Task+0x174>)
 8001f62:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f66:	121b      	asrs	r3, r3, #8
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	767b      	strb	r3, [r7, #25]
		sendData[14] = MPU6050.Gyro_X_RAW & 0xFF;
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <Feedback_Task+0x174>)
 8001f70:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	76bb      	strb	r3, [r7, #26]
		sendData[15] = (MPU6050.Gyro_Y_RAW >> 8) & 0XFF;
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <Feedback_Task+0x174>)
 8001f7a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f7e:	121b      	asrs	r3, r3, #8
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	76fb      	strb	r3, [r7, #27]
		sendData[16] = MPU6050.Gyro_Y_RAW & 0xFF;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <Feedback_Task+0x174>)
 8001f88:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	773b      	strb	r3, [r7, #28]
		sendData[17] = (MPU6050.Gyro_Z_RAW >> 8) & 0XFF;
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <Feedback_Task+0x174>)
 8001f92:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f96:	121b      	asrs	r3, r3, #8
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	777b      	strb	r3, [r7, #29]
		sendData[18] = MPU6050.Gyro_Z_RAW & 0xFF;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <Feedback_Task+0x174>)
 8001fa0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	77bb      	strb	r3, [r7, #30]
		sendData[19] = (((int)pulse.distance) >> 8) & 0xFF;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <Feedback_Task+0x178>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f8af 	bl	8001110 <__aeabi_f2iz>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	121b      	asrs	r3, r3, #8
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	77fb      	strb	r3, [r7, #31]
		sendData[20] = ((int)pulse.distance) & 0xFF;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <Feedback_Task+0x178>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f8a6 	bl	8001110 <__aeabi_f2iz>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f887 3020 	strb.w	r3, [r7, #32]
		sendData[21] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <Feedback_Task+0x17c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f89d 	bl	8001110 <__aeabi_f2iz>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	121b      	asrs	r3, r3, #8
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		sendData[22] = ((int)pulse2.distance) & 0xFF;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <Feedback_Task+0x17c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f893 	bl	8001110 <__aeabi_f2iz>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		sendData[23] = d80nk_[0] & 0xFF;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <Feedback_Task+0x180>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		sendData[24] = d80nk_[1] & 0xFF;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <Feedback_Task+0x180>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sendData[25] = d80nk_[2] & 0xFF;
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <Feedback_Task+0x180>)
 8002004:	789b      	ldrb	r3, [r3, #2]
 8002006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		sendData[26] = d80nk_[3] & 0xFF;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <Feedback_Task+0x180>)
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		sendData[27] = checksum(sendData, 28);
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	211c      	movs	r1, #28
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fcfb 	bl	8001a14 <checksum>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(&huart1, sendData, 28, HAL_MAX_DELAY);
 8002024:	f107 010c 	add.w	r1, r7, #12
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	221c      	movs	r2, #28
 800202e:	4808      	ldr	r0, [pc, #32]	; (8002050 <Feedback_Task+0x184>)
 8002030:	f004 fe8e 	bl	8006d50 <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8002034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002036:	f006 f877 	bl	8008128 <vTaskDelay>
	{
 800203a:	e74d      	b.n	8001ed8 <Feedback_Task+0xc>
 800203c:	2000015c 	.word	0x2000015c
 8002040:	200001c0 	.word	0x200001c0
 8002044:	20000180 	.word	0x20000180
 8002048:	20000190 	.word	0x20000190
 800204c:	200001a0 	.word	0x200001a0
 8002050:	200005d8 	.word	0x200005d8

08002054 <IMU_Task>:
	}
}

void IMU_Task(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(500);
 800205c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (MPU6050_Init(&hi2c1) == 1)
 8002062:	e010      	b.n	8002086 <IMU_Task+0x32>
	{
	  uint8_t message[30];
	  sprintf(message,"Device not found. Retry...\n");
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <IMU_Task+0x48>)
 800206a:	4618      	mov	r0, r3
 800206c:	f006 ffa0 	bl	8008fb0 <siprintf>
	  HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
 8002070:	f107 010c 	add.w	r1, r7, #12
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	221e      	movs	r2, #30
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <IMU_Task+0x4c>)
 800207c:	f004 fe68 	bl	8006d50 <HAL_UART_Transmit>
	  vTaskDelay(tick_delay);
 8002080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002082:	f006 f851 	bl	8008128 <vTaskDelay>
	while (MPU6050_Init(&hi2c1) == 1)
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <IMU_Task+0x50>)
 8002088:	f000 f93b 	bl	8002302 <MPU6050_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d0e8      	beq.n	8002064 <IMU_Task+0x10>
	};
	while(1)
	{
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002092:	4905      	ldr	r1, [pc, #20]	; (80020a8 <IMU_Task+0x54>)
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <IMU_Task+0x50>)
 8002096:	f000 f98b 	bl	80023b0 <MPU6050_Read_All>
 800209a:	e7fa      	b.n	8002092 <IMU_Task+0x3e>
 800209c:	0800a0a8 	.word	0x0800a0a8
 80020a0:	20000668 	.word	0x20000668
 80020a4:	200004a4 	.word	0x200004a4
 80020a8:	200001c0 	.word	0x200001c0

080020ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a22      	ldr	r2, [pc, #136]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_GPIO_Init+0xa4>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2182      	movs	r1, #130	; 0x82
 800210c:	4811      	ldr	r0, [pc, #68]	; (8002154 <MX_GPIO_Init+0xa8>)
 800210e:	f002 f992 	bl	8004436 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002112:	2382      	movs	r3, #130	; 0x82
 8002114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2302      	movs	r3, #2
 8002120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	480a      	ldr	r0, [pc, #40]	; (8002154 <MX_GPIO_Init+0xa8>)
 800212a:	f001 ffd9 	bl	80040e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800212e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_GPIO_Init+0xac>)
 8002144:	f001 ffcc 	bl	80040e0 <HAL_GPIO_Init>

}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00

0800215c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <MX_I2C1_Init+0x50>)
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <MX_I2C1_Init+0x54>)
 8002164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_I2C1_Init+0x50>)
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <MX_I2C1_Init+0x58>)
 800216a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MX_I2C1_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_I2C1_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_I2C1_Init+0x50>)
 800217a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_I2C1_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_I2C1_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <MX_I2C1_Init+0x50>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_I2C1_Init+0x50>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_I2C1_Init+0x50>)
 800219a:	f002 f965 	bl	8004468 <HAL_I2C_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021a4:	f000 f8a8 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200004a4 	.word	0x200004a4
 80021b0:	40005400 	.word	0x40005400
 80021b4:	00061a80 	.word	0x00061a80

080021b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_I2C_MspInit+0x70>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d123      	bne.n	8002220 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f0:	23c0      	movs	r3, #192	; 0xc0
 80021f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f4:	2312      	movs	r3, #18
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_I2C_MspInit+0x78>)
 8002204:	f001 ff6c 	bl	80040e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_I2C_MspInit+0x74>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_I2C_MspInit+0x74>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_I2C_MspInit+0x74>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40005400 	.word	0x40005400
 800222c:	40021000 	.word	0x40021000
 8002230:	40010c00 	.word	0x40010c00

08002234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002238:	f001 f93a 	bl	80034b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800223c:	f000 f817 	bl	800226e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002240:	f7ff ff34 	bl	80020ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002244:	f7ff fba0 	bl	8001988 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002248:	f000 feb4 	bl	8002fb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800224c:	f000 fedc 	bl	8003008 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002250:	f000 ff04 	bl	800305c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002254:	f7ff ff82 	bl	800215c <MX_I2C1_Init>
  MX_TIM2_Init();
 8002258:	f000 fcea 	bl	8002c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800225c:	f000 fd58 	bl	8002d10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002260:	f000 fdc6 	bl	8002df0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002264:	f7ff fcbe 	bl	8001be4 <MX_FREERTOS_Init>

  /* Start scheduler */
  vTaskStartScheduler();
 8002268:	f005 ff92 	bl	8008190 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800226c:	e7fe      	b.n	800226c <main+0x38>

0800226e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b090      	sub	sp, #64	; 0x40
 8002272:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	2228      	movs	r2, #40	; 0x28
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f006 feb7 	bl	8008ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002290:	2301      	movs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002298:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229e:	2301      	movs	r3, #1
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a2:	2302      	movs	r3, #2
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 f93c 	bl	8005534 <HAL_RCC_OscConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022c2:	f000 f819 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c6:	230f      	movs	r3, #15
 80022c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ca:	2302      	movs	r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fba9 	bl	8005a38 <HAL_RCC_ClockConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022ec:	f000 f804 	bl	80022f8 <Error_Handler>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3740      	adds	r7, #64	; 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002300:	e7fe      	b.n	8002300 <Error_Handler+0x8>

08002302 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af04      	add	r7, sp, #16
 8002308:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800230a:	2364      	movs	r3, #100	; 0x64
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2301      	movs	r3, #1
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	f107 030f 	add.w	r3, r7, #15
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	2275      	movs	r2, #117	; 0x75
 800231c:	21d0      	movs	r1, #208	; 0xd0
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f002 fae0 	bl	80048e4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b68      	cmp	r3, #104	; 0x68
 8002328:	d13d      	bne.n	80023a6 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800232e:	2364      	movs	r3, #100	; 0x64
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	2301      	movs	r3, #1
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	f107 030e 	add.w	r3, r7, #14
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	226b      	movs	r2, #107	; 0x6b
 8002340:	21d0      	movs	r1, #208	; 0xd0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f002 f9d4 	bl	80046f0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002348:	2307      	movs	r3, #7
 800234a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800234c:	2364      	movs	r3, #100	; 0x64
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2301      	movs	r3, #1
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	f107 030e 	add.w	r3, r7, #14
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	2219      	movs	r2, #25
 800235e:	21d0      	movs	r1, #208	; 0xd0
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f002 f9c5 	bl	80046f0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 8002366:	2318      	movs	r3, #24
 8002368:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800236a:	2364      	movs	r3, #100	; 0x64
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030e 	add.w	r3, r7, #14
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	221c      	movs	r2, #28
 800237c:	21d0      	movs	r1, #208	; 0xd0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f002 f9b6 	bl	80046f0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8002384:	2318      	movs	r3, #24
 8002386:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002388:	2364      	movs	r3, #100	; 0x64
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2301      	movs	r3, #1
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	f107 030e 	add.w	r3, r7, #14
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2301      	movs	r3, #1
 8002398:	221b      	movs	r2, #27
 800239a:	21d0      	movs	r1, #208	; 0xd0
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f002 f9a7 	bl	80046f0 <HAL_I2C_Mem_Write>
        return 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <MPU6050_Init+0xa6>
    }
    return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b094      	sub	sp, #80	; 0x50
 80023b6:	af04      	add	r7, sp, #16
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	230e      	movs	r3, #14
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2301      	movs	r3, #1
 80023cc:	223b      	movs	r2, #59	; 0x3b
 80023ce:	21d0      	movs	r1, #208	; 0xd0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f002 fa87 	bl	80048e4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80023d6:	7a3b      	ldrb	r3, [r7, #8]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	b21a      	sxth	r2, r3
 80023dc:	7a7b      	ldrb	r3, [r7, #9]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80023e8:	7abb      	ldrb	r3, [r7, #10]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	7afb      	ldrb	r3, [r7, #11]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80023fa:	7b3b      	ldrb	r3, [r7, #12]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b21a      	sxth	r2, r3
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21a      	sxth	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	b21b      	sxth	r3, r3
 8002416:	4313      	orrs	r3, r2
 8002418:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800241a:	7c3b      	ldrb	r3, [r7, #16]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	7c7b      	ldrb	r3, [r7, #17]
 8002422:	b21b      	sxth	r3, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	b21a      	sxth	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800242c:	7cbb      	ldrb	r3, [r7, #18]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b21a      	sxth	r2, r3
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21a      	sxth	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800243e:	7d3b      	ldrb	r3, [r7, #20]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	7d7b      	ldrb	r3, [r7, #21]
 8002446:	b21b      	sxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b21a      	sxth	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f844 	bl	80004e4 <__aeabi_i2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b95      	ldr	r3, [pc, #596]	; (80026b8 <MPU6050_Read_All+0x308>)
 8002462:	f7fe f9d3 	bl	800080c <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	6839      	ldr	r1, [r7, #0]
 800246c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f834 	bl	80004e4 <__aeabi_i2d>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <MPU6050_Read_All+0x308>)
 8002482:	f7fe f9c3 	bl	800080c <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f824 	bl	80004e4 <__aeabi_i2d>
 800249c:	a380      	add	r3, pc, #512	; (adr r3, 80026a0 <MPU6050_Read_All+0x2f0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f9b3 	bl	800080c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80024b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc11 	bl	8000cdc <__aeabi_i2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	497f      	ldr	r1, [pc, #508]	; (80026bc <MPU6050_Read_All+0x30c>)
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd14 	bl	8000eec <__aeabi_fdiv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	497e      	ldr	r1, [pc, #504]	; (80026c0 <MPU6050_Read_All+0x310>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fb53 	bl	8000b74 <__addsf3>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f801 	bl	80004e4 <__aeabi_i2d>
 80024e2:	a371      	add	r3, pc, #452	; (adr r3, 80026a8 <MPU6050_Read_All+0x2f8>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f990 	bl	800080c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd fff1 	bl	80004e4 <__aeabi_i2d>
 8002502:	a369      	add	r3, pc, #420	; (adr r3, 80026a8 <MPU6050_Read_All+0x2f8>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f980 	bl	800080c <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	6839      	ldr	r1, [r7, #0]
 8002512:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ffe1 	bl	80004e4 <__aeabi_i2d>
 8002522:	a361      	add	r3, pc, #388	; (adr r3, 80026a8 <MPU6050_Read_All+0x2f8>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fe f970 	bl	800080c <__aeabi_ddiv>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002536:	f001 f813 	bl	8003560 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <MPU6050_Read_All+0x314>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffbe 	bl	80004c4 <__aeabi_ui2d>
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <MPU6050_Read_All+0x318>)
 800254e:	f7fe f95d 	bl	800080c <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800255a:	f001 f801 	bl	8003560 <HAL_GetTick>
 800255e:	4603      	mov	r3, r0
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <MPU6050_Read_All+0x314>)
 8002562:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800257c:	4619      	mov	r1, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffaa 	bl	80004e4 <__aeabi_i2d>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f007 f9bd 	bl	8009916 <sqrt>
 800259c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ac:	f7fe fa6c 	bl	8000a88 <__aeabi_dcmpeq>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ff91 	bl	80004e4 <__aeabi_i2d>
 80025c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c6:	f7fe f921 	bl	800080c <__aeabi_ddiv>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f007 f9c5 	bl	8009960 <atan>
 80025d6:	a336      	add	r3, pc, #216	; (adr r3, 80026b0 <MPU6050_Read_All+0x300>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fd ffec 	bl	80005b8 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80025e8:	e005      	b.n	80025f6 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fc:	425b      	negs	r3, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff70 	bl	80004e4 <__aeabi_i2d>
 8002604:	4682      	mov	sl, r0
 8002606:	468b      	mov	fp, r1
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff68 	bl	80004e4 <__aeabi_i2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4650      	mov	r0, sl
 800261a:	4659      	mov	r1, fp
 800261c:	f007 f979 	bl	8009912 <atan2>
 8002620:	a323      	add	r3, pc, #140	; (adr r3, 80026b0 <MPU6050_Read_All+0x300>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd ffc7 	bl	80005b8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <MPU6050_Read_All+0x31c>)
 8002638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800263c:	f7fe fa2e 	bl	8000a9c <__aeabi_dcmplt>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <MPU6050_Read_All+0x2ac>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MPU6050_Read_All+0x320>)
 8002652:	f7fe fa41 	bl	8000ad8 <__aeabi_dcmpgt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d114      	bne.n	8002686 <MPU6050_Read_All+0x2d6>
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MPU6050_Read_All+0x320>)
 8002662:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002666:	f7fe fa37 	bl	8000ad8 <__aeabi_dcmpgt>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d033      	beq.n	80026d8 <MPU6050_Read_All+0x328>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MPU6050_Read_All+0x31c>)
 800267c:	f7fe fa0e 	bl	8000a9c <__aeabi_dcmplt>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d028      	beq.n	80026d8 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 8002686:	4913      	ldr	r1, [pc, #76]	; (80026d4 <MPU6050_Read_All+0x324>)
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002696:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800269a:	e030      	b.n	80026fe <MPU6050_Read_All+0x34e>
 800269c:	f3af 8000 	nop.w
 80026a0:	00000000 	.word	0x00000000
 80026a4:	40cc2900 	.word	0x40cc2900
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40606000 	.word	0x40606000
 80026b0:	1a63c1f8 	.word	0x1a63c1f8
 80026b4:	404ca5dc 	.word	0x404ca5dc
 80026b8:	40d00000 	.word	0x40d00000
 80026bc:	43aa0000 	.word	0x43aa0000
 80026c0:	42121eb8 	.word	0x42121eb8
 80026c4:	200004f8 	.word	0x200004f8
 80026c8:	408f4000 	.word	0x408f4000
 80026cc:	c0568000 	.word	0xc0568000
 80026d0:	40568000 	.word	0x40568000
 80026d4:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026e6:	e9cd 2300 	strd	r2, r3, [sp]
 80026ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ee:	481c      	ldr	r0, [pc, #112]	; (8002760 <MPU6050_Read_All+0x3b0>)
 80026f0:	f000 f83c 	bl	800276c <Kalman_getAngle>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002704:	4690      	mov	r8, r2
 8002706:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <MPU6050_Read_All+0x3b4>)
 8002710:	4640      	mov	r0, r8
 8002712:	4649      	mov	r1, r9
 8002714:	f7fe f9e0 	bl	8000ad8 <__aeabi_dcmpgt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002724:	4614      	mov	r4, r2
 8002726:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800273a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800273e:	e9cd 2300 	strd	r2, r3, [sp]
 8002742:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002746:	4808      	ldr	r0, [pc, #32]	; (8002768 <MPU6050_Read_All+0x3b8>)
 8002748:	f000 f810 	bl	800276c <Kalman_getAngle>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8002756:	bf00      	nop
 8002758:	3740      	adds	r7, #64	; 0x40
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002760:	20000050 	.word	0x20000050
 8002764:	40568000 	.word	0x40568000
 8002768:	20000008 	.word	0x20000008

0800276c <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b092      	sub	sp, #72	; 0x48
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800277e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002782:	f7fd fd61 	bl	8000248 <__aeabi_dsub>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002798:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800279c:	f7fd ff0c 	bl	80005b8 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd fd50 	bl	800024c <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027c6:	f7fd fef7 	bl	80005b8 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027d8:	f7fd fd36 	bl	8000248 <__aeabi_dsub>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80027ea:	f7fd fd2d 	bl	8000248 <__aeabi_dsub>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fd fd26 	bl	800024c <__adddf3>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800280c:	f7fd fed4 	bl	80005b8 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7fd fd18 	bl	800024c <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002832:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002836:	f7fd febf 	bl	80005b8 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4620      	mov	r0, r4
 8002840:	4629      	mov	r1, r5
 8002842:	f7fd fd01 	bl	8000248 <__aeabi_dsub>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800285c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002860:	f7fd feaa 	bl	80005b8 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fcec 	bl	8000248 <__aeabi_dsub>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002886:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800288a:	f7fd fe95 	bl	80005b8 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f7fd fcd9 	bl	800024c <__adddf3>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028b0:	f7fd fccc 	bl	800024c <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028c6:	f7fd ffa1 	bl	800080c <__aeabi_ddiv>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80028d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028dc:	f7fd ff96 	bl	800080c <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f2:	f7fd fca9 	bl	8000248 <__aeabi_dsub>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002908:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800290c:	f7fd fe54 	bl	80005b8 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4620      	mov	r0, r4
 8002916:	4629      	mov	r1, r5
 8002918:	f7fd fc98 	bl	800024c <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800292c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002930:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002934:	f7fd fe40 	bl	80005b8 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4620      	mov	r0, r4
 800293e:	4629      	mov	r1, r5
 8002940:	f7fd fc84 	bl	800024c <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800295e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800296c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002970:	f7fd fe22 	bl	80005b8 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fc64 	bl	8000248 <__aeabi_dsub>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002998:	f7fd fe0e 	bl	80005b8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fd fc50 	bl	8000248 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80029b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c0:	f7fd fdfa 	bl	80005b8 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fd fc3c 	bl	8000248 <__aeabi_dsub>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80029e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029e8:	f7fd fde6 	bl	80005b8 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fc28 	bl	8000248 <__aeabi_dsub>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	3748      	adds	r7, #72	; 0x48
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_MspInit+0x68>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_MspInit+0x68>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6193      	str	r3, [r2, #24]
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_MspInit+0x68>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_MspInit+0x68>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_MspInit+0x68>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_MspInit+0x68>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	f06f 0001 	mvn.w	r0, #1
 8002a52:	f000 fe8a 	bl	800376a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_MspInit+0x6c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_MspInit+0x6c>)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40010000 	.word	0x40010000

08002a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a88:	e7fe      	b.n	8002a88 <NMI_Handler+0x4>

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <MemManage_Handler+0x4>

08002a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab2:	f000 fd43 	bl	800353c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ab6:	f005 fe5d 	bl	8008774 <xTaskGetSchedulerState>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ac0:	f006 f84a 	bl	8008b58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <DMA1_Channel2_IRQHandler+0x10>)
 8002ace:	f001 f89d 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000804 	.word	0x20000804

08002adc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA1_Channel3_IRQHandler+0x10>)
 8002ae2:	f001 f893 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200007c0 	.word	0x200007c0

08002af0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA1_Channel4_IRQHandler+0x10>)
 8002af6:	f001 f889 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200006f4 	.word	0x200006f4

08002b04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <DMA1_Channel5_IRQHandler+0x10>)
 8002b0a:	f001 f87f 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200006b0 	.word	0x200006b0

08002b18 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <DMA1_Channel6_IRQHandler+0x10>)
 8002b1e:	f001 f875 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000738 	.word	0x20000738

08002b2c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <DMA1_Channel7_IRQHandler+0x10>)
 8002b32:	f001 f86b 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000077c 	.word	0x2000077c

08002b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM2_IRQHandler+0x10>)
 8002b46:	f003 fb27 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000500 	.word	0x20000500

08002b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <TIM3_IRQHandler+0x10>)
 8002b5a:	f003 fb1d 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000548 	.word	0x20000548

08002b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM4_IRQHandler+0x10>)
 8002b6e:	f003 fb13 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000590 	.word	0x20000590

08002b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART1_IRQHandler+0x10>)
 8002b82:	f004 f995 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200005d8 	.word	0x200005d8

08002b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <USART2_IRQHandler+0x10>)
 8002b96:	f004 f98b 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000620 	.word	0x20000620

08002ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <USART3_IRQHandler+0x10>)
 8002baa:	f004 f981 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000668 	.word	0x20000668

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f006 fa0a 	bl	8009000 <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000c000 	.word	0x2000c000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	200004fc 	.word	0x200004fc
 8002c20:	200016e8 	.word	0x200016e8

08002c24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c36:	f107 0318 	add.w	r3, r7, #24
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c4e:	463b      	mov	r3, r7
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c64:	2247      	movs	r2, #71	; 0x47
 8002c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c82:	4822      	ldr	r0, [pc, #136]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002c84:	f003 f866 	bl	8005d54 <HAL_TIM_Base_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002c8e:	f7ff fb33 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c98:	f107 0318 	add.w	r3, r7, #24
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481b      	ldr	r0, [pc, #108]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002ca0:	f003 fc06 	bl	80064b0 <HAL_TIM_ConfigClockSource>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002caa:	f7ff fb25 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cae:	4817      	ldr	r0, [pc, #92]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002cb0:	f003 f900 	bl	8005eb4 <HAL_TIM_IC_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002cba:	f7ff fb1d 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cc6:	f107 0310 	add.w	r3, r7, #16
 8002cca:	4619      	mov	r1, r3
 8002ccc:	480f      	ldr	r0, [pc, #60]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002cce:	f003 ff71 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002cd8:	f7ff fb0e 	bl	80022f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4806      	ldr	r0, [pc, #24]	; (8002d0c <MX_TIM2_Init+0xdc>)
 8002cf4:	f003 fb40 	bl	8006378 <HAL_TIM_IC_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002cfe:	f7ff fafb 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000500 	.word	0x20000500

08002d10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0318 	add.w	r3, r7, #24
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d2e:	463b      	mov	r3, r7
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <MX_TIM3_Init+0xdc>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002d40:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d42:	2247      	movs	r2, #71	; 0x47
 8002d44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d60:	4821      	ldr	r0, [pc, #132]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d62:	f002 fff7 	bl	8005d54 <HAL_TIM_Base_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002d6c:	f7ff fac4 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d74:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481a      	ldr	r0, [pc, #104]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d7e:	f003 fb97 	bl	80064b0 <HAL_TIM_ConfigClockSource>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002d88:	f7ff fab6 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002d8c:	4816      	ldr	r0, [pc, #88]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002d8e:	f003 f891 	bl	8005eb4 <HAL_TIM_IC_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002d98:	f7ff faae 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4619      	mov	r1, r3
 8002daa:	480f      	ldr	r0, [pc, #60]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002dac:	f003 ff02 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002db6:	f7ff fa9f 	bl	80022f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002dca:	463b      	mov	r3, r7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_TIM3_Init+0xd8>)
 8002dd2:	f003 fad1 	bl	8006378 <HAL_TIM_IC_ConfigChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002ddc:	f7ff fa8c 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	; 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000548 	.word	0x20000548
 8002dec:	40000400 	.word	0x40000400

08002df0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	463b      	mov	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e14:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e34:	4813      	ldr	r0, [pc, #76]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e36:	f002 ff8d 	bl	8005d54 <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e40:	f7ff fa5a 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e52:	f003 fb2d 	bl	80064b0 <HAL_TIM_ConfigClockSource>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e5c:	f7ff fa4c 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e68:	463b      	mov	r3, r7
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_TIM4_Init+0x94>)
 8002e6e:	f003 fea1 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e78:	f7ff fa3e 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000590 	.word	0x20000590
 8002e88:	40000800 	.word	0x40000800

08002e8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	; 0x30
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d12c      	bne.n	8002f06 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6193      	str	r3, [r2, #24]
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002edc:	2301      	movs	r3, #1
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 0320 	add.w	r3, r7, #32
 8002eec:	4619      	mov	r1, r3
 8002eee:	482e      	ldr	r0, [pc, #184]	; (8002fa8 <HAL_TIM_Base_MspInit+0x11c>)
 8002ef0:	f001 f8f6 	bl	80040e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	201c      	movs	r0, #28
 8002efa:	f000 fc36 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002efe:	201c      	movs	r0, #28
 8002f00:	f000 fc4f 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f04:	e04a      	b.n	8002f9c <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM3)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a28      	ldr	r2, [pc, #160]	; (8002fac <HAL_TIM_Base_MspInit+0x120>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d12c      	bne.n	8002f6a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	61d3      	str	r3, [r2, #28]
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 0320 	add.w	r3, r7, #32
 8002f50:	4619      	mov	r1, r3
 8002f52:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <HAL_TIM_Base_MspInit+0x11c>)
 8002f54:	f001 f8c4 	bl	80040e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2105      	movs	r1, #5
 8002f5c:	201d      	movs	r0, #29
 8002f5e:	f000 fc04 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f62:	201d      	movs	r0, #29
 8002f64:	f000 fc1d 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 8002f68:	e018      	b.n	8002f9c <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <HAL_TIM_Base_MspInit+0x124>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d113      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	61d3      	str	r3, [r2, #28]
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_TIM_Base_MspInit+0x118>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2105      	movs	r1, #5
 8002f90:	201e      	movs	r0, #30
 8002f92:	f000 fbea 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f96:	201e      	movs	r0, #30
 8002f98:	f000 fc03 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 8002f9c:	bf00      	nop
 8002f9e:	3730      	adds	r7, #48	; 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800

08002fb4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <MX_USART1_UART_Init+0x50>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_USART1_UART_Init+0x4c>)
 8002fec:	f003 fe60 	bl	8006cb0 <HAL_UART_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ff6:	f7ff f97f 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200005d8 	.word	0x200005d8
 8003004:	40013800 	.word	0x40013800

08003008 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <MX_USART2_UART_Init+0x50>)
 8003010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 8003014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 800302e:	220c      	movs	r2, #12
 8003030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <MX_USART2_UART_Init+0x4c>)
 8003040:	f003 fe36 	bl	8006cb0 <HAL_UART_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800304a:	f7ff f955 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000620 	.word	0x20000620
 8003058:	40004400 	.word	0x40004400

0800305c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <MX_USART3_UART_Init+0x50>)
 8003064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800306c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003082:	220c      	movs	r2, #12
 8003084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_USART3_UART_Init+0x4c>)
 8003094:	f003 fe0c 	bl	8006cb0 <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800309e:	f7ff f92b 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000668 	.word	0x20000668
 80030ac:	40004800 	.word	0x40004800

080030b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0320 	add.w	r3, r7, #32
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a8b      	ldr	r2, [pc, #556]	; (80032f8 <HAL_UART_MspInit+0x248>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f040 8087 	bne.w	80031e0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d2:	4b8a      	ldr	r3, [pc, #552]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a89      	ldr	r2, [pc, #548]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6193      	str	r3, [r2, #24]
 80030de:	4b87      	ldr	r3, [pc, #540]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	4b84      	ldr	r3, [pc, #528]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	4a83      	ldr	r2, [pc, #524]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6193      	str	r3, [r2, #24]
 80030f6:	4b81      	ldr	r3, [pc, #516]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0320 	add.w	r3, r7, #32
 8003114:	4619      	mov	r1, r3
 8003116:	487a      	ldr	r0, [pc, #488]	; (8003300 <HAL_UART_MspInit+0x250>)
 8003118:	f000 ffe2 	bl	80040e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800311c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	4619      	mov	r1, r3
 8003130:	4873      	ldr	r0, [pc, #460]	; (8003300 <HAL_UART_MspInit+0x250>)
 8003132:	f000 ffd5 	bl	80040e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003138:	4a73      	ldr	r2, [pc, #460]	; (8003308 <HAL_UART_MspInit+0x258>)
 800313a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313c:	4b71      	ldr	r3, [pc, #452]	; (8003304 <HAL_UART_MspInit+0x254>)
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003148:	4b6e      	ldr	r3, [pc, #440]	; (8003304 <HAL_UART_MspInit+0x254>)
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003154:	4b6b      	ldr	r3, [pc, #428]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800315a:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_UART_MspInit+0x254>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003162:	2200      	movs	r2, #0
 8003164:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003166:	4867      	ldr	r0, [pc, #412]	; (8003304 <HAL_UART_MspInit+0x254>)
 8003168:	f000 fb36 	bl	80037d8 <HAL_DMA_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003172:	f7ff f8c1 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a62      	ldr	r2, [pc, #392]	; (8003304 <HAL_UART_MspInit+0x254>)
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
 800317c:	4a61      	ldr	r2, [pc, #388]	; (8003304 <HAL_UART_MspInit+0x254>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_UART_MspInit+0x25c>)
 8003184:	4a62      	ldr	r2, [pc, #392]	; (8003310 <HAL_UART_MspInit+0x260>)
 8003186:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003188:	4b60      	ldr	r3, [pc, #384]	; (800330c <HAL_UART_MspInit+0x25c>)
 800318a:	2210      	movs	r2, #16
 800318c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_UART_MspInit+0x25c>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <HAL_UART_MspInit+0x25c>)
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_UART_MspInit+0x25c>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031a0:	4b5a      	ldr	r3, [pc, #360]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031ac:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031b2:	4856      	ldr	r0, [pc, #344]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031b4:	f000 fb10 	bl	80037d8 <HAL_DMA_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80031be:	f7ff f89b 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
 80031c8:	4a50      	ldr	r2, [pc, #320]	; (800330c <HAL_UART_MspInit+0x25c>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2105      	movs	r1, #5
 80031d2:	2025      	movs	r0, #37	; 0x25
 80031d4:	f000 fac9 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d8:	2025      	movs	r0, #37	; 0x25
 80031da:	f000 fae2 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031de:	e12f      	b.n	8003440 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_UART_MspInit+0x264>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f040 809e 	bne.w	8003328 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ec:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80031f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f6:	61d3      	str	r3, [r2, #28]
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_UART_MspInit+0x24c>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003204:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_UART_MspInit+0x24c>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a3c      	ldr	r2, [pc, #240]	; (80032fc <HAL_UART_MspInit+0x24c>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_UART_MspInit+0x24c>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800321c:	2304      	movs	r3, #4
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	4619      	mov	r1, r3
 800322e:	4834      	ldr	r0, [pc, #208]	; (8003300 <HAL_UART_MspInit+0x250>)
 8003230:	f000 ff56 	bl	80040e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003234:	2308      	movs	r3, #8
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	4619      	mov	r1, r3
 8003246:	482e      	ldr	r0, [pc, #184]	; (8003300 <HAL_UART_MspInit+0x250>)
 8003248:	f000 ff4a 	bl	80040e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_UART_MspInit+0x268>)
 800324e:	4a33      	ldr	r2, [pc, #204]	; (800331c <HAL_UART_MspInit+0x26c>)
 8003250:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_UART_MspInit+0x268>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_UART_MspInit+0x268>)
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800327c:	4826      	ldr	r0, [pc, #152]	; (8003318 <HAL_UART_MspInit+0x268>)
 800327e:	f000 faab 	bl	80037d8 <HAL_DMA_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8003288:	f7ff f836 	bl	80022f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_UART_MspInit+0x268>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_UART_MspInit+0x270>)
 800329a:	4a22      	ldr	r2, [pc, #136]	; (8003324 <HAL_UART_MspInit+0x274>)
 800329c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032a0:	2210      	movs	r2, #16
 80032a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032c8:	4815      	ldr	r0, [pc, #84]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032ca:	f000 fa85 	bl	80037d8 <HAL_DMA_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80032d4:	f7ff f810 	bl	80022f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_UART_MspInit+0x270>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2105      	movs	r1, #5
 80032e8:	2026      	movs	r0, #38	; 0x26
 80032ea:	f000 fa3e 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032ee:	2026      	movs	r0, #38	; 0x26
 80032f0:	f000 fa57 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 80032f4:	e0a4      	b.n	8003440 <HAL_UART_MspInit+0x390>
 80032f6:	bf00      	nop
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40021000 	.word	0x40021000
 8003300:	40010800 	.word	0x40010800
 8003304:	200006b0 	.word	0x200006b0
 8003308:	40020058 	.word	0x40020058
 800330c:	200006f4 	.word	0x200006f4
 8003310:	40020044 	.word	0x40020044
 8003314:	40004400 	.word	0x40004400
 8003318:	20000738 	.word	0x20000738
 800331c:	4002006c 	.word	0x4002006c
 8003320:	2000077c 	.word	0x2000077c
 8003324:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a46      	ldr	r2, [pc, #280]	; (8003448 <HAL_UART_MspInit+0x398>)
 800332e:	4293      	cmp	r3, r2
 8003330:	f040 8086 	bne.w	8003440 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003334:	4b45      	ldr	r3, [pc, #276]	; (800344c <HAL_UART_MspInit+0x39c>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a44      	ldr	r2, [pc, #272]	; (800344c <HAL_UART_MspInit+0x39c>)
 800333a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333e:	61d3      	str	r3, [r2, #28]
 8003340:	4b42      	ldr	r3, [pc, #264]	; (800344c <HAL_UART_MspInit+0x39c>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334c:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_UART_MspInit+0x39c>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	4a3e      	ldr	r2, [pc, #248]	; (800344c <HAL_UART_MspInit+0x39c>)
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	6193      	str	r3, [r2, #24]
 8003358:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_UART_MspInit+0x39c>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003372:	f107 0320 	add.w	r3, r7, #32
 8003376:	4619      	mov	r1, r3
 8003378:	4835      	ldr	r0, [pc, #212]	; (8003450 <HAL_UART_MspInit+0x3a0>)
 800337a:	f000 feb1 	bl	80040e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800337e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338c:	f107 0320 	add.w	r3, r7, #32
 8003390:	4619      	mov	r1, r3
 8003392:	482f      	ldr	r0, [pc, #188]	; (8003450 <HAL_UART_MspInit+0x3a0>)
 8003394:	f000 fea4 	bl	80040e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003398:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 800339a:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <HAL_UART_MspInit+0x3a8>)
 800339c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80033bc:	4b25      	ldr	r3, [pc, #148]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80033c8:	4822      	ldr	r0, [pc, #136]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033ca:	f000 fa05 	bl	80037d8 <HAL_DMA_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80033d4:	f7fe ff90 	bl	80022f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_UART_MspInit+0x3a4>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_UART_MspInit+0x3ac>)
 80033e6:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_UART_MspInit+0x3b0>)
 80033e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_UART_MspInit+0x3ac>)
 80033ec:	2210      	movs	r2, #16
 80033ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <HAL_UART_MspInit+0x3ac>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_UART_MspInit+0x3ac>)
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033fc:	4b17      	ldr	r3, [pc, #92]	; (800345c <HAL_UART_MspInit+0x3ac>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_UART_MspInit+0x3ac>)
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_UART_MspInit+0x3ac>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_UART_MspInit+0x3ac>)
 8003410:	2200      	movs	r2, #0
 8003412:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003414:	4811      	ldr	r0, [pc, #68]	; (800345c <HAL_UART_MspInit+0x3ac>)
 8003416:	f000 f9df 	bl	80037d8 <HAL_DMA_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8003420:	f7fe ff6a 	bl	80022f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0d      	ldr	r2, [pc, #52]	; (800345c <HAL_UART_MspInit+0x3ac>)
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
 800342a:	4a0c      	ldr	r2, [pc, #48]	; (800345c <HAL_UART_MspInit+0x3ac>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003430:	2200      	movs	r2, #0
 8003432:	2105      	movs	r1, #5
 8003434:	2027      	movs	r0, #39	; 0x27
 8003436:	f000 f998 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800343a:	2027      	movs	r0, #39	; 0x27
 800343c:	f000 f9b1 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 8003440:	bf00      	nop
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40004800 	.word	0x40004800
 800344c:	40021000 	.word	0x40021000
 8003450:	40010c00 	.word	0x40010c00
 8003454:	200007c0 	.word	0x200007c0
 8003458:	40020030 	.word	0x40020030
 800345c:	20000804 	.word	0x20000804
 8003460:	4002001c 	.word	0x4002001c

08003464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003464:	f7ff fbde 	bl	8002c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003468:	480b      	ldr	r0, [pc, #44]	; (8003498 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800346a:	490c      	ldr	r1, [pc, #48]	; (800349c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003470:	e002      	b.n	8003478 <LoopCopyDataInit>

08003472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003476:	3304      	adds	r3, #4

08003478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800347c:	d3f9      	bcc.n	8003472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003480:	4c09      	ldr	r4, [pc, #36]	; (80034a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003484:	e001      	b.n	800348a <LoopFillZerobss>

08003486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003488:	3204      	adds	r2, #4

0800348a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800348c:	d3fb      	bcc.n	8003486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800348e:	f005 fdbd 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003492:	f7fe fecf 	bl	8002234 <main>
  bx lr
 8003496:	4770      	bx	lr
  ldr r0, =_sdata
 8003498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800349c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80034a0:	0800a1a8 	.word	0x0800a1a8
  ldr r2, =_sbss
 80034a4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80034a8:	200016e8 	.word	0x200016e8

080034ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034ac:	e7fe      	b.n	80034ac <ADC1_2_IRQHandler>
	...

080034b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_Init+0x28>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_Init+0x28>)
 80034ba:	f043 0310 	orr.w	r3, r3, #16
 80034be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c0:	2003      	movs	r0, #3
 80034c2:	f000 f947 	bl	8003754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034c6:	200f      	movs	r0, #15
 80034c8:	f000 f808 	bl	80034dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034cc:	f7ff faa2 	bl	8002a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000

080034dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_InitTick+0x54>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_InitTick+0x58>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f95f 	bl	80037be <HAL_SYSTICK_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00e      	b.n	8003528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d80a      	bhi.n	8003526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003510:	2200      	movs	r2, #0
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f000 f927 	bl	800376a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800351c:	4a06      	ldr	r2, [pc, #24]	; (8003538 <HAL_InitTick+0x5c>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000098 	.word	0x20000098
 8003534:	200000a0 	.word	0x200000a0
 8003538:	2000009c 	.word	0x2000009c

0800353c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_IncTick+0x1c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_IncTick+0x20>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4413      	add	r3, r2
 800354c:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_IncTick+0x20>)
 800354e:	6013      	str	r3, [r2, #0]
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	200000a0 	.word	0x200000a0
 800355c:	20000848 	.word	0x20000848

08003560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return uwTick;
 8003564:	4b02      	ldr	r3, [pc, #8]	; (8003570 <HAL_GetTick+0x10>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	20000848 	.word	0x20000848

08003574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7ff fff0 	bl	8003560 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d005      	beq.n	800359a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_Delay+0x44>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800359a:	bf00      	nop
 800359c:	f7ff ffe0 	bl	8003560 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d8f7      	bhi.n	800359c <HAL_Delay+0x28>
  {
  }
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200000a0 	.word	0x200000a0

080035bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ee:	4a04      	ldr	r2, [pc, #16]	; (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	60d3      	str	r3, [r2, #12]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <__NVIC_GetPriorityGrouping+0x18>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0307 	and.w	r3, r3, #7
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	db0b      	blt.n	800364a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4906      	ldr	r1, [pc, #24]	; (8003654 <__NVIC_EnableIRQ+0x34>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2001      	movs	r0, #1
 8003642:	fa00 f202 	lsl.w	r2, r0, r2
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	; (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf28      	it	cs
 80036ca:	2304      	movcs	r3, #4
 80036cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d902      	bls.n	80036dc <NVIC_EncodePriority+0x30>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3b03      	subs	r3, #3
 80036da:	e000      	b.n	80036de <NVIC_EncodePriority+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43d9      	mvns	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	4313      	orrs	r3, r2
         );
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003720:	d301      	bcc.n	8003726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <SysTick_Config+0x40>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372e:	210f      	movs	r1, #15
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f7ff ff90 	bl	8003658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <SysTick_Config+0x40>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <SysTick_Config+0x40>)
 8003740:	2207      	movs	r2, #7
 8003742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000e010 	.word	0xe000e010

08003754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff2d 	bl	80035bc <__NVIC_SetPriorityGrouping>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800377c:	f7ff ff42 	bl	8003604 <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff90 	bl	80036ac <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5f 	bl	8003658 <__NVIC_SetPriority>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff35 	bl	8003620 <__NVIC_EnableIRQ>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa2 	bl	8003710 <SysTick_Config>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e059      	b.n	80038a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_DMA_Init+0xd4>)
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d80f      	bhi.n	800381a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <HAL_DMA_Init+0xd8>)
 8003802:	4413      	add	r3, r2
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_DMA_Init+0xdc>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_DMA_Init+0xe0>)
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
 8003818:	e00e      	b.n	8003838 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_DMA_Init+0xe4>)
 8003822:	4413      	add	r3, r2
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <HAL_DMA_Init+0xdc>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_DMA_Init+0xe8>)
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800384e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	40020407 	.word	0x40020407
 80038b0:	bffdfff8 	.word	0xbffdfff8
 80038b4:	cccccccd 	.word	0xcccccccd
 80038b8:	40020000 	.word	0x40020000
 80038bc:	bffdfbf8 	.word	0xbffdfbf8
 80038c0:	40020400 	.word	0x40020400

080038c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_DMA_Start_IT+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e04b      	b.n	800397c <HAL_DMA_Start_IT+0xb8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d13a      	bne.n	800396e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fbb1 	bl	8004084 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 020e 	orr.w	r2, r2, #14
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e00f      	b.n	800395c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 020a 	orr.w	r2, r2, #10
 800395a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e005      	b.n	800397a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2204      	movs	r2, #4
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e020      	b.n	80039f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 020e 	bic.w	r2, r2, #14
 80039bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d005      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2204      	movs	r2, #4
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e0d6      	b.n	8003bce <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d958      	bls.n	8003afe <HAL_DMA_Abort_IT+0x102>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a62      	ldr	r2, [pc, #392]	; (8003bdc <HAL_DMA_Abort_IT+0x1e0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04f      	beq.n	8003af6 <HAL_DMA_Abort_IT+0xfa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a61      	ldr	r2, [pc, #388]	; (8003be0 <HAL_DMA_Abort_IT+0x1e4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d048      	beq.n	8003af2 <HAL_DMA_Abort_IT+0xf6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <HAL_DMA_Abort_IT+0x1e8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_Abort_IT+0xf0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	; (8003be8 <HAL_DMA_Abort_IT+0x1ec>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d038      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0xea>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_DMA_Abort_IT+0x1f0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d030      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0xe4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <HAL_DMA_Abort_IT+0x1f4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d028      	beq.n	8003ada <HAL_DMA_Abort_IT+0xde>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d020      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0xd8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_DMA_Abort_IT+0x1f8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d019      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0xd4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a55      	ldr	r2, [pc, #340]	; (8003bf8 <HAL_DMA_Abort_IT+0x1fc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d012      	beq.n	8003acc <HAL_DMA_Abort_IT+0xd0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_DMA_Abort_IT+0x200>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00a      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0xca>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_DMA_Abort_IT+0x204>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d102      	bne.n	8003ac0 <HAL_DMA_Abort_IT+0xc4>
 8003aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abe:	e01b      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac4:	e018      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aca:	e015      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003acc:	2310      	movs	r3, #16
 8003ace:	e013      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e011      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad8:	e00e      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ada:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ade:	e00b      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae4:	e008      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aea:	e005      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af0:	e002      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003af2:	2310      	movs	r3, #16
 8003af4:	e000      	b.n	8003af8 <HAL_DMA_Abort_IT+0xfc>
 8003af6:	2301      	movs	r3, #1
 8003af8:	4a42      	ldr	r2, [pc, #264]	; (8003c04 <HAL_DMA_Abort_IT+0x208>)
 8003afa:	6053      	str	r3, [r2, #4]
 8003afc:	e057      	b.n	8003bae <HAL_DMA_Abort_IT+0x1b2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a36      	ldr	r2, [pc, #216]	; (8003bdc <HAL_DMA_Abort_IT+0x1e0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d04f      	beq.n	8003ba8 <HAL_DMA_Abort_IT+0x1ac>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_DMA_Abort_IT+0x1e4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d048      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x1a8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <HAL_DMA_Abort_IT+0x1e8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_DMA_Abort_IT+0x1a2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <HAL_DMA_Abort_IT+0x1ec>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d038      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x19c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_DMA_Abort_IT+0x1f0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d030      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x196>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <HAL_DMA_Abort_IT+0x1f4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d028      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x190>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <HAL_DMA_Abort_IT+0x1dc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d020      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x18a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <HAL_DMA_Abort_IT+0x1f8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d019      	beq.n	8003b82 <HAL_DMA_Abort_IT+0x186>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <HAL_DMA_Abort_IT+0x1fc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d012      	beq.n	8003b7e <HAL_DMA_Abort_IT+0x182>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <HAL_DMA_Abort_IT+0x200>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00a      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x17c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <HAL_DMA_Abort_IT+0x204>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d102      	bne.n	8003b72 <HAL_DMA_Abort_IT+0x176>
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	e01b      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b76:	e018      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b7c:	e015      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	e013      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e011      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b8a:	e00e      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b90:	e00b      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b96:	e008      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b9c:	e005      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba2:	e002      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_Abort_IT+0x1ae>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <HAL_DMA_Abort_IT+0x20c>)
 8003bac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
    } 
  }
  return status;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40020080 	.word	0x40020080
 8003bdc:	40020008 	.word	0x40020008
 8003be0:	4002001c 	.word	0x4002001c
 8003be4:	40020030 	.word	0x40020030
 8003be8:	40020044 	.word	0x40020044
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	4002006c 	.word	0x4002006c
 8003bf4:	40020408 	.word	0x40020408
 8003bf8:	4002041c 	.word	0x4002041c
 8003bfc:	40020430 	.word	0x40020430
 8003c00:	40020444 	.word	0x40020444
 8003c04:	40020400 	.word	0x40020400
 8003c08:	40020000 	.word	0x40020000

08003c0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2204      	movs	r2, #4
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80f1 	beq.w	8003e18 <HAL_DMA_IRQHandler+0x20c>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80eb 	beq.w	8003e18 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0204 	bic.w	r2, r2, #4
 8003c5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d958      	bls.n	8003d1e <HAL_DMA_IRQHandler+0x112>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04f      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x10a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d048      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x106>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5a      	ldr	r2, [pc, #360]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x100>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a59      	ldr	r2, [pc, #356]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d038      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xfa>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d030      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xf4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a56      	ldr	r2, [pc, #344]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d028      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xee>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a4d      	ldr	r2, [pc, #308]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d020      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0xe8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <HAL_DMA_IRQHandler+0x1f4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d019      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xe4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a50      	ldr	r2, [pc, #320]	; (8003e04 <HAL_DMA_IRQHandler+0x1f8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d012      	beq.n	8003cec <HAL_DMA_IRQHandler+0xe0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <HAL_DMA_IRQHandler+0x1fc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xda>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a4d      	ldr	r2, [pc, #308]	; (8003e0c <HAL_DMA_IRQHandler+0x200>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d102      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0xd4>
 8003cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cde:	e01b      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce4:	e018      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cea:	e015      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003cec:	2340      	movs	r3, #64	; 0x40
 8003cee:	e013      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e011      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003cf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cf8:	e00e      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003cfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cfe:	e00b      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d04:	e008      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d0a:	e005      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d10:	e002      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	e000      	b.n	8003d18 <HAL_DMA_IRQHandler+0x10c>
 8003d16:	2304      	movs	r3, #4
 8003d18:	4a3d      	ldr	r2, [pc, #244]	; (8003e10 <HAL_DMA_IRQHandler+0x204>)
 8003d1a:	6053      	str	r3, [r2, #4]
 8003d1c:	e057      	b.n	8003dce <HAL_DMA_IRQHandler+0x1c2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04f      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x1bc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d048      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x1b8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d040      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x1b2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d038      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x1ac>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d030      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x1a6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d028      	beq.n	8003dac <HAL_DMA_IRQHandler+0x1a0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d020      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x19a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_IRQHandler+0x1f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d019      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x196>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_DMA_IRQHandler+0x1f8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d012      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x192>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_IRQHandler+0x1fc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x18c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_DMA_IRQHandler+0x200>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d102      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x186>
 8003d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d90:	e01b      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003d92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d96:	e018      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9c:	e015      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003d9e:	2340      	movs	r3, #64	; 0x40
 8003da0:	e013      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e011      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003da6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003daa:	e00e      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db0:	e00b      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003db2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db6:	e008      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dbc:	e005      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc2:	e002      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_IRQHandler+0x1be>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_DMA_IRQHandler+0x208>)
 8003dcc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8136 	beq.w	8004044 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003de0:	e130      	b.n	8004044 <HAL_DMA_IRQHandler+0x438>
 8003de2:	bf00      	nop
 8003de4:	40020080 	.word	0x40020080
 8003de8:	40020008 	.word	0x40020008
 8003dec:	4002001c 	.word	0x4002001c
 8003df0:	40020030 	.word	0x40020030
 8003df4:	40020044 	.word	0x40020044
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	4002006c 	.word	0x4002006c
 8003e00:	40020408 	.word	0x40020408
 8003e04:	4002041c 	.word	0x4002041c
 8003e08:	40020430 	.word	0x40020430
 8003e0c:	40020444 	.word	0x40020444
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80dd 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x3d8>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80d7 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 020a 	bic.w	r2, r2, #10
 8003e52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b7b      	ldr	r3, [pc, #492]	; (8004050 <HAL_DMA_IRQHandler+0x444>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d958      	bls.n	8003f1a <HAL_DMA_IRQHandler+0x30e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a79      	ldr	r2, [pc, #484]	; (8004054 <HAL_DMA_IRQHandler+0x448>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d04f      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x306>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a78      	ldr	r2, [pc, #480]	; (8004058 <HAL_DMA_IRQHandler+0x44c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d048      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x302>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a76      	ldr	r2, [pc, #472]	; (800405c <HAL_DMA_IRQHandler+0x450>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d040      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x2fc>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a75      	ldr	r2, [pc, #468]	; (8004060 <HAL_DMA_IRQHandler+0x454>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d038      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x2f6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a73      	ldr	r2, [pc, #460]	; (8004064 <HAL_DMA_IRQHandler+0x458>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d030      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2f0>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a72      	ldr	r2, [pc, #456]	; (8004068 <HAL_DMA_IRQHandler+0x45c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d028      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x2ea>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a69      	ldr	r2, [pc, #420]	; (8004050 <HAL_DMA_IRQHandler+0x444>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d020      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2e4>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_DMA_IRQHandler+0x460>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d019      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2e0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6c      	ldr	r2, [pc, #432]	; (8004070 <HAL_DMA_IRQHandler+0x464>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d012      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x2dc>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6b      	ldr	r2, [pc, #428]	; (8004074 <HAL_DMA_IRQHandler+0x468>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00a      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x2d6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a69      	ldr	r2, [pc, #420]	; (8004078 <HAL_DMA_IRQHandler+0x46c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d102      	bne.n	8003edc <HAL_DMA_IRQHandler+0x2d0>
 8003ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eda:	e01b      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee0:	e018      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee6:	e015      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e013      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e011      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003ef6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003efa:	e00b      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f00:	e008      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f06:	e005      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f0c:	e002      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003f0e:	2320      	movs	r3, #32
 8003f10:	e000      	b.n	8003f14 <HAL_DMA_IRQHandler+0x308>
 8003f12:	2302      	movs	r3, #2
 8003f14:	4a59      	ldr	r2, [pc, #356]	; (800407c <HAL_DMA_IRQHandler+0x470>)
 8003f16:	6053      	str	r3, [r2, #4]
 8003f18:	e057      	b.n	8003fca <HAL_DMA_IRQHandler+0x3be>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4d      	ldr	r2, [pc, #308]	; (8004054 <HAL_DMA_IRQHandler+0x448>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04f      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x3b8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	; (8004058 <HAL_DMA_IRQHandler+0x44c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d048      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x3b4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4a      	ldr	r2, [pc, #296]	; (800405c <HAL_DMA_IRQHandler+0x450>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d040      	beq.n	8003fba <HAL_DMA_IRQHandler+0x3ae>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a48      	ldr	r2, [pc, #288]	; (8004060 <HAL_DMA_IRQHandler+0x454>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d038      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x3a8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a47      	ldr	r2, [pc, #284]	; (8004064 <HAL_DMA_IRQHandler+0x458>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d030      	beq.n	8003fae <HAL_DMA_IRQHandler+0x3a2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a45      	ldr	r2, [pc, #276]	; (8004068 <HAL_DMA_IRQHandler+0x45c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d028      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x39c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <HAL_DMA_IRQHandler+0x444>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d020      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x396>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a41      	ldr	r2, [pc, #260]	; (800406c <HAL_DMA_IRQHandler+0x460>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d019      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x392>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a40      	ldr	r2, [pc, #256]	; (8004070 <HAL_DMA_IRQHandler+0x464>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d012      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x38e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3e      	ldr	r2, [pc, #248]	; (8004074 <HAL_DMA_IRQHandler+0x468>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00a      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x388>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3d      	ldr	r2, [pc, #244]	; (8004078 <HAL_DMA_IRQHandler+0x46c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x382>
 8003f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f8c:	e01b      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f92:	e018      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f98:	e015      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	e013      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e011      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa6:	e00e      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fac:	e00b      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fb2:	e008      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fb8:	e005      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fbe:	e002      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e000      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x3ba>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	4a2e      	ldr	r2, [pc, #184]	; (8004080 <HAL_DMA_IRQHandler+0x474>)
 8003fc8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d034      	beq.n	8004044 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fe2:	e02f      	b.n	8004044 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	2208      	movs	r2, #8
 8003fea:	409a      	lsls	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d028      	beq.n	8004046 <HAL_DMA_IRQHandler+0x43a>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d023      	beq.n	8004046 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 020e 	bic.w	r2, r2, #14
 800400c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f202 	lsl.w	r2, r1, r2
 800401c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
    }
  }
  return;
 8004044:	bf00      	nop
 8004046:	bf00      	nop
}
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40020080 	.word	0x40020080
 8004054:	40020008 	.word	0x40020008
 8004058:	4002001c 	.word	0x4002001c
 800405c:	40020030 	.word	0x40020030
 8004060:	40020044 	.word	0x40020044
 8004064:	40020058 	.word	0x40020058
 8004068:	4002006c 	.word	0x4002006c
 800406c:	40020408 	.word	0x40020408
 8004070:	4002041c 	.word	0x4002041c
 8004074:	40020430 	.word	0x40020430
 8004078:	40020444 	.word	0x40020444
 800407c:	40020400 	.word	0x40020400
 8004080:	40020000 	.word	0x40020000

08004084 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d108      	bne.n	80040c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040c2:	e007      	b.n	80040d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b08b      	sub	sp, #44	; 0x2c
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	e179      	b.n	80043e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040f4:	2201      	movs	r2, #1
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8168 	bne.w	80043e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a96      	ldr	r2, [pc, #600]	; (8004370 <HAL_GPIO_Init+0x290>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d05e      	beq.n	80041da <HAL_GPIO_Init+0xfa>
 800411c:	4a94      	ldr	r2, [pc, #592]	; (8004370 <HAL_GPIO_Init+0x290>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d875      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 8004122:	4a94      	ldr	r2, [pc, #592]	; (8004374 <HAL_GPIO_Init+0x294>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d058      	beq.n	80041da <HAL_GPIO_Init+0xfa>
 8004128:	4a92      	ldr	r2, [pc, #584]	; (8004374 <HAL_GPIO_Init+0x294>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d86f      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 800412e:	4a92      	ldr	r2, [pc, #584]	; (8004378 <HAL_GPIO_Init+0x298>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d052      	beq.n	80041da <HAL_GPIO_Init+0xfa>
 8004134:	4a90      	ldr	r2, [pc, #576]	; (8004378 <HAL_GPIO_Init+0x298>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d869      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 800413a:	4a90      	ldr	r2, [pc, #576]	; (800437c <HAL_GPIO_Init+0x29c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04c      	beq.n	80041da <HAL_GPIO_Init+0xfa>
 8004140:	4a8e      	ldr	r2, [pc, #568]	; (800437c <HAL_GPIO_Init+0x29c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d863      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 8004146:	4a8e      	ldr	r2, [pc, #568]	; (8004380 <HAL_GPIO_Init+0x2a0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d046      	beq.n	80041da <HAL_GPIO_Init+0xfa>
 800414c:	4a8c      	ldr	r2, [pc, #560]	; (8004380 <HAL_GPIO_Init+0x2a0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d85d      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 8004152:	2b12      	cmp	r3, #18
 8004154:	d82a      	bhi.n	80041ac <HAL_GPIO_Init+0xcc>
 8004156:	2b12      	cmp	r3, #18
 8004158:	d859      	bhi.n	800420e <HAL_GPIO_Init+0x12e>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_GPIO_Init+0x80>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	080041db 	.word	0x080041db
 8004164:	080041b5 	.word	0x080041b5
 8004168:	080041c7 	.word	0x080041c7
 800416c:	08004209 	.word	0x08004209
 8004170:	0800420f 	.word	0x0800420f
 8004174:	0800420f 	.word	0x0800420f
 8004178:	0800420f 	.word	0x0800420f
 800417c:	0800420f 	.word	0x0800420f
 8004180:	0800420f 	.word	0x0800420f
 8004184:	0800420f 	.word	0x0800420f
 8004188:	0800420f 	.word	0x0800420f
 800418c:	0800420f 	.word	0x0800420f
 8004190:	0800420f 	.word	0x0800420f
 8004194:	0800420f 	.word	0x0800420f
 8004198:	0800420f 	.word	0x0800420f
 800419c:	0800420f 	.word	0x0800420f
 80041a0:	0800420f 	.word	0x0800420f
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	4a75      	ldr	r2, [pc, #468]	; (8004384 <HAL_GPIO_Init+0x2a4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041b2:	e02c      	b.n	800420e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	623b      	str	r3, [r7, #32]
          break;
 80041ba:	e029      	b.n	8004210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	623b      	str	r3, [r7, #32]
          break;
 80041c4:	e024      	b.n	8004210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	3308      	adds	r3, #8
 80041cc:	623b      	str	r3, [r7, #32]
          break;
 80041ce:	e01f      	b.n	8004210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	330c      	adds	r3, #12
 80041d6:	623b      	str	r3, [r7, #32]
          break;
 80041d8:	e01a      	b.n	8004210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041e2:	2304      	movs	r3, #4
 80041e4:	623b      	str	r3, [r7, #32]
          break;
 80041e6:	e013      	b.n	8004210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041f0:	2308      	movs	r3, #8
 80041f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	611a      	str	r2, [r3, #16]
          break;
 80041fa:	e009      	b.n	8004210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041fc:	2308      	movs	r3, #8
 80041fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	615a      	str	r2, [r3, #20]
          break;
 8004206:	e003      	b.n	8004210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004208:	2300      	movs	r3, #0
 800420a:	623b      	str	r3, [r7, #32]
          break;
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x130>
          break;
 800420e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d801      	bhi.n	800421a <HAL_GPIO_Init+0x13a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	e001      	b.n	800421e <HAL_GPIO_Init+0x13e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d802      	bhi.n	800422c <HAL_GPIO_Init+0x14c>
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	e002      	b.n	8004232 <HAL_GPIO_Init+0x152>
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	3b08      	subs	r3, #8
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	210f      	movs	r1, #15
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	431a      	orrs	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80c1 	beq.w	80043e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004260:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_GPIO_Init+0x2a8>)
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	4a48      	ldr	r2, [pc, #288]	; (8004388 <HAL_GPIO_Init+0x2a8>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6193      	str	r3, [r2, #24]
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_GPIO_Init+0x2a8>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004278:	4a44      	ldr	r2, [pc, #272]	; (800438c <HAL_GPIO_Init+0x2ac>)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	3302      	adds	r3, #2
 8004280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	220f      	movs	r2, #15
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_GPIO_Init+0x2b0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01f      	beq.n	80042e4 <HAL_GPIO_Init+0x204>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <HAL_GPIO_Init+0x2b4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d019      	beq.n	80042e0 <HAL_GPIO_Init+0x200>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <HAL_GPIO_Init+0x2b8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_GPIO_Init+0x1fc>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a39      	ldr	r2, [pc, #228]	; (800439c <HAL_GPIO_Init+0x2bc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00d      	beq.n	80042d8 <HAL_GPIO_Init+0x1f8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_GPIO_Init+0x2c0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <HAL_GPIO_Init+0x1f4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <HAL_GPIO_Init+0x2c4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_GPIO_Init+0x1f0>
 80042cc:	2305      	movs	r3, #5
 80042ce:	e00a      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042d0:	2306      	movs	r3, #6
 80042d2:	e008      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042d4:	2304      	movs	r3, #4
 80042d6:	e006      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042d8:	2303      	movs	r3, #3
 80042da:	e004      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042dc:	2302      	movs	r3, #2
 80042de:	e002      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_GPIO_Init+0x206>
 80042e4:	2300      	movs	r3, #0
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	f002 0203 	and.w	r2, r2, #3
 80042ec:	0092      	lsls	r2, r2, #2
 80042ee:	4093      	lsls	r3, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042f6:	4925      	ldr	r1, [pc, #148]	; (800438c <HAL_GPIO_Init+0x2ac>)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4924      	ldr	r1, [pc, #144]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
 800431c:	e006      	b.n	800432c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	43db      	mvns	r3, r3
 8004326:	4920      	ldr	r1, [pc, #128]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004328:	4013      	ands	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	491a      	ldr	r1, [pc, #104]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	4916      	ldr	r1, [pc, #88]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004350:	4013      	ands	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d025      	beq.n	80043ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4910      	ldr	r1, [pc, #64]	; (80043a8 <HAL_GPIO_Init+0x2c8>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	e025      	b.n	80043ba <HAL_GPIO_Init+0x2da>
 800436e:	bf00      	nop
 8004370:	10320000 	.word	0x10320000
 8004374:	10310000 	.word	0x10310000
 8004378:	10220000 	.word	0x10220000
 800437c:	10210000 	.word	0x10210000
 8004380:	10120000 	.word	0x10120000
 8004384:	10110000 	.word	0x10110000
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	40010800 	.word	0x40010800
 8004394:	40010c00 	.word	0x40010c00
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	40011800 	.word	0x40011800
 80043a4:	40011c00 	.word	0x40011c00
 80043a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	4913      	ldr	r1, [pc, #76]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	490e      	ldr	r1, [pc, #56]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
 80043d2:	e006      	b.n	80043e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	43db      	mvns	r3, r3
 80043dc:	4909      	ldr	r1, [pc, #36]	; (8004404 <HAL_GPIO_Init+0x324>)
 80043de:	4013      	ands	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	3301      	adds	r3, #1
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f47f ae7e 	bne.w	80040f4 <HAL_GPIO_Init+0x14>
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	372c      	adds	r7, #44	; 0x2c
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40010400 	.word	0x40010400

08004408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	e001      	b.n	800442a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	807b      	strh	r3, [r7, #2]
 8004442:	4613      	mov	r3, r2
 8004444:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004446:	787b      	ldrb	r3, [r7, #1]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004452:	e003      	b.n	800445c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	041a      	lsls	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e12b      	b.n	80046d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fe92 	bl	80021b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044cc:	f001 fbfc 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 80044d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a81      	ldr	r2, [pc, #516]	; (80046dc <HAL_I2C_Init+0x274>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d807      	bhi.n	80044ec <HAL_I2C_Init+0x84>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_I2C_Init+0x278>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf94      	ite	ls
 80044e4:	2301      	movls	r3, #1
 80044e6:	2300      	movhi	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e006      	b.n	80044fa <HAL_I2C_Init+0x92>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a7d      	ldr	r2, [pc, #500]	; (80046e4 <HAL_I2C_Init+0x27c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bf94      	ite	ls
 80044f4:	2301      	movls	r3, #1
 80044f6:	2300      	movhi	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0e7      	b.n	80046d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a78      	ldr	r2, [pc, #480]	; (80046e8 <HAL_I2C_Init+0x280>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0c9b      	lsrs	r3, r3, #18
 800450c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a6a      	ldr	r2, [pc, #424]	; (80046dc <HAL_I2C_Init+0x274>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d802      	bhi.n	800453c <HAL_I2C_Init+0xd4>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3301      	adds	r3, #1
 800453a:	e009      	b.n	8004550 <HAL_I2C_Init+0xe8>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	4a69      	ldr	r2, [pc, #420]	; (80046ec <HAL_I2C_Init+0x284>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	3301      	adds	r3, #1
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	430b      	orrs	r3, r1
 8004556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	495c      	ldr	r1, [pc, #368]	; (80046dc <HAL_I2C_Init+0x274>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d819      	bhi.n	80045a4 <HAL_I2C_Init+0x13c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1e59      	subs	r1, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fbb1 f3f3 	udiv	r3, r1, r3
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004584:	400b      	ands	r3, r1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_I2C_Init+0x138>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1e59      	subs	r1, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fbb1 f3f3 	udiv	r3, r1, r3
 8004598:	3301      	adds	r3, #1
 800459a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459e:	e051      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e04f      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <HAL_I2C_Init+0x168>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e58      	subs	r0, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e012      	b.n	80045f6 <HAL_I2C_Init+0x18e>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e58      	subs	r0, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	0099      	lsls	r1, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e6:	3301      	adds	r3, #1
 80045e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Init+0x196>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e022      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <HAL_I2C_Init+0x1bc>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1e58      	subs	r0, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	440b      	add	r3, r1
 8004614:	fbb0 f3f3 	udiv	r3, r0, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	e00f      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	0099      	lsls	r1, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	fbb0 f3f3 	udiv	r3, r0, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	6809      	ldr	r1, [r1, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6911      	ldr	r1, [r2, #16]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	430b      	orrs	r3, r1
 8004686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	000186a0 	.word	0x000186a0
 80046e0:	001e847f 	.word	0x001e847f
 80046e4:	003d08ff 	.word	0x003d08ff
 80046e8:	431bde83 	.word	0x431bde83
 80046ec:	10624dd3 	.word	0x10624dd3

080046f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	817b      	strh	r3, [r7, #10]
 8004702:	460b      	mov	r3, r1
 8004704:	813b      	strh	r3, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800470a:	f7fe ff29 	bl	8003560 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	f040 80d9 	bne.w	80048d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2319      	movs	r3, #25
 8004724:	2201      	movs	r2, #1
 8004726:	496d      	ldr	r1, [pc, #436]	; (80048dc <HAL_I2C_Mem_Write+0x1ec>)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fccd 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	e0cc      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Mem_Write+0x56>
 8004742:	2302      	movs	r3, #2
 8004744:	e0c5      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d007      	beq.n	800476c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2221      	movs	r2, #33	; 0x21
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a3a      	ldr	r2, [r7, #32]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a4d      	ldr	r2, [pc, #308]	; (80048e0 <HAL_I2C_Mem_Write+0x1f0>)
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ae:	88f8      	ldrh	r0, [r7, #6]
 80047b0:	893a      	ldrh	r2, [r7, #8]
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb04 	bl	8004dcc <I2C_RequestMemoryWrite>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d052      	beq.n	8004870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e081      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fd92 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11b      	bne.n	8004870 <HAL_I2C_Mem_Write+0x180>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d017      	beq.n	8004870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1aa      	bne.n	80047ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fd85 	bl	800538c <I2C_WaitOnBTFFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e016      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	00100002 	.word	0x00100002
 80048e0:	ffff0000 	.word	0xffff0000

080048e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004902:	f7fe fe2d 	bl	8003560 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 8250 	bne.w	8004db6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2319      	movs	r3, #25
 800491c:	2201      	movs	r2, #1
 800491e:	4982      	ldr	r1, [pc, #520]	; (8004b28 <HAL_I2C_Mem_Read+0x244>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fbd1 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
 800492e:	e243      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_I2C_Mem_Read+0x5a>
 800493a:	2302      	movs	r3, #2
 800493c:	e23c      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d007      	beq.n	8004964 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2222      	movs	r2, #34	; 0x22
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a62      	ldr	r2, [pc, #392]	; (8004b2c <HAL_I2C_Mem_Read+0x248>)
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049a6:	88f8      	ldrh	r0, [r7, #6]
 80049a8:	893a      	ldrh	r2, [r7, #8]
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fa9e 	bl	8004ef8 <I2C_RequestMemoryRead>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e1f8      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e1cc      	b.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d11e      	bne.n	8004a3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a0e:	b672      	cpsid	i
}
 8004a10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a38:	b662      	cpsie	i
}
 8004a3a:	e035      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d11e      	bne.n	8004a82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a54:	b672      	cpsid	i
}
 8004a56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a7e:	b662      	cpsie	i
}
 8004a80:	e012      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004aa8:	e172      	b.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	f200 811f 	bhi.w	8004cf2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d123      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fcab 	bl	800541c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e173      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b02:	e145      	b.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d152      	bne.n	8004bb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2200      	movs	r2, #0
 8004b14:	4906      	ldr	r1, [pc, #24]	; (8004b30 <HAL_I2C_Mem_Read+0x24c>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fad6 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e148      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
 8004b26:	bf00      	nop
 8004b28:	00100002 	.word	0x00100002
 8004b2c:	ffff0000 	.word	0xffff0000
 8004b30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b34:	b672      	cpsid	i
}
 8004b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b7a:	b662      	cpsie	i
}
 8004b7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb0:	e0ee      	b.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4981      	ldr	r1, [pc, #516]	; (8004dc0 <HAL_I2C_Mem_Read+0x4dc>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fa83 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0f5      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bdc:	b672      	cpsid	i
}
 8004bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c12:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_I2C_Mem_Read+0x4e0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	08db      	lsrs	r3, r3, #3
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_I2C_Mem_Read+0x4e4>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0a1a      	lsrs	r2, r3, #8
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	00da      	lsls	r2, r3, #3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d118      	bne.n	8004c6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c5a:	b662      	cpsie	i
}
 8004c5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0a6      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d1d9      	bne.n	8004c2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cba:	b662      	cpsie	i
}
 8004cbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf0:	e04e      	b.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fb90 	bl	800541c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e058      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d124      	bne.n	8004d90 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d107      	bne.n	8004d5e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f ae88 	bne.w	8004aaa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	00010004 	.word	0x00010004
 8004dc4:	20000098 	.word	0x20000098
 8004dc8:	14f8b589 	.word	0x14f8b589

08004dcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f960 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1c:	d103      	bne.n	8004e26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e05f      	b.n	8004eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	492d      	ldr	r1, [pc, #180]	; (8004ef4 <I2C_RequestMemoryWrite+0x128>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9bb 	bl	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04c      	b.n	8004eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	6a39      	ldr	r1, [r7, #32]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fa46 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d107      	bne.n	8004e8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02b      	b.n	8004eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d105      	bne.n	8004ea4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e021      	b.n	8004ee8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ea4:	893b      	ldrh	r3, [r7, #8]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	6a39      	ldr	r1, [r7, #32]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa20 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d107      	bne.n	8004eda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e005      	b.n	8004eea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	00010002 	.word	0x00010002

08004ef8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	817b      	strh	r3, [r7, #10]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	813b      	strh	r3, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f8c2 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00d      	beq.n	8004f66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f58:	d103      	bne.n	8004f62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0aa      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f66:	897b      	ldrh	r3, [r7, #10]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	6a3a      	ldr	r2, [r7, #32]
 8004f7a:	4952      	ldr	r1, [pc, #328]	; (80050c4 <I2C_RequestMemoryRead+0x1cc>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f91d 	bl	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e097      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	6a39      	ldr	r1, [r7, #32]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f9a8 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00d      	beq.n	8004fce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d107      	bne.n	8004fca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e076      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	611a      	str	r2, [r3, #16]
 8004fde:	e021      	b.n	8005024 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	6a39      	ldr	r1, [r7, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f982 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e050      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800501a:	893b      	ldrh	r3, [r7, #8]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	6a39      	ldr	r1, [r7, #32]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f967 	bl	80052fc <I2C_WaitOnTXEFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b04      	cmp	r3, #4
 800503a:	d107      	bne.n	800504c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e035      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800505e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2200      	movs	r2, #0
 8005068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f82b 	bl	80050c8 <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d103      	bne.n	8005090 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e013      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005094:	897b      	ldrh	r3, [r7, #10]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	4906      	ldr	r1, [pc, #24]	; (80050c4 <I2C_RequestMemoryRead+0x1cc>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f886 	bl	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	00010002 	.word	0x00010002

080050c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d8:	e048      	b.n	800516c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d044      	beq.n	800516c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e2:	f7fe fa3d 	bl	8003560 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d302      	bcc.n	80050f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d139      	bne.n	800516c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10d      	bne.n	800511e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	43da      	mvns	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	e00c      	b.n	8005138 <I2C_WaitOnFlagUntilTimeout+0x70>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	43da      	mvns	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	d116      	bne.n	800516c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e023      	b.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d10d      	bne.n	8005192 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	43da      	mvns	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4013      	ands	r3, r2
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	e00c      	b.n	80051ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	43da      	mvns	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d093      	beq.n	80050da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051ca:	e071      	b.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d123      	bne.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f043 0204 	orr.w	r2, r3, #4
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e067      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d041      	beq.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522c:	f7fe f998 	bl	8003560 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d136      	bne.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10c      	bne.n	8005266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	43da      	mvns	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e00b      	b.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	43da      	mvns	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e021      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10c      	bne.n	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e00b      	b.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	43da      	mvns	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f af6d 	bne.w	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005308:	e034      	b.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f8e3 	bl	80054d6 <I2C_IsAcknowledgeFailed>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e034      	b.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d028      	beq.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fe f91d 	bl	8003560 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11d      	bne.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d016      	beq.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e007      	b.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d1c3      	bne.n	800530a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005398:	e034      	b.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f89b 	bl	80054d6 <I2C_IsAcknowledgeFailed>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e034      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d028      	beq.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fe f8d5 	bl	8003560 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11d      	bne.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d016      	beq.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e007      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d1c3      	bne.n	800539a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005428:	e049      	b.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b10      	cmp	r3, #16
 8005436:	d119      	bne.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0210 	mvn.w	r2, #16
 8005440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e030      	b.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546c:	f7fe f878 	bl	8003560 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d11d      	bne.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d016      	beq.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e007      	b.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d1ae      	bne.n	800542a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d11b      	bne.n	8005526 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0204 	orr.w	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
	...

08005534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e272      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8087 	beq.w	8005662 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005554:	4b92      	ldr	r3, [pc, #584]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b04      	cmp	r3, #4
 800555e:	d00c      	beq.n	800557a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005560:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d112      	bne.n	8005592 <HAL_RCC_OscConfig+0x5e>
 800556c:	4b8c      	ldr	r3, [pc, #560]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005578:	d10b      	bne.n	8005592 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557a:	4b89      	ldr	r3, [pc, #548]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d06c      	beq.n	8005660 <HAL_RCC_OscConfig+0x12c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d168      	bne.n	8005660 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e24c      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d106      	bne.n	80055aa <HAL_RCC_OscConfig+0x76>
 800559c:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a7f      	ldr	r2, [pc, #508]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e02e      	b.n	8005608 <HAL_RCC_OscConfig+0xd4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10c      	bne.n	80055cc <HAL_RCC_OscConfig+0x98>
 80055b2:	4b7b      	ldr	r3, [pc, #492]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a7a      	ldr	r2, [pc, #488]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b78      	ldr	r3, [pc, #480]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a77      	ldr	r2, [pc, #476]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e01d      	b.n	8005608 <HAL_RCC_OscConfig+0xd4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0xbc>
 80055d6:	4b72      	ldr	r3, [pc, #456]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a71      	ldr	r2, [pc, #452]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b6f      	ldr	r3, [pc, #444]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6e      	ldr	r2, [pc, #440]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e00b      	b.n	8005608 <HAL_RCC_OscConfig+0xd4>
 80055f0:	4b6b      	ldr	r3, [pc, #428]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6a      	ldr	r2, [pc, #424]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a67      	ldr	r2, [pc, #412]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005606:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fd ffa6 	bl	8003560 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd ffa2 	bl	8003560 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e200      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0xe4>
 8005636:	e014      	b.n	8005662 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fd ff92 	bl	8003560 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005640:	f7fd ff8e 	bl	8003560 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e1ec      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005652:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x10c>
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d063      	beq.n	8005736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800566e:	4b4c      	ldr	r3, [pc, #304]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800567a:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b08      	cmp	r3, #8
 8005684:	d11c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x18c>
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCC_OscConfig+0x176>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d001      	beq.n	80056aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e1c0      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4939      	ldr	r1, [pc, #228]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056be:	e03a      	b.n	8005736 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c8:	4b36      	ldr	r3, [pc, #216]	; (80057a4 <HAL_RCC_OscConfig+0x270>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ce:	f7fd ff47 	bl	8003560 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d6:	f7fd ff43 	bl	8003560 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e1a1      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e8:	4b2d      	ldr	r3, [pc, #180]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4927      	ldr	r1, [pc, #156]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]
 8005708:	e015      	b.n	8005736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800570a:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <HAL_RCC_OscConfig+0x270>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fd ff26 	bl	8003560 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005718:	f7fd ff22 	bl	8003560 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e180      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d03a      	beq.n	80057b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d019      	beq.n	800577e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800574a:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <HAL_RCC_OscConfig+0x274>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005750:	f7fd ff06 	bl	8003560 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005758:	f7fd ff02 	bl	8003560 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e160      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_RCC_OscConfig+0x26c>)
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005776:	2001      	movs	r0, #1
 8005778:	f000 face 	bl	8005d18 <RCC_Delay>
 800577c:	e01c      	b.n	80057b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCC_OscConfig+0x274>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005784:	f7fd feec 	bl	8003560 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578a:	e00f      	b.n	80057ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578c:	f7fd fee8 	bl	8003560 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d908      	bls.n	80057ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e146      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	42420000 	.word	0x42420000
 80057a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ac:	4b92      	ldr	r3, [pc, #584]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e9      	bne.n	800578c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80a6 	beq.w	8005912 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ca:	4b8b      	ldr	r3, [pc, #556]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	4b88      	ldr	r3, [pc, #544]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	4a87      	ldr	r2, [pc, #540]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	61d3      	str	r3, [r2, #28]
 80057e2:	4b85      	ldr	r3, [pc, #532]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_RCC_OscConfig+0x4c8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d118      	bne.n	8005830 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fe:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <HAL_RCC_OscConfig+0x4c8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a7e      	ldr	r2, [pc, #504]	; (80059fc <HAL_RCC_OscConfig+0x4c8>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800580a:	f7fd fea9 	bl	8003560 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005812:	f7fd fea5 	bl	8003560 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b64      	cmp	r3, #100	; 0x64
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e103      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005824:	4b75      	ldr	r3, [pc, #468]	; (80059fc <HAL_RCC_OscConfig+0x4c8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <HAL_RCC_OscConfig+0x312>
 8005838:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6213      	str	r3, [r2, #32]
 8005844:	e02d      	b.n	80058a2 <HAL_RCC_OscConfig+0x36e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10c      	bne.n	8005868 <HAL_RCC_OscConfig+0x334>
 800584e:	4b6a      	ldr	r3, [pc, #424]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4a69      	ldr	r2, [pc, #420]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6213      	str	r3, [r2, #32]
 800585a:	4b67      	ldr	r3, [pc, #412]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4a66      	ldr	r2, [pc, #408]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	6213      	str	r3, [r2, #32]
 8005866:	e01c      	b.n	80058a2 <HAL_RCC_OscConfig+0x36e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b05      	cmp	r3, #5
 800586e:	d10c      	bne.n	800588a <HAL_RCC_OscConfig+0x356>
 8005870:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4a60      	ldr	r2, [pc, #384]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005876:	f043 0304 	orr.w	r3, r3, #4
 800587a:	6213      	str	r3, [r2, #32]
 800587c:	4b5e      	ldr	r3, [pc, #376]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	4a5d      	ldr	r2, [pc, #372]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6213      	str	r3, [r2, #32]
 8005888:	e00b      	b.n	80058a2 <HAL_RCC_OscConfig+0x36e>
 800588a:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4a5a      	ldr	r2, [pc, #360]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	6213      	str	r3, [r2, #32]
 8005896:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	4a57      	ldr	r2, [pc, #348]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800589c:	f023 0304 	bic.w	r3, r3, #4
 80058a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d015      	beq.n	80058d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058aa:	f7fd fe59 	bl	8003560 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fd fe55 	bl	8003560 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0b1      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ee      	beq.n	80058b2 <HAL_RCC_OscConfig+0x37e>
 80058d4:	e014      	b.n	8005900 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d6:	f7fd fe43 	bl	8003560 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058de:	f7fd fe3f 	bl	8003560 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e09b      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ee      	bne.n	80058de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d105      	bne.n	8005912 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005906:	4b3c      	ldr	r3, [pc, #240]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4a3b      	ldr	r2, [pc, #236]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005910:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8087 	beq.w	8005a2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591c:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 030c 	and.w	r3, r3, #12
 8005924:	2b08      	cmp	r3, #8
 8005926:	d061      	beq.n	80059ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d146      	bne.n	80059be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005930:	4b33      	ldr	r3, [pc, #204]	; (8005a00 <HAL_RCC_OscConfig+0x4cc>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005936:	f7fd fe13 	bl	8003560 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593e:	f7fd fe0f 	bl	8003560 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e06d      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005950:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f0      	bne.n	800593e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005964:	d108      	bne.n	8005978 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4921      	ldr	r1, [pc, #132]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 8005974:	4313      	orrs	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005978:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a19      	ldr	r1, [r3, #32]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	430b      	orrs	r3, r1
 800598a:	491b      	ldr	r1, [pc, #108]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x4cc>)
 8005992:	2201      	movs	r2, #1
 8005994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005996:	f7fd fde3 	bl	8003560 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599e:	f7fd fddf 	bl	8003560 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e03d      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x46a>
 80059bc:	e035      	b.n	8005a2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_RCC_OscConfig+0x4cc>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c4:	f7fd fdcc 	bl	8003560 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fd fdc8 	bl	8003560 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e026      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x498>
 80059ea:	e01e      	b.n	8005a2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d107      	bne.n	8005a04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e019      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
 8005a00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <HAL_RCC_OscConfig+0x500>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000

08005a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0d0      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d910      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b67      	ldr	r3, [pc, #412]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 0207 	bic.w	r2, r3, #7
 8005a62:	4965      	ldr	r1, [pc, #404]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0b8      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a94:	4b59      	ldr	r3, [pc, #356]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a58      	ldr	r2, [pc, #352]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aac:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a52      	ldr	r2, [pc, #328]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ab6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab8:	4b50      	ldr	r3, [pc, #320]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	494d      	ldr	r1, [pc, #308]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d040      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	4b47      	ldr	r3, [pc, #284]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d115      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e07f      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e073      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e06b      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4936      	ldr	r1, [pc, #216]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b28:	f7fd fd1a 	bl	8003560 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fd fd16 	bl	8003560 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e053      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d210      	bcs.n	8005b88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 0207 	bic.w	r2, r3, #7
 8005b6e:	4922      	ldr	r1, [pc, #136]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e032      	b.n	8005bee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b94:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4916      	ldr	r1, [pc, #88]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	490e      	ldr	r1, [pc, #56]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bc6:	f000 f821 	bl	8005c0c <HAL_RCC_GetSysClockFreq>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	490a      	ldr	r1, [pc, #40]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd8:	5ccb      	ldrb	r3, [r1, r3]
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0x1cc>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005be2:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_ClockConfig+0x1d0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd fc78 	bl	80034dc <HAL_InitTick>

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40022000 	.word	0x40022000
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800a0cc 	.word	0x0800a0cc
 8005c04:	20000098 	.word	0x20000098
 8005c08:	2000009c 	.word	0x2000009c

08005c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x30>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d003      	beq.n	8005c42 <HAL_RCC_GetSysClockFreq+0x36>
 8005c3a:	e027      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c3e:	613b      	str	r3, [r7, #16]
      break;
 8005c40:	e027      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0c9b      	lsrs	r3, r3, #18
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c4c:	5cd3      	ldrb	r3, [r2, r3]
 8005c4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	0c5b      	lsrs	r3, r3, #17
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	4a11      	ldr	r2, [pc, #68]	; (8005cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c6e:	fb03 f202 	mul.w	r2, r3, r2
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e004      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	613b      	str	r3, [r7, #16]
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c8e:	613b      	str	r3, [r7, #16]
      break;
 8005c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c92:	693b      	ldr	r3, [r7, #16]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	007a1200 	.word	0x007a1200
 8005ca8:	0800a0e4 	.word	0x0800a0e4
 8005cac:	0800a0f4 	.word	0x0800a0f4
 8005cb0:	003d0900 	.word	0x003d0900

08005cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	20000098 	.word	0x20000098

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ccc:	f7ff fff2 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	0800a0dc 	.word	0x0800a0dc

08005cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cf4:	f7ff ffde 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	0adb      	lsrs	r3, r3, #11
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4903      	ldr	r1, [pc, #12]	; (8005d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800a0dc 	.word	0x0800a0dc

08005d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <RCC_Delay+0x34>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <RCC_Delay+0x38>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	0a5b      	lsrs	r3, r3, #9
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d34:	bf00      	nop
  }
  while (Delay --);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1e5a      	subs	r2, r3, #1
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f9      	bne.n	8005d34 <RCC_Delay+0x1c>
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	20000098 	.word	0x20000098
 8005d50:	10624dd3 	.word	0x10624dd3

08005d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e041      	b.n	8005dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fd f886 	bl	8002e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 fcb4 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d001      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e044      	b.n	8005e96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xac>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d018      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0x6c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d013      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0x6c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d00e      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0x6c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <HAL_TIM_Base_Start_IT+0xb8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0x6c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d111      	bne.n	8005e84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d010      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	e007      	b.n	8005e94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00

08005eb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e041      	b.n	8005f4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f839 	bl	8005f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f000 fc04 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_IC_Start_IT+0x1e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	e013      	b.n	8005faa <HAL_TIM_IC_Start_IT+0x46>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_IC_Start_IT+0x2e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	e00b      	b.n	8005faa <HAL_TIM_IC_Start_IT+0x46>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_IC_Start_IT+0x3e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	e003      	b.n	8005faa <HAL_TIM_IC_Start_IT+0x46>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <HAL_TIM_IC_Start_IT+0x58>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e013      	b.n	8005fe4 <HAL_TIM_IC_Start_IT+0x80>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d104      	bne.n	8005fcc <HAL_TIM_IC_Start_IT+0x68>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e00b      	b.n	8005fe4 <HAL_TIM_IC_Start_IT+0x80>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d104      	bne.n	8005fdc <HAL_TIM_IC_Start_IT+0x78>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	e003      	b.n	8005fe4 <HAL_TIM_IC_Start_IT+0x80>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d102      	bne.n	8005ff2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fec:	7b7b      	ldrb	r3, [r7, #13]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0c2      	b.n	800617c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_IC_Start_IT+0xa2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	e013      	b.n	800602e <HAL_TIM_IC_Start_IT+0xca>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d104      	bne.n	8006016 <HAL_TIM_IC_Start_IT+0xb2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006014:	e00b      	b.n	800602e <HAL_TIM_IC_Start_IT+0xca>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d104      	bne.n	8006026 <HAL_TIM_IC_Start_IT+0xc2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006024:	e003      	b.n	800602e <HAL_TIM_IC_Start_IT+0xca>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_TIM_IC_Start_IT+0xda>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603c:	e013      	b.n	8006066 <HAL_TIM_IC_Start_IT+0x102>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d104      	bne.n	800604e <HAL_TIM_IC_Start_IT+0xea>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800604c:	e00b      	b.n	8006066 <HAL_TIM_IC_Start_IT+0x102>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d104      	bne.n	800605e <HAL_TIM_IC_Start_IT+0xfa>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605c:	e003      	b.n	8006066 <HAL_TIM_IC_Start_IT+0x102>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d841      	bhi.n	80060f0 <HAL_TIM_IC_Start_IT+0x18c>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_TIM_IC_Start_IT+0x110>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060f1 	.word	0x080060f1
 800607c:	080060f1 	.word	0x080060f1
 8006080:	080060f1 	.word	0x080060f1
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060f1 	.word	0x080060f1
 800608c:	080060f1 	.word	0x080060f1
 8006090:	080060f1 	.word	0x080060f1
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060f1 	.word	0x080060f1
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	080060df 	.word	0x080060df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0202 	orr.w	r2, r2, #2
 80060b6:	60da      	str	r2, [r3, #12]
      break;
 80060b8:	e01d      	b.n	80060f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0204 	orr.w	r2, r2, #4
 80060c8:	60da      	str	r2, [r3, #12]
      break;
 80060ca:	e014      	b.n	80060f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	60da      	str	r2, [r3, #12]
      break;
 80060dc:	e00b      	b.n	80060f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0210 	orr.w	r2, r2, #16
 80060ec:	60da      	str	r2, [r3, #12]
      break;
 80060ee:	e002      	b.n	80060f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d13e      	bne.n	800617a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2201      	movs	r2, #1
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fd30 	bl	8006b6a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <HAL_TIM_IC_Start_IT+0x220>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <HAL_TIM_IC_Start_IT+0x1e2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_TIM_IC_Start_IT+0x224>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <HAL_TIM_IC_Start_IT+0x1e2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006126:	d00e      	beq.n	8006146 <HAL_TIM_IC_Start_IT+0x1e2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_TIM_IC_Start_IT+0x228>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIM_IC_Start_IT+0x1e2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIM_IC_Start_IT+0x22c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_IC_Start_IT+0x1e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a14      	ldr	r2, [pc, #80]	; (8006194 <HAL_TIM_IC_Start_IT+0x230>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d111      	bne.n	800616a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d010      	beq.n	800617a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	e007      	b.n	800617a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00

08006198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fb fafa 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa6c 	bl	80066c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fa72 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0204 	mvn.w	r2, #4
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb fad4 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa46 	bl	80066c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa4c 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0208 	mvn.w	r2, #8
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb faae 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa20 	bl	80066c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa26 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0210 	mvn.w	r2, #16
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2208      	movs	r2, #8
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fa88 	bl	80017dc <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9fa 	bl	80066c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fa00 	bl	80066da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0201 	mvn.w	r2, #1
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fcb8 	bl	8001c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fcbb 	bl	8006c9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9d0 	bl	80066ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0220 	mvn.w	r2, #32
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc8e 	bl	8006c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006392:	2302      	movs	r3, #2
 8006394:	e088      	b.n	80064a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063b4:	f000 fa2a 	bl	800680c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 020c 	bic.w	r2, r2, #12
 80063c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6999      	ldr	r1, [r3, #24]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	619a      	str	r2, [r3, #24]
 80063da:	e060      	b.n	800649e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d11c      	bne.n	800641c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063f2:	f000 fa9f 	bl	8006934 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006404:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6999      	ldr	r1, [r3, #24]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	021a      	lsls	r2, r3, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	619a      	str	r2, [r3, #24]
 800641a:	e040      	b.n	800649e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b08      	cmp	r3, #8
 8006420:	d11b      	bne.n	800645a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006432:	f000 faea 	bl	8006a0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 020c 	bic.w	r2, r2, #12
 8006444:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69d9      	ldr	r1, [r3, #28]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	61da      	str	r2, [r3, #28]
 8006458:	e021      	b.n	800649e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d11c      	bne.n	800649a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006470:	f000 fb06 	bl	8006a80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006482:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69d9      	ldr	r1, [r3, #28]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	61da      	str	r2, [r3, #28]
 8006498:	e001      	b.n	800649e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_ConfigClockSource+0x1c>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e0b4      	b.n	8006636 <HAL_TIM_ConfigClockSource+0x186>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006504:	d03e      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0xd4>
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	f200 8087 	bhi.w	800661c <HAL_TIM_ConfigClockSource+0x16c>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	f000 8086 	beq.w	8006622 <HAL_TIM_ConfigClockSource+0x172>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d87f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d01a      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0xa6>
 8006520:	2b70      	cmp	r3, #112	; 0x70
 8006522:	d87b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d050      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x11a>
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	d877      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b50      	cmp	r3, #80	; 0x50
 800652e:	d03c      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0xfa>
 8006530:	2b50      	cmp	r3, #80	; 0x50
 8006532:	d873      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d058      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x13a>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d86f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d064      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x15a>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d86b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d060      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d867      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05c      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b10      	cmp	r3, #16
 8006552:	d05a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x15a>
 8006554:	e062      	b.n	800661c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006566:	f000 fae1 	bl	8006b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	609a      	str	r2, [r3, #8]
      break;
 8006582:	e04f      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006594:	f000 faca 	bl	8006b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065a6:	609a      	str	r2, [r3, #8]
      break;
 80065a8:	e03c      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 f98e 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2150      	movs	r1, #80	; 0x50
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fa98 	bl	8006af8 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e02c      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d6:	461a      	mov	r2, r3
 80065d8:	f000 f9e8 	bl	80069ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2160      	movs	r1, #96	; 0x60
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fa88 	bl	8006af8 <TIM_ITRx_SetConfig>
      break;
 80065e8:	e01c      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 f96e 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fa78 	bl	8006af8 <TIM_ITRx_SetConfig>
      break;
 8006608:	e00c      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f000 fa6f 	bl	8006af8 <TIM_ITRx_SetConfig>
      break;
 800661a:	e003      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
      break;
 8006620:	e000      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	d831      	bhi.n	80066b8 <HAL_TIM_ReadCapturedValue+0x78>
 8006654:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	08006691 	.word	0x08006691
 8006660:	080066b9 	.word	0x080066b9
 8006664:	080066b9 	.word	0x080066b9
 8006668:	080066b9 	.word	0x080066b9
 800666c:	0800669b 	.word	0x0800669b
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066b9 	.word	0x080066b9
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066b9 	.word	0x080066b9
 800668c:	080066af 	.word	0x080066af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	60fb      	str	r3, [r7, #12]

      break;
 8006698:	e00f      	b.n	80066ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	60fb      	str	r3, [r7, #12]

      break;
 80066a2:	e00a      	b.n	80066ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	60fb      	str	r3, [r7, #12]

      break;
 80066ac:	e005      	b.n	80066ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	60fb      	str	r3, [r7, #12]

      break;
 80066b6:	e000      	b.n	80066ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066b8:	bf00      	nop
  }

  return tmpreg;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
	...

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <TIM_Base_SetConfig+0xf8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a38      	ldr	r2, [pc, #224]	; (80067fc <TIM_Base_SetConfig+0xfc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a35      	ldr	r2, [pc, #212]	; (8006800 <TIM_Base_SetConfig+0x100>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a34      	ldr	r2, [pc, #208]	; (8006804 <TIM_Base_SetConfig+0x104>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a33      	ldr	r2, [pc, #204]	; (8006808 <TIM_Base_SetConfig+0x108>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_Base_SetConfig+0xf8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0x82>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <TIM_Base_SetConfig+0xfc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0x82>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <TIM_Base_SetConfig+0x100>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0x82>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a23      	ldr	r2, [pc, #140]	; (8006804 <TIM_Base_SetConfig+0x104>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0x82>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a22      	ldr	r2, [pc, #136]	; (8006808 <TIM_Base_SetConfig+0x108>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0f      	ldr	r2, [pc, #60]	; (80067f8 <TIM_Base_SetConfig+0xf8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0e      	ldr	r2, [pc, #56]	; (80067fc <TIM_Base_SetConfig+0xfc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]
  }
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	40013400 	.word	0x40013400
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00

0800680c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0201 	bic.w	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <TIM_TI1_SetConfig+0xb8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_TI1_SetConfig+0x56>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <TIM_TI1_SetConfig+0xbc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_TI1_SetConfig+0x56>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d00b      	beq.n	8006862 <TIM_TI1_SetConfig+0x56>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <TIM_TI1_SetConfig+0xc0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_TI1_SetConfig+0x56>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <TIM_TI1_SetConfig+0xc4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_TI1_SetConfig+0x56>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <TIM_TI1_SetConfig+0xc8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d101      	bne.n	8006866 <TIM_TI1_SetConfig+0x5a>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <TIM_TI1_SetConfig+0x5c>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e003      	b.n	8006886 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800688c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	b2db      	uxtb	r3, r3
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f023 030a 	bic.w	r3, r3, #10
 80068a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 030a 	and.w	r3, r3, #10
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00

080068d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 030a 	bic.w	r3, r3, #10
 8006914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0210 	bic.w	r2, r3, #16
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	031b      	lsls	r3, r3, #12
 8006978:	b29b      	uxth	r3, r3
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006986:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0210 	bic.w	r2, r3, #16
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	031b      	lsls	r3, r3, #12
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	621a      	str	r2, [r3, #32]
}
 8006a00:	bf00      	nop
 8006a02:	371c      	adds	r7, #28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	031b      	lsls	r3, r3, #12
 8006ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f043 0307 	orr.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	609a      	str	r2, [r3, #8]
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	401a      	ands	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e050      	b.n	8006c6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c22:	d00e      	beq.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a14      	ldr	r2, [pc, #80]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d10c      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40000c00 	.word	0x40000c00

08006c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e042      	b.n	8006d48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fc f9ea 	bl	80030b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2224      	movs	r2, #36	; 0x24
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 ff47 	bl	8007b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695a      	ldr	r2, [r3, #20]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d175      	bne.n	8006e5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Transmit+0x2c>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e06e      	b.n	8006e5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2221      	movs	r2, #33	; 0x21
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d8e:	f7fc fbe7 	bl	8003560 <HAL_GetTick>
 8006d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d108      	bne.n	8006dbc <HAL_UART_Transmit+0x6c>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e003      	b.n	8006dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dc4:	e02e      	b.n	8006e24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fc23 	bl	800761c <UART_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e03a      	b.n	8006e5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	3302      	adds	r3, #2
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	e007      	b.n	8006e16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	3301      	adds	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1cb      	bne.n	8006dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2140      	movs	r1, #64	; 0x40
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fbef 	bl	800761c <UART_WaitOnFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e006      	b.n	8006e5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e000      	b.n	8006e5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	4613      	mov	r3, r2
 8006e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d112      	bne.n	8006ea6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_UART_Receive_DMA+0x26>
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e00b      	b.n	8006ea8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fc17 	bl	80076d0 <UART_Start_Receive_DMA>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	e000      	b.n	8006ea8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b0ba      	sub	sp, #232	; 0xe8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_UART_IRQHandler+0x66>
 8006f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fd7c 	bl	8007a0c <UART_Receive_IT>
      return;
 8006f14:	e25b      	b.n	80073ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80de 	beq.w	80070dc <HAL_UART_IRQHandler+0x22c>
 8006f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80d1 	beq.w	80070dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xae>
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	f043 0202 	orr.w	r2, r3, #2
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xf6>
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	f043 0204 	orr.w	r2, r3, #4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x126>
 8006fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d105      	bne.n	8006fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 81f2 	beq.w	80073c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_UART_IRQHandler+0x14e>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fd07 	bl	8007a0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <HAL_UART_IRQHandler+0x17a>
 8007022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d04f      	beq.n	80070ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc11 	bl	8007852 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d041      	beq.n	80070c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3314      	adds	r3, #20
 8007044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800706a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800706e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1d9      	bne.n	800703e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d013      	beq.n	80070ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	4a7e      	ldr	r2, [pc, #504]	; (8007290 <HAL_UART_IRQHandler+0x3e0>)
 8007098:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fc fcac 	bl	80039fc <HAL_DMA_Abort_IT>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d016      	beq.n	80070d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	e00e      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f99c 	bl	80073f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	e00a      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f998 	bl	80073f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	e006      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f994 	bl	80073f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80070d6:	e175      	b.n	80073c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	bf00      	nop
    return;
 80070da:	e173      	b.n	80073c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 814f 	bne.w	8007384 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8148 	beq.w	8007384 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8141 	beq.w	8007384 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 80b6 	beq.w	8007294 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8145 	beq.w	80073c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007146:	429a      	cmp	r2, r3
 8007148:	f080 813e 	bcs.w	80073c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007152:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b20      	cmp	r3, #32
 800715c:	f000 8088 	beq.w	8007270 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800717a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800717e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800718c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007190:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007198:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1d9      	bne.n	8007160 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3314      	adds	r3, #20
 80071b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e1      	bne.n	80071ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3314      	adds	r3, #20
 80071ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800720c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800720e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007212:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800721a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	330c      	adds	r3, #12
 8007234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800723e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007240:	f023 0310 	bic.w	r3, r3, #16
 8007244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007252:	65ba      	str	r2, [r7, #88]	; 0x58
 8007254:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e3      	bne.n	800722e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	4618      	mov	r0, r3
 800726c:	f7fc fb8a 	bl	8003984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800727e:	b29b      	uxth	r3, r3
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	b29b      	uxth	r3, r3
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8bf 	bl	800740a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800728c:	e09c      	b.n	80073c8 <HAL_UART_IRQHandler+0x518>
 800728e:	bf00      	nop
 8007290:	08007917 	.word	0x08007917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800729c:	b29b      	uxth	r3, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 808e 	beq.w	80073cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8089 	beq.w	80073cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072de:	647a      	str	r2, [r7, #68]	; 0x44
 80072e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e3      	bne.n	80072ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3314      	adds	r3, #20
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	623b      	str	r3, [r7, #32]
   return(result);
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3314      	adds	r3, #20
 8007312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007316:	633a      	str	r2, [r7, #48]	; 0x30
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800731c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e3      	bne.n	80072f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	60fb      	str	r3, [r7, #12]
   return(result);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0310 	bic.w	r3, r3, #16
 800734e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800735c:	61fa      	str	r2, [r7, #28]
 800735e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	617b      	str	r3, [r7, #20]
   return(result);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e3      	bne.n	8007338 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f844 	bl	800740a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007382:	e023      	b.n	80073cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738c:	2b00      	cmp	r3, #0
 800738e:	d009      	beq.n	80073a4 <HAL_UART_IRQHandler+0x4f4>
 8007390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 face 	bl	800793e <UART_Transmit_IT>
    return;
 80073a2:	e014      	b.n	80073ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <HAL_UART_IRQHandler+0x51e>
 80073b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb0d 	bl	80079dc <UART_EndTransmit_IT>
    return;
 80073c2:	e004      	b.n	80073ce <HAL_UART_IRQHandler+0x51e>
    return;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <HAL_UART_IRQHandler+0x51e>
      return;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <HAL_UART_IRQHandler+0x51e>
      return;
 80073cc:	bf00      	nop
  }
}
 80073ce:	37e8      	adds	r7, #232	; 0xe8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr

080073e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b09c      	sub	sp, #112	; 0x70
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d172      	bne.n	8007522 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	2200      	movs	r2, #0
 8007440:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007458:	66bb      	str	r3, [r7, #104]	; 0x68
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007462:	65ba      	str	r2, [r7, #88]	; 0x58
 8007464:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	667b      	str	r3, [r7, #100]	; 0x64
 800748e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3314      	adds	r3, #20
 8007494:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007496:	647a      	str	r2, [r7, #68]	; 0x44
 8007498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800749c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	663b      	str	r3, [r7, #96]	; 0x60
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3314      	adds	r3, #20
 80074c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074ca:	633a      	str	r2, [r7, #48]	; 0x30
 80074cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e5      	bne.n	80074aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d119      	bne.n	8007522 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f023 0310 	bic.w	r3, r3, #16
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	330c      	adds	r3, #12
 800750c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750e:	61fa      	str	r2, [r7, #28]
 8007510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	617b      	str	r3, [r7, #20]
   return(result);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e5      	bne.n	80074ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007524:	2200      	movs	r2, #0
 8007526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	2b01      	cmp	r3, #1
 800752e:	d106      	bne.n	800753e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007534:	4619      	mov	r1, r3
 8007536:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007538:	f7ff ff67 	bl	800740a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800753c:	e002      	b.n	8007544 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800753e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007540:	f7fa fbc4 	bl	8001ccc <HAL_UART_RxCpltCallback>
}
 8007544:	bf00      	nop
 8007546:	3770      	adds	r7, #112	; 0x70
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	2b01      	cmp	r3, #1
 8007566:	d108      	bne.n	800757a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	4619      	mov	r1, r3
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff ff49 	bl	800740a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007578:	e002      	b.n	8007580 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff ff33 	bl	80073e6 <HAL_UART_RxHalfCpltCallback>
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b21      	cmp	r3, #33	; 0x21
 80075ba:	d108      	bne.n	80075ce <UART_DMAError+0x46>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2200      	movs	r2, #0
 80075c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80075c8:	68b8      	ldr	r0, [r7, #8]
 80075ca:	f000 f91b 	bl	8007804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b22      	cmp	r3, #34	; 0x22
 80075ee:	d108      	bne.n	8007602 <UART_DMAError+0x7a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80075fc:	68b8      	ldr	r0, [r7, #8]
 80075fe:	f000 f928 	bl	8007852 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	f043 0210 	orr.w	r2, r3, #16
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760e:	68b8      	ldr	r0, [r7, #8]
 8007610:	f7ff fef2 	bl	80073f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762c:	e03b      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d037      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007636:	f7fb ff93 	bl	8003560 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	429a      	cmp	r2, r3
 8007644:	d302      	bcc.n	800764c <UART_WaitOnFlagUntilTimeout+0x30>
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e03a      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d023      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b80      	cmp	r3, #128	; 0x80
 8007662:	d020      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d01d      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b08      	cmp	r3, #8
 8007676:	d116      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f8df 	bl	8007852 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2208      	movs	r2, #8
 8007698:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e00f      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4013      	ands	r3, r2
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d0b4      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b098      	sub	sp, #96	; 0x60
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2222      	movs	r2, #34	; 0x22
 80076f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	4a3e      	ldr	r2, [pc, #248]	; (80077f8 <UART_Start_Receive_DMA+0x128>)
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	4a3d      	ldr	r2, [pc, #244]	; (80077fc <UART_Start_Receive_DMA+0x12c>)
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	4a3c      	ldr	r2, [pc, #240]	; (8007800 <UART_Start_Receive_DMA+0x130>)
 800770e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	2200      	movs	r2, #0
 8007716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	f7fc f8c8 	bl	80038c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d019      	beq.n	8007786 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007768:	65bb      	str	r3, [r7, #88]	; 0x58
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007772:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007774:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	657b      	str	r3, [r7, #84]	; 0x54
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3314      	adds	r3, #20
 80077a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e5      	bne.n	8007786 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d0:	653b      	str	r3, [r7, #80]	; 0x50
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3314      	adds	r3, #20
 80077d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077da:	627a      	str	r2, [r7, #36]	; 0x24
 80077dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6a39      	ldr	r1, [r7, #32]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e5      	bne.n	80077ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3760      	adds	r7, #96	; 0x60
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	08007421 	.word	0x08007421
 80077fc:	0800754d 	.word	0x0800754d
 8007800:	08007589 	.word	0x08007589

08007804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60bb      	str	r3, [r7, #8]
   return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	61ba      	str	r2, [r7, #24]
 800782e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007848:	bf00      	nop
 800784a:	3724      	adds	r7, #36	; 0x24
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007852:	b480      	push	{r7}
 8007854:	b095      	sub	sp, #84	; 0x54
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800787a:	643a      	str	r2, [r7, #64]	; 0x40
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	61fb      	str	r3, [r7, #28]
   return(result);
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3314      	adds	r3, #20
 80078ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e5      	bne.n	800788e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d119      	bne.n	80078fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f023 0310 	bic.w	r3, r3, #16
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ea:	61ba      	str	r2, [r7, #24]
 80078ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6979      	ldr	r1, [r7, #20]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	613b      	str	r3, [r7, #16]
   return(result);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800790c:	bf00      	nop
 800790e:	3754      	adds	r7, #84	; 0x54
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fd61 	bl	80073f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b21      	cmp	r3, #33	; 0x21
 8007950:	d13e      	bne.n	80079d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795a:	d114      	bne.n	8007986 <UART_Transmit_IT+0x48>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d110      	bne.n	8007986 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]
 8007984:	e008      	b.n	8007998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	1c59      	adds	r1, r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6211      	str	r1, [r2, #32]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4619      	mov	r1, r3
 80079a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10f      	bne.n	80079cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fce9 	bl	80073d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08c      	sub	sp, #48	; 0x30
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b22      	cmp	r3, #34	; 0x22
 8007a1e:	f040 80ae 	bne.w	8007b7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d117      	bne.n	8007a5c <UART_Receive_IT+0x50>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d113      	bne.n	8007a5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	629a      	str	r2, [r3, #40]	; 0x28
 8007a5a:	e026      	b.n	8007aaa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d007      	beq.n	8007a80 <UART_Receive_IT+0x74>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <UART_Receive_IT+0x82>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e008      	b.n	8007aa0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d15d      	bne.n	8007b7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0220 	bic.w	r2, r2, #32
 8007acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007adc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d135      	bne.n	8007b70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	330c      	adds	r3, #12
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	623a      	str	r2, [r7, #32]
 8007b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	6a3a      	ldr	r2, [r7, #32]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d10a      	bne.n	8007b62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fc4e 	bl	800740a <HAL_UARTEx_RxEventCallback>
 8007b6e:	e002      	b.n	8007b76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7fa f8ab 	bl	8001ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e002      	b.n	8007b80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b7e:	2302      	movs	r3, #2
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007bc2:	f023 030c 	bic.w	r3, r3, #12
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a2c      	ldr	r2, [pc, #176]	; (8007c9c <UART_SetConfig+0x114>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d103      	bne.n	8007bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007bf0:	f7fe f87e 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	e002      	b.n	8007bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fe f866 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8007bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009a      	lsls	r2, r3, #2
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c14:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <UART_SetConfig+0x118>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	0119      	lsls	r1, r3, #4
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009a      	lsls	r2, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c34:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <UART_SetConfig+0x118>)
 8007c36:	fba3 0302 	umull	r0, r3, r3, r2
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	2064      	movs	r0, #100	; 0x64
 8007c3e:	fb00 f303 	mul.w	r3, r0, r3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	3332      	adds	r3, #50	; 0x32
 8007c48:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <UART_SetConfig+0x118>)
 8007c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c54:	4419      	add	r1, r3
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009a      	lsls	r2, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <UART_SetConfig+0x118>)
 8007c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2064      	movs	r0, #100	; 0x64
 8007c76:	fb00 f303 	mul.w	r3, r0, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	3332      	adds	r3, #50	; 0x32
 8007c80:	4a07      	ldr	r2, [pc, #28]	; (8007ca0 <UART_SetConfig+0x118>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	f003 020f 	and.w	r2, r3, #15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	440a      	add	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40013800 	.word	0x40013800
 8007ca0:	51eb851f 	.word	0x51eb851f

08007ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 0208 	add.w	r2, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f103 0208 	add.w	r2, r3, #8
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f103 0208 	add.w	r2, r3, #8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr

08007cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d103      	bne.n	8007d60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e00c      	b.n	8007d7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3308      	adds	r3, #8
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e002      	b.n	8007d6e <vListInsert+0x2e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d2f6      	bcs.n	8007d68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	bf00      	nop
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6892      	ldr	r2, [r2, #8]
 8007dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6852      	ldr	r2, [r2, #4]
 8007dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d103      	bne.n	8007de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bc80      	pop	{r7}
 8007e00:	4770      	bx	lr

08007e02 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b08e      	sub	sp, #56	; 0x38
 8007e06:	af04      	add	r7, sp, #16
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	61fb      	str	r3, [r7, #28]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e48:	2354      	movs	r3, #84	; 0x54
 8007e4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b54      	cmp	r3, #84	; 0x54
 8007e50:	d00a      	beq.n	8007e68 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	61bb      	str	r3, [r7, #24]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01e      	beq.n	8007eae <xTaskCreateStatic+0xac>
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01b      	beq.n	8007eae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9303      	str	r3, [sp, #12]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	f107 0314 	add.w	r3, r7, #20
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f850 	bl	8007f46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ea8:	f000 f8d4 	bl	8008054 <prvAddNewTaskToReadyList>
 8007eac:	e001      	b.n	8007eb2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eb2:	697b      	ldr	r3, [r7, #20]
	}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3728      	adds	r7, #40	; 0x28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af04      	add	r7, sp, #16
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ecc:	88fb      	ldrh	r3, [r7, #6]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fe85 	bl	8008be0 <pvPortMalloc>
 8007ed6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00e      	beq.n	8007efc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ede:	2054      	movs	r0, #84	; 0x54
 8007ee0:	f000 fe7e 	bl	8008be0 <pvPortMalloc>
 8007ee4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ef2:	e005      	b.n	8007f00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f000 ff3f 	bl	8008d78 <vPortFree>
 8007efa:	e001      	b.n	8007f00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d017      	beq.n	8007f36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f0e:	88fa      	ldrh	r2, [r7, #6]
 8007f10:	2300      	movs	r3, #0
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f80e 	bl	8007f46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f2a:	69f8      	ldr	r0, [r7, #28]
 8007f2c:	f000 f892 	bl	8008054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	e002      	b.n	8007f3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3720      	adds	r7, #32
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b088      	sub	sp, #32
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f023 0307 	bic.w	r3, r3, #7
 8007f6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	617b      	str	r3, [r7, #20]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01f      	beq.n	8007fd4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e012      	b.n	8007fc0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	7819      	ldrb	r1, [r3, #0]
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3334      	adds	r3, #52	; 0x34
 8007faa:	460a      	mov	r2, r1
 8007fac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d9e9      	bls.n	8007f9a <prvInitialiseNewTask+0x54>
 8007fc6:	e000      	b.n	8007fca <prvInitialiseNewTask+0x84>
			{
				break;
 8007fc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fd2:	e003      	b.n	8007fdc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d901      	bls.n	8007fe6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fe2:	2306      	movs	r3, #6
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fe70 	bl	8007ce2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	3318      	adds	r3, #24
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fe6b 	bl	8007ce2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008010:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	f1c3 0207 	rsb	r2, r3, #7
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008020:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2200      	movs	r2, #0
 8008026:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	69b8      	ldr	r0, [r7, #24]
 8008036:	f000 fc21 	bl	800887c <pxPortInitialiseStack>
 800803a:	4602      	mov	r2, r0
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800804c:	bf00      	nop
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800805c:	f000 fcfe 	bl	8008a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008060:	4b2a      	ldr	r3, [pc, #168]	; (800810c <prvAddNewTaskToReadyList+0xb8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	4a29      	ldr	r2, [pc, #164]	; (800810c <prvAddNewTaskToReadyList+0xb8>)
 8008068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800806a:	4b29      	ldr	r3, [pc, #164]	; (8008110 <prvAddNewTaskToReadyList+0xbc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008072:	4a27      	ldr	r2, [pc, #156]	; (8008110 <prvAddNewTaskToReadyList+0xbc>)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008078:	4b24      	ldr	r3, [pc, #144]	; (800810c <prvAddNewTaskToReadyList+0xb8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d110      	bne.n	80080a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008080:	f000 faba 	bl	80085f8 <prvInitialiseTaskLists>
 8008084:	e00d      	b.n	80080a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008086:	4b23      	ldr	r3, [pc, #140]	; (8008114 <prvAddNewTaskToReadyList+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800808e:	4b20      	ldr	r3, [pc, #128]	; (8008110 <prvAddNewTaskToReadyList+0xbc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	429a      	cmp	r2, r3
 800809a:	d802      	bhi.n	80080a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <prvAddNewTaskToReadyList+0xbc>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080a2:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <prvAddNewTaskToReadyList+0xc4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3301      	adds	r3, #1
 80080a8:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <prvAddNewTaskToReadyList+0xc4>)
 80080aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	2201      	movs	r2, #1
 80080b2:	409a      	lsls	r2, r3
 80080b4:	4b19      	ldr	r3, [pc, #100]	; (800811c <prvAddNewTaskToReadyList+0xc8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	4a18      	ldr	r2, [pc, #96]	; (800811c <prvAddNewTaskToReadyList+0xc8>)
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4a15      	ldr	r2, [pc, #84]	; (8008120 <prvAddNewTaskToReadyList+0xcc>)
 80080cc:	441a      	add	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7ff fe10 	bl	8007cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080da:	f000 fcef 	bl	8008abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <prvAddNewTaskToReadyList+0xc0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <prvAddNewTaskToReadyList+0xbc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d207      	bcs.n	8008104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <prvAddNewTaskToReadyList+0xd0>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	2000094c 	.word	0x2000094c
 8008110:	2000084c 	.word	0x2000084c
 8008114:	20000958 	.word	0x20000958
 8008118:	20000968 	.word	0x20000968
 800811c:	20000954 	.word	0x20000954
 8008120:	20000850 	.word	0x20000850
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d017      	beq.n	800816a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <vTaskDelay+0x60>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <vTaskDelay+0x30>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60bb      	str	r3, [r7, #8]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008158:	f000 f87a 	bl	8008250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb26 	bl	80087b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008164:	f000 f882 	bl	800826c <xTaskResumeAll>
 8008168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d107      	bne.n	8008180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <vTaskDelay+0x64>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20000974 	.word	0x20000974
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800819e:	463a      	mov	r2, r7
 80081a0:	1d39      	adds	r1, r7, #4
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f9 fd04 	bl	8001bb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	9202      	str	r2, [sp, #8]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	460a      	mov	r2, r1
 80081be:	491e      	ldr	r1, [pc, #120]	; (8008238 <vTaskStartScheduler+0xa8>)
 80081c0:	481e      	ldr	r0, [pc, #120]	; (800823c <vTaskStartScheduler+0xac>)
 80081c2:	f7ff fe1e 	bl	8007e02 <xTaskCreateStatic>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <vTaskStartScheduler+0xb0>)
 80081ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <vTaskStartScheduler+0xb0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e001      	b.n	80081de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d116      	bne.n	8008212 <vTaskStartScheduler+0x82>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	613b      	str	r3, [r7, #16]
}
 80081f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <vTaskStartScheduler+0xb4>)
 80081fa:	f04f 32ff 	mov.w	r2, #4294967295
 80081fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008200:	4b11      	ldr	r3, [pc, #68]	; (8008248 <vTaskStartScheduler+0xb8>)
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <vTaskStartScheduler+0xbc>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800820c:	f000 fbb4 	bl	8008978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008210:	e00e      	b.n	8008230 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d10a      	bne.n	8008230 <vTaskStartScheduler+0xa0>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60fb      	str	r3, [r7, #12]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <vTaskStartScheduler+0x9e>
}
 8008230:	bf00      	nop
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	0800a0c4 	.word	0x0800a0c4
 800823c:	080085c9 	.word	0x080085c9
 8008240:	20000970 	.word	0x20000970
 8008244:	2000096c 	.word	0x2000096c
 8008248:	20000958 	.word	0x20000958
 800824c:	20000950 	.word	0x20000950

08008250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008254:	4b04      	ldr	r3, [pc, #16]	; (8008268 <vTaskSuspendAll+0x18>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	4a03      	ldr	r2, [pc, #12]	; (8008268 <vTaskSuspendAll+0x18>)
 800825c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800825e:	bf00      	nop
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	20000974 	.word	0x20000974

0800826c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800827a:	4b41      	ldr	r3, [pc, #260]	; (8008380 <xTaskResumeAll+0x114>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <xTaskResumeAll+0x2c>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	603b      	str	r3, [r7, #0]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008298:	f000 fbe0 	bl	8008a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800829c:	4b38      	ldr	r3, [pc, #224]	; (8008380 <xTaskResumeAll+0x114>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	4a37      	ldr	r2, [pc, #220]	; (8008380 <xTaskResumeAll+0x114>)
 80082a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a6:	4b36      	ldr	r3, [pc, #216]	; (8008380 <xTaskResumeAll+0x114>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d161      	bne.n	8008372 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082ae:	4b35      	ldr	r3, [pc, #212]	; (8008384 <xTaskResumeAll+0x118>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d05d      	beq.n	8008372 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082b6:	e02e      	b.n	8008316 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b8:	4b33      	ldr	r3, [pc, #204]	; (8008388 <xTaskResumeAll+0x11c>)
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3318      	adds	r3, #24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff fd73 	bl	8007db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fd6e 	bl	8007db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	409a      	lsls	r2, r3
 80082dc:	4b2b      	ldr	r3, [pc, #172]	; (800838c <xTaskResumeAll+0x120>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	4a2a      	ldr	r2, [pc, #168]	; (800838c <xTaskResumeAll+0x120>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a27      	ldr	r2, [pc, #156]	; (8008390 <xTaskResumeAll+0x124>)
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7ff fcfc 	bl	8007cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008306:	4b23      	ldr	r3, [pc, #140]	; (8008394 <xTaskResumeAll+0x128>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	429a      	cmp	r2, r3
 800830e:	d302      	bcc.n	8008316 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008310:	4b21      	ldr	r3, [pc, #132]	; (8008398 <xTaskResumeAll+0x12c>)
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <xTaskResumeAll+0x11c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1cc      	bne.n	80082b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008324:	f000 fa06 	bl	8008734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <xTaskResumeAll+0x130>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d010      	beq.n	8008356 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008334:	f000 f836 	bl	80083a4 <xTaskIncrementTick>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <xTaskResumeAll+0x12c>)
 8008340:	2201      	movs	r2, #1
 8008342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3b01      	subs	r3, #1
 8008348:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f1      	bne.n	8008334 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008350:	4b12      	ldr	r3, [pc, #72]	; (800839c <xTaskResumeAll+0x130>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <xTaskResumeAll+0x12c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800835e:	2301      	movs	r3, #1
 8008360:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <xTaskResumeAll+0x134>)
 8008364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008372:	f000 fba3 	bl	8008abc <vPortExitCritical>

	return xAlreadyYielded;
 8008376:	68bb      	ldr	r3, [r7, #8]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000974 	.word	0x20000974
 8008384:	2000094c 	.word	0x2000094c
 8008388:	2000090c 	.word	0x2000090c
 800838c:	20000954 	.word	0x20000954
 8008390:	20000850 	.word	0x20000850
 8008394:	2000084c 	.word	0x2000084c
 8008398:	20000960 	.word	0x20000960
 800839c:	2000095c 	.word	0x2000095c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ae:	4b4e      	ldr	r3, [pc, #312]	; (80084e8 <xTaskIncrementTick+0x144>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 808e 	bne.w	80084d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083b8:	4b4c      	ldr	r3, [pc, #304]	; (80084ec <xTaskIncrementTick+0x148>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083c0:	4a4a      	ldr	r2, [pc, #296]	; (80084ec <xTaskIncrementTick+0x148>)
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d120      	bne.n	800840e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083cc:	4b48      	ldr	r3, [pc, #288]	; (80084f0 <xTaskIncrementTick+0x14c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <xTaskIncrementTick+0x48>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	603b      	str	r3, [r7, #0]
}
 80083e8:	bf00      	nop
 80083ea:	e7fe      	b.n	80083ea <xTaskIncrementTick+0x46>
 80083ec:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <xTaskIncrementTick+0x14c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	4b40      	ldr	r3, [pc, #256]	; (80084f4 <xTaskIncrementTick+0x150>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a3e      	ldr	r2, [pc, #248]	; (80084f0 <xTaskIncrementTick+0x14c>)
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	4a3e      	ldr	r2, [pc, #248]	; (80084f4 <xTaskIncrementTick+0x150>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	4b3d      	ldr	r3, [pc, #244]	; (80084f8 <xTaskIncrementTick+0x154>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	4a3c      	ldr	r2, [pc, #240]	; (80084f8 <xTaskIncrementTick+0x154>)
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	f000 f993 	bl	8008734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800840e:	4b3b      	ldr	r3, [pc, #236]	; (80084fc <xTaskIncrementTick+0x158>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	429a      	cmp	r2, r3
 8008416:	d348      	bcc.n	80084aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008418:	4b35      	ldr	r3, [pc, #212]	; (80084f0 <xTaskIncrementTick+0x14c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	4b36      	ldr	r3, [pc, #216]	; (80084fc <xTaskIncrementTick+0x158>)
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	601a      	str	r2, [r3, #0]
					break;
 800842a:	e03e      	b.n	80084aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842c:	4b30      	ldr	r3, [pc, #192]	; (80084f0 <xTaskIncrementTick+0x14c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d203      	bcs.n	800844c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008444:	4a2d      	ldr	r2, [pc, #180]	; (80084fc <xTaskIncrementTick+0x158>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800844a:	e02e      	b.n	80084aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3304      	adds	r3, #4
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fcad 	bl	8007db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	3318      	adds	r3, #24
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fca4 	bl	8007db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	2201      	movs	r2, #1
 800846e:	409a      	lsls	r2, r3
 8008470:	4b23      	ldr	r3, [pc, #140]	; (8008500 <xTaskIncrementTick+0x15c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4313      	orrs	r3, r2
 8008476:	4a22      	ldr	r2, [pc, #136]	; (8008500 <xTaskIncrementTick+0x15c>)
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <xTaskIncrementTick+0x160>)
 8008488:	441a      	add	r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3304      	adds	r3, #4
 800848e:	4619      	mov	r1, r3
 8008490:	4610      	mov	r0, r2
 8008492:	f7ff fc32 	bl	8007cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <xTaskIncrementTick+0x164>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3b9      	bcc.n	8008418 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a8:	e7b6      	b.n	8008418 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084aa:	4b17      	ldr	r3, [pc, #92]	; (8008508 <xTaskIncrementTick+0x164>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4914      	ldr	r1, [pc, #80]	; (8008504 <xTaskIncrementTick+0x160>)
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d901      	bls.n	80084c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084c2:	2301      	movs	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084c6:	4b11      	ldr	r3, [pc, #68]	; (800850c <xTaskIncrementTick+0x168>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084ce:	2301      	movs	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e004      	b.n	80084de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <xTaskIncrementTick+0x16c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	4a0d      	ldr	r2, [pc, #52]	; (8008510 <xTaskIncrementTick+0x16c>)
 80084dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084de:	697b      	ldr	r3, [r7, #20]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20000974 	.word	0x20000974
 80084ec:	20000950 	.word	0x20000950
 80084f0:	20000904 	.word	0x20000904
 80084f4:	20000908 	.word	0x20000908
 80084f8:	20000964 	.word	0x20000964
 80084fc:	2000096c 	.word	0x2000096c
 8008500:	20000954 	.word	0x20000954
 8008504:	20000850 	.word	0x20000850
 8008508:	2000084c 	.word	0x2000084c
 800850c:	20000960 	.word	0x20000960
 8008510:	2000095c 	.word	0x2000095c

08008514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <vTaskSwitchContext+0xa0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008522:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <vTaskSwitchContext+0xa4>)
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008528:	e03f      	b.n	80085aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <vTaskSwitchContext+0xa4>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008530:	4b22      	ldr	r3, [pc, #136]	; (80085bc <vTaskSwitchContext+0xa8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	fab3 f383 	clz	r3, r3
 800853c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	f1c3 031f 	rsb	r3, r3, #31
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	491e      	ldr	r1, [pc, #120]	; (80085c0 <vTaskSwitchContext+0xac>)
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <vTaskSwitchContext+0x5c>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	607b      	str	r3, [r7, #4]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <vTaskSwitchContext+0x5a>
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4a11      	ldr	r2, [pc, #68]	; (80085c0 <vTaskSwitchContext+0xac>)
 800857c:	4413      	add	r3, r2
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3308      	adds	r3, #8
 8008592:	429a      	cmp	r2, r3
 8008594:	d104      	bne.n	80085a0 <vTaskSwitchContext+0x8c>
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	4a07      	ldr	r2, [pc, #28]	; (80085c4 <vTaskSwitchContext+0xb0>)
 80085a8:	6013      	str	r3, [r2, #0]
}
 80085aa:	bf00      	nop
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr
 80085b4:	20000974 	.word	0x20000974
 80085b8:	20000960 	.word	0x20000960
 80085bc:	20000954 	.word	0x20000954
 80085c0:	20000850 	.word	0x20000850
 80085c4:	2000084c 	.word	0x2000084c

080085c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d0:	f000 f852 	bl	8008678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <prvIdleTask+0x28>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d9f9      	bls.n	80085d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <prvIdleTask+0x2c>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085ec:	e7f0      	b.n	80085d0 <prvIdleTask+0x8>
 80085ee:	bf00      	nop
 80085f0:	20000850 	.word	0x20000850
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	e00c      	b.n	800861e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a12      	ldr	r2, [pc, #72]	; (8008658 <prvInitialiseTaskLists+0x60>)
 8008610:	4413      	add	r3, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff fb46 	bl	8007ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3301      	adds	r3, #1
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b06      	cmp	r3, #6
 8008622:	d9ef      	bls.n	8008604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008624:	480d      	ldr	r0, [pc, #52]	; (800865c <prvInitialiseTaskLists+0x64>)
 8008626:	f7ff fb3d 	bl	8007ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800862a:	480d      	ldr	r0, [pc, #52]	; (8008660 <prvInitialiseTaskLists+0x68>)
 800862c:	f7ff fb3a 	bl	8007ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008630:	480c      	ldr	r0, [pc, #48]	; (8008664 <prvInitialiseTaskLists+0x6c>)
 8008632:	f7ff fb37 	bl	8007ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008636:	480c      	ldr	r0, [pc, #48]	; (8008668 <prvInitialiseTaskLists+0x70>)
 8008638:	f7ff fb34 	bl	8007ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800863c:	480b      	ldr	r0, [pc, #44]	; (800866c <prvInitialiseTaskLists+0x74>)
 800863e:	f7ff fb31 	bl	8007ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <prvInitialiseTaskLists+0x78>)
 8008644:	4a05      	ldr	r2, [pc, #20]	; (800865c <prvInitialiseTaskLists+0x64>)
 8008646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <prvInitialiseTaskLists+0x7c>)
 800864a:	4a05      	ldr	r2, [pc, #20]	; (8008660 <prvInitialiseTaskLists+0x68>)
 800864c:	601a      	str	r2, [r3, #0]
}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000850 	.word	0x20000850
 800865c:	200008dc 	.word	0x200008dc
 8008660:	200008f0 	.word	0x200008f0
 8008664:	2000090c 	.word	0x2000090c
 8008668:	20000920 	.word	0x20000920
 800866c:	20000938 	.word	0x20000938
 8008670:	20000904 	.word	0x20000904
 8008674:	20000908 	.word	0x20000908

08008678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800867e:	e019      	b.n	80086b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008680:	f000 f9ec 	bl	8008a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008684:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <prvCheckTasksWaitingTermination+0x50>)
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fb8d 	bl	8007db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <prvCheckTasksWaitingTermination+0x54>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3b01      	subs	r3, #1
 800869c:	4a0b      	ldr	r2, [pc, #44]	; (80086cc <prvCheckTasksWaitingTermination+0x54>)
 800869e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <prvCheckTasksWaitingTermination+0x58>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <prvCheckTasksWaitingTermination+0x58>)
 80086a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086aa:	f000 fa07 	bl	8008abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f810 	bl	80086d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <prvCheckTasksWaitingTermination+0x58>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e1      	bne.n	8008680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000920 	.word	0x20000920
 80086cc:	2000094c 	.word	0x2000094c
 80086d0:	20000934 	.word	0x20000934

080086d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d108      	bne.n	80086f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fb44 	bl	8008d78 <vPortFree>
				vPortFree( pxTCB );
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fb41 	bl	8008d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086f6:	e018      	b.n	800872a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d103      	bne.n	800870a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fb38 	bl	8008d78 <vPortFree>
	}
 8008708:	e00f      	b.n	800872a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008710:	2b02      	cmp	r3, #2
 8008712:	d00a      	beq.n	800872a <prvDeleteTCB+0x56>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <prvDeleteTCB+0x54>
	}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <prvResetNextTaskUnblockTime+0x38>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvResetNextTaskUnblockTime+0x3c>)
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800874c:	e008      	b.n	8008760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874e:	4b07      	ldr	r3, [pc, #28]	; (800876c <prvResetNextTaskUnblockTime+0x38>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	4a04      	ldr	r2, [pc, #16]	; (8008770 <prvResetNextTaskUnblockTime+0x3c>)
 800875e:	6013      	str	r3, [r2, #0]
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000904 	.word	0x20000904
 8008770:	2000096c 	.word	0x2000096c

08008774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <xTaskGetSchedulerState+0x34>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008782:	2301      	movs	r3, #1
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	e008      	b.n	800879a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008788:	4b08      	ldr	r3, [pc, #32]	; (80087ac <xTaskGetSchedulerState+0x38>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d102      	bne.n	8008796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008790:	2302      	movs	r3, #2
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	e001      	b.n	800879a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008796:	2300      	movs	r3, #0
 8008798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800879a:	687b      	ldr	r3, [r7, #4]
	}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20000958 	.word	0x20000958
 80087ac:	20000974 	.word	0x20000974

080087b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087ba:	4b29      	ldr	r3, [pc, #164]	; (8008860 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087c0:	4b28      	ldr	r3, [pc, #160]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff faf2 	bl	8007db0 <uxListRemove>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	2201      	movs	r2, #1
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43da      	mvns	r2, r3
 80087e0:	4b21      	ldr	r3, [pc, #132]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4013      	ands	r3, r2
 80087e6:	4a20      	ldr	r2, [pc, #128]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d10a      	bne.n	8008808 <prvAddCurrentTaskToDelayedList+0x58>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f8:	4b1a      	ldr	r3, [pc, #104]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	481a      	ldr	r0, [pc, #104]	; (800886c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008802:	f7ff fa7a 	bl	8007cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008806:	e026      	b.n	8008856 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008810:	4b14      	ldr	r3, [pc, #80]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	429a      	cmp	r2, r3
 800881e:	d209      	bcs.n	8008834 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008820:	4b13      	ldr	r3, [pc, #76]	; (8008870 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3304      	adds	r3, #4
 800882a:	4619      	mov	r1, r3
 800882c:	4610      	mov	r0, r2
 800882e:	f7ff fa87 	bl	8007d40 <vListInsert>
}
 8008832:	e010      	b.n	8008856 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008834:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7ff fa7d 	bl	8007d40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	429a      	cmp	r2, r3
 800884e:	d202      	bcs.n	8008856 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008850:	4a09      	ldr	r2, [pc, #36]	; (8008878 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6013      	str	r3, [r2, #0]
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000950 	.word	0x20000950
 8008864:	2000084c 	.word	0x2000084c
 8008868:	20000954 	.word	0x20000954
 800886c:	20000938 	.word	0x20000938
 8008870:	20000908 	.word	0x20000908
 8008874:	20000904 	.word	0x20000904
 8008878:	2000096c 	.word	0x2000096c

0800887c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3b04      	subs	r3, #4
 800888c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3b04      	subs	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3b04      	subs	r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088ac:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <pxPortInitialiseStack+0x54>)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b14      	subs	r3, #20
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3b20      	subs	r3, #32
 80088c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088c4:	68fb      	ldr	r3, [r7, #12]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc80      	pop	{r7}
 80088ce:	4770      	bx	lr
 80088d0:	080088d5 	.word	0x080088d5

080088d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088de:	4b12      	ldr	r3, [pc, #72]	; (8008928 <prvTaskExitError+0x54>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d00a      	beq.n	80088fe <prvTaskExitError+0x2a>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60fb      	str	r3, [r7, #12]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <prvTaskExitError+0x28>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	60bb      	str	r3, [r7, #8]
}
 8008910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008912:	bf00      	nop
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0fc      	beq.n	8008914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	200000a4 	.word	0x200000a4
 800892c:	00000000 	.word	0x00000000

08008930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <pxCurrentTCBConst2>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800893a:	f380 8809 	msr	PSP, r0
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	f04e 0e0d 	orr.w	lr, lr, #13
 800894e:	4770      	bx	lr

08008950 <pxCurrentTCBConst2>:
 8008950:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008958:	4806      	ldr	r0, [pc, #24]	; (8008974 <prvPortStartFirstTask+0x1c>)
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f380 8808 	msr	MSP, r0
 8008962:	b662      	cpsie	i
 8008964:	b661      	cpsie	f
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	df00      	svc	0
 8008970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008972:	bf00      	nop
 8008974:	e000ed08 	.word	0xe000ed08

08008978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800897e:	4b32      	ldr	r3, [pc, #200]	; (8008a48 <xPortStartScheduler+0xd0>)
 8008980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	22ff      	movs	r2, #255	; 0xff
 800898e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <xPortStartScheduler+0xd4>)
 80089a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089a6:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089a8:	2207      	movs	r2, #7
 80089aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ac:	e009      	b.n	80089c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80089ae:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	4a26      	ldr	r2, [pc, #152]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ca:	2b80      	cmp	r3, #128	; 0x80
 80089cc:	d0ef      	beq.n	80089ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ce:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1c3 0307 	rsb	r3, r3, #7
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d00a      	beq.n	80089f0 <xPortStartScheduler+0x78>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	60bb      	str	r3, [r7, #8]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089f0:	4b17      	ldr	r3, [pc, #92]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	4a16      	ldr	r2, [pc, #88]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <xPortStartScheduler+0xd8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a02:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <xPortStartScheduler+0xd8>)
 8008a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a0e:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <xPortStartScheduler+0xdc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a10      	ldr	r2, [pc, #64]	; (8008a54 <xPortStartScheduler+0xdc>)
 8008a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <xPortStartScheduler+0xdc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a0d      	ldr	r2, [pc, #52]	; (8008a54 <xPortStartScheduler+0xdc>)
 8008a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a26:	f000 f8b9 	bl	8008b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <xPortStartScheduler+0xe0>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a30:	f7ff ff92 	bl	8008958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a34:	f7ff fd6e 	bl	8008514 <vTaskSwitchContext>
	prvTaskExitError();
 8008a38:	f7ff ff4c 	bl	80088d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	e000e400 	.word	0xe000e400
 8008a4c:	20000978 	.word	0x20000978
 8008a50:	2000097c 	.word	0x2000097c
 8008a54:	e000ed20 	.word	0xe000ed20
 8008a58:	200000a4 	.word	0x200000a4

08008a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	607b      	str	r3, [r7, #4]
}
 8008a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a76:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <vPortEnterCritical+0x58>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	4a0d      	ldr	r2, [pc, #52]	; (8008ab4 <vPortEnterCritical+0x58>)
 8008a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <vPortEnterCritical+0x58>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d10f      	bne.n	8008aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a88:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <vPortEnterCritical+0x5c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	603b      	str	r3, [r7, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortEnterCritical+0x4a>
	}
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	200000a4 	.word	0x200000a4
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ac2:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <vPortExitCritical+0x4c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <vPortExitCritical+0x24>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	607b      	str	r3, [r7, #4]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <vPortExitCritical+0x4c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4a08      	ldr	r2, [pc, #32]	; (8008b08 <vPortExitCritical+0x4c>)
 8008ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008aea:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <vPortExitCritical+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <vPortExitCritical+0x42>
 8008af2:	2300      	movs	r3, #0
 8008af4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr
 8008b08:	200000a4 	.word	0x200000a4
 8008b0c:	00000000 	.word	0x00000000

08008b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b10:	f3ef 8009 	mrs	r0, PSP
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <pxCurrentTCBConst>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b20:	6010      	str	r0, [r2, #0]
 8008b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b2a:	f380 8811 	msr	BASEPRI, r0
 8008b2e:	f7ff fcf1 	bl	8008514 <vTaskSwitchContext>
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f380 8811 	msr	BASEPRI, r0
 8008b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	6808      	ldr	r0, [r1, #0]
 8008b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b46:	f380 8809 	msr	PSP, r0
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	4770      	bx	lr

08008b50 <pxCurrentTCBConst>:
 8008b50:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b72:	f7ff fc17 	bl	80083a4 <xTaskIncrementTick>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <xPortSysTickHandler+0x40>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x30>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <vPortSetupTimerInterrupt+0x38>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a09      	ldr	r2, [pc, #36]	; (8008bd8 <vPortSetupTimerInterrupt+0x3c>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	4a08      	ldr	r2, [pc, #32]	; (8008bdc <vPortSetupTimerInterrupt+0x40>)
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bbe:	4b03      	ldr	r3, [pc, #12]	; (8008bcc <vPortSetupTimerInterrupt+0x30>)
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr
 8008bcc:	e000e010 	.word	0xe000e010
 8008bd0:	e000e018 	.word	0xe000e018
 8008bd4:	20000098 	.word	0x20000098
 8008bd8:	10624dd3 	.word	0x10624dd3
 8008bdc:	e000e014 	.word	0xe000e014

08008be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08a      	sub	sp, #40	; 0x28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bec:	f7ff fb30 	bl	8008250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bf0:	4b5b      	ldr	r3, [pc, #364]	; (8008d60 <pvPortMalloc+0x180>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bf8:	f000 f920 	bl	8008e3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bfc:	4b59      	ldr	r3, [pc, #356]	; (8008d64 <pvPortMalloc+0x184>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8093 	bne.w	8008d30 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01d      	beq.n	8008c4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c10:	2208      	movs	r2, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d014      	beq.n	8008c4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f023 0307 	bic.w	r3, r3, #7
 8008c28:	3308      	adds	r3, #8
 8008c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00a      	beq.n	8008c4c <pvPortMalloc+0x6c>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	617b      	str	r3, [r7, #20]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d06e      	beq.n	8008d30 <pvPortMalloc+0x150>
 8008c52:	4b45      	ldr	r3, [pc, #276]	; (8008d68 <pvPortMalloc+0x188>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d869      	bhi.n	8008d30 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c5c:	4b43      	ldr	r3, [pc, #268]	; (8008d6c <pvPortMalloc+0x18c>)
 8008c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c60:	4b42      	ldr	r3, [pc, #264]	; (8008d6c <pvPortMalloc+0x18c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c66:	e004      	b.n	8008c72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d903      	bls.n	8008c84 <pvPortMalloc+0xa4>
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f1      	bne.n	8008c68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c84:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <pvPortMalloc+0x180>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d050      	beq.n	8008d30 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2208      	movs	r2, #8
 8008c94:	4413      	add	r3, r2
 8008c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	2308      	movs	r3, #8
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d91f      	bls.n	8008cf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <pvPortMalloc+0xf8>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	613b      	str	r3, [r7, #16]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cea:	69b8      	ldr	r0, [r7, #24]
 8008cec:	f000 f908 	bl	8008f00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cf0:	4b1d      	ldr	r3, [pc, #116]	; (8008d68 <pvPortMalloc+0x188>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <pvPortMalloc+0x188>)
 8008cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cfe:	4b1a      	ldr	r3, [pc, #104]	; (8008d68 <pvPortMalloc+0x188>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <pvPortMalloc+0x190>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d203      	bcs.n	8008d12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <pvPortMalloc+0x188>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a18      	ldr	r2, [pc, #96]	; (8008d70 <pvPortMalloc+0x190>)
 8008d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <pvPortMalloc+0x184>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <pvPortMalloc+0x194>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <pvPortMalloc+0x194>)
 8008d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d30:	f7ff fa9c 	bl	800826c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <pvPortMalloc+0x174>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	60fb      	str	r3, [r7, #12]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <pvPortMalloc+0x172>
	return pvReturn;
 8008d54:	69fb      	ldr	r3, [r7, #28]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20001588 	.word	0x20001588
 8008d64:	2000159c 	.word	0x2000159c
 8008d68:	2000158c 	.word	0x2000158c
 8008d6c:	20001580 	.word	0x20001580
 8008d70:	20001590 	.word	0x20001590
 8008d74:	20001594 	.word	0x20001594

08008d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d04d      	beq.n	8008e26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	425b      	negs	r3, r3
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	4b24      	ldr	r3, [pc, #144]	; (8008e30 <vPortFree+0xb8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4013      	ands	r3, r2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10a      	bne.n	8008dbc <vPortFree+0x44>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	60fb      	str	r3, [r7, #12]
}
 8008db8:	bf00      	nop
 8008dba:	e7fe      	b.n	8008dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <vPortFree+0x62>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60bb      	str	r3, [r7, #8]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <vPortFree+0xb8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01e      	beq.n	8008e26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d11a      	bne.n	8008e26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <vPortFree+0xb8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	401a      	ands	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e00:	f7ff fa26 	bl	8008250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <vPortFree+0xbc>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <vPortFree+0xbc>)
 8008e10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f000 f874 	bl	8008f00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <vPortFree+0xc0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	4a06      	ldr	r2, [pc, #24]	; (8008e38 <vPortFree+0xc0>)
 8008e20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e22:	f7ff fa23 	bl	800826c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	2000159c 	.word	0x2000159c
 8008e34:	2000158c 	.word	0x2000158c
 8008e38:	20001598 	.word	0x20001598

08008e3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008e46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e48:	4b27      	ldr	r3, [pc, #156]	; (8008ee8 <prvHeapInit+0xac>)
 8008e4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00c      	beq.n	8008e70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3307      	adds	r3, #7
 8008e5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <prvHeapInit+0xac>)
 8008e6c:	4413      	add	r3, r2
 8008e6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e74:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <prvHeapInit+0xb0>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e7a:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <prvHeapInit+0xb0>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e88:	2208      	movs	r2, #8
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <prvHeapInit+0xb4>)
 8008e9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <prvHeapInit+0xb4>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <prvHeapInit+0xb4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <prvHeapInit+0xb4>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	4a0a      	ldr	r2, [pc, #40]	; (8008ef4 <prvHeapInit+0xb8>)
 8008eca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <prvHeapInit+0xbc>)
 8008ed2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <prvHeapInit+0xc0>)
 8008ed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008eda:	601a      	str	r2, [r3, #0]
}
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000980 	.word	0x20000980
 8008eec:	20001580 	.word	0x20001580
 8008ef0:	20001588 	.word	0x20001588
 8008ef4:	20001590 	.word	0x20001590
 8008ef8:	2000158c 	.word	0x2000158c
 8008efc:	2000159c 	.word	0x2000159c

08008f00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f08:	4b27      	ldr	r3, [pc, #156]	; (8008fa8 <prvInsertBlockIntoFreeList+0xa8>)
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	e002      	b.n	8008f14 <prvInsertBlockIntoFreeList+0x14>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d8f7      	bhi.n	8008f0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d108      	bne.n	8008f42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	441a      	add	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d118      	bne.n	8008f88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b14      	ldr	r3, [pc, #80]	; (8008fac <prvInsertBlockIntoFreeList+0xac>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d00d      	beq.n	8008f7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e008      	b.n	8008f90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <prvInsertBlockIntoFreeList+0xac>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	e003      	b.n	8008f90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d002      	beq.n	8008f9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr
 8008fa8:	20001580 	.word	0x20001580
 8008fac:	20001588 	.word	0x20001588

08008fb0 <siprintf>:
 8008fb0:	b40e      	push	{r1, r2, r3}
 8008fb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fb6:	b500      	push	{lr}
 8008fb8:	b09c      	sub	sp, #112	; 0x70
 8008fba:	ab1d      	add	r3, sp, #116	; 0x74
 8008fbc:	9002      	str	r0, [sp, #8]
 8008fbe:	9006      	str	r0, [sp, #24]
 8008fc0:	9107      	str	r1, [sp, #28]
 8008fc2:	9104      	str	r1, [sp, #16]
 8008fc4:	4808      	ldr	r0, [pc, #32]	; (8008fe8 <siprintf+0x38>)
 8008fc6:	4909      	ldr	r1, [pc, #36]	; (8008fec <siprintf+0x3c>)
 8008fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fcc:	9105      	str	r1, [sp, #20]
 8008fce:	6800      	ldr	r0, [r0, #0]
 8008fd0:	a902      	add	r1, sp, #8
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f000 f99c 	bl	8009310 <_svfiprintf_r>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	9b02      	ldr	r3, [sp, #8]
 8008fdc:	701a      	strb	r2, [r3, #0]
 8008fde:	b01c      	add	sp, #112	; 0x70
 8008fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe4:	b003      	add	sp, #12
 8008fe6:	4770      	bx	lr
 8008fe8:	200000f4 	.word	0x200000f4
 8008fec:	ffff0208 	.word	0xffff0208

08008ff0 <memset>:
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	4402      	add	r2, r0
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d100      	bne.n	8008ffa <memset+0xa>
 8008ff8:	4770      	bx	lr
 8008ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffe:	e7f9      	b.n	8008ff4 <memset+0x4>

08009000 <__errno>:
 8009000:	4b01      	ldr	r3, [pc, #4]	; (8009008 <__errno+0x8>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	200000f4 	.word	0x200000f4

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	2600      	movs	r6, #0
 8009010:	4d0c      	ldr	r5, [pc, #48]	; (8009044 <__libc_init_array+0x38>)
 8009012:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009014:	1b64      	subs	r4, r4, r5
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	f001 f81a 	bl	800a054 <_init>
 8009020:	2600      	movs	r6, #0
 8009022:	4d0a      	ldr	r5, [pc, #40]	; (800904c <__libc_init_array+0x40>)
 8009024:	4c0a      	ldr	r4, [pc, #40]	; (8009050 <__libc_init_array+0x44>)
 8009026:	1b64      	subs	r4, r4, r5
 8009028:	10a4      	asrs	r4, r4, #2
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	0800a1a0 	.word	0x0800a1a0
 8009048:	0800a1a0 	.word	0x0800a1a0
 800904c:	0800a1a0 	.word	0x0800a1a0
 8009050:	0800a1a4 	.word	0x0800a1a4

08009054 <__retarget_lock_acquire_recursive>:
 8009054:	4770      	bx	lr

08009056 <__retarget_lock_release_recursive>:
 8009056:	4770      	bx	lr

08009058 <memcpy>:
 8009058:	440a      	add	r2, r1
 800905a:	4291      	cmp	r1, r2
 800905c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009060:	d100      	bne.n	8009064 <memcpy+0xc>
 8009062:	4770      	bx	lr
 8009064:	b510      	push	{r4, lr}
 8009066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906a:	4291      	cmp	r1, r2
 800906c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009070:	d1f9      	bne.n	8009066 <memcpy+0xe>
 8009072:	bd10      	pop	{r4, pc}

08009074 <_free_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4605      	mov	r5, r0
 8009078:	2900      	cmp	r1, #0
 800907a:	d040      	beq.n	80090fe <_free_r+0x8a>
 800907c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009080:	1f0c      	subs	r4, r1, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfb8      	it	lt
 8009086:	18e4      	addlt	r4, r4, r3
 8009088:	f000 f8dc 	bl	8009244 <__malloc_lock>
 800908c:	4a1c      	ldr	r2, [pc, #112]	; (8009100 <_free_r+0x8c>)
 800908e:	6813      	ldr	r3, [r2, #0]
 8009090:	b933      	cbnz	r3, 80090a0 <_free_r+0x2c>
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	6014      	str	r4, [r2, #0]
 8009096:	4628      	mov	r0, r5
 8009098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909c:	f000 b8d8 	b.w	8009250 <__malloc_unlock>
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	d908      	bls.n	80090b6 <_free_r+0x42>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	1821      	adds	r1, r4, r0
 80090a8:	428b      	cmp	r3, r1
 80090aa:	bf01      	itttt	eq
 80090ac:	6819      	ldreq	r1, [r3, #0]
 80090ae:	685b      	ldreq	r3, [r3, #4]
 80090b0:	1809      	addeq	r1, r1, r0
 80090b2:	6021      	streq	r1, [r4, #0]
 80090b4:	e7ed      	b.n	8009092 <_free_r+0x1e>
 80090b6:	461a      	mov	r2, r3
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	b10b      	cbz	r3, 80090c0 <_free_r+0x4c>
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d9fa      	bls.n	80090b6 <_free_r+0x42>
 80090c0:	6811      	ldr	r1, [r2, #0]
 80090c2:	1850      	adds	r0, r2, r1
 80090c4:	42a0      	cmp	r0, r4
 80090c6:	d10b      	bne.n	80090e0 <_free_r+0x6c>
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	4401      	add	r1, r0
 80090cc:	1850      	adds	r0, r2, r1
 80090ce:	4283      	cmp	r3, r0
 80090d0:	6011      	str	r1, [r2, #0]
 80090d2:	d1e0      	bne.n	8009096 <_free_r+0x22>
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4408      	add	r0, r1
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	6053      	str	r3, [r2, #4]
 80090de:	e7da      	b.n	8009096 <_free_r+0x22>
 80090e0:	d902      	bls.n	80090e8 <_free_r+0x74>
 80090e2:	230c      	movs	r3, #12
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	e7d6      	b.n	8009096 <_free_r+0x22>
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	1821      	adds	r1, r4, r0
 80090ec:	428b      	cmp	r3, r1
 80090ee:	bf01      	itttt	eq
 80090f0:	6819      	ldreq	r1, [r3, #0]
 80090f2:	685b      	ldreq	r3, [r3, #4]
 80090f4:	1809      	addeq	r1, r1, r0
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6063      	str	r3, [r4, #4]
 80090fa:	6054      	str	r4, [r2, #4]
 80090fc:	e7cb      	b.n	8009096 <_free_r+0x22>
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	200016e0 	.word	0x200016e0

08009104 <sbrk_aligned>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	4e0e      	ldr	r6, [pc, #56]	; (8009140 <sbrk_aligned+0x3c>)
 8009108:	460c      	mov	r4, r1
 800910a:	6831      	ldr	r1, [r6, #0]
 800910c:	4605      	mov	r5, r0
 800910e:	b911      	cbnz	r1, 8009116 <sbrk_aligned+0x12>
 8009110:	f000 fbaa 	bl	8009868 <_sbrk_r>
 8009114:	6030      	str	r0, [r6, #0]
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 fba5 	bl	8009868 <_sbrk_r>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d00a      	beq.n	8009138 <sbrk_aligned+0x34>
 8009122:	1cc4      	adds	r4, r0, #3
 8009124:	f024 0403 	bic.w	r4, r4, #3
 8009128:	42a0      	cmp	r0, r4
 800912a:	d007      	beq.n	800913c <sbrk_aligned+0x38>
 800912c:	1a21      	subs	r1, r4, r0
 800912e:	4628      	mov	r0, r5
 8009130:	f000 fb9a 	bl	8009868 <_sbrk_r>
 8009134:	3001      	adds	r0, #1
 8009136:	d101      	bne.n	800913c <sbrk_aligned+0x38>
 8009138:	f04f 34ff 	mov.w	r4, #4294967295
 800913c:	4620      	mov	r0, r4
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	200016e4 	.word	0x200016e4

08009144 <_malloc_r>:
 8009144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009148:	1ccd      	adds	r5, r1, #3
 800914a:	f025 0503 	bic.w	r5, r5, #3
 800914e:	3508      	adds	r5, #8
 8009150:	2d0c      	cmp	r5, #12
 8009152:	bf38      	it	cc
 8009154:	250c      	movcc	r5, #12
 8009156:	2d00      	cmp	r5, #0
 8009158:	4607      	mov	r7, r0
 800915a:	db01      	blt.n	8009160 <_malloc_r+0x1c>
 800915c:	42a9      	cmp	r1, r5
 800915e:	d905      	bls.n	800916c <_malloc_r+0x28>
 8009160:	230c      	movs	r3, #12
 8009162:	2600      	movs	r6, #0
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4630      	mov	r0, r6
 8009168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009240 <_malloc_r+0xfc>
 8009170:	f000 f868 	bl	8009244 <__malloc_lock>
 8009174:	f8d8 3000 	ldr.w	r3, [r8]
 8009178:	461c      	mov	r4, r3
 800917a:	bb5c      	cbnz	r4, 80091d4 <_malloc_r+0x90>
 800917c:	4629      	mov	r1, r5
 800917e:	4638      	mov	r0, r7
 8009180:	f7ff ffc0 	bl	8009104 <sbrk_aligned>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	4604      	mov	r4, r0
 8009188:	d155      	bne.n	8009236 <_malloc_r+0xf2>
 800918a:	f8d8 4000 	ldr.w	r4, [r8]
 800918e:	4626      	mov	r6, r4
 8009190:	2e00      	cmp	r6, #0
 8009192:	d145      	bne.n	8009220 <_malloc_r+0xdc>
 8009194:	2c00      	cmp	r4, #0
 8009196:	d048      	beq.n	800922a <_malloc_r+0xe6>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	4631      	mov	r1, r6
 800919c:	4638      	mov	r0, r7
 800919e:	eb04 0903 	add.w	r9, r4, r3
 80091a2:	f000 fb61 	bl	8009868 <_sbrk_r>
 80091a6:	4581      	cmp	r9, r0
 80091a8:	d13f      	bne.n	800922a <_malloc_r+0xe6>
 80091aa:	6821      	ldr	r1, [r4, #0]
 80091ac:	4638      	mov	r0, r7
 80091ae:	1a6d      	subs	r5, r5, r1
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7ff ffa7 	bl	8009104 <sbrk_aligned>
 80091b6:	3001      	adds	r0, #1
 80091b8:	d037      	beq.n	800922a <_malloc_r+0xe6>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	442b      	add	r3, r5
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	f8d8 3000 	ldr.w	r3, [r8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d038      	beq.n	800923a <_malloc_r+0xf6>
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	42a2      	cmp	r2, r4
 80091cc:	d12b      	bne.n	8009226 <_malloc_r+0xe2>
 80091ce:	2200      	movs	r2, #0
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	e00f      	b.n	80091f4 <_malloc_r+0xb0>
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	1b52      	subs	r2, r2, r5
 80091d8:	d41f      	bmi.n	800921a <_malloc_r+0xd6>
 80091da:	2a0b      	cmp	r2, #11
 80091dc:	d917      	bls.n	800920e <_malloc_r+0xca>
 80091de:	1961      	adds	r1, r4, r5
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	6025      	str	r5, [r4, #0]
 80091e4:	bf18      	it	ne
 80091e6:	6059      	strne	r1, [r3, #4]
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	bf08      	it	eq
 80091ec:	f8c8 1000 	streq.w	r1, [r8]
 80091f0:	5162      	str	r2, [r4, r5]
 80091f2:	604b      	str	r3, [r1, #4]
 80091f4:	4638      	mov	r0, r7
 80091f6:	f104 060b 	add.w	r6, r4, #11
 80091fa:	f000 f829 	bl	8009250 <__malloc_unlock>
 80091fe:	f026 0607 	bic.w	r6, r6, #7
 8009202:	1d23      	adds	r3, r4, #4
 8009204:	1af2      	subs	r2, r6, r3
 8009206:	d0ae      	beq.n	8009166 <_malloc_r+0x22>
 8009208:	1b9b      	subs	r3, r3, r6
 800920a:	50a3      	str	r3, [r4, r2]
 800920c:	e7ab      	b.n	8009166 <_malloc_r+0x22>
 800920e:	42a3      	cmp	r3, r4
 8009210:	6862      	ldr	r2, [r4, #4]
 8009212:	d1dd      	bne.n	80091d0 <_malloc_r+0x8c>
 8009214:	f8c8 2000 	str.w	r2, [r8]
 8009218:	e7ec      	b.n	80091f4 <_malloc_r+0xb0>
 800921a:	4623      	mov	r3, r4
 800921c:	6864      	ldr	r4, [r4, #4]
 800921e:	e7ac      	b.n	800917a <_malloc_r+0x36>
 8009220:	4634      	mov	r4, r6
 8009222:	6876      	ldr	r6, [r6, #4]
 8009224:	e7b4      	b.n	8009190 <_malloc_r+0x4c>
 8009226:	4613      	mov	r3, r2
 8009228:	e7cc      	b.n	80091c4 <_malloc_r+0x80>
 800922a:	230c      	movs	r3, #12
 800922c:	4638      	mov	r0, r7
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	f000 f80e 	bl	8009250 <__malloc_unlock>
 8009234:	e797      	b.n	8009166 <_malloc_r+0x22>
 8009236:	6025      	str	r5, [r4, #0]
 8009238:	e7dc      	b.n	80091f4 <_malloc_r+0xb0>
 800923a:	605b      	str	r3, [r3, #4]
 800923c:	deff      	udf	#255	; 0xff
 800923e:	bf00      	nop
 8009240:	200016e0 	.word	0x200016e0

08009244 <__malloc_lock>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__malloc_lock+0x8>)
 8009246:	f7ff bf05 	b.w	8009054 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	200016dc 	.word	0x200016dc

08009250 <__malloc_unlock>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__malloc_unlock+0x8>)
 8009252:	f7ff bf00 	b.w	8009056 <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	200016dc 	.word	0x200016dc

0800925c <__ssputs_r>:
 800925c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009260:	461f      	mov	r7, r3
 8009262:	688e      	ldr	r6, [r1, #8]
 8009264:	4682      	mov	sl, r0
 8009266:	42be      	cmp	r6, r7
 8009268:	460c      	mov	r4, r1
 800926a:	4690      	mov	r8, r2
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	d82c      	bhi.n	80092ca <__ssputs_r+0x6e>
 8009270:	898a      	ldrh	r2, [r1, #12]
 8009272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009276:	d026      	beq.n	80092c6 <__ssputs_r+0x6a>
 8009278:	6965      	ldr	r5, [r4, #20]
 800927a:	6909      	ldr	r1, [r1, #16]
 800927c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009280:	eba3 0901 	sub.w	r9, r3, r1
 8009284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009288:	1c7b      	adds	r3, r7, #1
 800928a:	444b      	add	r3, r9
 800928c:	106d      	asrs	r5, r5, #1
 800928e:	429d      	cmp	r5, r3
 8009290:	bf38      	it	cc
 8009292:	461d      	movcc	r5, r3
 8009294:	0553      	lsls	r3, r2, #21
 8009296:	d527      	bpl.n	80092e8 <__ssputs_r+0x8c>
 8009298:	4629      	mov	r1, r5
 800929a:	f7ff ff53 	bl	8009144 <_malloc_r>
 800929e:	4606      	mov	r6, r0
 80092a0:	b360      	cbz	r0, 80092fc <__ssputs_r+0xa0>
 80092a2:	464a      	mov	r2, r9
 80092a4:	6921      	ldr	r1, [r4, #16]
 80092a6:	f7ff fed7 	bl	8009058 <memcpy>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	6126      	str	r6, [r4, #16]
 80092b8:	444e      	add	r6, r9
 80092ba:	6026      	str	r6, [r4, #0]
 80092bc:	463e      	mov	r6, r7
 80092be:	6165      	str	r5, [r4, #20]
 80092c0:	eba5 0509 	sub.w	r5, r5, r9
 80092c4:	60a5      	str	r5, [r4, #8]
 80092c6:	42be      	cmp	r6, r7
 80092c8:	d900      	bls.n	80092cc <__ssputs_r+0x70>
 80092ca:	463e      	mov	r6, r7
 80092cc:	4632      	mov	r2, r6
 80092ce:	4641      	mov	r1, r8
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	f000 faaf 	bl	8009834 <memmove>
 80092d6:	2000      	movs	r0, #0
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	1b9b      	subs	r3, r3, r6
 80092dc:	60a3      	str	r3, [r4, #8]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4433      	add	r3, r6
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e8:	462a      	mov	r2, r5
 80092ea:	f000 fadb 	bl	80098a4 <_realloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1e0      	bne.n	80092b6 <__ssputs_r+0x5a>
 80092f4:	4650      	mov	r0, sl
 80092f6:	6921      	ldr	r1, [r4, #16]
 80092f8:	f7ff febc 	bl	8009074 <_free_r>
 80092fc:	230c      	movs	r3, #12
 80092fe:	f8ca 3000 	str.w	r3, [sl]
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7e9      	b.n	80092e4 <__ssputs_r+0x88>

08009310 <_svfiprintf_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	4698      	mov	r8, r3
 8009316:	898b      	ldrh	r3, [r1, #12]
 8009318:	4607      	mov	r7, r0
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	460d      	mov	r5, r1
 800931e:	4614      	mov	r4, r2
 8009320:	b09d      	sub	sp, #116	; 0x74
 8009322:	d50e      	bpl.n	8009342 <_svfiprintf_r+0x32>
 8009324:	690b      	ldr	r3, [r1, #16]
 8009326:	b963      	cbnz	r3, 8009342 <_svfiprintf_r+0x32>
 8009328:	2140      	movs	r1, #64	; 0x40
 800932a:	f7ff ff0b 	bl	8009144 <_malloc_r>
 800932e:	6028      	str	r0, [r5, #0]
 8009330:	6128      	str	r0, [r5, #16]
 8009332:	b920      	cbnz	r0, 800933e <_svfiprintf_r+0x2e>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	e0d0      	b.n	80094e0 <_svfiprintf_r+0x1d0>
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	616b      	str	r3, [r5, #20]
 8009342:	2300      	movs	r3, #0
 8009344:	9309      	str	r3, [sp, #36]	; 0x24
 8009346:	2320      	movs	r3, #32
 8009348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800934c:	2330      	movs	r3, #48	; 0x30
 800934e:	f04f 0901 	mov.w	r9, #1
 8009352:	f8cd 800c 	str.w	r8, [sp, #12]
 8009356:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80094f8 <_svfiprintf_r+0x1e8>
 800935a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800935e:	4623      	mov	r3, r4
 8009360:	469a      	mov	sl, r3
 8009362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009366:	b10a      	cbz	r2, 800936c <_svfiprintf_r+0x5c>
 8009368:	2a25      	cmp	r2, #37	; 0x25
 800936a:	d1f9      	bne.n	8009360 <_svfiprintf_r+0x50>
 800936c:	ebba 0b04 	subs.w	fp, sl, r4
 8009370:	d00b      	beq.n	800938a <_svfiprintf_r+0x7a>
 8009372:	465b      	mov	r3, fp
 8009374:	4622      	mov	r2, r4
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ff6f 	bl	800925c <__ssputs_r>
 800937e:	3001      	adds	r0, #1
 8009380:	f000 80a9 	beq.w	80094d6 <_svfiprintf_r+0x1c6>
 8009384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009386:	445a      	add	r2, fp
 8009388:	9209      	str	r2, [sp, #36]	; 0x24
 800938a:	f89a 3000 	ldrb.w	r3, [sl]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80a1 	beq.w	80094d6 <_svfiprintf_r+0x1c6>
 8009394:	2300      	movs	r3, #0
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800939e:	f10a 0a01 	add.w	sl, sl, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	9307      	str	r3, [sp, #28]
 80093a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093aa:	931a      	str	r3, [sp, #104]	; 0x68
 80093ac:	4654      	mov	r4, sl
 80093ae:	2205      	movs	r2, #5
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	4850      	ldr	r0, [pc, #320]	; (80094f8 <_svfiprintf_r+0x1e8>)
 80093b6:	f000 fa67 	bl	8009888 <memchr>
 80093ba:	9a04      	ldr	r2, [sp, #16]
 80093bc:	b9d8      	cbnz	r0, 80093f6 <_svfiprintf_r+0xe6>
 80093be:	06d0      	lsls	r0, r2, #27
 80093c0:	bf44      	itt	mi
 80093c2:	2320      	movmi	r3, #32
 80093c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c8:	0711      	lsls	r1, r2, #28
 80093ca:	bf44      	itt	mi
 80093cc:	232b      	movmi	r3, #43	; 0x2b
 80093ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d2:	f89a 3000 	ldrb.w	r3, [sl]
 80093d6:	2b2a      	cmp	r3, #42	; 0x2a
 80093d8:	d015      	beq.n	8009406 <_svfiprintf_r+0xf6>
 80093da:	4654      	mov	r4, sl
 80093dc:	2000      	movs	r0, #0
 80093de:	f04f 0c0a 	mov.w	ip, #10
 80093e2:	9a07      	ldr	r2, [sp, #28]
 80093e4:	4621      	mov	r1, r4
 80093e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ea:	3b30      	subs	r3, #48	; 0x30
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d94d      	bls.n	800948c <_svfiprintf_r+0x17c>
 80093f0:	b1b0      	cbz	r0, 8009420 <_svfiprintf_r+0x110>
 80093f2:	9207      	str	r2, [sp, #28]
 80093f4:	e014      	b.n	8009420 <_svfiprintf_r+0x110>
 80093f6:	eba0 0308 	sub.w	r3, r0, r8
 80093fa:	fa09 f303 	lsl.w	r3, r9, r3
 80093fe:	4313      	orrs	r3, r2
 8009400:	46a2      	mov	sl, r4
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	e7d2      	b.n	80093ac <_svfiprintf_r+0x9c>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d19      	adds	r1, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9103      	str	r1, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfbb      	ittet	lt
 8009412:	425b      	neglt	r3, r3
 8009414:	f042 0202 	orrlt.w	r2, r2, #2
 8009418:	9307      	strge	r3, [sp, #28]
 800941a:	9307      	strlt	r3, [sp, #28]
 800941c:	bfb8      	it	lt
 800941e:	9204      	strlt	r2, [sp, #16]
 8009420:	7823      	ldrb	r3, [r4, #0]
 8009422:	2b2e      	cmp	r3, #46	; 0x2e
 8009424:	d10c      	bne.n	8009440 <_svfiprintf_r+0x130>
 8009426:	7863      	ldrb	r3, [r4, #1]
 8009428:	2b2a      	cmp	r3, #42	; 0x2a
 800942a:	d134      	bne.n	8009496 <_svfiprintf_r+0x186>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	3402      	adds	r4, #2
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	9203      	str	r2, [sp, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfb8      	it	lt
 800943a:	f04f 33ff 	movlt.w	r3, #4294967295
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80094fc <_svfiprintf_r+0x1ec>
 8009444:	2203      	movs	r2, #3
 8009446:	4650      	mov	r0, sl
 8009448:	7821      	ldrb	r1, [r4, #0]
 800944a:	f000 fa1d 	bl	8009888 <memchr>
 800944e:	b138      	cbz	r0, 8009460 <_svfiprintf_r+0x150>
 8009450:	2240      	movs	r2, #64	; 0x40
 8009452:	9b04      	ldr	r3, [sp, #16]
 8009454:	eba0 000a 	sub.w	r0, r0, sl
 8009458:	4082      	lsls	r2, r0
 800945a:	4313      	orrs	r3, r2
 800945c:	3401      	adds	r4, #1
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	2206      	movs	r2, #6
 8009466:	4826      	ldr	r0, [pc, #152]	; (8009500 <_svfiprintf_r+0x1f0>)
 8009468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800946c:	f000 fa0c 	bl	8009888 <memchr>
 8009470:	2800      	cmp	r0, #0
 8009472:	d038      	beq.n	80094e6 <_svfiprintf_r+0x1d6>
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <_svfiprintf_r+0x1f4>)
 8009476:	bb1b      	cbnz	r3, 80094c0 <_svfiprintf_r+0x1b0>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	3307      	adds	r3, #7
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	3308      	adds	r3, #8
 8009482:	9303      	str	r3, [sp, #12]
 8009484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009486:	4433      	add	r3, r6
 8009488:	9309      	str	r3, [sp, #36]	; 0x24
 800948a:	e768      	b.n	800935e <_svfiprintf_r+0x4e>
 800948c:	460c      	mov	r4, r1
 800948e:	2001      	movs	r0, #1
 8009490:	fb0c 3202 	mla	r2, ip, r2, r3
 8009494:	e7a6      	b.n	80093e4 <_svfiprintf_r+0xd4>
 8009496:	2300      	movs	r3, #0
 8009498:	f04f 0c0a 	mov.w	ip, #10
 800949c:	4619      	mov	r1, r3
 800949e:	3401      	adds	r4, #1
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	4620      	mov	r0, r4
 80094a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a8:	3a30      	subs	r2, #48	; 0x30
 80094aa:	2a09      	cmp	r2, #9
 80094ac:	d903      	bls.n	80094b6 <_svfiprintf_r+0x1a6>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0c6      	beq.n	8009440 <_svfiprintf_r+0x130>
 80094b2:	9105      	str	r1, [sp, #20]
 80094b4:	e7c4      	b.n	8009440 <_svfiprintf_r+0x130>
 80094b6:	4604      	mov	r4, r0
 80094b8:	2301      	movs	r3, #1
 80094ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80094be:	e7f0      	b.n	80094a2 <_svfiprintf_r+0x192>
 80094c0:	ab03      	add	r3, sp, #12
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4638      	mov	r0, r7
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <_svfiprintf_r+0x1f8>)
 80094ca:	a904      	add	r1, sp, #16
 80094cc:	f3af 8000 	nop.w
 80094d0:	1c42      	adds	r2, r0, #1
 80094d2:	4606      	mov	r6, r0
 80094d4:	d1d6      	bne.n	8009484 <_svfiprintf_r+0x174>
 80094d6:	89ab      	ldrh	r3, [r5, #12]
 80094d8:	065b      	lsls	r3, r3, #25
 80094da:	f53f af2d 	bmi.w	8009338 <_svfiprintf_r+0x28>
 80094de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e0:	b01d      	add	sp, #116	; 0x74
 80094e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e6:	ab03      	add	r3, sp, #12
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	462a      	mov	r2, r5
 80094ec:	4638      	mov	r0, r7
 80094ee:	4b06      	ldr	r3, [pc, #24]	; (8009508 <_svfiprintf_r+0x1f8>)
 80094f0:	a904      	add	r1, sp, #16
 80094f2:	f000 f87d 	bl	80095f0 <_printf_i>
 80094f6:	e7eb      	b.n	80094d0 <_svfiprintf_r+0x1c0>
 80094f8:	0800a0f6 	.word	0x0800a0f6
 80094fc:	0800a0fc 	.word	0x0800a0fc
 8009500:	0800a100 	.word	0x0800a100
 8009504:	00000000 	.word	0x00000000
 8009508:	0800925d 	.word	0x0800925d

0800950c <_printf_common>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	4616      	mov	r6, r2
 8009512:	4699      	mov	r9, r3
 8009514:	688a      	ldr	r2, [r1, #8]
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	4607      	mov	r7, r0
 800951a:	4293      	cmp	r3, r2
 800951c:	bfb8      	it	lt
 800951e:	4613      	movlt	r3, r2
 8009520:	6033      	str	r3, [r6, #0]
 8009522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009526:	460c      	mov	r4, r1
 8009528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800952c:	b10a      	cbz	r2, 8009532 <_printf_common+0x26>
 800952e:	3301      	adds	r3, #1
 8009530:	6033      	str	r3, [r6, #0]
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	0699      	lsls	r1, r3, #26
 8009536:	bf42      	ittt	mi
 8009538:	6833      	ldrmi	r3, [r6, #0]
 800953a:	3302      	addmi	r3, #2
 800953c:	6033      	strmi	r3, [r6, #0]
 800953e:	6825      	ldr	r5, [r4, #0]
 8009540:	f015 0506 	ands.w	r5, r5, #6
 8009544:	d106      	bne.n	8009554 <_printf_common+0x48>
 8009546:	f104 0a19 	add.w	sl, r4, #25
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	6832      	ldr	r2, [r6, #0]
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	42ab      	cmp	r3, r5
 8009552:	dc2b      	bgt.n	80095ac <_printf_common+0xa0>
 8009554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009558:	1e13      	subs	r3, r2, #0
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	bf18      	it	ne
 800955e:	2301      	movne	r3, #1
 8009560:	0692      	lsls	r2, r2, #26
 8009562:	d430      	bmi.n	80095c6 <_printf_common+0xba>
 8009564:	4649      	mov	r1, r9
 8009566:	4638      	mov	r0, r7
 8009568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800956c:	47c0      	blx	r8
 800956e:	3001      	adds	r0, #1
 8009570:	d023      	beq.n	80095ba <_printf_common+0xae>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	6922      	ldr	r2, [r4, #16]
 8009576:	f003 0306 	and.w	r3, r3, #6
 800957a:	2b04      	cmp	r3, #4
 800957c:	bf14      	ite	ne
 800957e:	2500      	movne	r5, #0
 8009580:	6833      	ldreq	r3, [r6, #0]
 8009582:	f04f 0600 	mov.w	r6, #0
 8009586:	bf08      	it	eq
 8009588:	68e5      	ldreq	r5, [r4, #12]
 800958a:	f104 041a 	add.w	r4, r4, #26
 800958e:	bf08      	it	eq
 8009590:	1aed      	subeq	r5, r5, r3
 8009592:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009596:	bf08      	it	eq
 8009598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800959c:	4293      	cmp	r3, r2
 800959e:	bfc4      	itt	gt
 80095a0:	1a9b      	subgt	r3, r3, r2
 80095a2:	18ed      	addgt	r5, r5, r3
 80095a4:	42b5      	cmp	r5, r6
 80095a6:	d11a      	bne.n	80095de <_printf_common+0xd2>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e008      	b.n	80095be <_printf_common+0xb2>
 80095ac:	2301      	movs	r3, #1
 80095ae:	4652      	mov	r2, sl
 80095b0:	4649      	mov	r1, r9
 80095b2:	4638      	mov	r0, r7
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d103      	bne.n	80095c2 <_printf_common+0xb6>
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295
 80095be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c2:	3501      	adds	r5, #1
 80095c4:	e7c1      	b.n	800954a <_printf_common+0x3e>
 80095c6:	2030      	movs	r0, #48	; 0x30
 80095c8:	18e1      	adds	r1, r4, r3
 80095ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095d4:	4422      	add	r2, r4
 80095d6:	3302      	adds	r3, #2
 80095d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095dc:	e7c2      	b.n	8009564 <_printf_common+0x58>
 80095de:	2301      	movs	r3, #1
 80095e0:	4622      	mov	r2, r4
 80095e2:	4649      	mov	r1, r9
 80095e4:	4638      	mov	r0, r7
 80095e6:	47c0      	blx	r8
 80095e8:	3001      	adds	r0, #1
 80095ea:	d0e6      	beq.n	80095ba <_printf_common+0xae>
 80095ec:	3601      	adds	r6, #1
 80095ee:	e7d9      	b.n	80095a4 <_printf_common+0x98>

080095f0 <_printf_i>:
 80095f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	7e0f      	ldrb	r7, [r1, #24]
 80095f6:	4691      	mov	r9, r2
 80095f8:	2f78      	cmp	r7, #120	; 0x78
 80095fa:	4680      	mov	r8, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	469a      	mov	sl, r3
 8009600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009606:	d807      	bhi.n	8009618 <_printf_i+0x28>
 8009608:	2f62      	cmp	r7, #98	; 0x62
 800960a:	d80a      	bhi.n	8009622 <_printf_i+0x32>
 800960c:	2f00      	cmp	r7, #0
 800960e:	f000 80d5 	beq.w	80097bc <_printf_i+0x1cc>
 8009612:	2f58      	cmp	r7, #88	; 0x58
 8009614:	f000 80c1 	beq.w	800979a <_printf_i+0x1aa>
 8009618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800961c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009620:	e03a      	b.n	8009698 <_printf_i+0xa8>
 8009622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009626:	2b15      	cmp	r3, #21
 8009628:	d8f6      	bhi.n	8009618 <_printf_i+0x28>
 800962a:	a101      	add	r1, pc, #4	; (adr r1, 8009630 <_printf_i+0x40>)
 800962c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009630:	08009689 	.word	0x08009689
 8009634:	0800969d 	.word	0x0800969d
 8009638:	08009619 	.word	0x08009619
 800963c:	08009619 	.word	0x08009619
 8009640:	08009619 	.word	0x08009619
 8009644:	08009619 	.word	0x08009619
 8009648:	0800969d 	.word	0x0800969d
 800964c:	08009619 	.word	0x08009619
 8009650:	08009619 	.word	0x08009619
 8009654:	08009619 	.word	0x08009619
 8009658:	08009619 	.word	0x08009619
 800965c:	080097a3 	.word	0x080097a3
 8009660:	080096c9 	.word	0x080096c9
 8009664:	0800975d 	.word	0x0800975d
 8009668:	08009619 	.word	0x08009619
 800966c:	08009619 	.word	0x08009619
 8009670:	080097c5 	.word	0x080097c5
 8009674:	08009619 	.word	0x08009619
 8009678:	080096c9 	.word	0x080096c9
 800967c:	08009619 	.word	0x08009619
 8009680:	08009619 	.word	0x08009619
 8009684:	08009765 	.word	0x08009765
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	1d1a      	adds	r2, r3, #4
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	602a      	str	r2, [r5, #0]
 8009690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009698:	2301      	movs	r3, #1
 800969a:	e0a0      	b.n	80097de <_printf_i+0x1ee>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	682b      	ldr	r3, [r5, #0]
 80096a0:	0607      	lsls	r7, r0, #24
 80096a2:	f103 0104 	add.w	r1, r3, #4
 80096a6:	6029      	str	r1, [r5, #0]
 80096a8:	d501      	bpl.n	80096ae <_printf_i+0xbe>
 80096aa:	681e      	ldr	r6, [r3, #0]
 80096ac:	e003      	b.n	80096b6 <_printf_i+0xc6>
 80096ae:	0646      	lsls	r6, r0, #25
 80096b0:	d5fb      	bpl.n	80096aa <_printf_i+0xba>
 80096b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	da03      	bge.n	80096c2 <_printf_i+0xd2>
 80096ba:	232d      	movs	r3, #45	; 0x2d
 80096bc:	4276      	negs	r6, r6
 80096be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c2:	230a      	movs	r3, #10
 80096c4:	4859      	ldr	r0, [pc, #356]	; (800982c <_printf_i+0x23c>)
 80096c6:	e012      	b.n	80096ee <_printf_i+0xfe>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	1d19      	adds	r1, r3, #4
 80096ce:	6029      	str	r1, [r5, #0]
 80096d0:	0605      	lsls	r5, r0, #24
 80096d2:	d501      	bpl.n	80096d8 <_printf_i+0xe8>
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	e002      	b.n	80096de <_printf_i+0xee>
 80096d8:	0641      	lsls	r1, r0, #25
 80096da:	d5fb      	bpl.n	80096d4 <_printf_i+0xe4>
 80096dc:	881e      	ldrh	r6, [r3, #0]
 80096de:	2f6f      	cmp	r7, #111	; 0x6f
 80096e0:	bf0c      	ite	eq
 80096e2:	2308      	moveq	r3, #8
 80096e4:	230a      	movne	r3, #10
 80096e6:	4851      	ldr	r0, [pc, #324]	; (800982c <_printf_i+0x23c>)
 80096e8:	2100      	movs	r1, #0
 80096ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ee:	6865      	ldr	r5, [r4, #4]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	bfa8      	it	ge
 80096f4:	6821      	ldrge	r1, [r4, #0]
 80096f6:	60a5      	str	r5, [r4, #8]
 80096f8:	bfa4      	itt	ge
 80096fa:	f021 0104 	bicge.w	r1, r1, #4
 80096fe:	6021      	strge	r1, [r4, #0]
 8009700:	b90e      	cbnz	r6, 8009706 <_printf_i+0x116>
 8009702:	2d00      	cmp	r5, #0
 8009704:	d04b      	beq.n	800979e <_printf_i+0x1ae>
 8009706:	4615      	mov	r5, r2
 8009708:	fbb6 f1f3 	udiv	r1, r6, r3
 800970c:	fb03 6711 	mls	r7, r3, r1, r6
 8009710:	5dc7      	ldrb	r7, [r0, r7]
 8009712:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009716:	4637      	mov	r7, r6
 8009718:	42bb      	cmp	r3, r7
 800971a:	460e      	mov	r6, r1
 800971c:	d9f4      	bls.n	8009708 <_printf_i+0x118>
 800971e:	2b08      	cmp	r3, #8
 8009720:	d10b      	bne.n	800973a <_printf_i+0x14a>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	07de      	lsls	r6, r3, #31
 8009726:	d508      	bpl.n	800973a <_printf_i+0x14a>
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	6861      	ldr	r1, [r4, #4]
 800972c:	4299      	cmp	r1, r3
 800972e:	bfde      	ittt	le
 8009730:	2330      	movle	r3, #48	; 0x30
 8009732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009736:	f105 35ff 	addle.w	r5, r5, #4294967295
 800973a:	1b52      	subs	r2, r2, r5
 800973c:	6122      	str	r2, [r4, #16]
 800973e:	464b      	mov	r3, r9
 8009740:	4621      	mov	r1, r4
 8009742:	4640      	mov	r0, r8
 8009744:	f8cd a000 	str.w	sl, [sp]
 8009748:	aa03      	add	r2, sp, #12
 800974a:	f7ff fedf 	bl	800950c <_printf_common>
 800974e:	3001      	adds	r0, #1
 8009750:	d14a      	bne.n	80097e8 <_printf_i+0x1f8>
 8009752:	f04f 30ff 	mov.w	r0, #4294967295
 8009756:	b004      	add	sp, #16
 8009758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	f043 0320 	orr.w	r3, r3, #32
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	2778      	movs	r7, #120	; 0x78
 8009766:	4832      	ldr	r0, [pc, #200]	; (8009830 <_printf_i+0x240>)
 8009768:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	6829      	ldr	r1, [r5, #0]
 8009770:	061f      	lsls	r7, r3, #24
 8009772:	f851 6b04 	ldr.w	r6, [r1], #4
 8009776:	d402      	bmi.n	800977e <_printf_i+0x18e>
 8009778:	065f      	lsls	r7, r3, #25
 800977a:	bf48      	it	mi
 800977c:	b2b6      	uxthmi	r6, r6
 800977e:	07df      	lsls	r7, r3, #31
 8009780:	bf48      	it	mi
 8009782:	f043 0320 	orrmi.w	r3, r3, #32
 8009786:	6029      	str	r1, [r5, #0]
 8009788:	bf48      	it	mi
 800978a:	6023      	strmi	r3, [r4, #0]
 800978c:	b91e      	cbnz	r6, 8009796 <_printf_i+0x1a6>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	f023 0320 	bic.w	r3, r3, #32
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	2310      	movs	r3, #16
 8009798:	e7a6      	b.n	80096e8 <_printf_i+0xf8>
 800979a:	4824      	ldr	r0, [pc, #144]	; (800982c <_printf_i+0x23c>)
 800979c:	e7e4      	b.n	8009768 <_printf_i+0x178>
 800979e:	4615      	mov	r5, r2
 80097a0:	e7bd      	b.n	800971e <_printf_i+0x12e>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	6826      	ldr	r6, [r4, #0]
 80097a6:	1d18      	adds	r0, r3, #4
 80097a8:	6961      	ldr	r1, [r4, #20]
 80097aa:	6028      	str	r0, [r5, #0]
 80097ac:	0635      	lsls	r5, r6, #24
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	d501      	bpl.n	80097b6 <_printf_i+0x1c6>
 80097b2:	6019      	str	r1, [r3, #0]
 80097b4:	e002      	b.n	80097bc <_printf_i+0x1cc>
 80097b6:	0670      	lsls	r0, r6, #25
 80097b8:	d5fb      	bpl.n	80097b2 <_printf_i+0x1c2>
 80097ba:	8019      	strh	r1, [r3, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	4615      	mov	r5, r2
 80097c0:	6123      	str	r3, [r4, #16]
 80097c2:	e7bc      	b.n	800973e <_printf_i+0x14e>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	2100      	movs	r1, #0
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	602a      	str	r2, [r5, #0]
 80097cc:	681d      	ldr	r5, [r3, #0]
 80097ce:	6862      	ldr	r2, [r4, #4]
 80097d0:	4628      	mov	r0, r5
 80097d2:	f000 f859 	bl	8009888 <memchr>
 80097d6:	b108      	cbz	r0, 80097dc <_printf_i+0x1ec>
 80097d8:	1b40      	subs	r0, r0, r5
 80097da:	6060      	str	r0, [r4, #4]
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	2300      	movs	r3, #0
 80097e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e6:	e7aa      	b.n	800973e <_printf_i+0x14e>
 80097e8:	462a      	mov	r2, r5
 80097ea:	4649      	mov	r1, r9
 80097ec:	4640      	mov	r0, r8
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	47d0      	blx	sl
 80097f2:	3001      	adds	r0, #1
 80097f4:	d0ad      	beq.n	8009752 <_printf_i+0x162>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	079b      	lsls	r3, r3, #30
 80097fa:	d413      	bmi.n	8009824 <_printf_i+0x234>
 80097fc:	68e0      	ldr	r0, [r4, #12]
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	4298      	cmp	r0, r3
 8009802:	bfb8      	it	lt
 8009804:	4618      	movlt	r0, r3
 8009806:	e7a6      	b.n	8009756 <_printf_i+0x166>
 8009808:	2301      	movs	r3, #1
 800980a:	4632      	mov	r2, r6
 800980c:	4649      	mov	r1, r9
 800980e:	4640      	mov	r0, r8
 8009810:	47d0      	blx	sl
 8009812:	3001      	adds	r0, #1
 8009814:	d09d      	beq.n	8009752 <_printf_i+0x162>
 8009816:	3501      	adds	r5, #1
 8009818:	68e3      	ldr	r3, [r4, #12]
 800981a:	9903      	ldr	r1, [sp, #12]
 800981c:	1a5b      	subs	r3, r3, r1
 800981e:	42ab      	cmp	r3, r5
 8009820:	dcf2      	bgt.n	8009808 <_printf_i+0x218>
 8009822:	e7eb      	b.n	80097fc <_printf_i+0x20c>
 8009824:	2500      	movs	r5, #0
 8009826:	f104 0619 	add.w	r6, r4, #25
 800982a:	e7f5      	b.n	8009818 <_printf_i+0x228>
 800982c:	0800a107 	.word	0x0800a107
 8009830:	0800a118 	.word	0x0800a118

08009834 <memmove>:
 8009834:	4288      	cmp	r0, r1
 8009836:	b510      	push	{r4, lr}
 8009838:	eb01 0402 	add.w	r4, r1, r2
 800983c:	d902      	bls.n	8009844 <memmove+0x10>
 800983e:	4284      	cmp	r4, r0
 8009840:	4623      	mov	r3, r4
 8009842:	d807      	bhi.n	8009854 <memmove+0x20>
 8009844:	1e43      	subs	r3, r0, #1
 8009846:	42a1      	cmp	r1, r4
 8009848:	d008      	beq.n	800985c <memmove+0x28>
 800984a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800984e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009852:	e7f8      	b.n	8009846 <memmove+0x12>
 8009854:	4601      	mov	r1, r0
 8009856:	4402      	add	r2, r0
 8009858:	428a      	cmp	r2, r1
 800985a:	d100      	bne.n	800985e <memmove+0x2a>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009866:	e7f7      	b.n	8009858 <memmove+0x24>

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	2300      	movs	r3, #0
 800986c:	4d05      	ldr	r5, [pc, #20]	; (8009884 <_sbrk_r+0x1c>)
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f9 f9a0 	bl	8002bb8 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	200016d8 	.word	0x200016d8

08009888 <memchr>:
 8009888:	4603      	mov	r3, r0
 800988a:	b510      	push	{r4, lr}
 800988c:	b2c9      	uxtb	r1, r1
 800988e:	4402      	add	r2, r0
 8009890:	4293      	cmp	r3, r2
 8009892:	4618      	mov	r0, r3
 8009894:	d101      	bne.n	800989a <memchr+0x12>
 8009896:	2000      	movs	r0, #0
 8009898:	e003      	b.n	80098a2 <memchr+0x1a>
 800989a:	7804      	ldrb	r4, [r0, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	428c      	cmp	r4, r1
 80098a0:	d1f6      	bne.n	8009890 <memchr+0x8>
 80098a2:	bd10      	pop	{r4, pc}

080098a4 <_realloc_r>:
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	4680      	mov	r8, r0
 80098aa:	4614      	mov	r4, r2
 80098ac:	460e      	mov	r6, r1
 80098ae:	b921      	cbnz	r1, 80098ba <_realloc_r+0x16>
 80098b0:	4611      	mov	r1, r2
 80098b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	f7ff bc45 	b.w	8009144 <_malloc_r>
 80098ba:	b92a      	cbnz	r2, 80098c8 <_realloc_r+0x24>
 80098bc:	f7ff fbda 	bl	8009074 <_free_r>
 80098c0:	4625      	mov	r5, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	f000 f81b 	bl	8009902 <_malloc_usable_size_r>
 80098cc:	4284      	cmp	r4, r0
 80098ce:	4607      	mov	r7, r0
 80098d0:	d802      	bhi.n	80098d8 <_realloc_r+0x34>
 80098d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d6:	d812      	bhi.n	80098fe <_realloc_r+0x5a>
 80098d8:	4621      	mov	r1, r4
 80098da:	4640      	mov	r0, r8
 80098dc:	f7ff fc32 	bl	8009144 <_malloc_r>
 80098e0:	4605      	mov	r5, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d0ed      	beq.n	80098c2 <_realloc_r+0x1e>
 80098e6:	42bc      	cmp	r4, r7
 80098e8:	4622      	mov	r2, r4
 80098ea:	4631      	mov	r1, r6
 80098ec:	bf28      	it	cs
 80098ee:	463a      	movcs	r2, r7
 80098f0:	f7ff fbb2 	bl	8009058 <memcpy>
 80098f4:	4631      	mov	r1, r6
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7ff fbbc 	bl	8009074 <_free_r>
 80098fc:	e7e1      	b.n	80098c2 <_realloc_r+0x1e>
 80098fe:	4635      	mov	r5, r6
 8009900:	e7df      	b.n	80098c2 <_realloc_r+0x1e>

08009902 <_malloc_usable_size_r>:
 8009902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009906:	1f18      	subs	r0, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbc      	itt	lt
 800990c:	580b      	ldrlt	r3, [r1, r0]
 800990e:	18c0      	addlt	r0, r0, r3
 8009910:	4770      	bx	lr

08009912 <atan2>:
 8009912:	f000 bad1 	b.w	8009eb8 <__ieee754_atan2>

08009916 <sqrt>:
 8009916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009918:	4606      	mov	r6, r0
 800991a:	460f      	mov	r7, r1
 800991c:	f000 f9ae 	bl	8009c7c <__ieee754_sqrt>
 8009920:	4632      	mov	r2, r6
 8009922:	4604      	mov	r4, r0
 8009924:	460d      	mov	r5, r1
 8009926:	463b      	mov	r3, r7
 8009928:	4630      	mov	r0, r6
 800992a:	4639      	mov	r1, r7
 800992c:	f7f7 f8de 	bl	8000aec <__aeabi_dcmpun>
 8009930:	b990      	cbnz	r0, 8009958 <sqrt+0x42>
 8009932:	2200      	movs	r2, #0
 8009934:	2300      	movs	r3, #0
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f7 f8af 	bl	8000a9c <__aeabi_dcmplt>
 800993e:	b158      	cbz	r0, 8009958 <sqrt+0x42>
 8009940:	f7ff fb5e 	bl	8009000 <__errno>
 8009944:	2321      	movs	r3, #33	; 0x21
 8009946:	2200      	movs	r2, #0
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	4610      	mov	r0, r2
 800994e:	4619      	mov	r1, r3
 8009950:	f7f6 ff5c 	bl	800080c <__aeabi_ddiv>
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009960 <atan>:
 8009960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4bb6      	ldr	r3, [pc, #728]	; (8009c40 <atan+0x2e0>)
 8009966:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800996a:	429e      	cmp	r6, r3
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	468b      	mov	fp, r1
 8009972:	dd17      	ble.n	80099a4 <atan+0x44>
 8009974:	4bb3      	ldr	r3, [pc, #716]	; (8009c44 <atan+0x2e4>)
 8009976:	429e      	cmp	r6, r3
 8009978:	dc01      	bgt.n	800997e <atan+0x1e>
 800997a:	d109      	bne.n	8009990 <atan+0x30>
 800997c:	b140      	cbz	r0, 8009990 <atan+0x30>
 800997e:	4622      	mov	r2, r4
 8009980:	462b      	mov	r3, r5
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	f7f6 fc61 	bl	800024c <__adddf3>
 800998a:	4604      	mov	r4, r0
 800998c:	460d      	mov	r5, r1
 800998e:	e005      	b.n	800999c <atan+0x3c>
 8009990:	f1bb 0f00 	cmp.w	fp, #0
 8009994:	4cac      	ldr	r4, [pc, #688]	; (8009c48 <atan+0x2e8>)
 8009996:	f300 8121 	bgt.w	8009bdc <atan+0x27c>
 800999a:	4dac      	ldr	r5, [pc, #688]	; (8009c4c <atan+0x2ec>)
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	4baa      	ldr	r3, [pc, #680]	; (8009c50 <atan+0x2f0>)
 80099a6:	429e      	cmp	r6, r3
 80099a8:	dc11      	bgt.n	80099ce <atan+0x6e>
 80099aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099ae:	429e      	cmp	r6, r3
 80099b0:	dc0a      	bgt.n	80099c8 <atan+0x68>
 80099b2:	a38b      	add	r3, pc, #556	; (adr r3, 8009be0 <atan+0x280>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fc48 	bl	800024c <__adddf3>
 80099bc:	2200      	movs	r2, #0
 80099be:	4ba5      	ldr	r3, [pc, #660]	; (8009c54 <atan+0x2f4>)
 80099c0:	f7f7 f88a 	bl	8000ad8 <__aeabi_dcmpgt>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e9      	bne.n	800999c <atan+0x3c>
 80099c8:	f04f 3aff 	mov.w	sl, #4294967295
 80099cc:	e027      	b.n	8009a1e <atan+0xbe>
 80099ce:	f000 f951 	bl	8009c74 <fabs>
 80099d2:	4ba1      	ldr	r3, [pc, #644]	; (8009c58 <atan+0x2f8>)
 80099d4:	4604      	mov	r4, r0
 80099d6:	429e      	cmp	r6, r3
 80099d8:	460d      	mov	r5, r1
 80099da:	f300 80b8 	bgt.w	8009b4e <atan+0x1ee>
 80099de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099e2:	429e      	cmp	r6, r3
 80099e4:	f300 809c 	bgt.w	8009b20 <atan+0x1c0>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	f7f6 fc2e 	bl	800024c <__adddf3>
 80099f0:	2200      	movs	r2, #0
 80099f2:	4b98      	ldr	r3, [pc, #608]	; (8009c54 <atan+0x2f4>)
 80099f4:	f7f6 fc28 	bl	8000248 <__aeabi_dsub>
 80099f8:	2200      	movs	r2, #0
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f6 fc21 	bl	800024c <__adddf3>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 fefb 	bl	800080c <__aeabi_ddiv>
 8009a16:	f04f 0a00 	mov.w	sl, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	4622      	mov	r2, r4
 8009a20:	462b      	mov	r3, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7f6 fdc7 	bl	80005b8 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4689      	mov	r9, r1
 8009a32:	f7f6 fdc1 	bl	80005b8 <__aeabi_dmul>
 8009a36:	a36c      	add	r3, pc, #432	; (adr r3, 8009be8 <atan+0x288>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	f7f6 fdba 	bl	80005b8 <__aeabi_dmul>
 8009a44:	a36a      	add	r3, pc, #424	; (adr r3, 8009bf0 <atan+0x290>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f6 fbff 	bl	800024c <__adddf3>
 8009a4e:	4632      	mov	r2, r6
 8009a50:	463b      	mov	r3, r7
 8009a52:	f7f6 fdb1 	bl	80005b8 <__aeabi_dmul>
 8009a56:	a368      	add	r3, pc, #416	; (adr r3, 8009bf8 <atan+0x298>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	f7f6 fbf6 	bl	800024c <__adddf3>
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	f7f6 fda8 	bl	80005b8 <__aeabi_dmul>
 8009a68:	a365      	add	r3, pc, #404	; (adr r3, 8009c00 <atan+0x2a0>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fbed 	bl	800024c <__adddf3>
 8009a72:	4632      	mov	r2, r6
 8009a74:	463b      	mov	r3, r7
 8009a76:	f7f6 fd9f 	bl	80005b8 <__aeabi_dmul>
 8009a7a:	a363      	add	r3, pc, #396	; (adr r3, 8009c08 <atan+0x2a8>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fbe4 	bl	800024c <__adddf3>
 8009a84:	4632      	mov	r2, r6
 8009a86:	463b      	mov	r3, r7
 8009a88:	f7f6 fd96 	bl	80005b8 <__aeabi_dmul>
 8009a8c:	a360      	add	r3, pc, #384	; (adr r3, 8009c10 <atan+0x2b0>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	f7f6 fbdb 	bl	800024c <__adddf3>
 8009a96:	4642      	mov	r2, r8
 8009a98:	464b      	mov	r3, r9
 8009a9a:	f7f6 fd8d 	bl	80005b8 <__aeabi_dmul>
 8009a9e:	a35e      	add	r3, pc, #376	; (adr r3, 8009c18 <atan+0x2b8>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	4680      	mov	r8, r0
 8009aa6:	4689      	mov	r9, r1
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f6 fd84 	bl	80005b8 <__aeabi_dmul>
 8009ab0:	a35b      	add	r3, pc, #364	; (adr r3, 8009c20 <atan+0x2c0>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fbc7 	bl	8000248 <__aeabi_dsub>
 8009aba:	4632      	mov	r2, r6
 8009abc:	463b      	mov	r3, r7
 8009abe:	f7f6 fd7b 	bl	80005b8 <__aeabi_dmul>
 8009ac2:	a359      	add	r3, pc, #356	; (adr r3, 8009c28 <atan+0x2c8>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fbbe 	bl	8000248 <__aeabi_dsub>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f6 fd72 	bl	80005b8 <__aeabi_dmul>
 8009ad4:	a356      	add	r3, pc, #344	; (adr r3, 8009c30 <atan+0x2d0>)
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f7f6 fbb5 	bl	8000248 <__aeabi_dsub>
 8009ade:	4632      	mov	r2, r6
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	f7f6 fd69 	bl	80005b8 <__aeabi_dmul>
 8009ae6:	a354      	add	r3, pc, #336	; (adr r3, 8009c38 <atan+0x2d8>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fbac 	bl	8000248 <__aeabi_dsub>
 8009af0:	4632      	mov	r2, r6
 8009af2:	463b      	mov	r3, r7
 8009af4:	f7f6 fd60 	bl	80005b8 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f6 fba4 	bl	800024c <__adddf3>
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	f7f6 fd56 	bl	80005b8 <__aeabi_dmul>
 8009b0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	d144      	bne.n	8009ba0 <atan+0x240>
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fb95 	bl	8000248 <__aeabi_dsub>
 8009b1e:	e734      	b.n	800998a <atan+0x2a>
 8009b20:	2200      	movs	r2, #0
 8009b22:	4b4c      	ldr	r3, [pc, #304]	; (8009c54 <atan+0x2f4>)
 8009b24:	f7f6 fb90 	bl	8000248 <__aeabi_dsub>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460f      	mov	r7, r1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	4b48      	ldr	r3, [pc, #288]	; (8009c54 <atan+0x2f4>)
 8009b34:	f7f6 fb8a 	bl	800024c <__adddf3>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 fe64 	bl	800080c <__aeabi_ddiv>
 8009b44:	f04f 0a01 	mov.w	sl, #1
 8009b48:	4604      	mov	r4, r0
 8009b4a:	460d      	mov	r5, r1
 8009b4c:	e767      	b.n	8009a1e <atan+0xbe>
 8009b4e:	4b43      	ldr	r3, [pc, #268]	; (8009c5c <atan+0x2fc>)
 8009b50:	429e      	cmp	r6, r3
 8009b52:	da1a      	bge.n	8009b8a <atan+0x22a>
 8009b54:	2200      	movs	r2, #0
 8009b56:	4b42      	ldr	r3, [pc, #264]	; (8009c60 <atan+0x300>)
 8009b58:	f7f6 fb76 	bl	8000248 <__aeabi_dsub>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	4620      	mov	r0, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <atan+0x300>)
 8009b68:	f7f6 fd26 	bl	80005b8 <__aeabi_dmul>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4b39      	ldr	r3, [pc, #228]	; (8009c54 <atan+0x2f4>)
 8009b70:	f7f6 fb6c 	bl	800024c <__adddf3>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fe46 	bl	800080c <__aeabi_ddiv>
 8009b80:	f04f 0a02 	mov.w	sl, #2
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	e749      	b.n	8009a1e <atan+0xbe>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	2000      	movs	r0, #0
 8009b90:	4934      	ldr	r1, [pc, #208]	; (8009c64 <atan+0x304>)
 8009b92:	f7f6 fe3b 	bl	800080c <__aeabi_ddiv>
 8009b96:	f04f 0a03 	mov.w	sl, #3
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	e73e      	b.n	8009a1e <atan+0xbe>
 8009ba0:	4b31      	ldr	r3, [pc, #196]	; (8009c68 <atan+0x308>)
 8009ba2:	4e32      	ldr	r6, [pc, #200]	; (8009c6c <atan+0x30c>)
 8009ba4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fb4c 	bl	8000248 <__aeabi_dsub>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fb48 	bl	8000248 <__aeabi_dsub>
 8009bb8:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bc4:	f7f6 fb40 	bl	8000248 <__aeabi_dsub>
 8009bc8:	f1bb 0f00 	cmp.w	fp, #0
 8009bcc:	4604      	mov	r4, r0
 8009bce:	460d      	mov	r5, r1
 8009bd0:	f6bf aee4 	bge.w	800999c <atan+0x3c>
 8009bd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bd8:	461d      	mov	r5, r3
 8009bda:	e6df      	b.n	800999c <atan+0x3c>
 8009bdc:	4d24      	ldr	r5, [pc, #144]	; (8009c70 <atan+0x310>)
 8009bde:	e6dd      	b.n	800999c <atan+0x3c>
 8009be0:	8800759c 	.word	0x8800759c
 8009be4:	7e37e43c 	.word	0x7e37e43c
 8009be8:	e322da11 	.word	0xe322da11
 8009bec:	3f90ad3a 	.word	0x3f90ad3a
 8009bf0:	24760deb 	.word	0x24760deb
 8009bf4:	3fa97b4b 	.word	0x3fa97b4b
 8009bf8:	a0d03d51 	.word	0xa0d03d51
 8009bfc:	3fb10d66 	.word	0x3fb10d66
 8009c00:	c54c206e 	.word	0xc54c206e
 8009c04:	3fb745cd 	.word	0x3fb745cd
 8009c08:	920083ff 	.word	0x920083ff
 8009c0c:	3fc24924 	.word	0x3fc24924
 8009c10:	5555550d 	.word	0x5555550d
 8009c14:	3fd55555 	.word	0x3fd55555
 8009c18:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c1c:	bfa2b444 	.word	0xbfa2b444
 8009c20:	52defd9a 	.word	0x52defd9a
 8009c24:	3fadde2d 	.word	0x3fadde2d
 8009c28:	af749a6d 	.word	0xaf749a6d
 8009c2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c30:	fe231671 	.word	0xfe231671
 8009c34:	3fbc71c6 	.word	0x3fbc71c6
 8009c38:	9998ebc4 	.word	0x9998ebc4
 8009c3c:	3fc99999 	.word	0x3fc99999
 8009c40:	440fffff 	.word	0x440fffff
 8009c44:	7ff00000 	.word	0x7ff00000
 8009c48:	54442d18 	.word	0x54442d18
 8009c4c:	bff921fb 	.word	0xbff921fb
 8009c50:	3fdbffff 	.word	0x3fdbffff
 8009c54:	3ff00000 	.word	0x3ff00000
 8009c58:	3ff2ffff 	.word	0x3ff2ffff
 8009c5c:	40038000 	.word	0x40038000
 8009c60:	3ff80000 	.word	0x3ff80000
 8009c64:	bff00000 	.word	0xbff00000
 8009c68:	0800a150 	.word	0x0800a150
 8009c6c:	0800a130 	.word	0x0800a130
 8009c70:	3ff921fb 	.word	0x3ff921fb

08009c74 <fabs>:
 8009c74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4770      	bx	lr

08009c7c <__ieee754_sqrt>:
 8009c7c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009e20 <__ieee754_sqrt+0x1a4>
 8009c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	ea3c 0c01 	bics.w	ip, ip, r1
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	460a      	mov	r2, r1
 8009c90:	4604      	mov	r4, r0
 8009c92:	d10e      	bne.n	8009cb2 <__ieee754_sqrt+0x36>
 8009c94:	4602      	mov	r2, r0
 8009c96:	f7f6 fc8f 	bl	80005b8 <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 fad3 	bl	800024c <__adddf3>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4630      	mov	r0, r6
 8009cac:	4629      	mov	r1, r5
 8009cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	dc0d      	bgt.n	8009cd2 <__ieee754_sqrt+0x56>
 8009cb6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009cba:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009cbe:	d0f4      	beq.n	8009caa <__ieee754_sqrt+0x2e>
 8009cc0:	b139      	cbz	r1, 8009cd2 <__ieee754_sqrt+0x56>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f7f6 fac0 	bl	8000248 <__aeabi_dsub>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	f7f6 fd9e 	bl	800080c <__aeabi_ddiv>
 8009cd0:	e7e9      	b.n	8009ca6 <__ieee754_sqrt+0x2a>
 8009cd2:	1512      	asrs	r2, r2, #20
 8009cd4:	f000 8089 	beq.w	8009dea <__ieee754_sqrt+0x16e>
 8009cd8:	2500      	movs	r5, #0
 8009cda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cde:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce6:	07d2      	lsls	r2, r2, #31
 8009ce8:	bf5c      	itt	pl
 8009cea:	005b      	lslpl	r3, r3, #1
 8009cec:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009cf4:	bf58      	it	pl
 8009cf6:	0064      	lslpl	r4, r4, #1
 8009cf8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009cfc:	0062      	lsls	r2, r4, #1
 8009cfe:	2016      	movs	r0, #22
 8009d00:	4629      	mov	r1, r5
 8009d02:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009d06:	1076      	asrs	r6, r6, #1
 8009d08:	190f      	adds	r7, r1, r4
 8009d0a:	429f      	cmp	r7, r3
 8009d0c:	bfde      	ittt	le
 8009d0e:	1bdb      	suble	r3, r3, r7
 8009d10:	1939      	addle	r1, r7, r4
 8009d12:	192d      	addle	r5, r5, r4
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	3801      	subs	r0, #1
 8009d18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009d1c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d24:	d1f0      	bne.n	8009d08 <__ieee754_sqrt+0x8c>
 8009d26:	4604      	mov	r4, r0
 8009d28:	2720      	movs	r7, #32
 8009d2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009d2e:	428b      	cmp	r3, r1
 8009d30:	eb0c 0e00 	add.w	lr, ip, r0
 8009d34:	dc02      	bgt.n	8009d3c <__ieee754_sqrt+0xc0>
 8009d36:	d113      	bne.n	8009d60 <__ieee754_sqrt+0xe4>
 8009d38:	4596      	cmp	lr, r2
 8009d3a:	d811      	bhi.n	8009d60 <__ieee754_sqrt+0xe4>
 8009d3c:	f1be 0f00 	cmp.w	lr, #0
 8009d40:	eb0e 000c 	add.w	r0, lr, ip
 8009d44:	da56      	bge.n	8009df4 <__ieee754_sqrt+0x178>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	db54      	blt.n	8009df4 <__ieee754_sqrt+0x178>
 8009d4a:	f101 0801 	add.w	r8, r1, #1
 8009d4e:	1a5b      	subs	r3, r3, r1
 8009d50:	4641      	mov	r1, r8
 8009d52:	4596      	cmp	lr, r2
 8009d54:	bf88      	it	hi
 8009d56:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009d5a:	eba2 020e 	sub.w	r2, r2, lr
 8009d5e:	4464      	add	r4, ip
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	3f01      	subs	r7, #1
 8009d64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009d68:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009d6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009d70:	d1dd      	bne.n	8009d2e <__ieee754_sqrt+0xb2>
 8009d72:	4313      	orrs	r3, r2
 8009d74:	d01b      	beq.n	8009dae <__ieee754_sqrt+0x132>
 8009d76:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009e24 <__ieee754_sqrt+0x1a8>
 8009d7a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009e28 <__ieee754_sqrt+0x1ac>
 8009d7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d82:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d86:	f7f6 fa5f 	bl	8000248 <__aeabi_dsub>
 8009d8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4640      	mov	r0, r8
 8009d94:	4649      	mov	r1, r9
 8009d96:	f7f6 fe8b 	bl	8000ab0 <__aeabi_dcmple>
 8009d9a:	b140      	cbz	r0, 8009dae <__ieee754_sqrt+0x132>
 8009d9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009da0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009da4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009da8:	d126      	bne.n	8009df8 <__ieee754_sqrt+0x17c>
 8009daa:	463c      	mov	r4, r7
 8009dac:	3501      	adds	r5, #1
 8009dae:	106b      	asrs	r3, r5, #1
 8009db0:	0864      	lsrs	r4, r4, #1
 8009db2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009db6:	07ea      	lsls	r2, r5, #31
 8009db8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009dbc:	bf48      	it	mi
 8009dbe:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009dc8:	e76d      	b.n	8009ca6 <__ieee754_sqrt+0x2a>
 8009dca:	0ae3      	lsrs	r3, r4, #11
 8009dcc:	3915      	subs	r1, #21
 8009dce:	0564      	lsls	r4, r4, #21
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0fa      	beq.n	8009dca <__ieee754_sqrt+0x14e>
 8009dd4:	02d8      	lsls	r0, r3, #11
 8009dd6:	d50a      	bpl.n	8009dee <__ieee754_sqrt+0x172>
 8009dd8:	f1c2 0020 	rsb	r0, r2, #32
 8009ddc:	fa24 f000 	lsr.w	r0, r4, r0
 8009de0:	1e55      	subs	r5, r2, #1
 8009de2:	4094      	lsls	r4, r2
 8009de4:	4303      	orrs	r3, r0
 8009de6:	1b4a      	subs	r2, r1, r5
 8009de8:	e776      	b.n	8009cd8 <__ieee754_sqrt+0x5c>
 8009dea:	4611      	mov	r1, r2
 8009dec:	e7f0      	b.n	8009dd0 <__ieee754_sqrt+0x154>
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	3201      	adds	r2, #1
 8009df2:	e7ef      	b.n	8009dd4 <__ieee754_sqrt+0x158>
 8009df4:	4688      	mov	r8, r1
 8009df6:	e7aa      	b.n	8009d4e <__ieee754_sqrt+0xd2>
 8009df8:	f7f6 fa28 	bl	800024c <__adddf3>
 8009dfc:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	f7f6 fe48 	bl	8000a9c <__aeabi_dcmplt>
 8009e0c:	b120      	cbz	r0, 8009e18 <__ieee754_sqrt+0x19c>
 8009e0e:	1ca1      	adds	r1, r4, #2
 8009e10:	bf08      	it	eq
 8009e12:	3501      	addeq	r5, #1
 8009e14:	3402      	adds	r4, #2
 8009e16:	e7ca      	b.n	8009dae <__ieee754_sqrt+0x132>
 8009e18:	3401      	adds	r4, #1
 8009e1a:	f024 0401 	bic.w	r4, r4, #1
 8009e1e:	e7c6      	b.n	8009dae <__ieee754_sqrt+0x132>
 8009e20:	7ff00000 	.word	0x7ff00000
 8009e24:	200000f8 	.word	0x200000f8
 8009e28:	20000100 	.word	0x20000100

08009e2c <round>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009e32:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8009e36:	2a13      	cmp	r2, #19
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	dc18      	bgt.n	8009e72 <round+0x46>
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	da09      	bge.n	8009e58 <round+0x2c>
 8009e44:	3201      	adds	r2, #1
 8009e46:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009e4a:	d103      	bne.n	8009e54 <round+0x28>
 8009e4c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e54:	2200      	movs	r2, #0
 8009e56:	e029      	b.n	8009eac <round+0x80>
 8009e58:	4816      	ldr	r0, [pc, #88]	; (8009eb4 <round+0x88>)
 8009e5a:	4110      	asrs	r0, r2
 8009e5c:	4001      	ands	r1, r0
 8009e5e:	4329      	orrs	r1, r5
 8009e60:	d011      	beq.n	8009e86 <round+0x5a>
 8009e62:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e66:	fa41 f202 	asr.w	r2, r1, r2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	ea23 0300 	bic.w	r3, r3, r0
 8009e70:	e7f0      	b.n	8009e54 <round+0x28>
 8009e72:	2a33      	cmp	r2, #51	; 0x33
 8009e74:	dd0a      	ble.n	8009e8c <round+0x60>
 8009e76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009e7a:	d104      	bne.n	8009e86 <round+0x5a>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	f7f6 f9e5 	bl	800024c <__adddf3>
 8009e82:	4605      	mov	r5, r0
 8009e84:	460c      	mov	r4, r1
 8009e86:	4628      	mov	r0, r5
 8009e88:	4621      	mov	r1, r4
 8009e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009e94:	40f8      	lsrs	r0, r7
 8009e96:	4228      	tst	r0, r5
 8009e98:	d0f5      	beq.n	8009e86 <round+0x5a>
 8009e9a:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	408a      	lsls	r2, r1
 8009ea2:	1952      	adds	r2, r2, r5
 8009ea4:	bf28      	it	cs
 8009ea6:	3301      	addcs	r3, #1
 8009ea8:	ea22 0200 	bic.w	r2, r2, r0
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	e7e7      	b.n	8009e82 <round+0x56>
 8009eb2:	bf00      	nop
 8009eb4:	000fffff 	.word	0x000fffff

08009eb8 <__ieee754_atan2>:
 8009eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	4617      	mov	r7, r2
 8009ebe:	4692      	mov	sl, r2
 8009ec0:	4699      	mov	r9, r3
 8009ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ec6:	427b      	negs	r3, r7
 8009ec8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a048 <__ieee754_atan2+0x190>
 8009ecc:	433b      	orrs	r3, r7
 8009ece:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ed2:	4543      	cmp	r3, r8
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	d809      	bhi.n	8009eee <__ieee754_atan2+0x36>
 8009eda:	4246      	negs	r6, r0
 8009edc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ee0:	4306      	orrs	r6, r0
 8009ee2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009ee6:	4546      	cmp	r6, r8
 8009ee8:	468e      	mov	lr, r1
 8009eea:	4683      	mov	fp, r0
 8009eec:	d908      	bls.n	8009f00 <__ieee754_atan2+0x48>
 8009eee:	4652      	mov	r2, sl
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7f6 f9a9 	bl	800024c <__adddf3>
 8009efa:	4604      	mov	r4, r0
 8009efc:	460d      	mov	r5, r1
 8009efe:	e019      	b.n	8009f34 <__ieee754_atan2+0x7c>
 8009f00:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8009f04:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009f08:	433e      	orrs	r6, r7
 8009f0a:	d103      	bne.n	8009f14 <__ieee754_atan2+0x5c>
 8009f0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	f7ff bd26 	b.w	8009960 <atan>
 8009f14:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009f18:	f006 0602 	and.w	r6, r6, #2
 8009f1c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009f20:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009f24:	d10a      	bne.n	8009f3c <__ieee754_atan2+0x84>
 8009f26:	2e02      	cmp	r6, #2
 8009f28:	d067      	beq.n	8009ffa <__ieee754_atan2+0x142>
 8009f2a:	2e03      	cmp	r6, #3
 8009f2c:	d102      	bne.n	8009f34 <__ieee754_atan2+0x7c>
 8009f2e:	a53a      	add	r5, pc, #232	; (adr r5, 800a018 <__ieee754_atan2+0x160>)
 8009f30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	4317      	orrs	r7, r2
 8009f3e:	d106      	bne.n	8009f4e <__ieee754_atan2+0x96>
 8009f40:	f1be 0f00 	cmp.w	lr, #0
 8009f44:	da64      	bge.n	800a010 <__ieee754_atan2+0x158>
 8009f46:	a536      	add	r5, pc, #216	; (adr r5, 800a020 <__ieee754_atan2+0x168>)
 8009f48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f4c:	e7f2      	b.n	8009f34 <__ieee754_atan2+0x7c>
 8009f4e:	4542      	cmp	r2, r8
 8009f50:	d10f      	bne.n	8009f72 <__ieee754_atan2+0xba>
 8009f52:	4293      	cmp	r3, r2
 8009f54:	f106 36ff 	add.w	r6, r6, #4294967295
 8009f58:	d107      	bne.n	8009f6a <__ieee754_atan2+0xb2>
 8009f5a:	2e02      	cmp	r6, #2
 8009f5c:	d851      	bhi.n	800a002 <__ieee754_atan2+0x14a>
 8009f5e:	4b3b      	ldr	r3, [pc, #236]	; (800a04c <__ieee754_atan2+0x194>)
 8009f60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f68:	e7e4      	b.n	8009f34 <__ieee754_atan2+0x7c>
 8009f6a:	2e02      	cmp	r6, #2
 8009f6c:	d84d      	bhi.n	800a00a <__ieee754_atan2+0x152>
 8009f6e:	4b38      	ldr	r3, [pc, #224]	; (800a050 <__ieee754_atan2+0x198>)
 8009f70:	e7f6      	b.n	8009f60 <__ieee754_atan2+0xa8>
 8009f72:	4543      	cmp	r3, r8
 8009f74:	d0e4      	beq.n	8009f40 <__ieee754_atan2+0x88>
 8009f76:	1a9b      	subs	r3, r3, r2
 8009f78:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009f7c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f80:	da21      	bge.n	8009fc6 <__ieee754_atan2+0x10e>
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	da01      	bge.n	8009f8c <__ieee754_atan2+0xd4>
 8009f88:	323c      	adds	r2, #60	; 0x3c
 8009f8a:	db20      	blt.n	8009fce <__ieee754_atan2+0x116>
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	464b      	mov	r3, r9
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 fc3a 	bl	800080c <__aeabi_ddiv>
 8009f98:	f7ff fe6c 	bl	8009c74 <fabs>
 8009f9c:	f7ff fce0 	bl	8009960 <atan>
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	2e01      	cmp	r6, #1
 8009fa6:	d015      	beq.n	8009fd4 <__ieee754_atan2+0x11c>
 8009fa8:	2e02      	cmp	r6, #2
 8009faa:	d017      	beq.n	8009fdc <__ieee754_atan2+0x124>
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	d0c1      	beq.n	8009f34 <__ieee754_atan2+0x7c>
 8009fb0:	a31d      	add	r3, pc, #116	; (adr r3, 800a028 <__ieee754_atan2+0x170>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 f945 	bl	8000248 <__aeabi_dsub>
 8009fbe:	a31c      	add	r3, pc, #112	; (adr r3, 800a030 <__ieee754_atan2+0x178>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	e016      	b.n	8009ff4 <__ieee754_atan2+0x13c>
 8009fc6:	a51c      	add	r5, pc, #112	; (adr r5, 800a038 <__ieee754_atan2+0x180>)
 8009fc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fcc:	e7ea      	b.n	8009fa4 <__ieee754_atan2+0xec>
 8009fce:	2400      	movs	r4, #0
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	e7e7      	b.n	8009fa4 <__ieee754_atan2+0xec>
 8009fd4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009fd8:	461d      	mov	r5, r3
 8009fda:	e7ab      	b.n	8009f34 <__ieee754_atan2+0x7c>
 8009fdc:	a312      	add	r3, pc, #72	; (adr r3, 800a028 <__ieee754_atan2+0x170>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 f92f 	bl	8000248 <__aeabi_dsub>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	a110      	add	r1, pc, #64	; (adr r1, 800a030 <__ieee754_atan2+0x178>)
 8009ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff4:	f7f6 f928 	bl	8000248 <__aeabi_dsub>
 8009ff8:	e77f      	b.n	8009efa <__ieee754_atan2+0x42>
 8009ffa:	a50d      	add	r5, pc, #52	; (adr r5, 800a030 <__ieee754_atan2+0x178>)
 8009ffc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a000:	e798      	b.n	8009f34 <__ieee754_atan2+0x7c>
 800a002:	a50f      	add	r5, pc, #60	; (adr r5, 800a040 <__ieee754_atan2+0x188>)
 800a004:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a008:	e794      	b.n	8009f34 <__ieee754_atan2+0x7c>
 800a00a:	2400      	movs	r4, #0
 800a00c:	2500      	movs	r5, #0
 800a00e:	e791      	b.n	8009f34 <__ieee754_atan2+0x7c>
 800a010:	a509      	add	r5, pc, #36	; (adr r5, 800a038 <__ieee754_atan2+0x180>)
 800a012:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a016:	e78d      	b.n	8009f34 <__ieee754_atan2+0x7c>
 800a018:	54442d18 	.word	0x54442d18
 800a01c:	c00921fb 	.word	0xc00921fb
 800a020:	54442d18 	.word	0x54442d18
 800a024:	bff921fb 	.word	0xbff921fb
 800a028:	33145c07 	.word	0x33145c07
 800a02c:	3ca1a626 	.word	0x3ca1a626
 800a030:	54442d18 	.word	0x54442d18
 800a034:	400921fb 	.word	0x400921fb
 800a038:	54442d18 	.word	0x54442d18
 800a03c:	3ff921fb 	.word	0x3ff921fb
 800a040:	54442d18 	.word	0x54442d18
 800a044:	3fe921fb 	.word	0x3fe921fb
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	0800a170 	.word	0x0800a170
 800a050:	0800a188 	.word	0x0800a188

0800a054 <_init>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr

0800a060 <_fini>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr
