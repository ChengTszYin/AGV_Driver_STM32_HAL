
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008738  08008738  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008738  08008738  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008738  08008738  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008740  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d4  20000108  08008848  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08008848  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f95d  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea2  00000000  00000000  0002fad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac5  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b549  00000000  00000000  00034235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141b4  00000000  00000000  0004f77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aca5  00000000  00000000  00063932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000401c  00000000  00000000  000fe5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001025f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000108 	.word	0x20000108
 800020c:	00000000 	.word	0x00000000
 8000210:	080085f4 	.word	0x080085f4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000010c 	.word	0x2000010c
 800022c:	080085f4 	.word	0x080085f4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <reverseBits>:

#ifndef INC_CRC_H_
#define INC_CRC_H_

uint8_t reverseBits(uint8_t value)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	e010      	b.n	800105a <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b25a      	sxtb	r2, r3
 800103e:	79f9      	ldrb	r1, [r7, #7]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	fa41 f303 	asr.w	r3, r1, r3
 8001046:	b25b      	sxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b25b      	sxtb	r3, r3
 8001052:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b07      	cmp	r3, #7
 800105e:	ddeb      	ble.n	8001038 <reverseBits+0x14>
	}
	return result;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	460b      	mov	r3, r1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	4613      	mov	r3, r2
 8001080:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 8001088:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800108c:	2b00      	cmp	r3, #0
 800108e:	d049      	beq.n	8001124 <crc8+0xb8>
 8001090:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001094:	2b00      	cmp	r3, #0
 8001096:	d045      	beq.n	8001124 <crc8+0xb8>
		crc = reverseBits(crc);
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffc1 	bl	8001024 <reverseBits>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffba 	bl	8001024 <reverseBits>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	e028      	b.n	800110c <crc8+0xa0>
			crc ^= data[i];
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	4413      	add	r3, r2
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c6:	4053      	eors	r3, r2
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	e016      	b.n	8001100 <crc8+0x94>
 80010d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <crc8+0x82>
 80010de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	e003      	b.n	80010f6 <crc8+0x8a>
 80010ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b07      	cmp	r3, #7
 8001104:	dde5      	ble.n	80010d2 <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	3301      	adds	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	6a3a      	ldr	r2, [r7, #32]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3d2      	bcc.n	80010ba <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8001114:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001118:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800111c:	4053      	eors	r3, r2
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e056      	b.n	80011d2 <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	e037      	b.n	800119a <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 800112a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <crc8+0xd8>
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff72 	bl	8001024 <reverseBits>
 8001140:	4603      	mov	r3, r0
 8001142:	e003      	b.n	800114c <crc8+0xe0>
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25a      	sxtb	r2, r3
 800114e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001152:	4053      	eors	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e016      	b.n	800118e <crc8+0x122>
 8001160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001164:	2b00      	cmp	r3, #0
 8001166:	da09      	bge.n	800117c <crc8+0x110>
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4053      	eors	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e003      	b.n	8001184 <crc8+0x118>
 800117c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b07      	cmp	r3, #7
 8001192:	dde5      	ble.n	8001160 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	3301      	adds	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3c3      	bcc.n	800112a <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80011a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <crc8+0x156>
 80011aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff38 	bl	8001024 <reverseBits>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011bc:	4053      	eors	r3, r2
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	e005      	b.n	80011ce <crc8+0x162>
 80011c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011ca:	4053      	eors	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 80011d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <checkCRC+0x50>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <checkCRC+0x54>)
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	9102      	str	r1, [sp, #8]
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	2231      	movs	r2, #49	; 0x31
 80011fc:	2109      	movs	r1, #9
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff34 	bl	800106c <crc8>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3309      	adds	r3, #9
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d101      	bne.n	8001216 <checkCRC+0x36>
			return 1;
 8001212:	2301      	movs	r3, #1
 8001214:	e007      	b.n	8001226 <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3309      	adds	r3, #9
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <checkCRC+0x44>
			return 0;
 8001220:	2300      	movs	r3, #0
 8001222:	e000      	b.n	8001226 <checkCRC+0x46>
		}
	else return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	20000001 	.word	0x20000001

08001238 <receiveFromBuffer>:

void receiveFromBuffer()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 800123c:	2219      	movs	r2, #25
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <receiveFromBuffer+0x18>)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <receiveFromBuffer+0x1c>)
 8001242:	f004 f8de 	bl	8005402 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <receiveFromBuffer+0x20>)
 8001248:	f000 f836 	bl	80012b8 <Parse_DMA_All>
//	HAL_Delay(500);
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000128 	.word	0x20000128
 8001254:	20000514 	.word	0x20000514
 8001258:	2000015c 	.word	0x2000015c

0800125c <send>:

void send(uint8_t crc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af04      	add	r7, sp, #16
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	if(crc)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d011      	beq.n	8001290 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <send+0x48>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <send+0x4c>)
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	2100      	movs	r1, #0
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2300      	movs	r3, #0
 800127e:	2231      	movs	r2, #49	; 0x31
 8001280:	2109      	movs	r1, #9
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <send+0x50>)
 8001284:	f7ff fef2 	bl	800106c <crc8>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <send+0x50>)
 800128e:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 8001290:	230a      	movs	r3, #10
 8001292:	220a      	movs	r2, #10
 8001294:	4905      	ldr	r1, [pc, #20]	; (80012ac <send+0x50>)
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <send+0x54>)
 8001298:	f004 f828 	bl	80052ec <HAL_UART_Transmit>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000001 	.word	0x20000001
 80012ac:	20000174 	.word	0x20000174
 80012b0:	20000514 	.word	0x20000514
 80012b4:	00000000 	.word	0x00000000

080012b8 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 812f 	bne.w	800152a <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 80012cc:	4b9e      	ldr	r3, [pc, #632]	; (8001548 <Parse_DMA_All+0x290>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 80012d4:	4b9c      	ldr	r3, [pc, #624]	; (8001548 <Parse_DMA_All+0x290>)
 80012d6:	785a      	ldrb	r2, [r3, #1]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 80012dc:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <Parse_DMA_All+0x290>)
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b98      	ldr	r3, [pc, #608]	; (8001548 <Parse_DMA_All+0x290>)
 80012e6:	78db      	ldrb	r3, [r3, #3]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 80012f0:	8afb      	ldrh	r3, [r7, #22]
 80012f2:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 80012f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db14      	blt.n	8001326 <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 80012fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fceb 	bl	8000cdc <__aeabi_i2f>
 8001306:	4603      	mov	r3, r0
 8001308:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd39 	bl	8000d84 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	498d      	ldr	r1, [pc, #564]	; (800154c <Parse_DMA_All+0x294>)
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fde8 	bl	8000eec <__aeabi_fdiv>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	e013      	b.n	800134e <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001326:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcd6 	bl	8000cdc <__aeabi_i2f>
 8001330:	4603      	mov	r3, r0
 8001332:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fd24 	bl	8000d84 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	4984      	ldr	r1, [pc, #528]	; (8001550 <Parse_DMA_All+0x298>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdd3 	bl	8000eec <__aeabi_fdiv>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 800134e:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <Parse_DMA_All+0x290>)
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <Parse_DMA_All+0x290>)
 8001358:	795b      	ldrb	r3, [r3, #5]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 8001362:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <Parse_DMA_All+0x29c>)
 8001368:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <Parse_DMA_All+0x29c>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8001374:	dd11      	ble.n	800139a <Parse_DMA_All+0xe2>
 8001376:	4b77      	ldr	r3, [pc, #476]	; (8001554 <Parse_DMA_All+0x29c>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b73      	ldr	r3, [pc, #460]	; (8001554 <Parse_DMA_All+0x29c>)
 8001386:	801a      	strh	r2, [r3, #0]
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <Parse_DMA_All+0x29c>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3b01      	subs	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <Parse_DMA_All+0x29c>)
 8001398:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <Parse_DMA_All+0x29c>)
 800139c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <Parse_DMA_All+0x290>)
 80013a6:	799a      	ldrb	r2, [r3, #6]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <Parse_DMA_All+0x290>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fc8f 	bl	8000cd4 <__aeabi_ui2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4967      	ldr	r1, [pc, #412]	; (8001558 <Parse_DMA_All+0x2a0>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fce2 	bl	8000d84 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8a0 	bl	8000508 <__aeabi_f2d>
 80013c8:	a35d      	add	r3, pc, #372	; (adr r3, 8001540 <Parse_DMA_All+0x288>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff fa1d 	bl	800080c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f006 fff7 	bl	80083cc <round>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb97 	bl	8000b18 <__aeabi_d2iz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 80013f2:	4b55      	ldr	r3, [pc, #340]	; (8001548 <Parse_DMA_All+0x290>)
 80013f4:	7a1a      	ldrb	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <Parse_DMA_All+0x2a4>)
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <Parse_DMA_All+0x2a4>)
 8001404:	785a      	ldrb	r2, [r3, #1]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 800140a:	4b54      	ldr	r3, [pc, #336]	; (800155c <Parse_DMA_All+0x2a4>)
 800140c:	789b      	ldrb	r3, [r3, #2]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b52      	ldr	r3, [pc, #328]	; (800155c <Parse_DMA_All+0x2a4>)
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 800141e:	8a3b      	ldrh	r3, [r7, #16]
 8001420:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 8001422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db14      	blt.n	8001454 <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 800142a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fc54 	bl	8000cdc <__aeabi_i2f>
 8001434:	4603      	mov	r3, r0
 8001436:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fca2 	bl	8000d84 <__aeabi_fmul>
 8001440:	4603      	mov	r3, r0
 8001442:	4942      	ldr	r1, [pc, #264]	; (800154c <Parse_DMA_All+0x294>)
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fd51 	bl	8000eec <__aeabi_fdiv>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	e013      	b.n	800147c <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001454:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc3f 	bl	8000cdc <__aeabi_i2f>
 800145e:	4603      	mov	r3, r0
 8001460:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc8d 	bl	8000d84 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	4938      	ldr	r1, [pc, #224]	; (8001550 <Parse_DMA_All+0x298>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd3c 	bl	8000eec <__aeabi_fdiv>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <Parse_DMA_All+0x2a4>)
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <Parse_DMA_All+0x2a4>)
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21b      	sxth	r3, r3
 800148e:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 8001490:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <Parse_DMA_All+0x2a8>)
 8001496:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <Parse_DMA_All+0x2a8>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014a2:	dd11      	ble.n	80014c8 <Parse_DMA_All+0x210>
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <Parse_DMA_All+0x2a8>)
 80014a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <Parse_DMA_All+0x2a8>)
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <Parse_DMA_All+0x2a8>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <Parse_DMA_All+0x2a8>)
 80014c6:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <Parse_DMA_All+0x2a8>)
 80014ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <Parse_DMA_All+0x2a4>)
 80014d4:	799a      	ldrb	r2, [r3, #6]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <Parse_DMA_All+0x2a4>)
 80014dc:	79db      	ldrb	r3, [r3, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbf8 	bl	8000cd4 <__aeabi_ui2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	491c      	ldr	r1, [pc, #112]	; (8001558 <Parse_DMA_All+0x2a0>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc4b 	bl	8000d84 <__aeabi_fmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f809 	bl	8000508 <__aeabi_f2d>
 80014f6:	a312      	add	r3, pc, #72	; (adr r3, 8001540 <Parse_DMA_All+0x288>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f986 	bl	800080c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f006 ff60 	bl	80083cc <round>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb00 	bl	8000b18 <__aeabi_d2iz>
 8001518:	4603      	mov	r3, r0
 800151a:	b21a      	sxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <Parse_DMA_All+0x2a4>)
 8001522:	7a1a      	ldrb	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 8001528:	e005      	b.n	8001536 <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	81da      	strh	r2, [r3, #14]
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	00000000 	.word	0x00000000
 8001544:	406fe000 	.word	0x406fe000
 8001548:	20000144 	.word	0x20000144
 800154c:	46fffe00 	.word	0x46fffe00
 8001550:	c6fffe00 	.word	0xc6fffe00
 8001554:	20000126 	.word	0x20000126
 8001558:	43b40000 	.word	0x43b40000
 800155c:	20000150 	.word	0x20000150
 8001560:	20000124 	.word	0x20000124

08001564 <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	460b      	mov	r3, r1
 8001570:	80bb      	strh	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800157e:	dd02      	ble.n	8001586 <setVelocity+0x22>
 8001580:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001584:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 8001586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800158a:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800158e:	da02      	bge.n	8001596 <setVelocity+0x32>
 8001590:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 8001594:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 8001596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	bfb8      	it	lt
 800159e:	425b      	neglt	r3, r3
 80015a0:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80015a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da06      	bge.n	80015b8 <setVelocity+0x54>
 80015aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <setVelocity+0x54>
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	425b      	negs	r3, r3
 80015b6:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80015b8:	8bfb      	ldrh	r3, [r7, #30]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80015c0:	8bfb      	ldrh	r3, [r7, #30]
 80015c2:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	733b      	strb	r3, [r7, #12]
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	737b      	strb	r3, [r7, #13]
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	73bb      	strb	r3, [r7, #14]
 80015d0:	7dbb      	ldrb	r3, [r7, #22]
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	2300      	movs	r3, #0
 80015d6:	743b      	strb	r3, [r7, #16]
 80015d8:	2300      	movs	r3, #0
 80015da:	747b      	strb	r3, [r7, #17]
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	74bb      	strb	r3, [r7, #18]
 80015e0:	2300      	movs	r3, #0
 80015e2:	74fb      	strb	r3, [r7, #19]
 80015e4:	2300      	movs	r3, #0
 80015e6:	753b      	strb	r3, [r7, #20]
 80015e8:	2300      	movs	r3, #0
 80015ea:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	e00c      	b.n	800160c <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 80015f2:	f107 020c 	add.w	r2, r7, #12
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4413      	add	r3, r2
 80015fa:	7819      	ldrb	r1, [r3, #0]
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <setVelocity+0xc0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4413      	add	r3, r2
 8001602:	460a      	mov	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	3301      	adds	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b09      	cmp	r3, #9
 8001610:	ddef      	ble.n	80015f2 <setVelocity+0x8e>
	}
	send(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fe22 	bl	800125c <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000174 	.word	0x20000174

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_DMA_Init+0x88>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_DMA_Init+0x88>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_DMA_Init+0x88>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	200c      	movs	r0, #12
 800164c:	f001 fb39 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001650:	200c      	movs	r0, #12
 8001652:	f001 fb52 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	200d      	movs	r0, #13
 800165c:	f001 fb31 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001660:	200d      	movs	r0, #13
 8001662:	f001 fb4a 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	200e      	movs	r0, #14
 800166c:	f001 fb29 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001670:	200e      	movs	r0, #14
 8001672:	f001 fb42 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	200f      	movs	r0, #15
 800167c:	f001 fb21 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001680:	200f      	movs	r0, #15
 8001682:	f001 fb3a 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2010      	movs	r0, #16
 800168c:	f001 fb19 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001690:	2010      	movs	r0, #16
 8001692:	f001 fb32 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	2011      	movs	r0, #17
 800169c:	f001 fb11 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80016a0:	2011      	movs	r0, #17
 80016a2:	f001 fb2a 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <checksum>:
} MotorControl;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t checksum(uint8_t* data, uint8_t len) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	e009      	b.n	80016de <checksum+0x2a>
       crc += data[i];
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4413      	add	r3, r2
 80016d6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	3301      	adds	r3, #1
 80016dc:	73bb      	strb	r3, [r7, #14]
 80016de:	7bba      	ldrb	r2, [r7, #14]
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <checksum+0x16>
    }
    return crc;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl* motors)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
 8001702:	e00b      	b.n	800171c <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	441a      	add	r2, r3
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	3318      	adds	r3, #24
 8001710:	443b      	add	r3, r7
 8001712:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	3301      	adds	r3, #1
 800171a:	75fb      	strb	r3, [r7, #23]
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d9f0      	bls.n	8001704 <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data,8);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2108      	movs	r1, #8
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ffc3 	bl	80016b4 <checksum>
 800172e:	4603      	mov	r3, r0
 8001730:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001732:	7cfb      	ldrb	r3, [r7, #19]
 8001734:	7dba      	ldrb	r2, [r7, #22]
 8001736:	429a      	cmp	r2, r3
 8001738:	d117      	bne.n	800176a <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 800173a:	7b7a      	ldrb	r2, [r7, #13]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21a      	sxth	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 8001752:	7c3a      	ldrb	r2, [r7, #16]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8001758:	7c7b      	ldrb	r3, [r7, #17]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7cbb      	ldrb	r3, [r7, #18]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21a      	sxth	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 800176a:	2204      	movs	r2, #4
 800176c:	2100      	movs	r1, #0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 ff0e 	bl	8007590 <memset>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <vApplicationGetIdleTaskMemory+0x28>)
 800178c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	2000021c 	.word	0x2000021c
 80017a8:	20000270 	.word	0x20000270

080017ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 3, &Serial_Task_Handler);
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FREERTOS_Init+0x4c>)
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2303      	movs	r3, #3
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	490f      	ldr	r1, [pc, #60]	; (80017fc <MX_FREERTOS_Init+0x50>)
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <MX_FREERTOS_Init+0x54>)
 80017c2:	f004 fe49 	bl	8006458 <xTaskCreate>
  xTaskCreate(Sensor_Task, "Sensor_Task", 128, NULL, 1,&Sensor_Task_Handler);
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_FREERTOS_Init+0x58>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <MX_FREERTOS_Init+0x5c>)
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_FREERTOS_Init+0x60>)
 80017d6:	f004 fe3f 	bl	8006458 <xTaskCreate>
  xTaskCreate(IMU_Task, "IMU_Task", 128, NULL, 2, IMU_Task_Handler);
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_FREERTOS_Init+0x64>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	490a      	ldr	r1, [pc, #40]	; (8001814 <MX_FREERTOS_Init+0x68>)
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <MX_FREERTOS_Init+0x6c>)
 80017ec:	f004 fe34 	bl	8006458 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000210 	.word	0x20000210
 80017fc:	08008610 	.word	0x08008610
 8001800:	0800194d 	.word	0x0800194d
 8001804:	20000214 	.word	0x20000214
 8001808:	08008620 	.word	0x08008620
 800180c:	080019d9 	.word	0x080019d9
 8001810:	20000218 	.word	0x20000218
 8001814:	0800862c 	.word	0x0800862c
 8001818:	080019e5 	.word	0x080019e5

0800181c <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a41      	ldr	r2, [pc, #260]	; (800192c <HAL_UART_RxCpltCallback+0x110>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d10e      	bne.n	800184a <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <HAL_UART_RxCpltCallback+0x114>)
 800182e:	4a41      	ldr	r2, [pc, #260]	; (8001934 <HAL_UART_RxCpltCallback+0x118>)
 8001830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001834:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 8001838:	493f      	ldr	r1, [pc, #252]	; (8001938 <HAL_UART_RxCpltCallback+0x11c>)
 800183a:	483d      	ldr	r0, [pc, #244]	; (8001930 <HAL_UART_RxCpltCallback+0x114>)
 800183c:	f7ff ff5a 	bl	80016f4 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001840:	2208      	movs	r2, #8
 8001842:	493c      	ldr	r1, [pc, #240]	; (8001934 <HAL_UART_RxCpltCallback+0x118>)
 8001844:	4839      	ldr	r0, [pc, #228]	; (800192c <HAL_UART_RxCpltCallback+0x110>)
 8001846:	f003 fddc 	bl	8005402 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a3b      	ldr	r2, [pc, #236]	; (800193c <HAL_UART_RxCpltCallback+0x120>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d168      	bne.n	8001924 <HAL_UART_RxCpltCallback+0x108>
	{
		short len = strlen(responseBuffer);
 8001852:	483b      	ldr	r0, [pc, #236]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 8001854:	f7fe fcec 	bl	8000230 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	847b      	strh	r3, [r7, #34]	; 0x22
		short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 800185c:	2319      	movs	r3, #25
 800185e:	843b      	strh	r3, [r7, #32]
		for(int i=0;i<arraysz;i++)
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e04f      	b.n	8001906 <HAL_UART_RxCpltCallback+0xea>
		{
			if(responseBuffer[i]==motors.LeftID)
 8001866:	4a36      	ldr	r2, [pc, #216]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	4413      	add	r3, r2
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_UART_RxCpltCallback+0x11c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d11e      	bne.n	80018b4 <HAL_UART_RxCpltCallback+0x98>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 800187a:	441a      	add	r2, r3
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	6810      	ldr	r0, [r2, #0]
 8001882:	6851      	ldr	r1, [r2, #4]
 8001884:	c303      	stmia	r3!, {r0, r1}
 8001886:	8912      	ldrh	r2, [r2, #8]
 8001888:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fca6 	bl	80011e0 <checkCRC>
 8001894:	4603      	mov	r3, r0
 8001896:	77bb      	strb	r3, [r7, #30]
				if(checking)
 8001898:	7fbb      	ldrb	r3, [r7, #30]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d030      	beq.n	8001900 <HAL_UART_RxCpltCallback+0xe4>
				{
					memcpy(responseBufferL, &responseBuffer[i], 10);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 80018a2:	441a      	add	r2, r3
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_UART_RxCpltCallback+0x128>)
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	6851      	ldr	r1, [r2, #4]
 80018aa:	6018      	str	r0, [r3, #0]
 80018ac:	6059      	str	r1, [r3, #4]
 80018ae:	8912      	ldrh	r2, [r2, #8]
 80018b0:	811a      	strh	r2, [r3, #8]
 80018b2:	e025      	b.n	8001900 <HAL_UART_RxCpltCallback+0xe4>
				}
			}
			else if(responseBuffer[i]==motors.RightID)
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_UART_RxCpltCallback+0x11c>)
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d11d      	bne.n	8001900 <HAL_UART_RxCpltCallback+0xe4>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 80018c8:	441a      	add	r2, r3
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	6851      	ldr	r1, [r2, #4]
 80018d2:	c303      	stmia	r3!, {r0, r1}
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fc7f 	bl	80011e0 <checkCRC>
 80018e2:	4603      	mov	r3, r0
 80018e4:	77fb      	strb	r3, [r7, #31]
				if(checking)
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_UART_RxCpltCallback+0xe4>
				{
					memcpy(responseBufferH, &responseBuffer[i], 10);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 80018f0:	441a      	add	r2, r3
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_UART_RxCpltCallback+0x12c>)
 80018f4:	6810      	ldr	r0, [r2, #0]
 80018f6:	6851      	ldr	r1, [r2, #4]
 80018f8:	6018      	str	r0, [r3, #0]
 80018fa:	6059      	str	r1, [r3, #4]
 80018fc:	8912      	ldrh	r2, [r2, #8]
 80018fe:	811a      	strh	r2, [r3, #8]
		for(int i=0;i<arraysz;i++)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3301      	adds	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	429a      	cmp	r2, r3
 800190e:	dbaa      	blt.n	8001866 <HAL_UART_RxCpltCallback+0x4a>
				}
			}
		}
		memset(responseBuffer, 0, sizeof(responseBuffer));
 8001910:	2219      	movs	r2, #25
 8001912:	2100      	movs	r1, #0
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 8001916:	f005 fe3b 	bl	8007590 <memset>
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 800191a:	2219      	movs	r2, #25
 800191c:	4908      	ldr	r1, [pc, #32]	; (8001940 <HAL_UART_RxCpltCallback+0x124>)
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <HAL_UART_RxCpltCallback+0x120>)
 8001920:	f003 fd6f 	bl	8005402 <HAL_UART_Receive_DMA>
	}
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200004cc 	.word	0x200004cc
 8001930:	20000180 	.word	0x20000180
 8001934:	20000188 	.word	0x20000188
 8001938:	20000190 	.word	0x20000190
 800193c:	20000514 	.word	0x20000514
 8001940:	20000128 	.word	0x20000128
 8001944:	20000150 	.word	0x20000150
 8001948:	20000144 	.word	0x20000144

0800194c <Serial_Task>:

void Serial_Task(void *argument)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001954:	2208      	movs	r2, #8
 8001956:	4919      	ldr	r1, [pc, #100]	; (80019bc <Serial_Task+0x70>)
 8001958:	4819      	ldr	r0, [pc, #100]	; (80019c0 <Serial_Task+0x74>)
 800195a:	f003 fd52 	bl	8005402 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 800195e:	2219      	movs	r2, #25
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <Serial_Task+0x78>)
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <Serial_Task+0x7c>)
 8001964:	f003 fd4d 	bl	8005402 <HAL_UART_Receive_DMA>
	while(1)
	{
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <Serial_Task+0x80>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <Serial_Task+0x80>)
 8001970:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff fdf4 	bl	8001564 <setVelocity>
	  vTaskDelay(L_R_delay);
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <Serial_Task+0x84>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f004 fe9f 	bl	80066c4 <vTaskDelay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <Serial_Task+0x80>)
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	4618      	mov	r0, r3
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <Serial_Task+0x80>)
 800198e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff fde5 	bl	8001564 <setVelocity>
	  receiveFromBuffer();
 800199a:	f7ff fc4d 	bl	8001238 <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor, 0);
 800199e:	2100      	movs	r1, #0
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <Serial_Task+0x88>)
 80019a2:	f7ff fc89 	bl	80012b8 <Parse_DMA_All>

	  HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 80019a6:	2219      	movs	r2, #25
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <Serial_Task+0x78>)
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <Serial_Task+0x7c>)
 80019ac:	f003 fd29 	bl	8005402 <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 80019b0:	2208      	movs	r2, #8
 80019b2:	4902      	ldr	r1, [pc, #8]	; (80019bc <Serial_Task+0x70>)
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <Serial_Task+0x74>)
 80019b6:	f003 fd24 	bl	8005402 <HAL_UART_Receive_DMA>
	{
 80019ba:	e7d5      	b.n	8001968 <Serial_Task+0x1c>
 80019bc:	20000188 	.word	0x20000188
 80019c0:	200004cc 	.word	0x200004cc
 80019c4:	20000128 	.word	0x20000128
 80019c8:	20000514 	.word	0x20000514
 80019cc:	20000190 	.word	0x20000190
 80019d0:	20000004 	.word	0x20000004
 80019d4:	2000015c 	.word	0x2000015c

080019d8 <Sensor_Task>:
	}
}

void Sensor_Task(void *argument)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	while(1)
 80019e0:	e7fe      	b.n	80019e0 <Sensor_Task+0x8>
	...

080019e4 <IMU_Task>:

	}
}

void IMU_Task(void *argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(500);
 80019ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (MPU6050_Init(&hi2c1) == 1)
 80019f2:	e010      	b.n	8001a16 <IMU_Task+0x32>
	{
	  uint8_t message[30];
	  sprintf(message,"Device not found. Retry...\n");
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4917      	ldr	r1, [pc, #92]	; (8001a58 <IMU_Task+0x74>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fda8 	bl	8007550 <siprintf>
	  HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
 8001a00:	f107 011c 	add.w	r1, r7, #28
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	221e      	movs	r2, #30
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <IMU_Task+0x78>)
 8001a0c:	f003 fc6e 	bl	80052ec <HAL_UART_Transmit>
	  vTaskDelay(tick_delay);
 8001a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a12:	f004 fe57 	bl	80066c4 <vTaskDelay>
	while (MPU6050_Init(&hi2c1) == 1)
 8001a16:	4812      	ldr	r0, [pc, #72]	; (8001a60 <IMU_Task+0x7c>)
 8001a18:	f000 f923 	bl	8001c62 <MPU6050_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d0e8      	beq.n	80019f4 <IMU_Task+0x10>
	};
	while(1)
	{
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001a22:	4910      	ldr	r1, [pc, #64]	; (8001a64 <IMU_Task+0x80>)
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <IMU_Task+0x7c>)
 8001a26:	f000 f973 	bl	8001d10 <MPU6050_Read_All>
		uint8_t str[20];
		sprintf(str, "speed: %d\n", MPU6050.Accel_X_RAW);
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <IMU_Task+0x80>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <IMU_Task+0x84>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 fd89 	bl	8007550 <siprintf>
		HAL_UART_Transmit(&huart3, str, sizeof(str), HAL_MAX_DELAY);
 8001a3e:	f107 0108 	add.w	r1, r7, #8
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	2214      	movs	r2, #20
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <IMU_Task+0x78>)
 8001a4a:	f003 fc4f 	bl	80052ec <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8001a4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a50:	f004 fe38 	bl	80066c4 <vTaskDelay>
	{
 8001a54:	e7e5      	b.n	8001a22 <IMU_Task+0x3e>
 8001a56:	bf00      	nop
 8001a58:	08008638 	.word	0x08008638
 8001a5c:	2000055c 	.word	0x2000055c
 8001a60:	20000470 	.word	0x20000470
 8001a64:	20000198 	.word	0x20000198
 8001a68:	08008654 	.word	0x08008654

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <MX_GPIO_Init+0x58>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <MX_I2C1_Init+0x54>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_I2C1_Init+0x58>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_I2C1_Init+0x50>)
 8001b06:	f001 ff2b 	bl	8003960 <HAL_I2C_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b10:	f000 f8a2 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000470 	.word	0x20000470
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	00061a80 	.word	0x00061a80

08001b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_I2C_MspInit+0x70>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d123      	bne.n	8001b8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <HAL_I2C_MspInit+0x78>)
 8001b70:	f001 fd62 	bl	8003638 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7e:	61d3      	str	r3, [r2, #28]
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_I2C_MspInit+0x74>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba4:	f000 ff54 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba8:	f000 f811 	bl	8001bce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bac:	f7ff ff5e 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bb0:	f7ff fd3a 	bl	8001628 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001bb4:	f000 fcce 	bl	8002554 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001bb8:	f000 fcf6 	bl	80025a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001bbc:	f000 fd1e 	bl	80025fc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001bc0:	f7ff ff82 	bl	8001ac8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001bc4:	f7ff fdf2 	bl	80017ac <MX_FREERTOS_Init>

  /* Start scheduler */
//  osKernelStart();
  vTaskStartScheduler();
 8001bc8:	f004 fdb0 	bl	800672c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <main+0x2c>

08001bce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b090      	sub	sp, #64	; 0x40
 8001bd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	2228      	movs	r2, #40	; 0x28
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f005 fcd7 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c02:	2302      	movs	r3, #2
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 ff08 	bl	8004a2c <HAL_RCC_OscConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c22:	f000 f819 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f975 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c4c:	f000 f804 	bl	8001c58 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3740      	adds	r7, #64	; 0x40
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>

08001c62 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af04      	add	r7, sp, #16
 8001c68:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001c6a:	2364      	movs	r3, #100	; 0x64
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f107 030f 	add.w	r3, r7, #15
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2275      	movs	r2, #117	; 0x75
 8001c7c:	21d0      	movs	r1, #208	; 0xd0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f002 f8ac 	bl	8003ddc <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b68      	cmp	r3, #104	; 0x68
 8001c88:	d13d      	bne.n	8001d06 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f107 030e 	add.w	r3, r7, #14
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	226b      	movs	r2, #107	; 0x6b
 8001ca0:	21d0      	movs	r1, #208	; 0xd0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 ffa0 	bl	8003be8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001ca8:	2307      	movs	r3, #7
 8001caa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001cac:	2364      	movs	r3, #100	; 0x64
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	f107 030e 	add.w	r3, r7, #14
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2219      	movs	r2, #25
 8001cbe:	21d0      	movs	r1, #208	; 0xd0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 ff91 	bl	8003be8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f107 030e 	add.w	r3, r7, #14
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	221c      	movs	r2, #28
 8001cdc:	21d0      	movs	r1, #208	; 0xd0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f001 ff82 	bl	8003be8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8001ce4:	2318      	movs	r3, #24
 8001ce6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ce8:	2364      	movs	r3, #100	; 0x64
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2301      	movs	r3, #1
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	f107 030e 	add.w	r3, r7, #14
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	221b      	movs	r2, #27
 8001cfa:	21d0      	movs	r1, #208	; 0xd0
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f001 ff73 	bl	8003be8 <HAL_I2C_Mem_Write>
        return 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <MPU6050_Init+0xa6>
    }
    return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b094      	sub	sp, #80	; 0x50
 8001d16:	af04      	add	r7, sp, #16
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	230e      	movs	r3, #14
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	223b      	movs	r2, #59	; 0x3b
 8001d2e:	21d0      	movs	r1, #208	; 0xd0
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f002 f853 	bl	8003ddc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001d36:	7a3b      	ldrb	r3, [r7, #8]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	7a7b      	ldrb	r3, [r7, #9]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001d7a:	7c3b      	ldrb	r3, [r7, #16]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	7c7b      	ldrb	r3, [r7, #17]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001d8c:	7cbb      	ldrb	r3, [r7, #18]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001d9e:	7d3b      	ldrb	r3, [r7, #20]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	7d7b      	ldrb	r3, [r7, #21]
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb94 	bl	80004e4 <__aeabi_i2d>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b95      	ldr	r3, [pc, #596]	; (8002018 <MPU6050_Read_All+0x308>)
 8001dc2:	f7fe fd23 	bl	800080c <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb84 	bl	80004e4 <__aeabi_i2d>
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <MPU6050_Read_All+0x308>)
 8001de2:	f7fe fd13 	bl	800080c <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	6839      	ldr	r1, [r7, #0]
 8001dec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb74 	bl	80004e4 <__aeabi_i2d>
 8001dfc:	a380      	add	r3, pc, #512	; (adr r3, 8002000 <MPU6050_Read_All+0x2f0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fd03 	bl	800080c <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001e10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff61 	bl	8000cdc <__aeabi_i2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	497f      	ldr	r1, [pc, #508]	; (800201c <MPU6050_Read_All+0x30c>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f864 	bl	8000eec <__aeabi_fdiv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	497e      	ldr	r1, [pc, #504]	; (8002020 <MPU6050_Read_All+0x310>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fea3 	bl	8000b74 <__addsf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb51 	bl	80004e4 <__aeabi_i2d>
 8001e42:	a371      	add	r3, pc, #452	; (adr r3, 8002008 <MPU6050_Read_All+0x2f8>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fce0 	bl	800080c <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb41 	bl	80004e4 <__aeabi_i2d>
 8001e62:	a369      	add	r3, pc, #420	; (adr r3, 8002008 <MPU6050_Read_All+0x2f8>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fcd0 	bl	800080c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb31 	bl	80004e4 <__aeabi_i2d>
 8001e82:	a361      	add	r3, pc, #388	; (adr r3, 8002008 <MPU6050_Read_All+0x2f8>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fcc0 	bl	800080c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001e96:	f000 fe33 	bl	8002b00 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <MPU6050_Read_All+0x314>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb0e 	bl	80004c4 <__aeabi_ui2d>
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <MPU6050_Read_All+0x318>)
 8001eae:	f7fe fcad 	bl	800080c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001eba:	f000 fe21 	bl	8002b00 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <MPU6050_Read_All+0x314>)
 8001ec2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed2:	fb03 f202 	mul.w	r2, r3, r2
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001edc:	4619      	mov	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fafa 	bl	80004e4 <__aeabi_i2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f005 ffdd 	bl	8007eb6 <sqrt>
 8001efc:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f0c:	f7fe fdbc 	bl	8000a88 <__aeabi_dcmpeq>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fae1 	bl	80004e4 <__aeabi_i2d>
 8001f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f26:	f7fe fc71 	bl	800080c <__aeabi_ddiv>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f005 ffe5 	bl	8007f00 <atan>
 8001f36:	a336      	add	r3, pc, #216	; (adr r3, 8002010 <MPU6050_Read_All+0x300>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb3c 	bl	80005b8 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001f48:	e005      	b.n	8001f56 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fac0 	bl	80004e4 <__aeabi_i2d>
 8001f64:	4682      	mov	sl, r0
 8001f66:	468b      	mov	fp, r1
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fab8 	bl	80004e4 <__aeabi_i2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4650      	mov	r0, sl
 8001f7a:	4659      	mov	r1, fp
 8001f7c:	f005 ff99 	bl	8007eb2 <atan2>
 8001f80:	a323      	add	r3, pc, #140	; (adr r3, 8002010 <MPU6050_Read_All+0x300>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb17 	bl	80005b8 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <MPU6050_Read_All+0x31c>)
 8001f98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f9c:	f7fe fd7e 	bl	8000a9c <__aeabi_dcmplt>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <MPU6050_Read_All+0x2ac>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <MPU6050_Read_All+0x320>)
 8001fb2:	f7fe fd91 	bl	8000ad8 <__aeabi_dcmpgt>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d114      	bne.n	8001fe6 <MPU6050_Read_All+0x2d6>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MPU6050_Read_All+0x320>)
 8001fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fc6:	f7fe fd87 	bl	8000ad8 <__aeabi_dcmpgt>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d033      	beq.n	8002038 <MPU6050_Read_All+0x328>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <MPU6050_Read_All+0x31c>)
 8001fdc:	f7fe fd5e 	bl	8000a9c <__aeabi_dcmplt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d028      	beq.n	8002038 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 8001fe6:	4913      	ldr	r1, [pc, #76]	; (8002034 <MPU6050_Read_All+0x324>)
 8001fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001ffa:	e030      	b.n	800205e <MPU6050_Read_All+0x34e>
 8001ffc:	f3af 8000 	nop.w
 8002000:	00000000 	.word	0x00000000
 8002004:	40cc2900 	.word	0x40cc2900
 8002008:	00000000 	.word	0x00000000
 800200c:	40606000 	.word	0x40606000
 8002010:	1a63c1f8 	.word	0x1a63c1f8
 8002014:	404ca5dc 	.word	0x404ca5dc
 8002018:	40d00000 	.word	0x40d00000
 800201c:	43aa0000 	.word	0x43aa0000
 8002020:	42121eb8 	.word	0x42121eb8
 8002024:	200004c4 	.word	0x200004c4
 8002028:	408f4000 	.word	0x408f4000
 800202c:	c0568000 	.word	0xc0568000
 8002030:	40568000 	.word	0x40568000
 8002034:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800203e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002046:	e9cd 2300 	strd	r2, r3, [sp]
 800204a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204e:	481c      	ldr	r0, [pc, #112]	; (80020c0 <MPU6050_Read_All+0x3b0>)
 8002050:	f000 f83c 	bl	80020cc <Kalman_getAngle>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002064:	4690      	mov	r8, r2
 8002066:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MPU6050_Read_All+0x3b4>)
 8002070:	4640      	mov	r0, r8
 8002072:	4649      	mov	r1, r9
 8002074:	f7fe fd30 	bl	8000ad8 <__aeabi_dcmpgt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002084:	4614      	mov	r4, r2
 8002086:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800209a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800209e:	e9cd 2300 	strd	r2, r3, [sp]
 80020a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <MPU6050_Read_All+0x3b8>)
 80020a8:	f000 f810 	bl	80020cc <Kalman_getAngle>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80020b6:	bf00      	nop
 80020b8:	3740      	adds	r7, #64	; 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c0:	20000050 	.word	0x20000050
 80020c4:	40568000 	.word	0x40568000
 80020c8:	20000008 	.word	0x20000008

080020cc <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b092      	sub	sp, #72	; 0x48
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80020de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020e2:	f7fe f8b1 	bl	8000248 <__aeabi_dsub>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80020f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020fc:	f7fe fa5c 	bl	80005b8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4620      	mov	r0, r4
 8002106:	4629      	mov	r1, r5
 8002108:	f7fe f8a0 	bl	800024c <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002122:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002126:	f7fe fa47 	bl	80005b8 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002138:	f7fe f886 	bl	8000248 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800214a:	f7fe f87d 	bl	8000248 <__aeabi_dsub>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe f876 	bl	800024c <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800216c:	f7fe fa24 	bl	80005b8 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4620      	mov	r0, r4
 8002176:	4629      	mov	r1, r5
 8002178:	f7fe f868 	bl	800024c <__adddf3>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002192:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002196:	f7fe fa0f 	bl	80005b8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f851 	bl	8000248 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80021bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021c0:	f7fe f9fa 	bl	80005b8 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4620      	mov	r0, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	f7fe f83c 	bl	8000248 <__aeabi_dsub>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021ea:	f7fe f9e5 	bl	80005b8 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4620      	mov	r0, r4
 80021f4:	4629      	mov	r1, r5
 80021f6:	f7fe f829 	bl	800024c <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	68f9      	ldr	r1, [r7, #12]
 8002200:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002210:	f7fe f81c 	bl	800024c <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002222:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002226:	f7fe faf1 	bl	800080c <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800223c:	f7fe fae6 	bl	800080c <__aeabi_ddiv>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800224e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002252:	f7fd fff9 	bl	8000248 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002268:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800226c:	f7fe f9a4 	bl	80005b8 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	f7fd ffe8 	bl	800024c <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800228c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002290:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002294:	f7fe f990 	bl	80005b8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4620      	mov	r0, r4
 800229e:	4629      	mov	r1, r5
 80022a0:	f7fd ffd4 	bl	800024c <__adddf3>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022be:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80022c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d0:	f7fe f972 	bl	80005b8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ffb4 	bl	8000248 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80022f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022f8:	f7fe f95e 	bl	80005b8 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fd ffa0 	bl	8000248 <__aeabi_dsub>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002320:	f7fe f94a 	bl	80005b8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ff8c 	bl	8000248 <__aeabi_dsub>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002344:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002348:	f7fe f936 	bl	80005b8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ff78 	bl	8000248 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	3748      	adds	r7, #72	; 0x48
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_MspInit+0x68>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_MspInit+0x68>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6193      	str	r3, [r2, #24]
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_MspInit+0x68>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_MspInit+0x68>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_MspInit+0x68>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_MspInit+0x68>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	210f      	movs	r1, #15
 80023ae:	f06f 0001 	mvn.w	r0, #1
 80023b2:	f000 fc86 	bl	8002cc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_MspInit+0x6c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_MspInit+0x6c>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 fb63 	bl	8002adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002416:	f004 fc7b 	bl	8006d10 <xTaskGetSchedulerState>
 800241a:	4603      	mov	r3, r0
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002420:	f004 fe6a 	bl	80070f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA1_Channel2_IRQHandler+0x10>)
 800242e:	f000 fe99 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200006f8 	.word	0x200006f8

0800243c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Channel3_IRQHandler+0x10>)
 8002442:	f000 fe8f 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200006b4 	.word	0x200006b4

08002450 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <DMA1_Channel4_IRQHandler+0x10>)
 8002456:	f000 fe85 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200005e8 	.word	0x200005e8

08002464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Channel5_IRQHandler+0x10>)
 800246a:	f000 fe7b 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200005a4 	.word	0x200005a4

08002478 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA1_Channel6_IRQHandler+0x10>)
 800247e:	f000 fe71 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000062c 	.word	0x2000062c

0800248c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Channel7_IRQHandler+0x10>)
 8002492:	f000 fe67 	bl	8003164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000670 	.word	0x20000670

080024a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <USART1_IRQHandler+0x10>)
 80024a6:	f002 ffd1 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200004cc 	.word	0x200004cc

080024b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <USART2_IRQHandler+0x10>)
 80024ba:	f002 ffc7 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000514 	.word	0x20000514

080024c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART3_IRQHandler+0x10>)
 80024ce:	f002 ffbd 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000055c 	.word	0x2000055c

080024dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <_sbrk+0x5c>)
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <_sbrk+0x60>)
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <_sbrk+0x64>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <_sbrk+0x68>)
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	429a      	cmp	r2, r3
 800250a:	d207      	bcs.n	800251c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800250c:	f005 f848 	bl	80075a0 <__errno>
 8002510:	4603      	mov	r3, r0
 8002512:	220c      	movs	r2, #12
 8002514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	e009      	b.n	8002530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <_sbrk+0x64>)
 800252c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252e:	68fb      	ldr	r3, [r7, #12]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000c000 	.word	0x2000c000
 800253c:	00000400 	.word	0x00000400
 8002540:	200004c8 	.word	0x200004c8
 8002544:	200015e0 	.word	0x200015e0

08002548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <MX_USART1_UART_Init+0x50>)
 800255c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800258c:	f002 fe5e 	bl	800524c <HAL_UART_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002596:	f7ff fb5f 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200004cc 	.word	0x200004cc
 80025a4:	40013800 	.word	0x40013800

080025a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <MX_USART2_UART_Init+0x50>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025e0:	f002 fe34 	bl	800524c <HAL_UART_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025ea:	f7ff fb35 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000514 	.word	0x20000514
 80025f8:	40004400 	.word	0x40004400

080025fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_USART3_UART_Init+0x50>)
 8002604:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800260c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002634:	f002 fe0a 	bl	800524c <HAL_UART_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800263e:	f7ff fb0b 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000055c 	.word	0x2000055c
 800264c:	40004800 	.word	0x40004800

08002650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8b      	ldr	r2, [pc, #556]	; (8002898 <HAL_UART_MspInit+0x248>)
 800266c:	4293      	cmp	r3, r2
 800266e:	f040 8087 	bne.w	8002780 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002672:	4b8a      	ldr	r3, [pc, #552]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	4a89      	ldr	r2, [pc, #548]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6193      	str	r3, [r2, #24]
 800267e:	4b87      	ldr	r3, [pc, #540]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b84      	ldr	r3, [pc, #528]	; (800289c <HAL_UART_MspInit+0x24c>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a83      	ldr	r2, [pc, #524]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	4619      	mov	r1, r3
 80026b6:	487a      	ldr	r0, [pc, #488]	; (80028a0 <HAL_UART_MspInit+0x250>)
 80026b8:	f000 ffbe 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0320 	add.w	r3, r7, #32
 80026ce:	4619      	mov	r1, r3
 80026d0:	4873      	ldr	r0, [pc, #460]	; (80028a0 <HAL_UART_MspInit+0x250>)
 80026d2:	f000 ffb1 	bl	8003638 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026d6:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026d8:	4a73      	ldr	r2, [pc, #460]	; (80028a8 <HAL_UART_MspInit+0x258>)
 80026da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e2:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e8:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026fa:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_UART_MspInit+0x254>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_UART_MspInit+0x254>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002706:	4867      	ldr	r0, [pc, #412]	; (80028a4 <HAL_UART_MspInit+0x254>)
 8002708:	f000 fb12 	bl	8002d30 <HAL_DMA_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002712:	f7ff faa1 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <HAL_UART_MspInit+0x254>)
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
 800271c:	4a61      	ldr	r2, [pc, #388]	; (80028a4 <HAL_UART_MspInit+0x254>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002722:	4b62      	ldr	r3, [pc, #392]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002724:	4a62      	ldr	r2, [pc, #392]	; (80028b0 <HAL_UART_MspInit+0x260>)
 8002726:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	4b60      	ldr	r3, [pc, #384]	; (80028ac <HAL_UART_MspInit+0x25c>)
 800272a:	2210      	movs	r2, #16
 800272c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_UART_MspInit+0x25c>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002746:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_UART_MspInit+0x25c>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002752:	4856      	ldr	r0, [pc, #344]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002754:	f000 faec 	bl	8002d30 <HAL_DMA_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800275e:	f7ff fa7b 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_UART_MspInit+0x25c>)
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_UART_MspInit+0x25c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2105      	movs	r1, #5
 8002772:	2025      	movs	r0, #37	; 0x25
 8002774:	f000 faa5 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002778:	2025      	movs	r0, #37	; 0x25
 800277a:	f000 fabe 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800277e:	e12f      	b.n	80029e0 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_UART_MspInit+0x264>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 809e 	bne.w	80028c8 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 800278c:	4b43      	ldr	r3, [pc, #268]	; (800289c <HAL_UART_MspInit+0x24c>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_UART_MspInit+0x24c>)
 8002792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002796:	61d3      	str	r3, [r2, #28]
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_UART_MspInit+0x24c>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_UART_MspInit+0x24c>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a3c      	ldr	r2, [pc, #240]	; (800289c <HAL_UART_MspInit+0x24c>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b3a      	ldr	r3, [pc, #232]	; (800289c <HAL_UART_MspInit+0x24c>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027bc:	2304      	movs	r3, #4
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0320 	add.w	r3, r7, #32
 80027cc:	4619      	mov	r1, r3
 80027ce:	4834      	ldr	r0, [pc, #208]	; (80028a0 <HAL_UART_MspInit+0x250>)
 80027d0:	f000 ff32 	bl	8003638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 0320 	add.w	r3, r7, #32
 80027e4:	4619      	mov	r1, r3
 80027e6:	482e      	ldr	r0, [pc, #184]	; (80028a0 <HAL_UART_MspInit+0x250>)
 80027e8:	f000 ff26 	bl	8003638 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_UART_MspInit+0x268>)
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_UART_MspInit+0x26c>)
 80027f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_UART_MspInit+0x268>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_UART_MspInit+0x268>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fe:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_UART_MspInit+0x268>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800281c:	4826      	ldr	r0, [pc, #152]	; (80028b8 <HAL_UART_MspInit+0x268>)
 800281e:	f000 fa87 	bl	8002d30 <HAL_DMA_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002828:	f7ff fa16 	bl	8001c58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_UART_MspInit+0x268>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_UART_MspInit+0x270>)
 800283a:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_UART_MspInit+0x274>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002840:	2210      	movs	r2, #16
 8002842:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_UART_MspInit+0x270>)
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800285c:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_UART_MspInit+0x270>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002868:	4815      	ldr	r0, [pc, #84]	; (80028c0 <HAL_UART_MspInit+0x270>)
 800286a:	f000 fa61 	bl	8002d30 <HAL_DMA_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002874:	f7ff f9f0 	bl	8001c58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_UART_MspInit+0x270>)
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
 800287e:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <HAL_UART_MspInit+0x270>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2105      	movs	r1, #5
 8002888:	2026      	movs	r0, #38	; 0x26
 800288a:	f000 fa1a 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800288e:	2026      	movs	r0, #38	; 0x26
 8002890:	f000 fa33 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 8002894:	e0a4      	b.n	80029e0 <HAL_UART_MspInit+0x390>
 8002896:	bf00      	nop
 8002898:	40013800 	.word	0x40013800
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010800 	.word	0x40010800
 80028a4:	200005a4 	.word	0x200005a4
 80028a8:	40020058 	.word	0x40020058
 80028ac:	200005e8 	.word	0x200005e8
 80028b0:	40020044 	.word	0x40020044
 80028b4:	40004400 	.word	0x40004400
 80028b8:	2000062c 	.word	0x2000062c
 80028bc:	4002006c 	.word	0x4002006c
 80028c0:	20000670 	.word	0x20000670
 80028c4:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <HAL_UART_MspInit+0x398>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 8086 	bne.w	80029e0 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d4:	4b45      	ldr	r3, [pc, #276]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a44      	ldr	r2, [pc, #272]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028de:	61d3      	str	r3, [r2, #28]
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a3e      	ldr	r2, [pc, #248]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <HAL_UART_MspInit+0x39c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	4619      	mov	r1, r3
 8002918:	4835      	ldr	r0, [pc, #212]	; (80029f0 <HAL_UART_MspInit+0x3a0>)
 800291a:	f000 fe8d 	bl	8003638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800291e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0320 	add.w	r3, r7, #32
 8002930:	4619      	mov	r1, r3
 8002932:	482f      	ldr	r0, [pc, #188]	; (80029f0 <HAL_UART_MspInit+0x3a0>)
 8002934:	f000 fe80 	bl	8003638 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 800293a:	4a2f      	ldr	r2, [pc, #188]	; (80029f8 <HAL_UART_MspInit+0x3a8>)
 800293c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002968:	4822      	ldr	r0, [pc, #136]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 800296a:	f000 f9e1 	bl	8002d30 <HAL_DMA_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8002974:	f7ff f970 	bl	8001c58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_UART_MspInit+0x3a4>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_UART_MspInit+0x3b0>)
 8002988:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 800298c:	2210      	movs	r2, #16
 800298e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029b4:	4811      	ldr	r0, [pc, #68]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029b6:	f000 f9bb 	bl	8002d30 <HAL_DMA_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_MspInit+0x374>
      Error_Handler();
 80029c0:	f7ff f94a 	bl	8001c58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
 80029ca:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_UART_MspInit+0x3ac>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2105      	movs	r1, #5
 80029d4:	2027      	movs	r0, #39	; 0x27
 80029d6:	f000 f974 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029da:	2027      	movs	r0, #39	; 0x27
 80029dc:	f000 f98d 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 80029e0:	bf00      	nop
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40004800 	.word	0x40004800
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010c00 	.word	0x40010c00
 80029f4:	200006b4 	.word	0x200006b4
 80029f8:	40020030 	.word	0x40020030
 80029fc:	200006f8 	.word	0x200006f8
 8002a00:	4002001c 	.word	0x4002001c

08002a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a04:	f7ff fda0 	bl	8002548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480b      	ldr	r0, [pc, #44]	; (8002a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a0a:	490c      	ldr	r1, [pc, #48]	; (8002a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a20:	4c09      	ldr	r4, [pc, #36]	; (8002a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a2e:	f004 fdbd 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a32:	f7ff f8b5 	bl	8001ba0 <main>
  bx lr
 8002a36:	4770      	bx	lr
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002a40:	08008740 	.word	0x08008740
  ldr r2, =_sbss
 8002a44:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002a48:	200015dc 	.word	0x200015dc

08002a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC1_2_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x28>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x28>)
 8002a5a:	f043 0310 	orr.w	r3, r3, #16
 8002a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f923 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	200f      	movs	r0, #15
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff fc82 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40022000 	.word	0x40022000

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f93b 	bl	8002d16 <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f903 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000098 	.word	0x20000098
 8002ad4:	200000a0 	.word	0x200000a0
 8002ad8:	2000009c 	.word	0x2000009c

08002adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_IncTick+0x20>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_IncTick+0x20>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	200000a0 	.word	0x200000a0
 8002afc:	2000073c 	.word	0x2000073c

08002b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_GetTick+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	2000073c 	.word	0x2000073c

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4906      	ldr	r1, [pc, #24]	; (8002bac <__NVIC_EnableIRQ+0x34>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff90 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff2d 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff42 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff90 	bl	8002c04 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5f 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff35 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e059      	b.n	8002dfa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_DMA_Init+0xd4>)
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d80f      	bhi.n	8002d72 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_DMA_Init+0xd8>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_DMA_Init+0xdc>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_DMA_Init+0xe0>)
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d70:	e00e      	b.n	8002d90 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_DMA_Init+0xe4>)
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_DMA_Init+0xdc>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_DMA_Init+0xe8>)
 8002d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40020407 	.word	0x40020407
 8002e08:	bffdfff8 	.word	0xbffdfff8
 8002e0c:	cccccccd 	.word	0xcccccccd
 8002e10:	40020000 	.word	0x40020000
 8002e14:	bffdfbf8 	.word	0xbffdfbf8
 8002e18:	40020400 	.word	0x40020400

08002e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Start_IT+0x20>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e04b      	b.n	8002ed4 <HAL_DMA_Start_IT+0xb8>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d13a      	bne.n	8002ec6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fbb1 	bl	80035dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 020e 	orr.w	r2, r2, #14
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e00f      	b.n	8002eb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 020a 	orr.w	r2, r2, #10
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e005      	b.n	8002ed2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d008      	beq.n	8002f06 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e020      	b.n	8002f48 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020e 	bic.w	r2, r2, #14
 8002f14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d005      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e0d6      	b.n	8003126 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 020e 	bic.w	r2, r2, #14
 8002f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_DMA_Abort_IT+0x1dc>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d958      	bls.n	8003056 <HAL_DMA_Abort_IT+0x102>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a62      	ldr	r2, [pc, #392]	; (8003134 <HAL_DMA_Abort_IT+0x1e0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d04f      	beq.n	800304e <HAL_DMA_Abort_IT+0xfa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a61      	ldr	r2, [pc, #388]	; (8003138 <HAL_DMA_Abort_IT+0x1e4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d048      	beq.n	800304a <HAL_DMA_Abort_IT+0xf6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5f      	ldr	r2, [pc, #380]	; (800313c <HAL_DMA_Abort_IT+0x1e8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d040      	beq.n	8003044 <HAL_DMA_Abort_IT+0xf0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <HAL_DMA_Abort_IT+0x1ec>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d038      	beq.n	800303e <HAL_DMA_Abort_IT+0xea>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_DMA_Abort_IT+0x1f0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d030      	beq.n	8003038 <HAL_DMA_Abort_IT+0xe4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5b      	ldr	r2, [pc, #364]	; (8003148 <HAL_DMA_Abort_IT+0x1f4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d028      	beq.n	8003032 <HAL_DMA_Abort_IT+0xde>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_DMA_Abort_IT+0x1dc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d020      	beq.n	800302c <HAL_DMA_Abort_IT+0xd8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_DMA_Abort_IT+0x1f8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d019      	beq.n	8003028 <HAL_DMA_Abort_IT+0xd4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_DMA_Abort_IT+0x1fc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d012      	beq.n	8003024 <HAL_DMA_Abort_IT+0xd0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_DMA_Abort_IT+0x200>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00a      	beq.n	800301e <HAL_DMA_Abort_IT+0xca>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_DMA_Abort_IT+0x204>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d102      	bne.n	8003018 <HAL_DMA_Abort_IT+0xc4>
 8003012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003016:	e01b      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301c:	e018      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 800301e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003022:	e015      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003024:	2310      	movs	r3, #16
 8003026:	e013      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003028:	2301      	movs	r3, #1
 800302a:	e011      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 800302c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003030:	e00e      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003036:	e00b      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303c:	e008      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 800303e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003042:	e005      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 8003044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003048:	e002      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 800304a:	2310      	movs	r3, #16
 800304c:	e000      	b.n	8003050 <HAL_DMA_Abort_IT+0xfc>
 800304e:	2301      	movs	r3, #1
 8003050:	4a42      	ldr	r2, [pc, #264]	; (800315c <HAL_DMA_Abort_IT+0x208>)
 8003052:	6053      	str	r3, [r2, #4]
 8003054:	e057      	b.n	8003106 <HAL_DMA_Abort_IT+0x1b2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a36      	ldr	r2, [pc, #216]	; (8003134 <HAL_DMA_Abort_IT+0x1e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04f      	beq.n	8003100 <HAL_DMA_Abort_IT+0x1ac>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	; (8003138 <HAL_DMA_Abort_IT+0x1e4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d048      	beq.n	80030fc <HAL_DMA_Abort_IT+0x1a8>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <HAL_DMA_Abort_IT+0x1e8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_Abort_IT+0x1a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <HAL_DMA_Abort_IT+0x1ec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d038      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x19c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_DMA_Abort_IT+0x1f0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d030      	beq.n	80030ea <HAL_DMA_Abort_IT+0x196>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_DMA_Abort_IT+0x1f4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d028      	beq.n	80030e4 <HAL_DMA_Abort_IT+0x190>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a26      	ldr	r2, [pc, #152]	; (8003130 <HAL_DMA_Abort_IT+0x1dc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d020      	beq.n	80030de <HAL_DMA_Abort_IT+0x18a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <HAL_DMA_Abort_IT+0x1f8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_DMA_Abort_IT+0x186>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_DMA_Abort_IT+0x1fc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d012      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x182>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <HAL_DMA_Abort_IT+0x200>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00a      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x17c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a26      	ldr	r2, [pc, #152]	; (8003158 <HAL_DMA_Abort_IT+0x204>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d102      	bne.n	80030ca <HAL_DMA_Abort_IT+0x176>
 80030c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c8:	e01b      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ce:	e018      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d4:	e015      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030d6:	2310      	movs	r3, #16
 80030d8:	e013      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030da:	2301      	movs	r3, #1
 80030dc:	e011      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e2:	e00e      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030e8:	e00b      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ee:	e008      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f4:	e005      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fa:	e002      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 80030fc:	2310      	movs	r3, #16
 80030fe:	e000      	b.n	8003102 <HAL_DMA_Abort_IT+0x1ae>
 8003100:	2301      	movs	r3, #1
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_DMA_Abort_IT+0x20c>)
 8003104:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
    } 
  }
  return status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40020080 	.word	0x40020080
 8003134:	40020008 	.word	0x40020008
 8003138:	4002001c 	.word	0x4002001c
 800313c:	40020030 	.word	0x40020030
 8003140:	40020044 	.word	0x40020044
 8003144:	40020058 	.word	0x40020058
 8003148:	4002006c 	.word	0x4002006c
 800314c:	40020408 	.word	0x40020408
 8003150:	4002041c 	.word	0x4002041c
 8003154:	40020430 	.word	0x40020430
 8003158:	40020444 	.word	0x40020444
 800315c:	40020400 	.word	0x40020400
 8003160:	40020000 	.word	0x40020000

08003164 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2204      	movs	r2, #4
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80f1 	beq.w	8003370 <HAL_DMA_IRQHandler+0x20c>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80eb 	beq.w	8003370 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_DMA_IRQHandler+0x1d8>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d958      	bls.n	8003276 <HAL_DMA_IRQHandler+0x112>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <HAL_DMA_IRQHandler+0x1dc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d04f      	beq.n	800326e <HAL_DMA_IRQHandler+0x10a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5c      	ldr	r2, [pc, #368]	; (8003344 <HAL_DMA_IRQHandler+0x1e0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d048      	beq.n	800326a <HAL_DMA_IRQHandler+0x106>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5a      	ldr	r2, [pc, #360]	; (8003348 <HAL_DMA_IRQHandler+0x1e4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d040      	beq.n	8003264 <HAL_DMA_IRQHandler+0x100>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a59      	ldr	r2, [pc, #356]	; (800334c <HAL_DMA_IRQHandler+0x1e8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d038      	beq.n	800325e <HAL_DMA_IRQHandler+0xfa>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a57      	ldr	r2, [pc, #348]	; (8003350 <HAL_DMA_IRQHandler+0x1ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d030      	beq.n	8003258 <HAL_DMA_IRQHandler+0xf4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a56      	ldr	r2, [pc, #344]	; (8003354 <HAL_DMA_IRQHandler+0x1f0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d028      	beq.n	8003252 <HAL_DMA_IRQHandler+0xee>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_DMA_IRQHandler+0x1d8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d020      	beq.n	800324c <HAL_DMA_IRQHandler+0xe8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_DMA_IRQHandler+0x1f4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d019      	beq.n	8003248 <HAL_DMA_IRQHandler+0xe4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a50      	ldr	r2, [pc, #320]	; (800335c <HAL_DMA_IRQHandler+0x1f8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d012      	beq.n	8003244 <HAL_DMA_IRQHandler+0xe0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a4f      	ldr	r2, [pc, #316]	; (8003360 <HAL_DMA_IRQHandler+0x1fc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00a      	beq.n	800323e <HAL_DMA_IRQHandler+0xda>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <HAL_DMA_IRQHandler+0x200>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d102      	bne.n	8003238 <HAL_DMA_IRQHandler+0xd4>
 8003232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003236:	e01b      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003238:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800323c:	e018      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 800323e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003242:	e015      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003244:	2340      	movs	r3, #64	; 0x40
 8003246:	e013      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003248:	2304      	movs	r3, #4
 800324a:	e011      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 800324c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003250:	e00e      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003256:	e00b      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800325c:	e008      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 800325e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003262:	e005      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	e002      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	e000      	b.n	8003270 <HAL_DMA_IRQHandler+0x10c>
 800326e:	2304      	movs	r3, #4
 8003270:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <HAL_DMA_IRQHandler+0x204>)
 8003272:	6053      	str	r3, [r2, #4]
 8003274:	e057      	b.n	8003326 <HAL_DMA_IRQHandler+0x1c2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a31      	ldr	r2, [pc, #196]	; (8003340 <HAL_DMA_IRQHandler+0x1dc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04f      	beq.n	8003320 <HAL_DMA_IRQHandler+0x1bc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2f      	ldr	r2, [pc, #188]	; (8003344 <HAL_DMA_IRQHandler+0x1e0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d048      	beq.n	800331c <HAL_DMA_IRQHandler+0x1b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2e      	ldr	r2, [pc, #184]	; (8003348 <HAL_DMA_IRQHandler+0x1e4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d040      	beq.n	8003316 <HAL_DMA_IRQHandler+0x1b2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <HAL_DMA_IRQHandler+0x1e8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d038      	beq.n	8003310 <HAL_DMA_IRQHandler+0x1ac>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_DMA_IRQHandler+0x1ec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d030      	beq.n	800330a <HAL_DMA_IRQHandler+0x1a6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a29      	ldr	r2, [pc, #164]	; (8003354 <HAL_DMA_IRQHandler+0x1f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d028      	beq.n	8003304 <HAL_DMA_IRQHandler+0x1a0>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_DMA_IRQHandler+0x1d8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d020      	beq.n	80032fe <HAL_DMA_IRQHandler+0x19a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <HAL_DMA_IRQHandler+0x1f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_DMA_IRQHandler+0x196>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a24      	ldr	r2, [pc, #144]	; (800335c <HAL_DMA_IRQHandler+0x1f8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d012      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x192>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_DMA_IRQHandler+0x1fc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x18c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_DMA_IRQHandler+0x200>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d102      	bne.n	80032ea <HAL_DMA_IRQHandler+0x186>
 80032e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032e8:	e01b      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 80032ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032ee:	e018      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 80032f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f4:	e015      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 80032f6:	2340      	movs	r3, #64	; 0x40
 80032f8:	e013      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e011      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 80032fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003302:	e00e      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 8003304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003308:	e00b      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 800330a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800330e:	e008      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 8003310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003314:	e005      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 8003316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331a:	e002      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x1be>
 8003320:	2304      	movs	r3, #4
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_DMA_IRQHandler+0x208>)
 8003324:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8136 	beq.w	800359c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003338:	e130      	b.n	800359c <HAL_DMA_IRQHandler+0x438>
 800333a:	bf00      	nop
 800333c:	40020080 	.word	0x40020080
 8003340:	40020008 	.word	0x40020008
 8003344:	4002001c 	.word	0x4002001c
 8003348:	40020030 	.word	0x40020030
 800334c:	40020044 	.word	0x40020044
 8003350:	40020058 	.word	0x40020058
 8003354:	4002006c 	.word	0x4002006c
 8003358:	40020408 	.word	0x40020408
 800335c:	4002041c 	.word	0x4002041c
 8003360:	40020430 	.word	0x40020430
 8003364:	40020444 	.word	0x40020444
 8003368:	40020400 	.word	0x40020400
 800336c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2202      	movs	r2, #2
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80dd 	beq.w	800353c <HAL_DMA_IRQHandler+0x3d8>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80d7 	beq.w	800353c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020a 	bic.w	r2, r2, #10
 80033aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b7b      	ldr	r3, [pc, #492]	; (80035a8 <HAL_DMA_IRQHandler+0x444>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d958      	bls.n	8003472 <HAL_DMA_IRQHandler+0x30e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a79      	ldr	r2, [pc, #484]	; (80035ac <HAL_DMA_IRQHandler+0x448>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04f      	beq.n	800346a <HAL_DMA_IRQHandler+0x306>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a78      	ldr	r2, [pc, #480]	; (80035b0 <HAL_DMA_IRQHandler+0x44c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d048      	beq.n	8003466 <HAL_DMA_IRQHandler+0x302>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a76      	ldr	r2, [pc, #472]	; (80035b4 <HAL_DMA_IRQHandler+0x450>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <HAL_DMA_IRQHandler+0x2fc>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_DMA_IRQHandler+0x454>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d038      	beq.n	800345a <HAL_DMA_IRQHandler+0x2f6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a73      	ldr	r2, [pc, #460]	; (80035bc <HAL_DMA_IRQHandler+0x458>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d030      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2f0>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <HAL_DMA_IRQHandler+0x45c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d028      	beq.n	800344e <HAL_DMA_IRQHandler+0x2ea>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_DMA_IRQHandler+0x444>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d020      	beq.n	8003448 <HAL_DMA_IRQHandler+0x2e4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_DMA_IRQHandler+0x460>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d019      	beq.n	8003444 <HAL_DMA_IRQHandler+0x2e0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_DMA_IRQHandler+0x464>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d012      	beq.n	8003440 <HAL_DMA_IRQHandler+0x2dc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6b      	ldr	r2, [pc, #428]	; (80035cc <HAL_DMA_IRQHandler+0x468>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00a      	beq.n	800343a <HAL_DMA_IRQHandler+0x2d6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_DMA_IRQHandler+0x46c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d102      	bne.n	8003434 <HAL_DMA_IRQHandler+0x2d0>
 800342e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003432:	e01b      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	e018      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 800343a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800343e:	e015      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003440:	2320      	movs	r3, #32
 8003442:	e013      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003444:	2302      	movs	r3, #2
 8003446:	e011      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344c:	e00e      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 800344e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003452:	e00b      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003458:	e008      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 800345a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345e:	e005      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003464:	e002      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 8003466:	2320      	movs	r3, #32
 8003468:	e000      	b.n	800346c <HAL_DMA_IRQHandler+0x308>
 800346a:	2302      	movs	r3, #2
 800346c:	4a59      	ldr	r2, [pc, #356]	; (80035d4 <HAL_DMA_IRQHandler+0x470>)
 800346e:	6053      	str	r3, [r2, #4]
 8003470:	e057      	b.n	8003522 <HAL_DMA_IRQHandler+0x3be>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_DMA_IRQHandler+0x448>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04f      	beq.n	800351c <HAL_DMA_IRQHandler+0x3b8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_DMA_IRQHandler+0x44c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d048      	beq.n	8003518 <HAL_DMA_IRQHandler+0x3b4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4a      	ldr	r2, [pc, #296]	; (80035b4 <HAL_DMA_IRQHandler+0x450>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d040      	beq.n	8003512 <HAL_DMA_IRQHandler+0x3ae>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_DMA_IRQHandler+0x454>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d038      	beq.n	800350c <HAL_DMA_IRQHandler+0x3a8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_DMA_IRQHandler+0x458>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d030      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <HAL_DMA_IRQHandler+0x45c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d028      	beq.n	8003500 <HAL_DMA_IRQHandler+0x39c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <HAL_DMA_IRQHandler+0x444>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d020      	beq.n	80034fa <HAL_DMA_IRQHandler+0x396>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a41      	ldr	r2, [pc, #260]	; (80035c4 <HAL_DMA_IRQHandler+0x460>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d019      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x392>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <HAL_DMA_IRQHandler+0x464>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d012      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x38e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3e      	ldr	r2, [pc, #248]	; (80035cc <HAL_DMA_IRQHandler+0x468>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00a      	beq.n	80034ec <HAL_DMA_IRQHandler+0x388>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3d      	ldr	r2, [pc, #244]	; (80035d0 <HAL_DMA_IRQHandler+0x46c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d102      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x382>
 80034e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e4:	e01b      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 80034e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ea:	e018      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 80034ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f0:	e015      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 80034f2:	2320      	movs	r3, #32
 80034f4:	e013      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e011      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 80034fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fe:	e00e      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 8003500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003504:	e00b      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 8003506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350a:	e008      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 800350c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003510:	e005      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 8003512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003516:	e002      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 8003518:	2320      	movs	r3, #32
 800351a:	e000      	b.n	800351e <HAL_DMA_IRQHandler+0x3ba>
 800351c:	2302      	movs	r3, #2
 800351e:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <HAL_DMA_IRQHandler+0x474>)
 8003520:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d034      	beq.n	800359c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800353a:	e02f      	b.n	800359c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2208      	movs	r2, #8
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d028      	beq.n	800359e <HAL_DMA_IRQHandler+0x43a>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d023      	beq.n	800359e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 020e 	bic.w	r2, r2, #14
 8003564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
    }
  }
  return;
 800359c:	bf00      	nop
 800359e:	bf00      	nop
}
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40020080 	.word	0x40020080
 80035ac:	40020008 	.word	0x40020008
 80035b0:	4002001c 	.word	0x4002001c
 80035b4:	40020030 	.word	0x40020030
 80035b8:	40020044 	.word	0x40020044
 80035bc:	40020058 	.word	0x40020058
 80035c0:	4002006c 	.word	0x4002006c
 80035c4:	40020408 	.word	0x40020408
 80035c8:	4002041c 	.word	0x4002041c
 80035cc:	40020430 	.word	0x40020430
 80035d0:	40020444 	.word	0x40020444
 80035d4:	40020400 	.word	0x40020400
 80035d8:	40020000 	.word	0x40020000

080035dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d108      	bne.n	800361c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800361a:	e007      	b.n	800362c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
	...

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b08b      	sub	sp, #44	; 0x2c
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364a:	e179      	b.n	8003940 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800364c:	2201      	movs	r2, #1
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 8168 	bne.w	800393a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a96      	ldr	r2, [pc, #600]	; (80038c8 <HAL_GPIO_Init+0x290>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d05e      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
 8003674:	4a94      	ldr	r2, [pc, #592]	; (80038c8 <HAL_GPIO_Init+0x290>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d875      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 800367a:	4a94      	ldr	r2, [pc, #592]	; (80038cc <HAL_GPIO_Init+0x294>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d058      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
 8003680:	4a92      	ldr	r2, [pc, #584]	; (80038cc <HAL_GPIO_Init+0x294>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d86f      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 8003686:	4a92      	ldr	r2, [pc, #584]	; (80038d0 <HAL_GPIO_Init+0x298>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d052      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
 800368c:	4a90      	ldr	r2, [pc, #576]	; (80038d0 <HAL_GPIO_Init+0x298>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d869      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 8003692:	4a90      	ldr	r2, [pc, #576]	; (80038d4 <HAL_GPIO_Init+0x29c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04c      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
 8003698:	4a8e      	ldr	r2, [pc, #568]	; (80038d4 <HAL_GPIO_Init+0x29c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d863      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 800369e:	4a8e      	ldr	r2, [pc, #568]	; (80038d8 <HAL_GPIO_Init+0x2a0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d046      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
 80036a4:	4a8c      	ldr	r2, [pc, #560]	; (80038d8 <HAL_GPIO_Init+0x2a0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d85d      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 80036aa:	2b12      	cmp	r3, #18
 80036ac:	d82a      	bhi.n	8003704 <HAL_GPIO_Init+0xcc>
 80036ae:	2b12      	cmp	r3, #18
 80036b0:	d859      	bhi.n	8003766 <HAL_GPIO_Init+0x12e>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <HAL_GPIO_Init+0x80>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	08003733 	.word	0x08003733
 80036bc:	0800370d 	.word	0x0800370d
 80036c0:	0800371f 	.word	0x0800371f
 80036c4:	08003761 	.word	0x08003761
 80036c8:	08003767 	.word	0x08003767
 80036cc:	08003767 	.word	0x08003767
 80036d0:	08003767 	.word	0x08003767
 80036d4:	08003767 	.word	0x08003767
 80036d8:	08003767 	.word	0x08003767
 80036dc:	08003767 	.word	0x08003767
 80036e0:	08003767 	.word	0x08003767
 80036e4:	08003767 	.word	0x08003767
 80036e8:	08003767 	.word	0x08003767
 80036ec:	08003767 	.word	0x08003767
 80036f0:	08003767 	.word	0x08003767
 80036f4:	08003767 	.word	0x08003767
 80036f8:	08003767 	.word	0x08003767
 80036fc:	08003715 	.word	0x08003715
 8003700:	08003729 	.word	0x08003729
 8003704:	4a75      	ldr	r2, [pc, #468]	; (80038dc <HAL_GPIO_Init+0x2a4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800370a:	e02c      	b.n	8003766 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	623b      	str	r3, [r7, #32]
          break;
 8003712:	e029      	b.n	8003768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	3304      	adds	r3, #4
 800371a:	623b      	str	r3, [r7, #32]
          break;
 800371c:	e024      	b.n	8003768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	3308      	adds	r3, #8
 8003724:	623b      	str	r3, [r7, #32]
          break;
 8003726:	e01f      	b.n	8003768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	330c      	adds	r3, #12
 800372e:	623b      	str	r3, [r7, #32]
          break;
 8003730:	e01a      	b.n	8003768 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800373a:	2304      	movs	r3, #4
 800373c:	623b      	str	r3, [r7, #32]
          break;
 800373e:	e013      	b.n	8003768 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003748:	2308      	movs	r3, #8
 800374a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	611a      	str	r2, [r3, #16]
          break;
 8003752:	e009      	b.n	8003768 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003754:	2308      	movs	r3, #8
 8003756:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	615a      	str	r2, [r3, #20]
          break;
 800375e:	e003      	b.n	8003768 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
          break;
 8003764:	e000      	b.n	8003768 <HAL_GPIO_Init+0x130>
          break;
 8003766:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2bff      	cmp	r3, #255	; 0xff
 800376c:	d801      	bhi.n	8003772 <HAL_GPIO_Init+0x13a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	e001      	b.n	8003776 <HAL_GPIO_Init+0x13e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2bff      	cmp	r3, #255	; 0xff
 800377c:	d802      	bhi.n	8003784 <HAL_GPIO_Init+0x14c>
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	e002      	b.n	800378a <HAL_GPIO_Init+0x152>
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	3b08      	subs	r3, #8
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	210f      	movs	r1, #15
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	6a39      	ldr	r1, [r7, #32]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	431a      	orrs	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80c1 	beq.w	800393a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037b8:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_GPIO_Init+0x2a8>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_GPIO_Init+0x2a8>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6193      	str	r3, [r2, #24]
 80037c4:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <HAL_GPIO_Init+0x2a8>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037d0:	4a44      	ldr	r2, [pc, #272]	; (80038e4 <HAL_GPIO_Init+0x2ac>)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01f      	beq.n	800383c <HAL_GPIO_Init+0x204>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <HAL_GPIO_Init+0x2b4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d019      	beq.n	8003838 <HAL_GPIO_Init+0x200>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3a      	ldr	r2, [pc, #232]	; (80038f0 <HAL_GPIO_Init+0x2b8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_GPIO_Init+0x1fc>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a39      	ldr	r2, [pc, #228]	; (80038f4 <HAL_GPIO_Init+0x2bc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00d      	beq.n	8003830 <HAL_GPIO_Init+0x1f8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a38      	ldr	r2, [pc, #224]	; (80038f8 <HAL_GPIO_Init+0x2c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <HAL_GPIO_Init+0x1f4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a37      	ldr	r2, [pc, #220]	; (80038fc <HAL_GPIO_Init+0x2c4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_GPIO_Init+0x1f0>
 8003824:	2305      	movs	r3, #5
 8003826:	e00a      	b.n	800383e <HAL_GPIO_Init+0x206>
 8003828:	2306      	movs	r3, #6
 800382a:	e008      	b.n	800383e <HAL_GPIO_Init+0x206>
 800382c:	2304      	movs	r3, #4
 800382e:	e006      	b.n	800383e <HAL_GPIO_Init+0x206>
 8003830:	2303      	movs	r3, #3
 8003832:	e004      	b.n	800383e <HAL_GPIO_Init+0x206>
 8003834:	2302      	movs	r3, #2
 8003836:	e002      	b.n	800383e <HAL_GPIO_Init+0x206>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_GPIO_Init+0x206>
 800383c:	2300      	movs	r3, #0
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	f002 0203 	and.w	r2, r2, #3
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	4093      	lsls	r3, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_GPIO_Init+0x2ac>)
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4924      	ldr	r1, [pc, #144]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	43db      	mvns	r3, r3
 800387e:	4920      	ldr	r1, [pc, #128]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 8003880:	4013      	ands	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	491a      	ldr	r1, [pc, #104]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	4916      	ldr	r1, [pc, #88]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d025      	beq.n	8003904 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4910      	ldr	r1, [pc, #64]	; (8003900 <HAL_GPIO_Init+0x2c8>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	e025      	b.n	8003912 <HAL_GPIO_Init+0x2da>
 80038c6:	bf00      	nop
 80038c8:	10320000 	.word	0x10320000
 80038cc:	10310000 	.word	0x10310000
 80038d0:	10220000 	.word	0x10220000
 80038d4:	10210000 	.word	0x10210000
 80038d8:	10120000 	.word	0x10120000
 80038dc:	10110000 	.word	0x10110000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40010800 	.word	0x40010800
 80038ec:	40010c00 	.word	0x40010c00
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	40011800 	.word	0x40011800
 80038fc:	40011c00 	.word	0x40011c00
 8003900:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_GPIO_Init+0x324>)
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	43db      	mvns	r3, r3
 800390c:	4913      	ldr	r1, [pc, #76]	; (800395c <HAL_GPIO_Init+0x324>)
 800390e:	4013      	ands	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_GPIO_Init+0x324>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	490e      	ldr	r1, [pc, #56]	; (800395c <HAL_GPIO_Init+0x324>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
 800392a:	e006      	b.n	800393a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_GPIO_Init+0x324>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	43db      	mvns	r3, r3
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <HAL_GPIO_Init+0x324>)
 8003936:	4013      	ands	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f ae7e 	bne.w	800364c <HAL_GPIO_Init+0x14>
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	372c      	adds	r7, #44	; 0x2c
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e12b      	b.n	8003bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe f8cc 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c4:	f001 fbfc 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a81      	ldr	r2, [pc, #516]	; (8003bd4 <HAL_I2C_Init+0x274>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d807      	bhi.n	80039e4 <HAL_I2C_Init+0x84>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a80      	ldr	r2, [pc, #512]	; (8003bd8 <HAL_I2C_Init+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	bf94      	ite	ls
 80039dc:	2301      	movls	r3, #1
 80039de:	2300      	movhi	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e006      	b.n	80039f2 <HAL_I2C_Init+0x92>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <HAL_I2C_Init+0x27c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0e7      	b.n	8003bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a78      	ldr	r2, [pc, #480]	; (8003be0 <HAL_I2C_Init+0x280>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0c9b      	lsrs	r3, r3, #18
 8003a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d802      	bhi.n	8003a34 <HAL_I2C_Init+0xd4>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	3301      	adds	r3, #1
 8003a32:	e009      	b.n	8003a48 <HAL_I2C_Init+0xe8>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <HAL_I2C_Init+0x284>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	3301      	adds	r3, #1
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	495c      	ldr	r1, [pc, #368]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a64:	428b      	cmp	r3, r1
 8003a66:	d819      	bhi.n	8003a9c <HAL_I2C_Init+0x13c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e59      	subs	r1, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_I2C_Init+0x138>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e59      	subs	r1, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a96:	e051      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e04f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <HAL_I2C_Init+0x168>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e012      	b.n	8003aee <HAL_I2C_Init+0x18e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	0099      	lsls	r1, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Init+0x196>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e022      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10e      	bne.n	8003b1c <HAL_I2C_Init+0x1bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1e58      	subs	r0, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	440b      	add	r3, r1
 8003b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1e58      	subs	r0, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	0099      	lsls	r1, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	6809      	ldr	r1, [r1, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6911      	ldr	r1, [r2, #16]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	000186a0 	.word	0x000186a0
 8003bd8:	001e847f 	.word	0x001e847f
 8003bdc:	003d08ff 	.word	0x003d08ff
 8003be0:	431bde83 	.word	0x431bde83
 8003be4:	10624dd3 	.word	0x10624dd3

08003be8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7fe ff7d 	bl	8002b00 <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	f040 80d9 	bne.w	8003dc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	496d      	ldr	r1, [pc, #436]	; (8003dd4 <HAL_I2C_Mem_Write+0x1ec>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fccd 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0cc      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2C_Mem_Write+0x56>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0c5      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d007      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2221      	movs	r2, #33	; 0x21
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a4d      	ldr	r2, [pc, #308]	; (8003dd8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fb04 	bl	80042c4 <I2C_RequestMemoryWrite>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d052      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e081      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fd92 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e06b      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x180>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1aa      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fd85 	bl	8004884 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d107      	bne.n	8003d98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e016      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000

08003ddc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dfa:	f7fe fe81 	bl	8002b00 <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	f040 8250 	bne.w	80042ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2319      	movs	r3, #25
 8003e14:	2201      	movs	r2, #1
 8003e16:	4982      	ldr	r1, [pc, #520]	; (8004020 <HAL_I2C_Mem_Read+0x244>)
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fbd1 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
 8003e26:	e243      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x5a>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e23c      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d007      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	; 0x22
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a62      	ldr	r2, [pc, #392]	; (8004024 <HAL_I2C_Mem_Read+0x248>)
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9e:	88f8      	ldrh	r0, [r7, #6]
 8003ea0:	893a      	ldrh	r2, [r7, #8]
 8003ea2:	8979      	ldrh	r1, [r7, #10]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4603      	mov	r3, r0
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fa9e 	bl	80043f0 <I2C_RequestMemoryRead>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1f8      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e1cc      	b.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d11e      	bne.n	8003f34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f06:	b672      	cpsid	i
}
 8003f08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f30:	b662      	cpsie	i
}
 8003f32:	e035      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11e      	bne.n	8003f7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f4c:	b672      	cpsid	i
}
 8003f4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f76:	b662      	cpsie	i
}
 8003f78:	e012      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fa0:	e172      	b.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	f200 811f 	bhi.w	80041ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d123      	bne.n	8003ffc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fcab 	bl	8004914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e173      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffa:	e145      	b.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b02      	cmp	r3, #2
 8004002:	d152      	bne.n	80040aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	2200      	movs	r2, #0
 800400c:	4906      	ldr	r1, [pc, #24]	; (8004028 <HAL_I2C_Mem_Read+0x24c>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fad6 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e148      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000
 8004028:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800402c:	b672      	cpsid	i
}
 800402e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004072:	b662      	cpsie	i
}
 8004074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a8:	e0ee      	b.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2200      	movs	r2, #0
 80040b2:	4981      	ldr	r1, [pc, #516]	; (80042b8 <HAL_I2C_Mem_Read+0x4dc>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa83 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0f5      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040d4:	b672      	cpsid	i
}
 80040d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_I2C_Mem_Read+0x4e0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_I2C_Mem_Read+0x4e4>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a1a      	lsrs	r2, r3, #8
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	3b01      	subs	r3, #1
 8004128:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d118      	bne.n	8004162 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004152:	b662      	cpsie	i
}
 8004154:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0a6      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d1d9      	bne.n	8004124 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041b2:	b662      	cpsie	i
}
 80041b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e8:	e04e      	b.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fb90 	bl	8004914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e058      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d124      	bne.n	8004288 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	f47f ae88 	bne.w	8003fa2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00010004 	.word	0x00010004
 80042bc:	20000098 	.word	0x20000098
 80042c0:	14f8b589 	.word	0x14f8b589

080042c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	460b      	mov	r3, r1
 80042d8:	813b      	strh	r3, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f960 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004314:	d103      	bne.n	800431e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e05f      	b.n	80043e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004322:	897b      	ldrh	r3, [r7, #10]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	492d      	ldr	r1, [pc, #180]	; (80043ec <I2C_RequestMemoryWrite+0x128>)
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f9bb 	bl	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e04c      	b.n	80043e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	6a39      	ldr	r1, [r7, #32]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa46 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b04      	cmp	r3, #4
 8004374:	d107      	bne.n	8004386 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e02b      	b.n	80043e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	611a      	str	r2, [r3, #16]
 800439a:	e021      	b.n	80043e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800439c:	893b      	ldrh	r3, [r7, #8]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ac:	6a39      	ldr	r1, [r7, #32]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fa20 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d107      	bne.n	80043d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e005      	b.n	80043e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043d6:	893b      	ldrh	r3, [r7, #8]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	00010002 	.word	0x00010002

080043f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2200      	movs	r2, #0
 8004432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f8c2 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004450:	d103      	bne.n	800445a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0aa      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800446c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	4952      	ldr	r1, [pc, #328]	; (80045bc <I2C_RequestMemoryRead+0x1cc>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f91d 	bl	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e097      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	6a39      	ldr	r1, [r7, #32]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f9a8 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d107      	bne.n	80044c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e076      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]
 80044d6:	e021      	b.n	800451c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f982 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d107      	bne.n	800450e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e050      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004512:	893b      	ldrh	r3, [r7, #8]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	6a39      	ldr	r1, [r7, #32]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f967 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e035      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004556:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2200      	movs	r2, #0
 8004560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f82b 	bl	80045c0 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d103      	bne.n	8004588 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e013      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800458c:	897b      	ldrh	r3, [r7, #10]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	6a3a      	ldr	r2, [r7, #32]
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <I2C_RequestMemoryRead+0x1cc>)
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f886 	bl	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	00010002 	.word	0x00010002

080045c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d0:	e048      	b.n	8004664 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d044      	beq.n	8004664 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fe fa91 	bl	8002b00 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d139      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10d      	bne.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	e00c      	b.n	8004630 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	43da      	mvns	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	429a      	cmp	r2, r3
 8004634:	d116      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e023      	b.n	80046ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10d      	bne.n	800468a <I2C_WaitOnFlagUntilTimeout+0xca>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	43da      	mvns	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	e00c      	b.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	43da      	mvns	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d093      	beq.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046c2:	e071      	b.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d123      	bne.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e067      	b.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d041      	beq.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fe f9ec 	bl	8002b00 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d136      	bne.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10c      	bne.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e00b      	b.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	43da      	mvns	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e021      	b.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10c      	bne.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	43da      	mvns	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e00b      	b.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f af6d 	bne.w	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004800:	e034      	b.n	800486c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8e3 	bl	80049ce <I2C_IsAcknowledgeFailed>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e034      	b.n	800487c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d028      	beq.n	800486c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fe f971 	bl	8002b00 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11d      	bne.n	800486c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d016      	beq.n	800486c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e007      	b.n	800487c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d1c3      	bne.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004890:	e034      	b.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f89b 	bl	80049ce <I2C_IsAcknowledgeFailed>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e034      	b.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d028      	beq.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fe f929 	bl	8002b00 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11d      	bne.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d016      	beq.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e007      	b.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d1c3      	bne.n	8004892 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004920:	e049      	b.n	80049b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b10      	cmp	r3, #16
 800492e:	d119      	bne.n	8004964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e030      	b.n	80049c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7fe f8cc 	bl	8002b00 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d016      	beq.n	80049b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e007      	b.n	80049c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d1ae      	bne.n	8004922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d11b      	bne.n	8004a1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e272      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8087 	beq.w	8004b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d00c      	beq.n	8004a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a58:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d112      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5e>
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a72:	4b89      	ldr	r3, [pc, #548]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d06c      	beq.n	8004b58 <HAL_RCC_OscConfig+0x12c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d168      	bne.n	8004b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e24c      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x76>
 8004a94:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7f      	ldr	r2, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e02e      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x98>
 8004aaa:	4b7b      	ldr	r3, [pc, #492]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7a      	ldr	r2, [pc, #488]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4b78      	ldr	r3, [pc, #480]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a77      	ldr	r2, [pc, #476]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xbc>
 8004ace:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a71      	ldr	r2, [pc, #452]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004ae8:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fffa 	bl	8002b00 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fd fff6 	bl	8002b00 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e200      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b5d      	ldr	r3, [pc, #372]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xe4>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd ffe6 	bl	8002b00 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd ffe2 	bl	8002b00 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1ec      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x10c>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b66:	4b4c      	ldr	r3, [pc, #304]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b72:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x18c>
 8004b7e:	4b46      	ldr	r3, [pc, #280]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x176>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1c0      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3d      	ldr	r3, [pc, #244]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4939      	ldr	r1, [pc, #228]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCC_OscConfig+0x270>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fd ff9b 	bl	8002b00 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fd ff97 	bl	8002b00 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1a1      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4927      	ldr	r1, [pc, #156]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCC_OscConfig+0x270>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fd ff7a 	bl	8002b00 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fd ff76 	bl	8002b00 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e180      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03a      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d019      	beq.n	8004c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c48:	f7fd ff5a 	bl	8002b00 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd ff56 	bl	8002b00 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e160      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f000 face 	bl	8005210 <RCC_Delay>
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7fd ff40 	bl	8002b00 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c82:	e00f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fd ff3c 	bl	8002b00 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d908      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e146      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	42420000 	.word	0x42420000
 8004ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	4b92      	ldr	r3, [pc, #584]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e9      	bne.n	8004c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a6 	beq.w	8004e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	4b88      	ldr	r3, [pc, #544]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4a87      	ldr	r2, [pc, #540]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	61d3      	str	r3, [r2, #28]
 8004cda:	4b85      	ldr	r3, [pc, #532]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b82      	ldr	r3, [pc, #520]	; (8004ef4 <HAL_RCC_OscConfig+0x4c8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d118      	bne.n	8004d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b7f      	ldr	r3, [pc, #508]	; (8004ef4 <HAL_RCC_OscConfig+0x4c8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7e      	ldr	r2, [pc, #504]	; (8004ef4 <HAL_RCC_OscConfig+0x4c8>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7fd fefd 	bl	8002b00 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fd fef9 	bl	8002b00 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e103      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b75      	ldr	r3, [pc, #468]	; (8004ef4 <HAL_RCC_OscConfig+0x4c8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x312>
 8004d30:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4a6e      	ldr	r2, [pc, #440]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6213      	str	r3, [r2, #32]
 8004d3c:	e02d      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x334>
 8004d46:	4b6a      	ldr	r3, [pc, #424]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a69      	ldr	r2, [pc, #420]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	4b67      	ldr	r3, [pc, #412]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a66      	ldr	r2, [pc, #408]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	6213      	str	r3, [r2, #32]
 8004d5e:	e01c      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x356>
 8004d68:	4b61      	ldr	r3, [pc, #388]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a60      	ldr	r2, [pc, #384]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4a5d      	ldr	r2, [pc, #372]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	e00b      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d82:	4b5b      	ldr	r3, [pc, #364]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a5a      	ldr	r2, [pc, #360]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	4b58      	ldr	r3, [pc, #352]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4a57      	ldr	r2, [pc, #348]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d015      	beq.n	8004dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fead 	bl	8002b00 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004daa:	f7fd fea9 	bl	8002b00 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0b1      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ee      	beq.n	8004daa <HAL_RCC_OscConfig+0x37e>
 8004dcc:	e014      	b.n	8004df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dce:	f7fd fe97 	bl	8002b00 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fd fe93 	bl	8002b00 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e09b      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dec:	4b40      	ldr	r3, [pc, #256]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ee      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8087 	beq.w	8004f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e14:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d061      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d146      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e28:	4b33      	ldr	r3, [pc, #204]	; (8004ef8 <HAL_RCC_OscConfig+0x4cc>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7fd fe67 	bl	8002b00 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fd fe63 	bl	8002b00 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e06d      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4921      	ldr	r1, [pc, #132]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a19      	ldr	r1, [r3, #32]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	430b      	orrs	r3, r1
 8004e82:	491b      	ldr	r1, [pc, #108]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x4cc>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fd fe37 	bl	8002b00 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fd fe33 	bl	8002b00 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e03d      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x46a>
 8004eb4:	e035      	b.n	8004f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_RCC_OscConfig+0x4cc>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fd fe20 	bl	8002b00 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fd fe1c 	bl	8002b00 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e026      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x498>
 8004ee2:	e01e      	b.n	8004f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d107      	bne.n	8004efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e019      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40007000 	.word	0x40007000
 8004ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_OscConfig+0x500>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000

08004f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0d0      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d910      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0207 	bic.w	r2, r3, #7
 8004f5a:	4965      	ldr	r1, [pc, #404]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b8      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f8c:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a58      	ldr	r2, [pc, #352]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa4:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb0:	4b50      	ldr	r3, [pc, #320]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	494d      	ldr	r1, [pc, #308]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d040      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d115      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e073      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06b      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4936      	ldr	r1, [pc, #216]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fd fd6e 	bl	8002b00 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fd fd6a 	bl	8002b00 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e053      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d210      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4922      	ldr	r1, [pc, #136]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e032      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4916      	ldr	r1, [pc, #88]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	490e      	ldr	r1, [pc, #56]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050be:	f000 f821 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490a      	ldr	r1, [pc, #40]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_RCC_ClockConfig+0x1cc>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_ClockConfig+0x1d0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd fccc 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40022000 	.word	0x40022000
 80050f4:	40021000 	.word	0x40021000
 80050f8:	08008668 	.word	0x08008668
 80050fc:	20000098 	.word	0x20000098
 8005100:	2000009c 	.word	0x2000009c

08005104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800511e:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <HAL_RCC_GetSysClockFreq+0x94>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b04      	cmp	r3, #4
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x30>
 800512e:	2b08      	cmp	r3, #8
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x36>
 8005132:	e027      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_GetSysClockFreq+0x98>)
 8005136:	613b      	str	r3, [r7, #16]
      break;
 8005138:	e027      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0c9b      	lsrs	r3, r3, #18
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005144:	5cd3      	ldrb	r3, [r2, r3]
 8005146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <HAL_RCC_GetSysClockFreq+0x94>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	0c5b      	lsrs	r3, r3, #17
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	4a11      	ldr	r2, [pc, #68]	; (80051a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800515e:	5cd3      	ldrb	r3, [r2, r3]
 8005160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <HAL_RCC_GetSysClockFreq+0x98>)
 8005166:	fb03 f202 	mul.w	r2, r3, r2
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e004      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	613b      	str	r3, [r7, #16]
      break;
 8005182:	e002      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCC_GetSysClockFreq+0x98>)
 8005186:	613b      	str	r3, [r7, #16]
      break;
 8005188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518a:	693b      	ldr	r3, [r7, #16]
}
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	007a1200 	.word	0x007a1200
 80051a0:	08008680 	.word	0x08008680
 80051a4:	08008690 	.word	0x08008690
 80051a8:	003d0900 	.word	0x003d0900

080051ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <HAL_RCC_GetHCLKFreq+0x10>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	20000098 	.word	0x20000098

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051c4:	f7ff fff2 	bl	80051ac <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4903      	ldr	r1, [pc, #12]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	08008678 	.word	0x08008678

080051e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ec:	f7ff ffde 	bl	80051ac <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0adb      	lsrs	r3, r3, #11
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4903      	ldr	r1, [pc, #12]	; (800520c <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	08008678 	.word	0x08008678

08005210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <RCC_Delay+0x34>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <RCC_Delay+0x38>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0a5b      	lsrs	r3, r3, #9
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800522c:	bf00      	nop
  }
  while (Delay --);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	60fa      	str	r2, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f9      	bne.n	800522c <RCC_Delay+0x1c>
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	20000098 	.word	0x20000098
 8005248:	10624dd3 	.word	0x10624dd3

0800524c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e042      	b.n	80052e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fd f9ec 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800528e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 ff47 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b20      	cmp	r3, #32
 800530a:	d175      	bne.n	80053f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Transmit+0x2c>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e06e      	b.n	80053fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2221      	movs	r2, #33	; 0x21
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800532a:	f7fd fbe9 	bl	8002b00 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d108      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e003      	b.n	8005360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005360:	e02e      	b.n	80053c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2200      	movs	r2, #0
 800536a:	2180      	movs	r1, #128	; 0x80
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fc23 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e03a      	b.n	80053fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	3302      	adds	r3, #2
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e007      	b.n	80053b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1cb      	bne.n	8005362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2140      	movs	r1, #64	; 0x40
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fbef 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	d112      	bne.n	8005442 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_UART_Receive_DMA+0x26>
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e00b      	b.n	8005444 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	461a      	mov	r2, r3
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fc17 	bl	8005c6c <UART_Start_Receive_DMA>
 800543e:	4603      	mov	r3, r0
 8005440:	e000      	b.n	8005444 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0ba      	sub	sp, #232	; 0xe8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800548a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x66>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fd7c 	bl	8005fa8 <UART_Receive_IT>
      return;
 80054b0:	e25b      	b.n	800596a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80de 	beq.w	8005678 <HAL_UART_IRQHandler+0x22c>
 80054bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80d1 	beq.w	8005678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xae>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xd2>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f043 0202 	orr.w	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xf6>
 800552a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <HAL_UART_IRQHandler+0x126>
 800554e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	f043 0208 	orr.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81f2 	beq.w	8005960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_UART_IRQHandler+0x14e>
 8005588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fd07 	bl	8005fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_UART_IRQHandler+0x17a>
 80055be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d04f      	beq.n	8005666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fc11 	bl	8005dee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d041      	beq.n	800565e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800560a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800561e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1d9      	bne.n	80055da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d013      	beq.n	8005656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	4a7e      	ldr	r2, [pc, #504]	; (800582c <HAL_UART_IRQHandler+0x3e0>)
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd fc8a 	bl	8002f54 <HAL_DMA_Abort_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e00e      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f99c 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e00a      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f998 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e006      	b.n	8005674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f994 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005672:	e175      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	bf00      	nop
    return;
 8005676:	e173      	b.n	8005960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 814f 	bne.w	8005920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8148 	beq.w	8005920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8141 	beq.w	8005920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80b6 	beq.w	8005830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8145 	beq.w	8005964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056e2:	429a      	cmp	r2, r3
 80056e4:	f080 813e 	bcs.w	8005964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	f000 8088 	beq.w	800580c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005728:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800572c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005734:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1d9      	bne.n	80056fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800576c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005770:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800577e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e1      	bne.n	8005748 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e3      	bne.n	8005784 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80057f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e3      	bne.n	80057ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	4618      	mov	r0, r3
 8005808:	f7fd fb68 	bl	8002edc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581a:	b29b      	uxth	r3, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	b29b      	uxth	r3, r3
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8bf 	bl	80059a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005828:	e09c      	b.n	8005964 <HAL_UART_IRQHandler+0x518>
 800582a:	bf00      	nop
 800582c:	08005eb3 	.word	0x08005eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005838:	b29b      	uxth	r3, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 808e 	beq.w	8005968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800584c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8089 	beq.w	8005968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800587a:	647a      	str	r2, [r7, #68]	; 0x44
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e3      	bne.n	8005856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	623b      	str	r3, [r7, #32]
   return(result);
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058b2:	633a      	str	r2, [r7, #48]	; 0x30
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0310 	bic.w	r3, r3, #16
 80058ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	617b      	str	r3, [r7, #20]
   return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e3      	bne.n	80058d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f844 	bl	80059a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800591e:	e023      	b.n	8005968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_UART_IRQHandler+0x4f4>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 face 	bl	8005eda <UART_Transmit_IT>
    return;
 800593e:	e014      	b.n	800596a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <HAL_UART_IRQHandler+0x51e>
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fb0d 	bl	8005f78 <UART_EndTransmit_IT>
    return;
 800595e:	e004      	b.n	800596a <HAL_UART_IRQHandler+0x51e>
    return;
 8005960:	bf00      	nop
 8005962:	e002      	b.n	800596a <HAL_UART_IRQHandler+0x51e>
      return;
 8005964:	bf00      	nop
 8005966:	e000      	b.n	800596a <HAL_UART_IRQHandler+0x51e>
      return;
 8005968:	bf00      	nop
  }
}
 800596a:	37e8      	adds	r7, #232	; 0xe8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b09c      	sub	sp, #112	; 0x70
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d172      	bne.n	8005abe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	2200      	movs	r2, #0
 80059dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	667b      	str	r3, [r7, #100]	; 0x64
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a32:	647a      	str	r2, [r7, #68]	; 0x44
 8005a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	623b      	str	r3, [r7, #32]
   return(result);
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a66:	633a      	str	r2, [r7, #48]	; 0x30
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d119      	bne.n	8005abe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aaa:	61fa      	str	r2, [r7, #28]
 8005aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ace:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ad4:	f7ff ff67 	bl	80059a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ad8:	e002      	b.n	8005ae0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005adc:	f7fb fe9e 	bl	800181c <HAL_UART_RxCpltCallback>
}
 8005ae0:	bf00      	nop
 8005ae2:	3770      	adds	r7, #112	; 0x70
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d108      	bne.n	8005b16 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff49 	bl	80059a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b14:	e002      	b.n	8005b1c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff ff33 	bl	8005982 <HAL_UART_RxHalfCpltCallback>
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b21      	cmp	r3, #33	; 0x21
 8005b56:	d108      	bne.n	8005b6a <UART_DMAError+0x46>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b64:	68b8      	ldr	r0, [r7, #8]
 8005b66:	f000 f91b 	bl	8005da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b22      	cmp	r3, #34	; 0x22
 8005b8a:	d108      	bne.n	8005b9e <UART_DMAError+0x7a>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b98:	68b8      	ldr	r0, [r7, #8]
 8005b9a:	f000 f928 	bl	8005dee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	f043 0210 	orr.w	r2, r3, #16
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005baa:	68b8      	ldr	r0, [r7, #8]
 8005bac:	f7ff fef2 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc8:	e03b      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d037      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fc ff95 	bl	8002b00 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e03a      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d023      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d020      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d01d      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d116      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8df 	bl	8005dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2208      	movs	r2, #8
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00f      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d0b4      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b098      	sub	sp, #96	; 0x60
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2222      	movs	r2, #34	; 0x22
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c98:	4a3e      	ldr	r2, [pc, #248]	; (8005d94 <UART_Start_Receive_DMA+0x128>)
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	4a3d      	ldr	r2, [pc, #244]	; (8005d98 <UART_Start_Receive_DMA+0x12c>)
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	; (8005d9c <UART_Start_Receive_DMA+0x130>)
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	f7fd f8a6 	bl	8002e1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d019      	beq.n	8005d22 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3314      	adds	r3, #20
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	657b      	str	r3, [r7, #84]	; 0x54
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3314      	adds	r3, #20
 8005d40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d42:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	617b      	str	r3, [r7, #20]
   return(result);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d76:	627a      	str	r2, [r7, #36]	; 0x24
 8005d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6a39      	ldr	r1, [r7, #32]
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3760      	adds	r7, #96	; 0x60
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	080059bd 	.word	0x080059bd
 8005d98:	08005ae9 	.word	0x08005ae9
 8005d9c:	08005b25 	.word	0x08005b25

08005da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	61ba      	str	r2, [r7, #24]
 8005dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005de4:	bf00      	nop
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr

08005dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b095      	sub	sp, #84	; 0x54
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e16:	643a      	str	r2, [r7, #64]	; 0x40
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d119      	bne.n	8005e9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f023 0310 	bic.w	r3, r3, #16
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e86:	61ba      	str	r2, [r7, #24]
 8005e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6979      	ldr	r1, [r7, #20]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	613b      	str	r3, [r7, #16]
   return(result);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ea8:	bf00      	nop
 8005eaa:	3754      	adds	r7, #84	; 0x54
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fd61 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b21      	cmp	r3, #33	; 0x21
 8005eec:	d13e      	bne.n	8005f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	d114      	bne.n	8005f22 <UART_Transmit_IT+0x48>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d110      	bne.n	8005f22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]
 8005f20:	e008      	b.n	8005f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6211      	str	r1, [r2, #32]
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fce9 	bl	8005970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	f040 80ae 	bne.w	800611a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc6:	d117      	bne.n	8005ff8 <UART_Receive_IT+0x50>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d113      	bne.n	8005ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff6:	e026      	b.n	8006046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600a:	d007      	beq.n	800601c <UART_Receive_IT+0x74>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <UART_Receive_IT+0x82>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e008      	b.n	800603c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006036:	b2da      	uxtb	r2, r3
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29b      	uxth	r3, r3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4619      	mov	r1, r3
 8006054:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006056:	2b00      	cmp	r3, #0
 8006058:	d15d      	bne.n	8006116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0220 	bic.w	r2, r2, #32
 8006068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	2b01      	cmp	r3, #1
 800609e:	d135      	bne.n	800610c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	613b      	str	r3, [r7, #16]
   return(result);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f023 0310 	bic.w	r3, r3, #16
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	623a      	str	r2, [r7, #32]
 80060c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	69f9      	ldr	r1, [r7, #28]
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d10a      	bne.n	80060fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff fc4e 	bl	80059a6 <HAL_UARTEx_RxEventCallback>
 800610a:	e002      	b.n	8006112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fb fb85 	bl	800181c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e002      	b.n	800611c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3730      	adds	r7, #48	; 0x30
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800615e:	f023 030c 	bic.w	r3, r3, #12
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	430b      	orrs	r3, r1
 800616a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <UART_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7ff f82c 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	e002      	b.n	800619a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7ff f814 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8006198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <UART_SetConfig+0x118>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	0119      	lsls	r1, r3, #4
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <UART_SetConfig+0x118>)
 80061d2:	fba3 0302 	umull	r0, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	3332      	adds	r3, #50	; 0x32
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <UART_SetConfig+0x118>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f0:	4419      	add	r1, r3
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	fbb2 f2f3 	udiv	r2, r2, r3
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <UART_SetConfig+0x118>)
 800620a:	fba3 0302 	umull	r0, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2064      	movs	r0, #100	; 0x64
 8006212:	fb00 f303 	mul.w	r3, r0, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	3332      	adds	r3, #50	; 0x32
 800621c:	4a07      	ldr	r2, [pc, #28]	; (800623c <UART_SetConfig+0x118>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	440a      	add	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40013800 	.word	0x40013800
 800623c:	51eb851f 	.word	0x51eb851f

08006240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f103 0208 	add.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f103 0208 	add.w	r2, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f103 0208 	add.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d103      	bne.n	80062fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e00c      	b.n	8006316 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3308      	adds	r3, #8
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e002      	b.n	800630a <vListInsert+0x2e>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d2f6      	bcs.n	8006304 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6852      	ldr	r2, [r2, #4]
 800636c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d103      	bne.n	8006380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	1e5a      	subs	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b08e      	sub	sp, #56	; 0x38
 80063a2:	af04      	add	r7, sp, #16
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xTaskCreateStatic+0x46>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61fb      	str	r3, [r7, #28]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e4:	2354      	movs	r3, #84	; 0x54
 80063e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b54      	cmp	r3, #84	; 0x54
 80063ec:	d00a      	beq.n	8006404 <xTaskCreateStatic+0x66>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006404:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <xTaskCreateStatic+0xac>
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	2202      	movs	r2, #2
 8006420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006424:	2300      	movs	r3, #0
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f850 	bl	80064e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006444:	f000 f8d4 	bl	80065f0 <prvAddNewTaskToReadyList>
 8006448:	e001      	b.n	800644e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800644e:	697b      	ldr	r3, [r7, #20]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	; 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	af04      	add	r7, sp, #16
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fe87 	bl	8007180 <pvPortMalloc>
 8006472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800647a:	2054      	movs	r0, #84	; 0x54
 800647c:	f000 fe80 	bl	8007180 <pvPortMalloc>
 8006480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
 800648e:	e005      	b.n	800649c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f000 ff41 	bl	8007318 <vPortFree>
 8006496:	e001      	b.n	800649c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f80e 	bl	80064e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c6:	69f8      	ldr	r0, [r7, #28]
 80064c8:	f000 f892 	bl	80065f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e002      	b.n	80064d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295
 80064d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064d8:	69bb      	ldr	r3, [r7, #24]
	}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b088      	sub	sp, #32
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064fa:	3b01      	subs	r3, #1
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <prvInitialiseNewTask+0x48>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	617b      	str	r3, [r7, #20]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01f      	beq.n	8006570 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e012      	b.n	800655c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	7819      	ldrb	r1, [r3, #0]
 800653e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	4413      	add	r3, r2
 8006544:	3334      	adds	r3, #52	; 0x34
 8006546:	460a      	mov	r2, r1
 8006548:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	2b0f      	cmp	r3, #15
 8006560:	d9e9      	bls.n	8006536 <prvInitialiseNewTask+0x54>
 8006562:	e000      	b.n	8006566 <prvInitialiseNewTask+0x84>
			{
				break;
 8006564:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800656e:	e003      	b.n	8006578 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	2b06      	cmp	r3, #6
 800657c:	d901      	bls.n	8006582 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800657e:	2306      	movs	r3, #6
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	3304      	adds	r3, #4
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fe70 	bl	800627e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	3318      	adds	r3, #24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fe6b 	bl	800627e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	f1c3 0207 	rsb	r2, r3, #7
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2200      	movs	r2, #0
 80065c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	69b8      	ldr	r0, [r7, #24]
 80065d2:	f000 fc21 	bl	8006e18 <pxPortInitialiseStack>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065e8:	bf00      	nop
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065f8:	f000 fd00 	bl	8006ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065fc:	4b2a      	ldr	r3, [pc, #168]	; (80066a8 <prvAddNewTaskToReadyList+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <prvAddNewTaskToReadyList+0xb8>)
 8006604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <prvAddNewTaskToReadyList+0xbc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800660e:	4a27      	ldr	r2, [pc, #156]	; (80066ac <prvAddNewTaskToReadyList+0xbc>)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <prvAddNewTaskToReadyList+0xb8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d110      	bne.n	800663e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800661c:	f000 faba 	bl	8006b94 <prvInitialiseTaskLists>
 8006620:	e00d      	b.n	800663e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006622:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <prvAddNewTaskToReadyList+0xc0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800662a:	4b20      	ldr	r3, [pc, #128]	; (80066ac <prvAddNewTaskToReadyList+0xbc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	429a      	cmp	r2, r3
 8006636:	d802      	bhi.n	800663e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <prvAddNewTaskToReadyList+0xbc>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800663e:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <prvAddNewTaskToReadyList+0xc4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <prvAddNewTaskToReadyList+0xc4>)
 8006646:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	409a      	lsls	r2, r3
 8006650:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4313      	orrs	r3, r2
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <prvAddNewTaskToReadyList+0xcc>)
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff fe10 	bl	8006296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006676:	f000 fcf1 	bl	800705c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <prvAddNewTaskToReadyList+0xc0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <prvAddNewTaskToReadyList+0xbc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	429a      	cmp	r2, r3
 800668e:	d207      	bcs.n	80066a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <prvAddNewTaskToReadyList+0xd0>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000840 	.word	0x20000840
 80066ac:	20000740 	.word	0x20000740
 80066b0:	2000084c 	.word	0x2000084c
 80066b4:	2000085c 	.word	0x2000085c
 80066b8:	20000848 	.word	0x20000848
 80066bc:	20000744 	.word	0x20000744
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d017      	beq.n	8006706 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066d6:	4b13      	ldr	r3, [pc, #76]	; (8006724 <vTaskDelay+0x60>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <vTaskDelay+0x30>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	60bb      	str	r3, [r7, #8]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066f4:	f000 f87a 	bl	80067ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066f8:	2100      	movs	r1, #0
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fb26 	bl	8006d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006700:	f000 f882 	bl	8006808 <xTaskResumeAll>
 8006704:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <vTaskDelay+0x64>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000868 	.word	0x20000868
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800673a:	463a      	mov	r2, r7
 800673c:	1d39      	adds	r1, r7, #4
 800673e:	f107 0308 	add.w	r3, r7, #8
 8006742:	4618      	mov	r0, r3
 8006744:	f7fb f81a 	bl	800177c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	9202      	str	r2, [sp, #8]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	2300      	movs	r3, #0
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	2300      	movs	r3, #0
 8006758:	460a      	mov	r2, r1
 800675a:	491e      	ldr	r1, [pc, #120]	; (80067d4 <vTaskStartScheduler+0xa8>)
 800675c:	481e      	ldr	r0, [pc, #120]	; (80067d8 <vTaskStartScheduler+0xac>)
 800675e:	f7ff fe1e 	bl	800639e <xTaskCreateStatic>
 8006762:	4603      	mov	r3, r0
 8006764:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <vTaskStartScheduler+0xb0>)
 8006766:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006768:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <vTaskStartScheduler+0xb0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e001      	b.n	800677a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d116      	bne.n	80067ae <vTaskStartScheduler+0x82>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <vTaskStartScheduler+0xb4>)
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <vTaskStartScheduler+0xb8>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <vTaskStartScheduler+0xbc>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067a8:	f000 fbb6 	bl	8006f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067ac:	e00e      	b.n	80067cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d10a      	bne.n	80067cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <vTaskStartScheduler+0x9e>
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08008660 	.word	0x08008660
 80067d8:	08006b65 	.word	0x08006b65
 80067dc:	20000864 	.word	0x20000864
 80067e0:	20000860 	.word	0x20000860
 80067e4:	2000084c 	.word	0x2000084c
 80067e8:	20000844 	.word	0x20000844

080067ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <vTaskSuspendAll+0x18>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	4a03      	ldr	r2, [pc, #12]	; (8006804 <vTaskSuspendAll+0x18>)
 80067f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000868 	.word	0x20000868

08006808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006816:	4b41      	ldr	r3, [pc, #260]	; (800691c <xTaskResumeAll+0x114>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <xTaskResumeAll+0x2c>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	603b      	str	r3, [r7, #0]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006834:	f000 fbe2 	bl	8006ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006838:	4b38      	ldr	r3, [pc, #224]	; (800691c <xTaskResumeAll+0x114>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	4a37      	ldr	r2, [pc, #220]	; (800691c <xTaskResumeAll+0x114>)
 8006840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006842:	4b36      	ldr	r3, [pc, #216]	; (800691c <xTaskResumeAll+0x114>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d161      	bne.n	800690e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800684a:	4b35      	ldr	r3, [pc, #212]	; (8006920 <xTaskResumeAll+0x118>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d05d      	beq.n	800690e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006852:	e02e      	b.n	80068b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006854:	4b33      	ldr	r3, [pc, #204]	; (8006924 <xTaskResumeAll+0x11c>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fd73 	bl	800634c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fd6e 	bl	800634c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	2201      	movs	r2, #1
 8006876:	409a      	lsls	r2, r3
 8006878:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <xTaskResumeAll+0x120>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4313      	orrs	r3, r2
 800687e:	4a2a      	ldr	r2, [pc, #168]	; (8006928 <xTaskResumeAll+0x120>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4a27      	ldr	r2, [pc, #156]	; (800692c <xTaskResumeAll+0x124>)
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3304      	adds	r3, #4
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7ff fcfc 	bl	8006296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4b23      	ldr	r3, [pc, #140]	; (8006930 <xTaskResumeAll+0x128>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <xTaskResumeAll+0x12c>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <xTaskResumeAll+0x11c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1cc      	bne.n	8006854 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068c0:	f000 fa06 	bl	8006cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068c4:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <xTaskResumeAll+0x130>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068d0:	f000 f836 	bl	8006940 <xTaskIncrementTick>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068da:	4b16      	ldr	r3, [pc, #88]	; (8006934 <xTaskResumeAll+0x12c>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f1      	bne.n	80068d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80068ec:	4b12      	ldr	r3, [pc, #72]	; (8006938 <xTaskResumeAll+0x130>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <xTaskResumeAll+0x12c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <xTaskResumeAll+0x134>)
 8006900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800690e:	f000 fba5 	bl	800705c <vPortExitCritical>

	return xAlreadyYielded;
 8006912:	68bb      	ldr	r3, [r7, #8]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000868 	.word	0x20000868
 8006920:	20000840 	.word	0x20000840
 8006924:	20000800 	.word	0x20000800
 8006928:	20000848 	.word	0x20000848
 800692c:	20000744 	.word	0x20000744
 8006930:	20000740 	.word	0x20000740
 8006934:	20000854 	.word	0x20000854
 8006938:	20000850 	.word	0x20000850
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694a:	4b4e      	ldr	r3, [pc, #312]	; (8006a84 <xTaskIncrementTick+0x144>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f040 808e 	bne.w	8006a70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006954:	4b4c      	ldr	r3, [pc, #304]	; (8006a88 <xTaskIncrementTick+0x148>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800695c:	4a4a      	ldr	r2, [pc, #296]	; (8006a88 <xTaskIncrementTick+0x148>)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d120      	bne.n	80069aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006968:	4b48      	ldr	r3, [pc, #288]	; (8006a8c <xTaskIncrementTick+0x14c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <xTaskIncrementTick+0x48>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	603b      	str	r3, [r7, #0]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <xTaskIncrementTick+0x46>
 8006988:	4b40      	ldr	r3, [pc, #256]	; (8006a8c <xTaskIncrementTick+0x14c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	4b40      	ldr	r3, [pc, #256]	; (8006a90 <xTaskIncrementTick+0x150>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <xTaskIncrementTick+0x14c>)
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4a3e      	ldr	r2, [pc, #248]	; (8006a90 <xTaskIncrementTick+0x150>)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4b3d      	ldr	r3, [pc, #244]	; (8006a94 <xTaskIncrementTick+0x154>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	4a3c      	ldr	r2, [pc, #240]	; (8006a94 <xTaskIncrementTick+0x154>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	f000 f993 	bl	8006cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069aa:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <xTaskIncrementTick+0x158>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d348      	bcc.n	8006a46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b4:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <xTaskIncrementTick+0x14c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <xTaskIncrementTick+0x158>)
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	601a      	str	r2, [r3, #0]
					break;
 80069c6:	e03e      	b.n	8006a46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <xTaskIncrementTick+0x14c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d203      	bcs.n	80069e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069e0:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <xTaskIncrementTick+0x158>)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069e6:	e02e      	b.n	8006a46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fcad 	bl	800634c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3318      	adds	r3, #24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fca4 	bl	800634c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	2201      	movs	r2, #1
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	4b23      	ldr	r3, [pc, #140]	; (8006a9c <xTaskIncrementTick+0x15c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <xTaskIncrementTick+0x15c>)
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <xTaskIncrementTick+0x160>)
 8006a24:	441a      	add	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7ff fc32 	bl	8006296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <xTaskIncrementTick+0x164>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3b9      	bcc.n	80069b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a44:	e7b6      	b.n	80069b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a46:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <xTaskIncrementTick+0x164>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4914      	ldr	r1, [pc, #80]	; (8006aa0 <xTaskIncrementTick+0x160>)
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d901      	bls.n	8006a62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a62:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <xTaskIncrementTick+0x168>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e004      	b.n	8006a7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <xTaskIncrementTick+0x16c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <xTaskIncrementTick+0x16c>)
 8006a78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a7a:	697b      	ldr	r3, [r7, #20]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000868 	.word	0x20000868
 8006a88:	20000844 	.word	0x20000844
 8006a8c:	200007f8 	.word	0x200007f8
 8006a90:	200007fc 	.word	0x200007fc
 8006a94:	20000858 	.word	0x20000858
 8006a98:	20000860 	.word	0x20000860
 8006a9c:	20000848 	.word	0x20000848
 8006aa0:	20000744 	.word	0x20000744
 8006aa4:	20000740 	.word	0x20000740
 8006aa8:	20000854 	.word	0x20000854
 8006aac:	20000850 	.word	0x20000850

08006ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ab6:	4b26      	ldr	r3, [pc, #152]	; (8006b50 <vTaskSwitchContext+0xa0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <vTaskSwitchContext+0xa4>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ac4:	e03f      	b.n	8006b46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <vTaskSwitchContext+0xa4>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006acc:	4b22      	ldr	r3, [pc, #136]	; (8006b58 <vTaskSwitchContext+0xa8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	fab3 f383 	clz	r3, r3
 8006ad8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	f1c3 031f 	rsb	r3, r3, #31
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	491e      	ldr	r1, [pc, #120]	; (8006b5c <vTaskSwitchContext+0xac>)
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	607b      	str	r3, [r7, #4]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <vTaskSwitchContext+0x5a>
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <vTaskSwitchContext+0xac>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d104      	bne.n	8006b3c <vTaskSwitchContext+0x8c>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4a07      	ldr	r2, [pc, #28]	; (8006b60 <vTaskSwitchContext+0xb0>)
 8006b44:	6013      	str	r3, [r2, #0]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	20000868 	.word	0x20000868
 8006b54:	20000854 	.word	0x20000854
 8006b58:	20000848 	.word	0x20000848
 8006b5c:	20000744 	.word	0x20000744
 8006b60:	20000740 	.word	0x20000740

08006b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b6c:	f000 f852 	bl	8006c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <prvIdleTask+0x28>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d9f9      	bls.n	8006b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <prvIdleTask+0x2c>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b88:	e7f0      	b.n	8006b6c <prvIdleTask+0x8>
 8006b8a:	bf00      	nop
 8006b8c:	20000744 	.word	0x20000744
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	e00c      	b.n	8006bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4a12      	ldr	r2, [pc, #72]	; (8006bf4 <prvInitialiseTaskLists+0x60>)
 8006bac:	4413      	add	r3, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fb46 	bl	8006240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b06      	cmp	r3, #6
 8006bbe:	d9ef      	bls.n	8006ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bc0:	480d      	ldr	r0, [pc, #52]	; (8006bf8 <prvInitialiseTaskLists+0x64>)
 8006bc2:	f7ff fb3d 	bl	8006240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bc6:	480d      	ldr	r0, [pc, #52]	; (8006bfc <prvInitialiseTaskLists+0x68>)
 8006bc8:	f7ff fb3a 	bl	8006240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bcc:	480c      	ldr	r0, [pc, #48]	; (8006c00 <prvInitialiseTaskLists+0x6c>)
 8006bce:	f7ff fb37 	bl	8006240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bd2:	480c      	ldr	r0, [pc, #48]	; (8006c04 <prvInitialiseTaskLists+0x70>)
 8006bd4:	f7ff fb34 	bl	8006240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bd8:	480b      	ldr	r0, [pc, #44]	; (8006c08 <prvInitialiseTaskLists+0x74>)
 8006bda:	f7ff fb31 	bl	8006240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <prvInitialiseTaskLists+0x78>)
 8006be0:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <prvInitialiseTaskLists+0x64>)
 8006be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <prvInitialiseTaskLists+0x7c>)
 8006be6:	4a05      	ldr	r2, [pc, #20]	; (8006bfc <prvInitialiseTaskLists+0x68>)
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000744 	.word	0x20000744
 8006bf8:	200007d0 	.word	0x200007d0
 8006bfc:	200007e4 	.word	0x200007e4
 8006c00:	20000800 	.word	0x20000800
 8006c04:	20000814 	.word	0x20000814
 8006c08:	2000082c 	.word	0x2000082c
 8006c0c:	200007f8 	.word	0x200007f8
 8006c10:	200007fc 	.word	0x200007fc

08006c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c1a:	e019      	b.n	8006c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c1c:	f000 f9ee 	bl	8006ffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c20:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <prvCheckTasksWaitingTermination+0x50>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fb8d 	bl	800634c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c32:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <prvCheckTasksWaitingTermination+0x54>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	4a0b      	ldr	r2, [pc, #44]	; (8006c68 <prvCheckTasksWaitingTermination+0x54>)
 8006c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <prvCheckTasksWaitingTermination+0x58>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <prvCheckTasksWaitingTermination+0x58>)
 8006c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c46:	f000 fa09 	bl	800705c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f810 	bl	8006c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <prvCheckTasksWaitingTermination+0x58>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e1      	bne.n	8006c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000814 	.word	0x20000814
 8006c68:	20000840 	.word	0x20000840
 8006c6c:	20000828 	.word	0x20000828

08006c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb46 	bl	8007318 <vPortFree>
				vPortFree( pxTCB );
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb43 	bl	8007318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c92:	e018      	b.n	8006cc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d103      	bne.n	8006ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb3a 	bl	8007318 <vPortFree>
	}
 8006ca4:	e00f      	b.n	8006cc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d00a      	beq.n	8006cc6 <prvDeleteTCB+0x56>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <prvDeleteTCB+0x54>
	}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <prvResetNextTaskUnblockTime+0x38>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvResetNextTaskUnblockTime+0x3c>)
 8006ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ce8:	e008      	b.n	8006cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <prvResetNextTaskUnblockTime+0x38>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <prvResetNextTaskUnblockTime+0x3c>)
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	200007f8 	.word	0x200007f8
 8006d0c:	20000860 	.word	0x20000860

08006d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <xTaskGetSchedulerState+0x34>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	e008      	b.n	8006d36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d24:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <xTaskGetSchedulerState+0x38>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	607b      	str	r3, [r7, #4]
 8006d30:	e001      	b.n	8006d36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d36:	687b      	ldr	r3, [r7, #4]
	}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	2000084c 	.word	0x2000084c
 8006d48:	20000868 	.word	0x20000868

08006d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5c:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff faf2 	bl	800634c <uxListRemove>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	2201      	movs	r2, #1
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4013      	ands	r3, r2
 8006d82:	4a20      	ldr	r2, [pc, #128]	; (8006e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d10a      	bne.n	8006da4 <prvAddCurrentTaskToDelayedList+0x58>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d94:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	481a      	ldr	r0, [pc, #104]	; (8006e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d9e:	f7ff fa7a 	bl	8006296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006da2:	e026      	b.n	8006df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dac:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d209      	bcs.n	8006dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7ff fa87 	bl	80062dc <vListInsert>
}
 8006dce:	e010      	b.n	8006df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7ff fa7d 	bl	80062dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d202      	bcs.n	8006df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6013      	str	r3, [r2, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000844 	.word	0x20000844
 8006e00:	20000740 	.word	0x20000740
 8006e04:	20000848 	.word	0x20000848
 8006e08:	2000082c 	.word	0x2000082c
 8006e0c:	200007fc 	.word	0x200007fc
 8006e10:	200007f8 	.word	0x200007f8
 8006e14:	20000860 	.word	0x20000860

08006e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3b04      	subs	r3, #4
 8006e28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3b04      	subs	r3, #4
 8006e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3b04      	subs	r3, #4
 8006e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <pxPortInitialiseStack+0x54>)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b14      	subs	r3, #20
 8006e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b20      	subs	r3, #32
 8006e5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr
 8006e6c:	08006e71 	.word	0x08006e71

08006e70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <prvTaskExitError+0x54>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d00a      	beq.n	8006e9a <prvTaskExitError+0x2a>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	60fb      	str	r3, [r7, #12]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <prvTaskExitError+0x28>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eae:	bf00      	nop
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0fc      	beq.n	8006eb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	200000a4 	.word	0x200000a4
	...

08006ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <pxCurrentTCBConst2>)
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eda:	f380 8809 	msr	PSP, r0
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f04f 0000 	mov.w	r0, #0
 8006ee6:	f380 8811 	msr	BASEPRI, r0
 8006eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8006eee:	4770      	bx	lr

08006ef0 <pxCurrentTCBConst2>:
 8006ef0:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ef8:	4806      	ldr	r0, [pc, #24]	; (8006f14 <prvPortStartFirstTask+0x1c>)
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	f380 8808 	msr	MSP, r0
 8006f02:	b662      	cpsie	i
 8006f04:	b661      	cpsie	f
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	df00      	svc	0
 8006f10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f12:	bf00      	nop
 8006f14:	e000ed08 	.word	0xe000ed08

08006f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f1e:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <xPortStartScheduler+0xd0>)
 8006f20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <xPortStartScheduler+0xd4>)
 8006f44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f48:	2207      	movs	r2, #7
 8006f4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f4c:	e009      	b.n	8006f62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f4e:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6a:	2b80      	cmp	r3, #128	; 0x80
 8006f6c:	d0ef      	beq.n	8006f4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f6e:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1c3 0307 	rsb	r3, r3, #7
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d00a      	beq.n	8006f90 <xPortStartScheduler+0x78>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60bb      	str	r3, [r7, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fa2:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <xPortStartScheduler+0xd8>)
 8006fa4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fae:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <xPortStartScheduler+0xdc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a10      	ldr	r2, [pc, #64]	; (8006ff4 <xPortStartScheduler+0xdc>)
 8006fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <xPortStartScheduler+0xdc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <xPortStartScheduler+0xdc>)
 8006fc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fc6:	f000 f8b9 	bl	800713c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <xPortStartScheduler+0xe0>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fd0:	f7ff ff92 	bl	8006ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fd4:	f7ff fd6c 	bl	8006ab0 <vTaskSwitchContext>
	prvTaskExitError();
 8006fd8:	f7ff ff4a 	bl	8006e70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	e000e400 	.word	0xe000e400
 8006fec:	2000086c 	.word	0x2000086c
 8006ff0:	20000870 	.word	0x20000870
 8006ff4:	e000ed20 	.word	0xe000ed20
 8006ff8:	200000a4 	.word	0x200000a4

08006ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
}
 8007014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <vPortEnterCritical+0x58>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <vPortEnterCritical+0x58>)
 800701e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <vPortEnterCritical+0x58>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10f      	bne.n	8007048 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <vPortEnterCritical+0x5c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <vPortEnterCritical+0x4c>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	603b      	str	r3, [r7, #0]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <vPortEnterCritical+0x4a>
	}
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	200000a4 	.word	0x200000a4
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <vPortExitCritical+0x4c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <vPortExitCritical+0x24>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	607b      	str	r3, [r7, #4]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <vPortExitCritical+0x4c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <vPortExitCritical+0x4c>)
 8007088:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <vPortExitCritical+0x4c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <vPortExitCritical+0x42>
 8007092:	2300      	movs	r3, #0
 8007094:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800709c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	200000a4 	.word	0x200000a4
 80070ac:	00000000 	.word	0x00000000

080070b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070b0:	f3ef 8009 	mrs	r0, PSP
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <pxCurrentTCBConst>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070c0:	6010      	str	r0, [r2, #0]
 80070c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80070c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070ca:	f380 8811 	msr	BASEPRI, r0
 80070ce:	f7ff fcef 	bl	8006ab0 <vTaskSwitchContext>
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8811 	msr	BASEPRI, r0
 80070da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	6808      	ldr	r0, [r1, #0]
 80070e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070e6:	f380 8809 	msr	PSP, r0
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	4770      	bx	lr

080070f0 <pxCurrentTCBConst>:
 80070f0:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007112:	f7ff fc15 	bl	8006940 <xTaskIncrementTick>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <xPortSysTickHandler+0x40>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f383 8811 	msr	BASEPRI, r3
}
 800712e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <vPortSetupTimerInterrupt+0x30>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007146:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <vPortSetupTimerInterrupt+0x38>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a09      	ldr	r2, [pc, #36]	; (8007178 <vPortSetupTimerInterrupt+0x3c>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <vPortSetupTimerInterrupt+0x40>)
 800715a:	3b01      	subs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800715e:	4b03      	ldr	r3, [pc, #12]	; (800716c <vPortSetupTimerInterrupt+0x30>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	e000e010 	.word	0xe000e010
 8007170:	e000e018 	.word	0xe000e018
 8007174:	20000098 	.word	0x20000098
 8007178:	10624dd3 	.word	0x10624dd3
 800717c:	e000e014 	.word	0xe000e014

08007180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800718c:	f7ff fb2e 	bl	80067ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007190:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <pvPortMalloc+0x180>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007198:	f000 f920 	bl	80073dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800719c:	4b59      	ldr	r3, [pc, #356]	; (8007304 <pvPortMalloc+0x184>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8093 	bne.w	80072d0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01d      	beq.n	80071ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071b0:	2208      	movs	r2, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d014      	beq.n	80071ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f023 0307 	bic.w	r3, r3, #7
 80071c8:	3308      	adds	r3, #8
 80071ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <pvPortMalloc+0x6c>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	617b      	str	r3, [r7, #20]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d06e      	beq.n	80072d0 <pvPortMalloc+0x150>
 80071f2:	4b45      	ldr	r3, [pc, #276]	; (8007308 <pvPortMalloc+0x188>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d869      	bhi.n	80072d0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071fc:	4b43      	ldr	r3, [pc, #268]	; (800730c <pvPortMalloc+0x18c>)
 80071fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007200:	4b42      	ldr	r3, [pc, #264]	; (800730c <pvPortMalloc+0x18c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007206:	e004      	b.n	8007212 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d903      	bls.n	8007224 <pvPortMalloc+0xa4>
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f1      	bne.n	8007208 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <pvPortMalloc+0x180>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722a:	429a      	cmp	r2, r3
 800722c:	d050      	beq.n	80072d0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2208      	movs	r2, #8
 8007234:	4413      	add	r3, r2
 8007236:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	2308      	movs	r3, #8
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	429a      	cmp	r2, r3
 800724e:	d91f      	bls.n	8007290 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4413      	add	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <pvPortMalloc+0xf8>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	613b      	str	r3, [r7, #16]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f000 f908 	bl	80074a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007290:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <pvPortMalloc+0x188>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <pvPortMalloc+0x188>)
 800729c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800729e:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <pvPortMalloc+0x188>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <pvPortMalloc+0x190>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d203      	bcs.n	80072b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <pvPortMalloc+0x188>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a18      	ldr	r2, [pc, #96]	; (8007310 <pvPortMalloc+0x190>)
 80072b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <pvPortMalloc+0x184>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <pvPortMalloc+0x194>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	4a11      	ldr	r2, [pc, #68]	; (8007314 <pvPortMalloc+0x194>)
 80072ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072d0:	f7ff fa9a 	bl	8006808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <pvPortMalloc+0x174>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60fb      	str	r3, [r7, #12]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <pvPortMalloc+0x172>
	return pvReturn;
 80072f4:	69fb      	ldr	r3, [r7, #28]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3728      	adds	r7, #40	; 0x28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	2000147c 	.word	0x2000147c
 8007304:	20001490 	.word	0x20001490
 8007308:	20001480 	.word	0x20001480
 800730c:	20001474 	.word	0x20001474
 8007310:	20001484 	.word	0x20001484
 8007314:	20001488 	.word	0x20001488

08007318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04d      	beq.n	80073c6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800732a:	2308      	movs	r3, #8
 800732c:	425b      	negs	r3, r3
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4413      	add	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <vPortFree+0xb8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <vPortFree+0x44>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <vPortFree+0x62>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60bb      	str	r3, [r7, #8]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <vPortFree+0xb8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4013      	ands	r3, r2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01e      	beq.n	80073c6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d11a      	bne.n	80073c6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <vPortFree+0xb8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	43db      	mvns	r3, r3
 800739a:	401a      	ands	r2, r3
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073a0:	f7ff fa24 	bl	80067ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <vPortFree+0xbc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <vPortFree+0xbc>)
 80073b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073b2:	6938      	ldr	r0, [r7, #16]
 80073b4:	f000 f874 	bl	80074a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <vPortFree+0xc0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	4a06      	ldr	r2, [pc, #24]	; (80073d8 <vPortFree+0xc0>)
 80073c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073c2:	f7ff fa21 	bl	8006808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073c6:	bf00      	nop
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20001490 	.word	0x20001490
 80073d4:	20001480 	.word	0x20001480
 80073d8:	2000148c 	.word	0x2000148c

080073dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073e8:	4b27      	ldr	r3, [pc, #156]	; (8007488 <prvHeapInit+0xac>)
 80073ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3307      	adds	r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0307 	bic.w	r3, r3, #7
 8007402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <prvHeapInit+0xac>)
 800740c:	4413      	add	r3, r2
 800740e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007414:	4a1d      	ldr	r2, [pc, #116]	; (800748c <prvHeapInit+0xb0>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800741a:	4b1c      	ldr	r3, [pc, #112]	; (800748c <prvHeapInit+0xb0>)
 800741c:	2200      	movs	r2, #0
 800741e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4413      	add	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007428:	2208      	movs	r2, #8
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0307 	bic.w	r3, r3, #7
 8007436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <prvHeapInit+0xb4>)
 800743c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800743e:	4b14      	ldr	r3, [pc, #80]	; (8007490 <prvHeapInit+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <prvHeapInit+0xb4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <prvHeapInit+0xb4>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <prvHeapInit+0xb8>)
 800746a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4a09      	ldr	r2, [pc, #36]	; (8007498 <prvHeapInit+0xbc>)
 8007472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <prvHeapInit+0xc0>)
 8007476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800747a:	601a      	str	r2, [r3, #0]
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000874 	.word	0x20000874
 800748c:	20001474 	.word	0x20001474
 8007490:	2000147c 	.word	0x2000147c
 8007494:	20001484 	.word	0x20001484
 8007498:	20001480 	.word	0x20001480
 800749c:	20001490 	.word	0x20001490

080074a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074a8:	4b27      	ldr	r3, [pc, #156]	; (8007548 <prvInsertBlockIntoFreeList+0xa8>)
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e002      	b.n	80074b4 <prvInsertBlockIntoFreeList+0x14>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d8f7      	bhi.n	80074ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d108      	bne.n	80074e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	441a      	add	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	441a      	add	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d118      	bne.n	8007528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b14      	ldr	r3, [pc, #80]	; (800754c <prvInsertBlockIntoFreeList+0xac>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d00d      	beq.n	800751e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	441a      	add	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e008      	b.n	8007530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <prvInsertBlockIntoFreeList+0xac>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e003      	b.n	8007530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d002      	beq.n	800753e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr
 8007548:	20001474 	.word	0x20001474
 800754c:	2000147c 	.word	0x2000147c

08007550 <siprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007556:	b500      	push	{lr}
 8007558:	b09c      	sub	sp, #112	; 0x70
 800755a:	ab1d      	add	r3, sp, #116	; 0x74
 800755c:	9002      	str	r0, [sp, #8]
 800755e:	9006      	str	r0, [sp, #24]
 8007560:	9107      	str	r1, [sp, #28]
 8007562:	9104      	str	r1, [sp, #16]
 8007564:	4808      	ldr	r0, [pc, #32]	; (8007588 <siprintf+0x38>)
 8007566:	4909      	ldr	r1, [pc, #36]	; (800758c <siprintf+0x3c>)
 8007568:	f853 2b04 	ldr.w	r2, [r3], #4
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	a902      	add	r1, sp, #8
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	f000 f99c 	bl	80078b0 <_svfiprintf_r>
 8007578:	2200      	movs	r2, #0
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	b01c      	add	sp, #112	; 0x70
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	200000f4 	.word	0x200000f4
 800758c:	ffff0208 	.word	0xffff0208

08007590 <memset>:
 8007590:	4603      	mov	r3, r0
 8007592:	4402      	add	r2, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	200000f4 	.word	0x200000f4

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	2600      	movs	r6, #0
 80075b0:	4d0c      	ldr	r5, [pc, #48]	; (80075e4 <__libc_init_array+0x38>)
 80075b2:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b4:	1b64      	subs	r4, r4, r5
 80075b6:	10a4      	asrs	r4, r4, #2
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	f001 f81a 	bl	80085f4 <_init>
 80075c0:	2600      	movs	r6, #0
 80075c2:	4d0a      	ldr	r5, [pc, #40]	; (80075ec <__libc_init_array+0x40>)
 80075c4:	4c0a      	ldr	r4, [pc, #40]	; (80075f0 <__libc_init_array+0x44>)
 80075c6:	1b64      	subs	r4, r4, r5
 80075c8:	10a4      	asrs	r4, r4, #2
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	08008738 	.word	0x08008738
 80075e8:	08008738 	.word	0x08008738
 80075ec:	08008738 	.word	0x08008738
 80075f0:	0800873c 	.word	0x0800873c

080075f4 <__retarget_lock_acquire_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_release_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <memcpy>:
 80075f8:	440a      	add	r2, r1
 80075fa:	4291      	cmp	r1, r2
 80075fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007600:	d100      	bne.n	8007604 <memcpy+0xc>
 8007602:	4770      	bx	lr
 8007604:	b510      	push	{r4, lr}
 8007606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760a:	4291      	cmp	r1, r2
 800760c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007610:	d1f9      	bne.n	8007606 <memcpy+0xe>
 8007612:	bd10      	pop	{r4, pc}

08007614 <_free_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4605      	mov	r5, r0
 8007618:	2900      	cmp	r1, #0
 800761a:	d040      	beq.n	800769e <_free_r+0x8a>
 800761c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007620:	1f0c      	subs	r4, r1, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfb8      	it	lt
 8007626:	18e4      	addlt	r4, r4, r3
 8007628:	f000 f8dc 	bl	80077e4 <__malloc_lock>
 800762c:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <_free_r+0x8c>)
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	b933      	cbnz	r3, 8007640 <_free_r+0x2c>
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	6014      	str	r4, [r2, #0]
 8007636:	4628      	mov	r0, r5
 8007638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763c:	f000 b8d8 	b.w	80077f0 <__malloc_unlock>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d908      	bls.n	8007656 <_free_r+0x42>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf01      	itttt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	1809      	addeq	r1, r1, r0
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	e7ed      	b.n	8007632 <_free_r+0x1e>
 8007656:	461a      	mov	r2, r3
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b10b      	cbz	r3, 8007660 <_free_r+0x4c>
 800765c:	42a3      	cmp	r3, r4
 800765e:	d9fa      	bls.n	8007656 <_free_r+0x42>
 8007660:	6811      	ldr	r1, [r2, #0]
 8007662:	1850      	adds	r0, r2, r1
 8007664:	42a0      	cmp	r0, r4
 8007666:	d10b      	bne.n	8007680 <_free_r+0x6c>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	4401      	add	r1, r0
 800766c:	1850      	adds	r0, r2, r1
 800766e:	4283      	cmp	r3, r0
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	d1e0      	bne.n	8007636 <_free_r+0x22>
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4408      	add	r0, r1
 800767a:	6010      	str	r0, [r2, #0]
 800767c:	6053      	str	r3, [r2, #4]
 800767e:	e7da      	b.n	8007636 <_free_r+0x22>
 8007680:	d902      	bls.n	8007688 <_free_r+0x74>
 8007682:	230c      	movs	r3, #12
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	e7d6      	b.n	8007636 <_free_r+0x22>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	1821      	adds	r1, r4, r0
 800768c:	428b      	cmp	r3, r1
 800768e:	bf01      	itttt	eq
 8007690:	6819      	ldreq	r1, [r3, #0]
 8007692:	685b      	ldreq	r3, [r3, #4]
 8007694:	1809      	addeq	r1, r1, r0
 8007696:	6021      	streq	r1, [r4, #0]
 8007698:	6063      	str	r3, [r4, #4]
 800769a:	6054      	str	r4, [r2, #4]
 800769c:	e7cb      	b.n	8007636 <_free_r+0x22>
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	200015d4 	.word	0x200015d4

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0e      	ldr	r6, [pc, #56]	; (80076e0 <sbrk_aligned+0x3c>)
 80076a8:	460c      	mov	r4, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	4605      	mov	r5, r0
 80076ae:	b911      	cbnz	r1, 80076b6 <sbrk_aligned+0x12>
 80076b0:	f000 fbaa 	bl	8007e08 <_sbrk_r>
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 fba5 	bl	8007e08 <_sbrk_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d00a      	beq.n	80076d8 <sbrk_aligned+0x34>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d007      	beq.n	80076dc <sbrk_aligned+0x38>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fb9a 	bl	8007e08 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d101      	bne.n	80076dc <sbrk_aligned+0x38>
 80076d8:	f04f 34ff 	mov.w	r4, #4294967295
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	200015d8 	.word	0x200015d8

080076e4 <_malloc_r>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4607      	mov	r7, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d905      	bls.n	800770c <_malloc_r+0x28>
 8007700:	230c      	movs	r3, #12
 8007702:	2600      	movs	r6, #0
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4630      	mov	r0, r6
 8007708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077e0 <_malloc_r+0xfc>
 8007710:	f000 f868 	bl	80077e4 <__malloc_lock>
 8007714:	f8d8 3000 	ldr.w	r3, [r8]
 8007718:	461c      	mov	r4, r3
 800771a:	bb5c      	cbnz	r4, 8007774 <_malloc_r+0x90>
 800771c:	4629      	mov	r1, r5
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ffc0 	bl	80076a4 <sbrk_aligned>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	4604      	mov	r4, r0
 8007728:	d155      	bne.n	80077d6 <_malloc_r+0xf2>
 800772a:	f8d8 4000 	ldr.w	r4, [r8]
 800772e:	4626      	mov	r6, r4
 8007730:	2e00      	cmp	r6, #0
 8007732:	d145      	bne.n	80077c0 <_malloc_r+0xdc>
 8007734:	2c00      	cmp	r4, #0
 8007736:	d048      	beq.n	80077ca <_malloc_r+0xe6>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	4631      	mov	r1, r6
 800773c:	4638      	mov	r0, r7
 800773e:	eb04 0903 	add.w	r9, r4, r3
 8007742:	f000 fb61 	bl	8007e08 <_sbrk_r>
 8007746:	4581      	cmp	r9, r0
 8007748:	d13f      	bne.n	80077ca <_malloc_r+0xe6>
 800774a:	6821      	ldr	r1, [r4, #0]
 800774c:	4638      	mov	r0, r7
 800774e:	1a6d      	subs	r5, r5, r1
 8007750:	4629      	mov	r1, r5
 8007752:	f7ff ffa7 	bl	80076a4 <sbrk_aligned>
 8007756:	3001      	adds	r0, #1
 8007758:	d037      	beq.n	80077ca <_malloc_r+0xe6>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	442b      	add	r3, r5
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	f8d8 3000 	ldr.w	r3, [r8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d038      	beq.n	80077da <_malloc_r+0xf6>
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	42a2      	cmp	r2, r4
 800776c:	d12b      	bne.n	80077c6 <_malloc_r+0xe2>
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	e00f      	b.n	8007794 <_malloc_r+0xb0>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	1b52      	subs	r2, r2, r5
 8007778:	d41f      	bmi.n	80077ba <_malloc_r+0xd6>
 800777a:	2a0b      	cmp	r2, #11
 800777c:	d917      	bls.n	80077ae <_malloc_r+0xca>
 800777e:	1961      	adds	r1, r4, r5
 8007780:	42a3      	cmp	r3, r4
 8007782:	6025      	str	r5, [r4, #0]
 8007784:	bf18      	it	ne
 8007786:	6059      	strne	r1, [r3, #4]
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	bf08      	it	eq
 800778c:	f8c8 1000 	streq.w	r1, [r8]
 8007790:	5162      	str	r2, [r4, r5]
 8007792:	604b      	str	r3, [r1, #4]
 8007794:	4638      	mov	r0, r7
 8007796:	f104 060b 	add.w	r6, r4, #11
 800779a:	f000 f829 	bl	80077f0 <__malloc_unlock>
 800779e:	f026 0607 	bic.w	r6, r6, #7
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	1af2      	subs	r2, r6, r3
 80077a6:	d0ae      	beq.n	8007706 <_malloc_r+0x22>
 80077a8:	1b9b      	subs	r3, r3, r6
 80077aa:	50a3      	str	r3, [r4, r2]
 80077ac:	e7ab      	b.n	8007706 <_malloc_r+0x22>
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	d1dd      	bne.n	8007770 <_malloc_r+0x8c>
 80077b4:	f8c8 2000 	str.w	r2, [r8]
 80077b8:	e7ec      	b.n	8007794 <_malloc_r+0xb0>
 80077ba:	4623      	mov	r3, r4
 80077bc:	6864      	ldr	r4, [r4, #4]
 80077be:	e7ac      	b.n	800771a <_malloc_r+0x36>
 80077c0:	4634      	mov	r4, r6
 80077c2:	6876      	ldr	r6, [r6, #4]
 80077c4:	e7b4      	b.n	8007730 <_malloc_r+0x4c>
 80077c6:	4613      	mov	r3, r2
 80077c8:	e7cc      	b.n	8007764 <_malloc_r+0x80>
 80077ca:	230c      	movs	r3, #12
 80077cc:	4638      	mov	r0, r7
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	f000 f80e 	bl	80077f0 <__malloc_unlock>
 80077d4:	e797      	b.n	8007706 <_malloc_r+0x22>
 80077d6:	6025      	str	r5, [r4, #0]
 80077d8:	e7dc      	b.n	8007794 <_malloc_r+0xb0>
 80077da:	605b      	str	r3, [r3, #4]
 80077dc:	deff      	udf	#255	; 0xff
 80077de:	bf00      	nop
 80077e0:	200015d4 	.word	0x200015d4

080077e4 <__malloc_lock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__malloc_lock+0x8>)
 80077e6:	f7ff bf05 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 80077ea:	bf00      	nop
 80077ec:	200015d0 	.word	0x200015d0

080077f0 <__malloc_unlock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_unlock+0x8>)
 80077f2:	f7ff bf00 	b.w	80075f6 <__retarget_lock_release_recursive>
 80077f6:	bf00      	nop
 80077f8:	200015d0 	.word	0x200015d0

080077fc <__ssputs_r>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	461f      	mov	r7, r3
 8007802:	688e      	ldr	r6, [r1, #8]
 8007804:	4682      	mov	sl, r0
 8007806:	42be      	cmp	r6, r7
 8007808:	460c      	mov	r4, r1
 800780a:	4690      	mov	r8, r2
 800780c:	680b      	ldr	r3, [r1, #0]
 800780e:	d82c      	bhi.n	800786a <__ssputs_r+0x6e>
 8007810:	898a      	ldrh	r2, [r1, #12]
 8007812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007816:	d026      	beq.n	8007866 <__ssputs_r+0x6a>
 8007818:	6965      	ldr	r5, [r4, #20]
 800781a:	6909      	ldr	r1, [r1, #16]
 800781c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007820:	eba3 0901 	sub.w	r9, r3, r1
 8007824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007828:	1c7b      	adds	r3, r7, #1
 800782a:	444b      	add	r3, r9
 800782c:	106d      	asrs	r5, r5, #1
 800782e:	429d      	cmp	r5, r3
 8007830:	bf38      	it	cc
 8007832:	461d      	movcc	r5, r3
 8007834:	0553      	lsls	r3, r2, #21
 8007836:	d527      	bpl.n	8007888 <__ssputs_r+0x8c>
 8007838:	4629      	mov	r1, r5
 800783a:	f7ff ff53 	bl	80076e4 <_malloc_r>
 800783e:	4606      	mov	r6, r0
 8007840:	b360      	cbz	r0, 800789c <__ssputs_r+0xa0>
 8007842:	464a      	mov	r2, r9
 8007844:	6921      	ldr	r1, [r4, #16]
 8007846:	f7ff fed7 	bl	80075f8 <memcpy>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007854:	81a3      	strh	r3, [r4, #12]
 8007856:	6126      	str	r6, [r4, #16]
 8007858:	444e      	add	r6, r9
 800785a:	6026      	str	r6, [r4, #0]
 800785c:	463e      	mov	r6, r7
 800785e:	6165      	str	r5, [r4, #20]
 8007860:	eba5 0509 	sub.w	r5, r5, r9
 8007864:	60a5      	str	r5, [r4, #8]
 8007866:	42be      	cmp	r6, r7
 8007868:	d900      	bls.n	800786c <__ssputs_r+0x70>
 800786a:	463e      	mov	r6, r7
 800786c:	4632      	mov	r2, r6
 800786e:	4641      	mov	r1, r8
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	f000 faaf 	bl	8007dd4 <memmove>
 8007876:	2000      	movs	r0, #0
 8007878:	68a3      	ldr	r3, [r4, #8]
 800787a:	1b9b      	subs	r3, r3, r6
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	4433      	add	r3, r6
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007888:	462a      	mov	r2, r5
 800788a:	f000 fadb 	bl	8007e44 <_realloc_r>
 800788e:	4606      	mov	r6, r0
 8007890:	2800      	cmp	r0, #0
 8007892:	d1e0      	bne.n	8007856 <__ssputs_r+0x5a>
 8007894:	4650      	mov	r0, sl
 8007896:	6921      	ldr	r1, [r4, #16]
 8007898:	f7ff febc 	bl	8007614 <_free_r>
 800789c:	230c      	movs	r3, #12
 800789e:	f8ca 3000 	str.w	r3, [sl]
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	e7e9      	b.n	8007884 <__ssputs_r+0x88>

080078b0 <_svfiprintf_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4698      	mov	r8, r3
 80078b6:	898b      	ldrh	r3, [r1, #12]
 80078b8:	4607      	mov	r7, r0
 80078ba:	061b      	lsls	r3, r3, #24
 80078bc:	460d      	mov	r5, r1
 80078be:	4614      	mov	r4, r2
 80078c0:	b09d      	sub	sp, #116	; 0x74
 80078c2:	d50e      	bpl.n	80078e2 <_svfiprintf_r+0x32>
 80078c4:	690b      	ldr	r3, [r1, #16]
 80078c6:	b963      	cbnz	r3, 80078e2 <_svfiprintf_r+0x32>
 80078c8:	2140      	movs	r1, #64	; 0x40
 80078ca:	f7ff ff0b 	bl	80076e4 <_malloc_r>
 80078ce:	6028      	str	r0, [r5, #0]
 80078d0:	6128      	str	r0, [r5, #16]
 80078d2:	b920      	cbnz	r0, 80078de <_svfiprintf_r+0x2e>
 80078d4:	230c      	movs	r3, #12
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	e0d0      	b.n	8007a80 <_svfiprintf_r+0x1d0>
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	616b      	str	r3, [r5, #20]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9309      	str	r3, [sp, #36]	; 0x24
 80078e6:	2320      	movs	r3, #32
 80078e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ec:	2330      	movs	r3, #48	; 0x30
 80078ee:	f04f 0901 	mov.w	r9, #1
 80078f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007a98 <_svfiprintf_r+0x1e8>
 80078fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078fe:	4623      	mov	r3, r4
 8007900:	469a      	mov	sl, r3
 8007902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007906:	b10a      	cbz	r2, 800790c <_svfiprintf_r+0x5c>
 8007908:	2a25      	cmp	r2, #37	; 0x25
 800790a:	d1f9      	bne.n	8007900 <_svfiprintf_r+0x50>
 800790c:	ebba 0b04 	subs.w	fp, sl, r4
 8007910:	d00b      	beq.n	800792a <_svfiprintf_r+0x7a>
 8007912:	465b      	mov	r3, fp
 8007914:	4622      	mov	r2, r4
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ff6f 	bl	80077fc <__ssputs_r>
 800791e:	3001      	adds	r0, #1
 8007920:	f000 80a9 	beq.w	8007a76 <_svfiprintf_r+0x1c6>
 8007924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007926:	445a      	add	r2, fp
 8007928:	9209      	str	r2, [sp, #36]	; 0x24
 800792a:	f89a 3000 	ldrb.w	r3, [sl]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80a1 	beq.w	8007a76 <_svfiprintf_r+0x1c6>
 8007934:	2300      	movs	r3, #0
 8007936:	f04f 32ff 	mov.w	r2, #4294967295
 800793a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800793e:	f10a 0a01 	add.w	sl, sl, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794a:	931a      	str	r3, [sp, #104]	; 0x68
 800794c:	4654      	mov	r4, sl
 800794e:	2205      	movs	r2, #5
 8007950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007954:	4850      	ldr	r0, [pc, #320]	; (8007a98 <_svfiprintf_r+0x1e8>)
 8007956:	f000 fa67 	bl	8007e28 <memchr>
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	b9d8      	cbnz	r0, 8007996 <_svfiprintf_r+0xe6>
 800795e:	06d0      	lsls	r0, r2, #27
 8007960:	bf44      	itt	mi
 8007962:	2320      	movmi	r3, #32
 8007964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007968:	0711      	lsls	r1, r2, #28
 800796a:	bf44      	itt	mi
 800796c:	232b      	movmi	r3, #43	; 0x2b
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007972:	f89a 3000 	ldrb.w	r3, [sl]
 8007976:	2b2a      	cmp	r3, #42	; 0x2a
 8007978:	d015      	beq.n	80079a6 <_svfiprintf_r+0xf6>
 800797a:	4654      	mov	r4, sl
 800797c:	2000      	movs	r0, #0
 800797e:	f04f 0c0a 	mov.w	ip, #10
 8007982:	9a07      	ldr	r2, [sp, #28]
 8007984:	4621      	mov	r1, r4
 8007986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798a:	3b30      	subs	r3, #48	; 0x30
 800798c:	2b09      	cmp	r3, #9
 800798e:	d94d      	bls.n	8007a2c <_svfiprintf_r+0x17c>
 8007990:	b1b0      	cbz	r0, 80079c0 <_svfiprintf_r+0x110>
 8007992:	9207      	str	r2, [sp, #28]
 8007994:	e014      	b.n	80079c0 <_svfiprintf_r+0x110>
 8007996:	eba0 0308 	sub.w	r3, r0, r8
 800799a:	fa09 f303 	lsl.w	r3, r9, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	46a2      	mov	sl, r4
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	e7d2      	b.n	800794c <_svfiprintf_r+0x9c>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9103      	str	r1, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfbb      	ittet	lt
 80079b2:	425b      	neglt	r3, r3
 80079b4:	f042 0202 	orrlt.w	r2, r2, #2
 80079b8:	9307      	strge	r3, [sp, #28]
 80079ba:	9307      	strlt	r3, [sp, #28]
 80079bc:	bfb8      	it	lt
 80079be:	9204      	strlt	r2, [sp, #16]
 80079c0:	7823      	ldrb	r3, [r4, #0]
 80079c2:	2b2e      	cmp	r3, #46	; 0x2e
 80079c4:	d10c      	bne.n	80079e0 <_svfiprintf_r+0x130>
 80079c6:	7863      	ldrb	r3, [r4, #1]
 80079c8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ca:	d134      	bne.n	8007a36 <_svfiprintf_r+0x186>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	3402      	adds	r4, #2
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	f04f 33ff 	movlt.w	r3, #4294967295
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007a9c <_svfiprintf_r+0x1ec>
 80079e4:	2203      	movs	r2, #3
 80079e6:	4650      	mov	r0, sl
 80079e8:	7821      	ldrb	r1, [r4, #0]
 80079ea:	f000 fa1d 	bl	8007e28 <memchr>
 80079ee:	b138      	cbz	r0, 8007a00 <_svfiprintf_r+0x150>
 80079f0:	2240      	movs	r2, #64	; 0x40
 80079f2:	9b04      	ldr	r3, [sp, #16]
 80079f4:	eba0 000a 	sub.w	r0, r0, sl
 80079f8:	4082      	lsls	r2, r0
 80079fa:	4313      	orrs	r3, r2
 80079fc:	3401      	adds	r4, #1
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	2206      	movs	r2, #6
 8007a06:	4826      	ldr	r0, [pc, #152]	; (8007aa0 <_svfiprintf_r+0x1f0>)
 8007a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0c:	f000 fa0c 	bl	8007e28 <memchr>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d038      	beq.n	8007a86 <_svfiprintf_r+0x1d6>
 8007a14:	4b23      	ldr	r3, [pc, #140]	; (8007aa4 <_svfiprintf_r+0x1f4>)
 8007a16:	bb1b      	cbnz	r3, 8007a60 <_svfiprintf_r+0x1b0>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	3307      	adds	r3, #7
 8007a1c:	f023 0307 	bic.w	r3, r3, #7
 8007a20:	3308      	adds	r3, #8
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a26:	4433      	add	r3, r6
 8007a28:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2a:	e768      	b.n	80078fe <_svfiprintf_r+0x4e>
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	2001      	movs	r0, #1
 8007a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a34:	e7a6      	b.n	8007984 <_svfiprintf_r+0xd4>
 8007a36:	2300      	movs	r3, #0
 8007a38:	f04f 0c0a 	mov.w	ip, #10
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	3401      	adds	r4, #1
 8007a40:	9305      	str	r3, [sp, #20]
 8007a42:	4620      	mov	r0, r4
 8007a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a48:	3a30      	subs	r2, #48	; 0x30
 8007a4a:	2a09      	cmp	r2, #9
 8007a4c:	d903      	bls.n	8007a56 <_svfiprintf_r+0x1a6>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0c6      	beq.n	80079e0 <_svfiprintf_r+0x130>
 8007a52:	9105      	str	r1, [sp, #20]
 8007a54:	e7c4      	b.n	80079e0 <_svfiprintf_r+0x130>
 8007a56:	4604      	mov	r4, r0
 8007a58:	2301      	movs	r3, #1
 8007a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a5e:	e7f0      	b.n	8007a42 <_svfiprintf_r+0x192>
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	462a      	mov	r2, r5
 8007a66:	4638      	mov	r0, r7
 8007a68:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <_svfiprintf_r+0x1f8>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	f3af 8000 	nop.w
 8007a70:	1c42      	adds	r2, r0, #1
 8007a72:	4606      	mov	r6, r0
 8007a74:	d1d6      	bne.n	8007a24 <_svfiprintf_r+0x174>
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	065b      	lsls	r3, r3, #25
 8007a7a:	f53f af2d 	bmi.w	80078d8 <_svfiprintf_r+0x28>
 8007a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a80:	b01d      	add	sp, #116	; 0x74
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	ab03      	add	r3, sp, #12
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <_svfiprintf_r+0x1f8>)
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	f000 f87d 	bl	8007b90 <_printf_i>
 8007a96:	e7eb      	b.n	8007a70 <_svfiprintf_r+0x1c0>
 8007a98:	08008692 	.word	0x08008692
 8007a9c:	08008698 	.word	0x08008698
 8007aa0:	0800869c 	.word	0x0800869c
 8007aa4:	00000000 	.word	0x00000000
 8007aa8:	080077fd 	.word	0x080077fd

08007aac <_printf_common>:
 8007aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	4699      	mov	r9, r3
 8007ab4:	688a      	ldr	r2, [r1, #8]
 8007ab6:	690b      	ldr	r3, [r1, #16]
 8007ab8:	4607      	mov	r7, r0
 8007aba:	4293      	cmp	r3, r2
 8007abc:	bfb8      	it	lt
 8007abe:	4613      	movlt	r3, r2
 8007ac0:	6033      	str	r3, [r6, #0]
 8007ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007acc:	b10a      	cbz	r2, 8007ad2 <_printf_common+0x26>
 8007ace:	3301      	adds	r3, #1
 8007ad0:	6033      	str	r3, [r6, #0]
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	0699      	lsls	r1, r3, #26
 8007ad6:	bf42      	ittt	mi
 8007ad8:	6833      	ldrmi	r3, [r6, #0]
 8007ada:	3302      	addmi	r3, #2
 8007adc:	6033      	strmi	r3, [r6, #0]
 8007ade:	6825      	ldr	r5, [r4, #0]
 8007ae0:	f015 0506 	ands.w	r5, r5, #6
 8007ae4:	d106      	bne.n	8007af4 <_printf_common+0x48>
 8007ae6:	f104 0a19 	add.w	sl, r4, #25
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	6832      	ldr	r2, [r6, #0]
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	dc2b      	bgt.n	8007b4c <_printf_common+0xa0>
 8007af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007af8:	1e13      	subs	r3, r2, #0
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	bf18      	it	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	0692      	lsls	r2, r2, #26
 8007b02:	d430      	bmi.n	8007b66 <_printf_common+0xba>
 8007b04:	4649      	mov	r1, r9
 8007b06:	4638      	mov	r0, r7
 8007b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d023      	beq.n	8007b5a <_printf_common+0xae>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	6922      	ldr	r2, [r4, #16]
 8007b16:	f003 0306 	and.w	r3, r3, #6
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	bf14      	ite	ne
 8007b1e:	2500      	movne	r5, #0
 8007b20:	6833      	ldreq	r3, [r6, #0]
 8007b22:	f04f 0600 	mov.w	r6, #0
 8007b26:	bf08      	it	eq
 8007b28:	68e5      	ldreq	r5, [r4, #12]
 8007b2a:	f104 041a 	add.w	r4, r4, #26
 8007b2e:	bf08      	it	eq
 8007b30:	1aed      	subeq	r5, r5, r3
 8007b32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b36:	bf08      	it	eq
 8007b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	bfc4      	itt	gt
 8007b40:	1a9b      	subgt	r3, r3, r2
 8007b42:	18ed      	addgt	r5, r5, r3
 8007b44:	42b5      	cmp	r5, r6
 8007b46:	d11a      	bne.n	8007b7e <_printf_common+0xd2>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e008      	b.n	8007b5e <_printf_common+0xb2>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4649      	mov	r1, r9
 8007b52:	4638      	mov	r0, r7
 8007b54:	47c0      	blx	r8
 8007b56:	3001      	adds	r0, #1
 8007b58:	d103      	bne.n	8007b62 <_printf_common+0xb6>
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b62:	3501      	adds	r5, #1
 8007b64:	e7c1      	b.n	8007aea <_printf_common+0x3e>
 8007b66:	2030      	movs	r0, #48	; 0x30
 8007b68:	18e1      	adds	r1, r4, r3
 8007b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b74:	4422      	add	r2, r4
 8007b76:	3302      	adds	r3, #2
 8007b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b7c:	e7c2      	b.n	8007b04 <_printf_common+0x58>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4622      	mov	r2, r4
 8007b82:	4649      	mov	r1, r9
 8007b84:	4638      	mov	r0, r7
 8007b86:	47c0      	blx	r8
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d0e6      	beq.n	8007b5a <_printf_common+0xae>
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	e7d9      	b.n	8007b44 <_printf_common+0x98>

08007b90 <_printf_i>:
 8007b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b94:	7e0f      	ldrb	r7, [r1, #24]
 8007b96:	4691      	mov	r9, r2
 8007b98:	2f78      	cmp	r7, #120	; 0x78
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	469a      	mov	sl, r3
 8007ba0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ba6:	d807      	bhi.n	8007bb8 <_printf_i+0x28>
 8007ba8:	2f62      	cmp	r7, #98	; 0x62
 8007baa:	d80a      	bhi.n	8007bc2 <_printf_i+0x32>
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	f000 80d5 	beq.w	8007d5c <_printf_i+0x1cc>
 8007bb2:	2f58      	cmp	r7, #88	; 0x58
 8007bb4:	f000 80c1 	beq.w	8007d3a <_printf_i+0x1aa>
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc0:	e03a      	b.n	8007c38 <_printf_i+0xa8>
 8007bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bc6:	2b15      	cmp	r3, #21
 8007bc8:	d8f6      	bhi.n	8007bb8 <_printf_i+0x28>
 8007bca:	a101      	add	r1, pc, #4	; (adr r1, 8007bd0 <_printf_i+0x40>)
 8007bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd0:	08007c29 	.word	0x08007c29
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007bb9 	.word	0x08007bb9
 8007bdc:	08007bb9 	.word	0x08007bb9
 8007be0:	08007bb9 	.word	0x08007bb9
 8007be4:	08007bb9 	.word	0x08007bb9
 8007be8:	08007c3d 	.word	0x08007c3d
 8007bec:	08007bb9 	.word	0x08007bb9
 8007bf0:	08007bb9 	.word	0x08007bb9
 8007bf4:	08007bb9 	.word	0x08007bb9
 8007bf8:	08007bb9 	.word	0x08007bb9
 8007bfc:	08007d43 	.word	0x08007d43
 8007c00:	08007c69 	.word	0x08007c69
 8007c04:	08007cfd 	.word	0x08007cfd
 8007c08:	08007bb9 	.word	0x08007bb9
 8007c0c:	08007bb9 	.word	0x08007bb9
 8007c10:	08007d65 	.word	0x08007d65
 8007c14:	08007bb9 	.word	0x08007bb9
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007bb9 	.word	0x08007bb9
 8007c20:	08007bb9 	.word	0x08007bb9
 8007c24:	08007d05 	.word	0x08007d05
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	1d1a      	adds	r2, r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	602a      	str	r2, [r5, #0]
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e0a0      	b.n	8007d7e <_printf_i+0x1ee>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	0607      	lsls	r7, r0, #24
 8007c42:	f103 0104 	add.w	r1, r3, #4
 8007c46:	6029      	str	r1, [r5, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0xbe>
 8007c4a:	681e      	ldr	r6, [r3, #0]
 8007c4c:	e003      	b.n	8007c56 <_printf_i+0xc6>
 8007c4e:	0646      	lsls	r6, r0, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0xba>
 8007c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	da03      	bge.n	8007c62 <_printf_i+0xd2>
 8007c5a:	232d      	movs	r3, #45	; 0x2d
 8007c5c:	4276      	negs	r6, r6
 8007c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c62:	230a      	movs	r3, #10
 8007c64:	4859      	ldr	r0, [pc, #356]	; (8007dcc <_printf_i+0x23c>)
 8007c66:	e012      	b.n	8007c8e <_printf_i+0xfe>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	1d19      	adds	r1, r3, #4
 8007c6e:	6029      	str	r1, [r5, #0]
 8007c70:	0605      	lsls	r5, r0, #24
 8007c72:	d501      	bpl.n	8007c78 <_printf_i+0xe8>
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <_printf_i+0xee>
 8007c78:	0641      	lsls	r1, r0, #25
 8007c7a:	d5fb      	bpl.n	8007c74 <_printf_i+0xe4>
 8007c7c:	881e      	ldrh	r6, [r3, #0]
 8007c7e:	2f6f      	cmp	r7, #111	; 0x6f
 8007c80:	bf0c      	ite	eq
 8007c82:	2308      	moveq	r3, #8
 8007c84:	230a      	movne	r3, #10
 8007c86:	4851      	ldr	r0, [pc, #324]	; (8007dcc <_printf_i+0x23c>)
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c8e:	6865      	ldr	r5, [r4, #4]
 8007c90:	2d00      	cmp	r5, #0
 8007c92:	bfa8      	it	ge
 8007c94:	6821      	ldrge	r1, [r4, #0]
 8007c96:	60a5      	str	r5, [r4, #8]
 8007c98:	bfa4      	itt	ge
 8007c9a:	f021 0104 	bicge.w	r1, r1, #4
 8007c9e:	6021      	strge	r1, [r4, #0]
 8007ca0:	b90e      	cbnz	r6, 8007ca6 <_printf_i+0x116>
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	d04b      	beq.n	8007d3e <_printf_i+0x1ae>
 8007ca6:	4615      	mov	r5, r2
 8007ca8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cac:	fb03 6711 	mls	r7, r3, r1, r6
 8007cb0:	5dc7      	ldrb	r7, [r0, r7]
 8007cb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cb6:	4637      	mov	r7, r6
 8007cb8:	42bb      	cmp	r3, r7
 8007cba:	460e      	mov	r6, r1
 8007cbc:	d9f4      	bls.n	8007ca8 <_printf_i+0x118>
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d10b      	bne.n	8007cda <_printf_i+0x14a>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	07de      	lsls	r6, r3, #31
 8007cc6:	d508      	bpl.n	8007cda <_printf_i+0x14a>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	6861      	ldr	r1, [r4, #4]
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	bfde      	ittt	le
 8007cd0:	2330      	movle	r3, #48	; 0x30
 8007cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cda:	1b52      	subs	r2, r2, r5
 8007cdc:	6122      	str	r2, [r4, #16]
 8007cde:	464b      	mov	r3, r9
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f8cd a000 	str.w	sl, [sp]
 8007ce8:	aa03      	add	r2, sp, #12
 8007cea:	f7ff fedf 	bl	8007aac <_printf_common>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d14a      	bne.n	8007d88 <_printf_i+0x1f8>
 8007cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf6:	b004      	add	sp, #16
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	f043 0320 	orr.w	r3, r3, #32
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	2778      	movs	r7, #120	; 0x78
 8007d06:	4832      	ldr	r0, [pc, #200]	; (8007dd0 <_printf_i+0x240>)
 8007d08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	6829      	ldr	r1, [r5, #0]
 8007d10:	061f      	lsls	r7, r3, #24
 8007d12:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d16:	d402      	bmi.n	8007d1e <_printf_i+0x18e>
 8007d18:	065f      	lsls	r7, r3, #25
 8007d1a:	bf48      	it	mi
 8007d1c:	b2b6      	uxthmi	r6, r6
 8007d1e:	07df      	lsls	r7, r3, #31
 8007d20:	bf48      	it	mi
 8007d22:	f043 0320 	orrmi.w	r3, r3, #32
 8007d26:	6029      	str	r1, [r5, #0]
 8007d28:	bf48      	it	mi
 8007d2a:	6023      	strmi	r3, [r4, #0]
 8007d2c:	b91e      	cbnz	r6, 8007d36 <_printf_i+0x1a6>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	f023 0320 	bic.w	r3, r3, #32
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	2310      	movs	r3, #16
 8007d38:	e7a6      	b.n	8007c88 <_printf_i+0xf8>
 8007d3a:	4824      	ldr	r0, [pc, #144]	; (8007dcc <_printf_i+0x23c>)
 8007d3c:	e7e4      	b.n	8007d08 <_printf_i+0x178>
 8007d3e:	4615      	mov	r5, r2
 8007d40:	e7bd      	b.n	8007cbe <_printf_i+0x12e>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	6826      	ldr	r6, [r4, #0]
 8007d46:	1d18      	adds	r0, r3, #4
 8007d48:	6961      	ldr	r1, [r4, #20]
 8007d4a:	6028      	str	r0, [r5, #0]
 8007d4c:	0635      	lsls	r5, r6, #24
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	d501      	bpl.n	8007d56 <_printf_i+0x1c6>
 8007d52:	6019      	str	r1, [r3, #0]
 8007d54:	e002      	b.n	8007d5c <_printf_i+0x1cc>
 8007d56:	0670      	lsls	r0, r6, #25
 8007d58:	d5fb      	bpl.n	8007d52 <_printf_i+0x1c2>
 8007d5a:	8019      	strh	r1, [r3, #0]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4615      	mov	r5, r2
 8007d60:	6123      	str	r3, [r4, #16]
 8007d62:	e7bc      	b.n	8007cde <_printf_i+0x14e>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	2100      	movs	r1, #0
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	602a      	str	r2, [r5, #0]
 8007d6c:	681d      	ldr	r5, [r3, #0]
 8007d6e:	6862      	ldr	r2, [r4, #4]
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f859 	bl	8007e28 <memchr>
 8007d76:	b108      	cbz	r0, 8007d7c <_printf_i+0x1ec>
 8007d78:	1b40      	subs	r0, r0, r5
 8007d7a:	6060      	str	r0, [r4, #4]
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	2300      	movs	r3, #0
 8007d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d86:	e7aa      	b.n	8007cde <_printf_i+0x14e>
 8007d88:	462a      	mov	r2, r5
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	47d0      	blx	sl
 8007d92:	3001      	adds	r0, #1
 8007d94:	d0ad      	beq.n	8007cf2 <_printf_i+0x162>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	079b      	lsls	r3, r3, #30
 8007d9a:	d413      	bmi.n	8007dc4 <_printf_i+0x234>
 8007d9c:	68e0      	ldr	r0, [r4, #12]
 8007d9e:	9b03      	ldr	r3, [sp, #12]
 8007da0:	4298      	cmp	r0, r3
 8007da2:	bfb8      	it	lt
 8007da4:	4618      	movlt	r0, r3
 8007da6:	e7a6      	b.n	8007cf6 <_printf_i+0x166>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4632      	mov	r2, r6
 8007dac:	4649      	mov	r1, r9
 8007dae:	4640      	mov	r0, r8
 8007db0:	47d0      	blx	sl
 8007db2:	3001      	adds	r0, #1
 8007db4:	d09d      	beq.n	8007cf2 <_printf_i+0x162>
 8007db6:	3501      	adds	r5, #1
 8007db8:	68e3      	ldr	r3, [r4, #12]
 8007dba:	9903      	ldr	r1, [sp, #12]
 8007dbc:	1a5b      	subs	r3, r3, r1
 8007dbe:	42ab      	cmp	r3, r5
 8007dc0:	dcf2      	bgt.n	8007da8 <_printf_i+0x218>
 8007dc2:	e7eb      	b.n	8007d9c <_printf_i+0x20c>
 8007dc4:	2500      	movs	r5, #0
 8007dc6:	f104 0619 	add.w	r6, r4, #25
 8007dca:	e7f5      	b.n	8007db8 <_printf_i+0x228>
 8007dcc:	080086a3 	.word	0x080086a3
 8007dd0:	080086b4 	.word	0x080086b4

08007dd4 <memmove>:
 8007dd4:	4288      	cmp	r0, r1
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	eb01 0402 	add.w	r4, r1, r2
 8007ddc:	d902      	bls.n	8007de4 <memmove+0x10>
 8007dde:	4284      	cmp	r4, r0
 8007de0:	4623      	mov	r3, r4
 8007de2:	d807      	bhi.n	8007df4 <memmove+0x20>
 8007de4:	1e43      	subs	r3, r0, #1
 8007de6:	42a1      	cmp	r1, r4
 8007de8:	d008      	beq.n	8007dfc <memmove+0x28>
 8007dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007df2:	e7f8      	b.n	8007de6 <memmove+0x12>
 8007df4:	4601      	mov	r1, r0
 8007df6:	4402      	add	r2, r0
 8007df8:	428a      	cmp	r2, r1
 8007dfa:	d100      	bne.n	8007dfe <memmove+0x2a>
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e06:	e7f7      	b.n	8007df8 <memmove+0x24>

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d05      	ldr	r5, [pc, #20]	; (8007e24 <_sbrk_r+0x1c>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa fb62 	bl	80024dc <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	200015cc 	.word	0x200015cc

08007e28 <memchr>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	b2c9      	uxtb	r1, r1
 8007e2e:	4402      	add	r2, r0
 8007e30:	4293      	cmp	r3, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	d101      	bne.n	8007e3a <memchr+0x12>
 8007e36:	2000      	movs	r0, #0
 8007e38:	e003      	b.n	8007e42 <memchr+0x1a>
 8007e3a:	7804      	ldrb	r4, [r0, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	428c      	cmp	r4, r1
 8007e40:	d1f6      	bne.n	8007e30 <memchr+0x8>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <_realloc_r>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	4680      	mov	r8, r0
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	460e      	mov	r6, r1
 8007e4e:	b921      	cbnz	r1, 8007e5a <_realloc_r+0x16>
 8007e50:	4611      	mov	r1, r2
 8007e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	f7ff bc45 	b.w	80076e4 <_malloc_r>
 8007e5a:	b92a      	cbnz	r2, 8007e68 <_realloc_r+0x24>
 8007e5c:	f7ff fbda 	bl	8007614 <_free_r>
 8007e60:	4625      	mov	r5, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	f000 f81b 	bl	8007ea2 <_malloc_usable_size_r>
 8007e6c:	4284      	cmp	r4, r0
 8007e6e:	4607      	mov	r7, r0
 8007e70:	d802      	bhi.n	8007e78 <_realloc_r+0x34>
 8007e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e76:	d812      	bhi.n	8007e9e <_realloc_r+0x5a>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fc32 	bl	80076e4 <_malloc_r>
 8007e80:	4605      	mov	r5, r0
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0ed      	beq.n	8007e62 <_realloc_r+0x1e>
 8007e86:	42bc      	cmp	r4, r7
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	bf28      	it	cs
 8007e8e:	463a      	movcs	r2, r7
 8007e90:	f7ff fbb2 	bl	80075f8 <memcpy>
 8007e94:	4631      	mov	r1, r6
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7ff fbbc 	bl	8007614 <_free_r>
 8007e9c:	e7e1      	b.n	8007e62 <_realloc_r+0x1e>
 8007e9e:	4635      	mov	r5, r6
 8007ea0:	e7df      	b.n	8007e62 <_realloc_r+0x1e>

08007ea2 <_malloc_usable_size_r>:
 8007ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea6:	1f18      	subs	r0, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfbc      	itt	lt
 8007eac:	580b      	ldrlt	r3, [r1, r0]
 8007eae:	18c0      	addlt	r0, r0, r3
 8007eb0:	4770      	bx	lr

08007eb2 <atan2>:
 8007eb2:	f000 bad1 	b.w	8008458 <__ieee754_atan2>

08007eb6 <sqrt>:
 8007eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb8:	4606      	mov	r6, r0
 8007eba:	460f      	mov	r7, r1
 8007ebc:	f000 f9ae 	bl	800821c <__ieee754_sqrt>
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 fe0e 	bl	8000aec <__aeabi_dcmpun>
 8007ed0:	b990      	cbnz	r0, 8007ef8 <sqrt+0x42>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 fddf 	bl	8000a9c <__aeabi_dcmplt>
 8007ede:	b158      	cbz	r0, 8007ef8 <sqrt+0x42>
 8007ee0:	f7ff fb5e 	bl	80075a0 <__errno>
 8007ee4:	2321      	movs	r3, #33	; 0x21
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6003      	str	r3, [r0, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	4610      	mov	r0, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	f7f8 fc8c 	bl	800080c <__aeabi_ddiv>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f00 <atan>:
 8007f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4bb6      	ldr	r3, [pc, #728]	; (80081e0 <atan+0x2e0>)
 8007f06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	468b      	mov	fp, r1
 8007f12:	dd17      	ble.n	8007f44 <atan+0x44>
 8007f14:	4bb3      	ldr	r3, [pc, #716]	; (80081e4 <atan+0x2e4>)
 8007f16:	429e      	cmp	r6, r3
 8007f18:	dc01      	bgt.n	8007f1e <atan+0x1e>
 8007f1a:	d109      	bne.n	8007f30 <atan+0x30>
 8007f1c:	b140      	cbz	r0, 8007f30 <atan+0x30>
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	4620      	mov	r0, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7f8 f991 	bl	800024c <__adddf3>
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	460d      	mov	r5, r1
 8007f2e:	e005      	b.n	8007f3c <atan+0x3c>
 8007f30:	f1bb 0f00 	cmp.w	fp, #0
 8007f34:	4cac      	ldr	r4, [pc, #688]	; (80081e8 <atan+0x2e8>)
 8007f36:	f300 8121 	bgt.w	800817c <atan+0x27c>
 8007f3a:	4dac      	ldr	r5, [pc, #688]	; (80081ec <atan+0x2ec>)
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	4baa      	ldr	r3, [pc, #680]	; (80081f0 <atan+0x2f0>)
 8007f46:	429e      	cmp	r6, r3
 8007f48:	dc11      	bgt.n	8007f6e <atan+0x6e>
 8007f4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	dc0a      	bgt.n	8007f68 <atan+0x68>
 8007f52:	a38b      	add	r3, pc, #556	; (adr r3, 8008180 <atan+0x280>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 f978 	bl	800024c <__adddf3>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4ba5      	ldr	r3, [pc, #660]	; (80081f4 <atan+0x2f4>)
 8007f60:	f7f8 fdba 	bl	8000ad8 <__aeabi_dcmpgt>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d1e9      	bne.n	8007f3c <atan+0x3c>
 8007f68:	f04f 3aff 	mov.w	sl, #4294967295
 8007f6c:	e027      	b.n	8007fbe <atan+0xbe>
 8007f6e:	f000 f951 	bl	8008214 <fabs>
 8007f72:	4ba1      	ldr	r3, [pc, #644]	; (80081f8 <atan+0x2f8>)
 8007f74:	4604      	mov	r4, r0
 8007f76:	429e      	cmp	r6, r3
 8007f78:	460d      	mov	r5, r1
 8007f7a:	f300 80b8 	bgt.w	80080ee <atan+0x1ee>
 8007f7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f82:	429e      	cmp	r6, r3
 8007f84:	f300 809c 	bgt.w	80080c0 <atan+0x1c0>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	f7f8 f95e 	bl	800024c <__adddf3>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b98      	ldr	r3, [pc, #608]	; (80081f4 <atan+0x2f4>)
 8007f94:	f7f8 f958 	bl	8000248 <__aeabi_dsub>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 f951 	bl	800024c <__adddf3>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	f7f8 fc2b 	bl	800080c <__aeabi_ddiv>
 8007fb6:	f04f 0a00 	mov.w	sl, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 faf7 	bl	80005b8 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4680      	mov	r8, r0
 8007fd0:	4689      	mov	r9, r1
 8007fd2:	f7f8 faf1 	bl	80005b8 <__aeabi_dmul>
 8007fd6:	a36c      	add	r3, pc, #432	; (adr r3, 8008188 <atan+0x288>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	f7f8 faea 	bl	80005b8 <__aeabi_dmul>
 8007fe4:	a36a      	add	r3, pc, #424	; (adr r3, 8008190 <atan+0x290>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 f92f 	bl	800024c <__adddf3>
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 fae1 	bl	80005b8 <__aeabi_dmul>
 8007ff6:	a368      	add	r3, pc, #416	; (adr r3, 8008198 <atan+0x298>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f7f8 f926 	bl	800024c <__adddf3>
 8008000:	4632      	mov	r2, r6
 8008002:	463b      	mov	r3, r7
 8008004:	f7f8 fad8 	bl	80005b8 <__aeabi_dmul>
 8008008:	a365      	add	r3, pc, #404	; (adr r3, 80081a0 <atan+0x2a0>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 f91d 	bl	800024c <__adddf3>
 8008012:	4632      	mov	r2, r6
 8008014:	463b      	mov	r3, r7
 8008016:	f7f8 facf 	bl	80005b8 <__aeabi_dmul>
 800801a:	a363      	add	r3, pc, #396	; (adr r3, 80081a8 <atan+0x2a8>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 f914 	bl	800024c <__adddf3>
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	f7f8 fac6 	bl	80005b8 <__aeabi_dmul>
 800802c:	a360      	add	r3, pc, #384	; (adr r3, 80081b0 <atan+0x2b0>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 f90b 	bl	800024c <__adddf3>
 8008036:	4642      	mov	r2, r8
 8008038:	464b      	mov	r3, r9
 800803a:	f7f8 fabd 	bl	80005b8 <__aeabi_dmul>
 800803e:	a35e      	add	r3, pc, #376	; (adr r3, 80081b8 <atan+0x2b8>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	4680      	mov	r8, r0
 8008046:	4689      	mov	r9, r1
 8008048:	4630      	mov	r0, r6
 800804a:	4639      	mov	r1, r7
 800804c:	f7f8 fab4 	bl	80005b8 <__aeabi_dmul>
 8008050:	a35b      	add	r3, pc, #364	; (adr r3, 80081c0 <atan+0x2c0>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 f8f7 	bl	8000248 <__aeabi_dsub>
 800805a:	4632      	mov	r2, r6
 800805c:	463b      	mov	r3, r7
 800805e:	f7f8 faab 	bl	80005b8 <__aeabi_dmul>
 8008062:	a359      	add	r3, pc, #356	; (adr r3, 80081c8 <atan+0x2c8>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 f8ee 	bl	8000248 <__aeabi_dsub>
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	f7f8 faa2 	bl	80005b8 <__aeabi_dmul>
 8008074:	a356      	add	r3, pc, #344	; (adr r3, 80081d0 <atan+0x2d0>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 f8e5 	bl	8000248 <__aeabi_dsub>
 800807e:	4632      	mov	r2, r6
 8008080:	463b      	mov	r3, r7
 8008082:	f7f8 fa99 	bl	80005b8 <__aeabi_dmul>
 8008086:	a354      	add	r3, pc, #336	; (adr r3, 80081d8 <atan+0x2d8>)
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f7f8 f8dc 	bl	8000248 <__aeabi_dsub>
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	f7f8 fa90 	bl	80005b8 <__aeabi_dmul>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 f8d4 	bl	800024c <__adddf3>
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	f7f8 fa86 	bl	80005b8 <__aeabi_dmul>
 80080ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	d144      	bne.n	8008140 <atan+0x240>
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 f8c5 	bl	8000248 <__aeabi_dsub>
 80080be:	e734      	b.n	8007f2a <atan+0x2a>
 80080c0:	2200      	movs	r2, #0
 80080c2:	4b4c      	ldr	r3, [pc, #304]	; (80081f4 <atan+0x2f4>)
 80080c4:	f7f8 f8c0 	bl	8000248 <__aeabi_dsub>
 80080c8:	2200      	movs	r2, #0
 80080ca:	4606      	mov	r6, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	4b48      	ldr	r3, [pc, #288]	; (80081f4 <atan+0x2f4>)
 80080d4:	f7f8 f8ba 	bl	800024c <__adddf3>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fb94 	bl	800080c <__aeabi_ddiv>
 80080e4:	f04f 0a01 	mov.w	sl, #1
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	e767      	b.n	8007fbe <atan+0xbe>
 80080ee:	4b43      	ldr	r3, [pc, #268]	; (80081fc <atan+0x2fc>)
 80080f0:	429e      	cmp	r6, r3
 80080f2:	da1a      	bge.n	800812a <atan+0x22a>
 80080f4:	2200      	movs	r2, #0
 80080f6:	4b42      	ldr	r3, [pc, #264]	; (8008200 <atan+0x300>)
 80080f8:	f7f8 f8a6 	bl	8000248 <__aeabi_dsub>
 80080fc:	2200      	movs	r2, #0
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	4620      	mov	r0, r4
 8008104:	4629      	mov	r1, r5
 8008106:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <atan+0x300>)
 8008108:	f7f8 fa56 	bl	80005b8 <__aeabi_dmul>
 800810c:	2200      	movs	r2, #0
 800810e:	4b39      	ldr	r3, [pc, #228]	; (80081f4 <atan+0x2f4>)
 8008110:	f7f8 f89c 	bl	800024c <__adddf3>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4630      	mov	r0, r6
 800811a:	4639      	mov	r1, r7
 800811c:	f7f8 fb76 	bl	800080c <__aeabi_ddiv>
 8008120:	f04f 0a02 	mov.w	sl, #2
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	e749      	b.n	8007fbe <atan+0xbe>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	2000      	movs	r0, #0
 8008130:	4934      	ldr	r1, [pc, #208]	; (8008204 <atan+0x304>)
 8008132:	f7f8 fb6b 	bl	800080c <__aeabi_ddiv>
 8008136:	f04f 0a03 	mov.w	sl, #3
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
 800813e:	e73e      	b.n	8007fbe <atan+0xbe>
 8008140:	4b31      	ldr	r3, [pc, #196]	; (8008208 <atan+0x308>)
 8008142:	4e32      	ldr	r6, [pc, #200]	; (800820c <atan+0x30c>)
 8008144:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f87c 	bl	8000248 <__aeabi_dsub>
 8008150:	4622      	mov	r2, r4
 8008152:	462b      	mov	r3, r5
 8008154:	f7f8 f878 	bl	8000248 <__aeabi_dsub>
 8008158:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008164:	f7f8 f870 	bl	8000248 <__aeabi_dsub>
 8008168:	f1bb 0f00 	cmp.w	fp, #0
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	f6bf aee4 	bge.w	8007f3c <atan+0x3c>
 8008174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008178:	461d      	mov	r5, r3
 800817a:	e6df      	b.n	8007f3c <atan+0x3c>
 800817c:	4d24      	ldr	r5, [pc, #144]	; (8008210 <atan+0x310>)
 800817e:	e6dd      	b.n	8007f3c <atan+0x3c>
 8008180:	8800759c 	.word	0x8800759c
 8008184:	7e37e43c 	.word	0x7e37e43c
 8008188:	e322da11 	.word	0xe322da11
 800818c:	3f90ad3a 	.word	0x3f90ad3a
 8008190:	24760deb 	.word	0x24760deb
 8008194:	3fa97b4b 	.word	0x3fa97b4b
 8008198:	a0d03d51 	.word	0xa0d03d51
 800819c:	3fb10d66 	.word	0x3fb10d66
 80081a0:	c54c206e 	.word	0xc54c206e
 80081a4:	3fb745cd 	.word	0x3fb745cd
 80081a8:	920083ff 	.word	0x920083ff
 80081ac:	3fc24924 	.word	0x3fc24924
 80081b0:	5555550d 	.word	0x5555550d
 80081b4:	3fd55555 	.word	0x3fd55555
 80081b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80081bc:	bfa2b444 	.word	0xbfa2b444
 80081c0:	52defd9a 	.word	0x52defd9a
 80081c4:	3fadde2d 	.word	0x3fadde2d
 80081c8:	af749a6d 	.word	0xaf749a6d
 80081cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80081d0:	fe231671 	.word	0xfe231671
 80081d4:	3fbc71c6 	.word	0x3fbc71c6
 80081d8:	9998ebc4 	.word	0x9998ebc4
 80081dc:	3fc99999 	.word	0x3fc99999
 80081e0:	440fffff 	.word	0x440fffff
 80081e4:	7ff00000 	.word	0x7ff00000
 80081e8:	54442d18 	.word	0x54442d18
 80081ec:	bff921fb 	.word	0xbff921fb
 80081f0:	3fdbffff 	.word	0x3fdbffff
 80081f4:	3ff00000 	.word	0x3ff00000
 80081f8:	3ff2ffff 	.word	0x3ff2ffff
 80081fc:	40038000 	.word	0x40038000
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	bff00000 	.word	0xbff00000
 8008208:	080086e8 	.word	0x080086e8
 800820c:	080086c8 	.word	0x080086c8
 8008210:	3ff921fb 	.word	0x3ff921fb

08008214 <fabs>:
 8008214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008218:	4619      	mov	r1, r3
 800821a:	4770      	bx	lr

0800821c <__ieee754_sqrt>:
 800821c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80083c0 <__ieee754_sqrt+0x1a4>
 8008220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	ea3c 0c01 	bics.w	ip, ip, r1
 8008228:	460b      	mov	r3, r1
 800822a:	4606      	mov	r6, r0
 800822c:	460d      	mov	r5, r1
 800822e:	460a      	mov	r2, r1
 8008230:	4604      	mov	r4, r0
 8008232:	d10e      	bne.n	8008252 <__ieee754_sqrt+0x36>
 8008234:	4602      	mov	r2, r0
 8008236:	f7f8 f9bf 	bl	80005b8 <__aeabi_dmul>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4630      	mov	r0, r6
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 f803 	bl	800024c <__adddf3>
 8008246:	4606      	mov	r6, r0
 8008248:	460d      	mov	r5, r1
 800824a:	4630      	mov	r0, r6
 800824c:	4629      	mov	r1, r5
 800824e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	2900      	cmp	r1, #0
 8008254:	dc0d      	bgt.n	8008272 <__ieee754_sqrt+0x56>
 8008256:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800825a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800825e:	d0f4      	beq.n	800824a <__ieee754_sqrt+0x2e>
 8008260:	b139      	cbz	r1, 8008272 <__ieee754_sqrt+0x56>
 8008262:	4602      	mov	r2, r0
 8008264:	f7f7 fff0 	bl	8000248 <__aeabi_dsub>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	f7f8 face 	bl	800080c <__aeabi_ddiv>
 8008270:	e7e9      	b.n	8008246 <__ieee754_sqrt+0x2a>
 8008272:	1512      	asrs	r2, r2, #20
 8008274:	f000 8089 	beq.w	800838a <__ieee754_sqrt+0x16e>
 8008278:	2500      	movs	r5, #0
 800827a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008286:	07d2      	lsls	r2, r2, #31
 8008288:	bf5c      	itt	pl
 800828a:	005b      	lslpl	r3, r3, #1
 800828c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008290:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008294:	bf58      	it	pl
 8008296:	0064      	lslpl	r4, r4, #1
 8008298:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800829c:	0062      	lsls	r2, r4, #1
 800829e:	2016      	movs	r0, #22
 80082a0:	4629      	mov	r1, r5
 80082a2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80082a6:	1076      	asrs	r6, r6, #1
 80082a8:	190f      	adds	r7, r1, r4
 80082aa:	429f      	cmp	r7, r3
 80082ac:	bfde      	ittt	le
 80082ae:	1bdb      	suble	r3, r3, r7
 80082b0:	1939      	addle	r1, r7, r4
 80082b2:	192d      	addle	r5, r5, r4
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	3801      	subs	r0, #1
 80082b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80082bc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80082c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80082c4:	d1f0      	bne.n	80082a8 <__ieee754_sqrt+0x8c>
 80082c6:	4604      	mov	r4, r0
 80082c8:	2720      	movs	r7, #32
 80082ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80082ce:	428b      	cmp	r3, r1
 80082d0:	eb0c 0e00 	add.w	lr, ip, r0
 80082d4:	dc02      	bgt.n	80082dc <__ieee754_sqrt+0xc0>
 80082d6:	d113      	bne.n	8008300 <__ieee754_sqrt+0xe4>
 80082d8:	4596      	cmp	lr, r2
 80082da:	d811      	bhi.n	8008300 <__ieee754_sqrt+0xe4>
 80082dc:	f1be 0f00 	cmp.w	lr, #0
 80082e0:	eb0e 000c 	add.w	r0, lr, ip
 80082e4:	da56      	bge.n	8008394 <__ieee754_sqrt+0x178>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	db54      	blt.n	8008394 <__ieee754_sqrt+0x178>
 80082ea:	f101 0801 	add.w	r8, r1, #1
 80082ee:	1a5b      	subs	r3, r3, r1
 80082f0:	4641      	mov	r1, r8
 80082f2:	4596      	cmp	lr, r2
 80082f4:	bf88      	it	hi
 80082f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80082fa:	eba2 020e 	sub.w	r2, r2, lr
 80082fe:	4464      	add	r4, ip
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	3f01      	subs	r7, #1
 8008304:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008308:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800830c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008310:	d1dd      	bne.n	80082ce <__ieee754_sqrt+0xb2>
 8008312:	4313      	orrs	r3, r2
 8008314:	d01b      	beq.n	800834e <__ieee754_sqrt+0x132>
 8008316:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80083c4 <__ieee754_sqrt+0x1a8>
 800831a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80083c8 <__ieee754_sqrt+0x1ac>
 800831e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008322:	e9db 2300 	ldrd	r2, r3, [fp]
 8008326:	f7f7 ff8f 	bl	8000248 <__aeabi_dsub>
 800832a:	e9da 8900 	ldrd	r8, r9, [sl]
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f8 fbbb 	bl	8000ab0 <__aeabi_dcmple>
 800833a:	b140      	cbz	r0, 800834e <__ieee754_sqrt+0x132>
 800833c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008340:	e9db 2300 	ldrd	r2, r3, [fp]
 8008344:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008348:	d126      	bne.n	8008398 <__ieee754_sqrt+0x17c>
 800834a:	463c      	mov	r4, r7
 800834c:	3501      	adds	r5, #1
 800834e:	106b      	asrs	r3, r5, #1
 8008350:	0864      	lsrs	r4, r4, #1
 8008352:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008356:	07ea      	lsls	r2, r5, #31
 8008358:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800835c:	bf48      	it	mi
 800835e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008362:	4620      	mov	r0, r4
 8008364:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008368:	e76d      	b.n	8008246 <__ieee754_sqrt+0x2a>
 800836a:	0ae3      	lsrs	r3, r4, #11
 800836c:	3915      	subs	r1, #21
 800836e:	0564      	lsls	r4, r4, #21
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0fa      	beq.n	800836a <__ieee754_sqrt+0x14e>
 8008374:	02d8      	lsls	r0, r3, #11
 8008376:	d50a      	bpl.n	800838e <__ieee754_sqrt+0x172>
 8008378:	f1c2 0020 	rsb	r0, r2, #32
 800837c:	fa24 f000 	lsr.w	r0, r4, r0
 8008380:	1e55      	subs	r5, r2, #1
 8008382:	4094      	lsls	r4, r2
 8008384:	4303      	orrs	r3, r0
 8008386:	1b4a      	subs	r2, r1, r5
 8008388:	e776      	b.n	8008278 <__ieee754_sqrt+0x5c>
 800838a:	4611      	mov	r1, r2
 800838c:	e7f0      	b.n	8008370 <__ieee754_sqrt+0x154>
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	3201      	adds	r2, #1
 8008392:	e7ef      	b.n	8008374 <__ieee754_sqrt+0x158>
 8008394:	4688      	mov	r8, r1
 8008396:	e7aa      	b.n	80082ee <__ieee754_sqrt+0xd2>
 8008398:	f7f7 ff58 	bl	800024c <__adddf3>
 800839c:	e9da 8900 	ldrd	r8, r9, [sl]
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4640      	mov	r0, r8
 80083a6:	4649      	mov	r1, r9
 80083a8:	f7f8 fb78 	bl	8000a9c <__aeabi_dcmplt>
 80083ac:	b120      	cbz	r0, 80083b8 <__ieee754_sqrt+0x19c>
 80083ae:	1ca1      	adds	r1, r4, #2
 80083b0:	bf08      	it	eq
 80083b2:	3501      	addeq	r5, #1
 80083b4:	3402      	adds	r4, #2
 80083b6:	e7ca      	b.n	800834e <__ieee754_sqrt+0x132>
 80083b8:	3401      	adds	r4, #1
 80083ba:	f024 0401 	bic.w	r4, r4, #1
 80083be:	e7c6      	b.n	800834e <__ieee754_sqrt+0x132>
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	200000f8 	.word	0x200000f8
 80083c8:	20000100 	.word	0x20000100

080083cc <round>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80083d2:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 80083d6:	2a13      	cmp	r2, #19
 80083d8:	460b      	mov	r3, r1
 80083da:	4605      	mov	r5, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	dc18      	bgt.n	8008412 <round+0x46>
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	da09      	bge.n	80083f8 <round+0x2c>
 80083e4:	3201      	adds	r2, #1
 80083e6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80083ea:	d103      	bne.n	80083f4 <round+0x28>
 80083ec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083f4:	2200      	movs	r2, #0
 80083f6:	e029      	b.n	800844c <round+0x80>
 80083f8:	4816      	ldr	r0, [pc, #88]	; (8008454 <round+0x88>)
 80083fa:	4110      	asrs	r0, r2
 80083fc:	4001      	ands	r1, r0
 80083fe:	4329      	orrs	r1, r5
 8008400:	d011      	beq.n	8008426 <round+0x5a>
 8008402:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008406:	fa41 f202 	asr.w	r2, r1, r2
 800840a:	4413      	add	r3, r2
 800840c:	ea23 0300 	bic.w	r3, r3, r0
 8008410:	e7f0      	b.n	80083f4 <round+0x28>
 8008412:	2a33      	cmp	r2, #51	; 0x33
 8008414:	dd0a      	ble.n	800842c <round+0x60>
 8008416:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800841a:	d104      	bne.n	8008426 <round+0x5a>
 800841c:	4602      	mov	r2, r0
 800841e:	f7f7 ff15 	bl	800024c <__adddf3>
 8008422:	4605      	mov	r5, r0
 8008424:	460c      	mov	r4, r1
 8008426:	4628      	mov	r0, r5
 8008428:	4621      	mov	r1, r4
 800842a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008434:	40f8      	lsrs	r0, r7
 8008436:	4228      	tst	r0, r5
 8008438:	d0f5      	beq.n	8008426 <round+0x5a>
 800843a:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800843e:	2201      	movs	r2, #1
 8008440:	408a      	lsls	r2, r1
 8008442:	1952      	adds	r2, r2, r5
 8008444:	bf28      	it	cs
 8008446:	3301      	addcs	r3, #1
 8008448:	ea22 0200 	bic.w	r2, r2, r0
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	e7e7      	b.n	8008422 <round+0x56>
 8008452:	bf00      	nop
 8008454:	000fffff 	.word	0x000fffff

08008458 <__ieee754_atan2>:
 8008458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	4617      	mov	r7, r2
 800845e:	4692      	mov	sl, r2
 8008460:	4699      	mov	r9, r3
 8008462:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008466:	427b      	negs	r3, r7
 8008468:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80085e8 <__ieee754_atan2+0x190>
 800846c:	433b      	orrs	r3, r7
 800846e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008472:	4543      	cmp	r3, r8
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	d809      	bhi.n	800848e <__ieee754_atan2+0x36>
 800847a:	4246      	negs	r6, r0
 800847c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008480:	4306      	orrs	r6, r0
 8008482:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008486:	4546      	cmp	r6, r8
 8008488:	468e      	mov	lr, r1
 800848a:	4683      	mov	fp, r0
 800848c:	d908      	bls.n	80084a0 <__ieee754_atan2+0x48>
 800848e:	4652      	mov	r2, sl
 8008490:	464b      	mov	r3, r9
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f7f7 fed9 	bl	800024c <__adddf3>
 800849a:	4604      	mov	r4, r0
 800849c:	460d      	mov	r5, r1
 800849e:	e019      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80084a0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80084a4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80084a8:	433e      	orrs	r6, r7
 80084aa:	d103      	bne.n	80084b4 <__ieee754_atan2+0x5c>
 80084ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	f7ff bd26 	b.w	8007f00 <atan>
 80084b4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80084b8:	f006 0602 	and.w	r6, r6, #2
 80084bc:	ea53 0b0b 	orrs.w	fp, r3, fp
 80084c0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80084c4:	d10a      	bne.n	80084dc <__ieee754_atan2+0x84>
 80084c6:	2e02      	cmp	r6, #2
 80084c8:	d067      	beq.n	800859a <__ieee754_atan2+0x142>
 80084ca:	2e03      	cmp	r6, #3
 80084cc:	d102      	bne.n	80084d4 <__ieee754_atan2+0x7c>
 80084ce:	a53a      	add	r5, pc, #232	; (adr r5, 80085b8 <__ieee754_atan2+0x160>)
 80084d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	4317      	orrs	r7, r2
 80084de:	d106      	bne.n	80084ee <__ieee754_atan2+0x96>
 80084e0:	f1be 0f00 	cmp.w	lr, #0
 80084e4:	da64      	bge.n	80085b0 <__ieee754_atan2+0x158>
 80084e6:	a536      	add	r5, pc, #216	; (adr r5, 80085c0 <__ieee754_atan2+0x168>)
 80084e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084ec:	e7f2      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80084ee:	4542      	cmp	r2, r8
 80084f0:	d10f      	bne.n	8008512 <__ieee754_atan2+0xba>
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f106 36ff 	add.w	r6, r6, #4294967295
 80084f8:	d107      	bne.n	800850a <__ieee754_atan2+0xb2>
 80084fa:	2e02      	cmp	r6, #2
 80084fc:	d851      	bhi.n	80085a2 <__ieee754_atan2+0x14a>
 80084fe:	4b3b      	ldr	r3, [pc, #236]	; (80085ec <__ieee754_atan2+0x194>)
 8008500:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008504:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008508:	e7e4      	b.n	80084d4 <__ieee754_atan2+0x7c>
 800850a:	2e02      	cmp	r6, #2
 800850c:	d84d      	bhi.n	80085aa <__ieee754_atan2+0x152>
 800850e:	4b38      	ldr	r3, [pc, #224]	; (80085f0 <__ieee754_atan2+0x198>)
 8008510:	e7f6      	b.n	8008500 <__ieee754_atan2+0xa8>
 8008512:	4543      	cmp	r3, r8
 8008514:	d0e4      	beq.n	80084e0 <__ieee754_atan2+0x88>
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800851c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008520:	da21      	bge.n	8008566 <__ieee754_atan2+0x10e>
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	da01      	bge.n	800852c <__ieee754_atan2+0xd4>
 8008528:	323c      	adds	r2, #60	; 0x3c
 800852a:	db20      	blt.n	800856e <__ieee754_atan2+0x116>
 800852c:	4652      	mov	r2, sl
 800852e:	464b      	mov	r3, r9
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f8 f96a 	bl	800080c <__aeabi_ddiv>
 8008538:	f7ff fe6c 	bl	8008214 <fabs>
 800853c:	f7ff fce0 	bl	8007f00 <atan>
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	2e01      	cmp	r6, #1
 8008546:	d015      	beq.n	8008574 <__ieee754_atan2+0x11c>
 8008548:	2e02      	cmp	r6, #2
 800854a:	d017      	beq.n	800857c <__ieee754_atan2+0x124>
 800854c:	2e00      	cmp	r6, #0
 800854e:	d0c1      	beq.n	80084d4 <__ieee754_atan2+0x7c>
 8008550:	a31d      	add	r3, pc, #116	; (adr r3, 80085c8 <__ieee754_atan2+0x170>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fe75 	bl	8000248 <__aeabi_dsub>
 800855e:	a31c      	add	r3, pc, #112	; (adr r3, 80085d0 <__ieee754_atan2+0x178>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	e016      	b.n	8008594 <__ieee754_atan2+0x13c>
 8008566:	a51c      	add	r5, pc, #112	; (adr r5, 80085d8 <__ieee754_atan2+0x180>)
 8008568:	e9d5 4500 	ldrd	r4, r5, [r5]
 800856c:	e7ea      	b.n	8008544 <__ieee754_atan2+0xec>
 800856e:	2400      	movs	r4, #0
 8008570:	2500      	movs	r5, #0
 8008572:	e7e7      	b.n	8008544 <__ieee754_atan2+0xec>
 8008574:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008578:	461d      	mov	r5, r3
 800857a:	e7ab      	b.n	80084d4 <__ieee754_atan2+0x7c>
 800857c:	a312      	add	r3, pc, #72	; (adr r3, 80085c8 <__ieee754_atan2+0x170>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f7 fe5f 	bl	8000248 <__aeabi_dsub>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	a110      	add	r1, pc, #64	; (adr r1, 80085d0 <__ieee754_atan2+0x178>)
 8008590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008594:	f7f7 fe58 	bl	8000248 <__aeabi_dsub>
 8008598:	e77f      	b.n	800849a <__ieee754_atan2+0x42>
 800859a:	a50d      	add	r5, pc, #52	; (adr r5, 80085d0 <__ieee754_atan2+0x178>)
 800859c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085a0:	e798      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80085a2:	a50f      	add	r5, pc, #60	; (adr r5, 80085e0 <__ieee754_atan2+0x188>)
 80085a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085a8:	e794      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80085aa:	2400      	movs	r4, #0
 80085ac:	2500      	movs	r5, #0
 80085ae:	e791      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80085b0:	a509      	add	r5, pc, #36	; (adr r5, 80085d8 <__ieee754_atan2+0x180>)
 80085b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085b6:	e78d      	b.n	80084d4 <__ieee754_atan2+0x7c>
 80085b8:	54442d18 	.word	0x54442d18
 80085bc:	c00921fb 	.word	0xc00921fb
 80085c0:	54442d18 	.word	0x54442d18
 80085c4:	bff921fb 	.word	0xbff921fb
 80085c8:	33145c07 	.word	0x33145c07
 80085cc:	3ca1a626 	.word	0x3ca1a626
 80085d0:	54442d18 	.word	0x54442d18
 80085d4:	400921fb 	.word	0x400921fb
 80085d8:	54442d18 	.word	0x54442d18
 80085dc:	3ff921fb 	.word	0x3ff921fb
 80085e0:	54442d18 	.word	0x54442d18
 80085e4:	3fe921fb 	.word	0x3fe921fb
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	08008708 	.word	0x08008708
 80085f0:	08008720 	.word	0x08008720

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
