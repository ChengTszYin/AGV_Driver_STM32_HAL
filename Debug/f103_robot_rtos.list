
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004710  08004710  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004710  08004710  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  20000010  08004728  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001268  08004728  00021268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a959  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c2  00000000  00000000  0002a9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b7  00000000  00000000  0002d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034ee  00000000  00000000  0002df7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcf1  00000000  00000000  0003146d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000973b3  00000000  00000000  0003f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002690  00000000  00000000  000d6514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d8ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080046a8 	.word	0x080046a8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080046a8 	.word	0x080046a8

08000230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000236:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <MX_DMA_Init+0x88>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a1f      	ldr	r2, [pc, #124]	; (80002b8 <MX_DMA_Init+0x88>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <MX_DMA_Init+0x88>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2105      	movs	r1, #5
 8000252:	200c      	movs	r0, #12
 8000254:	f000 fe1f 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000258:	200c      	movs	r0, #12
 800025a:	f000 fe38 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2105      	movs	r1, #5
 8000262:	200d      	movs	r0, #13
 8000264:	f000 fe17 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000268:	200d      	movs	r0, #13
 800026a:	f000 fe30 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2105      	movs	r1, #5
 8000272:	200e      	movs	r0, #14
 8000274:	f000 fe0f 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000278:	200e      	movs	r0, #14
 800027a:	f000 fe28 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	2105      	movs	r1, #5
 8000282:	200f      	movs	r0, #15
 8000284:	f000 fe07 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000288:	200f      	movs	r0, #15
 800028a:	f000 fe20 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2105      	movs	r1, #5
 8000292:	2010      	movs	r0, #16
 8000294:	f000 fdff 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f000 fe18 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2105      	movs	r1, #5
 80002a2:	2011      	movs	r0, #17
 80002a4:	f000 fdf7 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002a8:	2011      	movs	r0, #17
 80002aa:	f000 fe10 	bl	8000ece <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <checksum>:
} MotorControl;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t checksum(uint8_t* data, uint8_t len) {
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	e009      	b.n	80002e6 <checksum+0x2a>
       crc += data[i];
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	4413      	add	r3, r2
 80002de:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 80002e0:	7bbb      	ldrb	r3, [r7, #14]
 80002e2:	3301      	adds	r3, #1
 80002e4:	73bb      	strb	r3, [r7, #14]
 80002e6:	7bba      	ldrb	r2, [r7, #14]
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf0      	blt.n	80002d2 <checksum+0x16>
    }
    return crc;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl* motors)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8000306:	2300      	movs	r3, #0
 8000308:	75fb      	strb	r3, [r7, #23]
 800030a:	e00b      	b.n	8000324 <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	441a      	add	r2, r3
 8000312:	7dfb      	ldrb	r3, [r7, #23]
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	3318      	adds	r3, #24
 8000318:	443b      	add	r3, r7
 800031a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 800031e:	7dfb      	ldrb	r3, [r7, #23]
 8000320:	3301      	adds	r3, #1
 8000322:	75fb      	strb	r3, [r7, #23]
 8000324:	7dfb      	ldrb	r3, [r7, #23]
 8000326:	2b07      	cmp	r3, #7
 8000328:	d9f0      	bls.n	800030c <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data,8);
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	2108      	movs	r1, #8
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffc3 	bl	80002bc <checksum>
 8000336:	4603      	mov	r3, r0
 8000338:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 800033a:	7cfb      	ldrb	r3, [r7, #19]
 800033c:	7dba      	ldrb	r2, [r7, #22]
 800033e:	429a      	cmp	r2, r3
 8000340:	d117      	bne.n	8000372 <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 8000342:	7b7a      	ldrb	r2, [r7, #13]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	b21a      	sxth	r2, r3
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	b21b      	sxth	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b21a      	sxth	r2, r3
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 800035a:	7c3a      	ldrb	r2, [r7, #16]
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8000360:	7c7b      	ldrb	r3, [r7, #17]
 8000362:	021b      	lsls	r3, r3, #8
 8000364:	b21a      	sxth	r2, r3
 8000366:	7cbb      	ldrb	r3, [r7, #18]
 8000368:	b21b      	sxth	r3, r3
 800036a:	4313      	orrs	r3, r2
 800036c:	b21a      	sxth	r2, r3
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8000372:	2204      	movs	r2, #4
 8000374:	2100      	movs	r1, #0
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f004 f96a 	bl	8004650 <memset>
}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <vApplicationGetIdleTaskMemory+0x28>)
 8000394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800039a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	2000004c 	.word	0x2000004c
 80003b0:	200000a0 	.word	0x200000a0

080003b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 2, &Serial_Task_Handler);
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_FREERTOS_Init+0x34>)
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2302      	movs	r3, #2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2300      	movs	r3, #0
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	4909      	ldr	r1, [pc, #36]	; (80003ec <MX_FREERTOS_Init+0x38>)
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <MX_FREERTOS_Init+0x3c>)
 80003ca:	f003 f8c9 	bl	8003560 <xTaskCreate>
  xTaskCreate(Motor_Task, "Motor_Task", 128, NULL, 1,&Motor_Task_Handler);
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_FREERTOS_Init+0x40>)
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2301      	movs	r3, #1
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2300      	movs	r3, #0
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	4907      	ldr	r1, [pc, #28]	; (80003f8 <MX_FREERTOS_Init+0x44>)
 80003dc:	4807      	ldr	r0, [pc, #28]	; (80003fc <MX_FREERTOS_Init+0x48>)
 80003de:	f003 f8bf 	bl	8003560 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000044 	.word	0x20000044
 80003ec:	080046c0 	.word	0x080046c0
 80003f0:	08000449 	.word	0x08000449
 80003f4:	20000048 	.word	0x20000048
 80003f8:	080046d0 	.word	0x080046d0
 80003fc:	0800048d 	.word	0x0800048d

08000400 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <HAL_UART_RxCpltCallback+0x38>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10e      	bne.n	800042e <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_UART_RxCpltCallback+0x3c>)
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <HAL_UART_RxCpltCallback+0x40>)
 8000414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000418:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 800041c:	4909      	ldr	r1, [pc, #36]	; (8000444 <HAL_UART_RxCpltCallback+0x44>)
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <HAL_UART_RxCpltCallback+0x3c>)
 8000420:	f7ff ff6c 	bl	80002fc <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8000424:	2208      	movs	r2, #8
 8000426:	4906      	ldr	r1, [pc, #24]	; (8000440 <HAL_UART_RxCpltCallback+0x40>)
 8000428:	4803      	ldr	r0, [pc, #12]	; (8000438 <HAL_UART_RxCpltCallback+0x38>)
 800042a:	f002 f86e 	bl	800250a <HAL_UART_Receive_DMA>
	}
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200002a0 	.word	0x200002a0
 800043c:	2000002c 	.word	0x2000002c
 8000440:	20000034 	.word	0x20000034
 8000444:	2000003c 	.word	0x2000003c

08000448 <Serial_Task>:

void Serial_Task(void *argument)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000454:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8000456:	2208      	movs	r2, #8
 8000458:	4909      	ldr	r1, [pc, #36]	; (8000480 <Serial_Task+0x38>)
 800045a:	480a      	ldr	r0, [pc, #40]	; (8000484 <Serial_Task+0x3c>)
 800045c:	f002 f855 	bl	800250a <HAL_UART_Receive_DMA>
	while(1)
	{
	  HAL_UART_Transmit(&huart2, receiveBuff, sizeof(receiveBuff), HAL_MAX_DELAY);
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	2208      	movs	r2, #8
 8000466:	4906      	ldr	r1, [pc, #24]	; (8000480 <Serial_Task+0x38>)
 8000468:	4807      	ldr	r0, [pc, #28]	; (8000488 <Serial_Task+0x40>)
 800046a:	f001 ffc3 	bl	80023f4 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 800046e:	2208      	movs	r2, #8
 8000470:	4903      	ldr	r1, [pc, #12]	; (8000480 <Serial_Task+0x38>)
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <Serial_Task+0x3c>)
 8000474:	f002 f849 	bl	800250a <HAL_UART_Receive_DMA>
	  vTaskDelay(TickDelay);
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	f003 f9a7 	bl	80037cc <vTaskDelay>
	  HAL_UART_Transmit(&huart2, receiveBuff, sizeof(receiveBuff), HAL_MAX_DELAY);
 800047e:	e7ef      	b.n	8000460 <Serial_Task+0x18>
 8000480:	20000034 	.word	0x20000034
 8000484:	200002a0 	.word	0x200002a0
 8000488:	200002e8 	.word	0x200002e8

0800048c <Motor_Task>:
	}
}

void Motor_Task(void *argument)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	while(1)
 8000494:	e7fe      	b.n	8000494 <Motor_Task+0x8>
	...

08000498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004a4:	f043 0320 	orr.w	r3, r3, #32
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0320 	and.w	r3, r3, #32
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004bc:	f043 0304 	orr.w	r3, r3, #4
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0304 	and.w	r3, r3, #4
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_GPIO_Init+0x58>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0308 	and.w	r3, r3, #8
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb94 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80f 	bl	800051e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f7ff ffca 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f7ff fe94 	bl	8000230 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f90e 	bl	8000728 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f936 	bl	800077c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f95e 	bl	80007d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000514:	f7ff ff4e 	bl	80003b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 8000518:	f003 f98c 	bl	8003834 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x28>

0800051e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b090      	sub	sp, #64	; 0x40
 8000522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	2228      	movs	r2, #40	; 0x28
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f88f 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000548:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054e:	2301      	movs	r3, #1
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fae4 	bl	8001b34 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000572:	f000 f819 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2102      	movs	r1, #2
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fd51 	bl	8002038 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059c:	f000 f804 	bl	80005a8 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3740      	adds	r7, #64	; 0x40
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <HAL_MspInit+0x68>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <HAL_MspInit+0x68>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_MspInit+0x68>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_MspInit+0x68>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <HAL_MspInit+0x68>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x68>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	210f      	movs	r1, #15
 80005ee:	f06f 0001 	mvn.w	r0, #1
 80005f2:	f000 fc50 	bl	8000e96 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_MspInit+0x6c>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_MspInit+0x6c>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	40010000 	.word	0x40010000

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 fb2d 	bl	8000cb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000656:	f003 fbdf 	bl	8003e18 <xTaskGetSchedulerState>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d001      	beq.n	8000664 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000660:	f003 fdca 	bl	80041f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <DMA1_Channel2_IRQHandler+0x10>)
 800066e:	f000 fe63 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200004cc 	.word	0x200004cc

0800067c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <DMA1_Channel3_IRQHandler+0x10>)
 8000682:	f000 fe59 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000488 	.word	0x20000488

08000690 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <DMA1_Channel4_IRQHandler+0x10>)
 8000696:	f000 fe4f 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200003bc 	.word	0x200003bc

080006a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel5_IRQHandler+0x10>)
 80006aa:	f000 fe45 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000378 	.word	0x20000378

080006b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DMA1_Channel6_IRQHandler+0x10>)
 80006be:	f000 fe3b 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000400 	.word	0x20000400

080006cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <DMA1_Channel7_IRQHandler+0x10>)
 80006d2:	f000 fe31 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000444 	.word	0x20000444

080006e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <USART1_IRQHandler+0x10>)
 80006e6:	f001 ff35 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200002a0 	.word	0x200002a0

080006f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <USART2_IRQHandler+0x10>)
 80006fa:	f001 ff2b 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200002e8 	.word	0x200002e8

08000708 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <USART3_IRQHandler+0x10>)
 800070e:	f001 ff21 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000330 	.word	0x20000330

0800071c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART1_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART1_UART_Init+0x4c>)
 8000760:	f001 fdf8 	bl	8002354 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f7ff ff1d 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200002a0 	.word	0x200002a0
 8000778:	40013800 	.word	0x40013800

0800077c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f001 fdce 	bl	8002354 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f7ff fef3 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200002e8 	.word	0x200002e8
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART3_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART3_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART3_UART_Init+0x4c>)
 8000808:	f001 fda4 	bl	8002354 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f7ff fec9 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000330 	.word	0x20000330
 8000820:	40004800 	.word	0x40004800

08000824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a8b      	ldr	r2, [pc, #556]	; (8000a6c <HAL_UART_MspInit+0x248>)
 8000840:	4293      	cmp	r3, r2
 8000842:	f040 8087 	bne.w	8000954 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000846:	4b8a      	ldr	r3, [pc, #552]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a89      	ldr	r2, [pc, #548]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b87      	ldr	r3, [pc, #540]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a83      	ldr	r2, [pc, #524]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b81      	ldr	r3, [pc, #516]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	487a      	ldr	r0, [pc, #488]	; (8000a74 <HAL_UART_MspInit+0x250>)
 800088c:	f000 ffbe 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4619      	mov	r1, r3
 80008a4:	4873      	ldr	r0, [pc, #460]	; (8000a74 <HAL_UART_MspInit+0x250>)
 80008a6:	f000 ffb1 	bl	800180c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008aa:	4b73      	ldr	r3, [pc, #460]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008ac:	4a73      	ldr	r2, [pc, #460]	; (8000a7c <HAL_UART_MspInit+0x258>)
 80008ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b0:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b70      	ldr	r3, [pc, #448]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008bc:	4b6e      	ldr	r3, [pc, #440]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c2:	4b6d      	ldr	r3, [pc, #436]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c8:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008ce:	4b6a      	ldr	r3, [pc, #424]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d4:	4b68      	ldr	r3, [pc, #416]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008da:	4867      	ldr	r0, [pc, #412]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008dc:	f000 fb12 	bl	8000f04 <HAL_DMA_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008e6:	f7ff fe5f 	bl	80005a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f0:	4a61      	ldr	r2, [pc, #388]	; (8000a78 <HAL_UART_MspInit+0x254>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008f6:	4b62      	ldr	r3, [pc, #392]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 80008f8:	4a62      	ldr	r2, [pc, #392]	; (8000a84 <HAL_UART_MspInit+0x260>)
 80008fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fc:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 80008fe:	2210      	movs	r2, #16
 8000900:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000914:	4b5a      	ldr	r3, [pc, #360]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000920:	4b57      	ldr	r3, [pc, #348]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000926:	4856      	ldr	r0, [pc, #344]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 8000928:	f000 faec 	bl	8000f04 <HAL_DMA_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000932:	f7ff fe39 	bl	80005a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 800093a:	639a      	str	r2, [r3, #56]	; 0x38
 800093c:	4a50      	ldr	r2, [pc, #320]	; (8000a80 <HAL_UART_MspInit+0x25c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2105      	movs	r1, #5
 8000946:	2025      	movs	r0, #37	; 0x25
 8000948:	f000 faa5 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094c:	2025      	movs	r0, #37	; 0x25
 800094e:	f000 fabe 	bl	8000ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000952:	e12f      	b.n	8000bb4 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <HAL_UART_MspInit+0x264>)
 800095a:	4293      	cmp	r3, r2
 800095c:	f040 809e 	bne.w	8000a9c <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000960:	4b43      	ldr	r3, [pc, #268]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	4a42      	ldr	r2, [pc, #264]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	61d3      	str	r3, [r2, #28]
 800096c:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a3c      	ldr	r2, [pc, #240]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <HAL_UART_MspInit+0x24c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000990:	2304      	movs	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4619      	mov	r1, r3
 80009a2:	4834      	ldr	r0, [pc, #208]	; (8000a74 <HAL_UART_MspInit+0x250>)
 80009a4:	f000 ff32 	bl	800180c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4619      	mov	r1, r3
 80009ba:	482e      	ldr	r0, [pc, #184]	; (8000a74 <HAL_UART_MspInit+0x250>)
 80009bc:	f000 ff26 	bl	800180c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009c2:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <HAL_UART_MspInit+0x26c>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <HAL_UART_MspInit+0x268>)
 80009f2:	f000 fa87 	bl	8000f04 <HAL_DMA_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80009fc:	f7ff fdd4 	bl	80005a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <HAL_UART_MspInit+0x268>)
 8000a04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_UART_MspInit+0x268>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <HAL_UART_MspInit+0x274>)
 8000a10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a3e:	f000 fa61 	bl	8000f04 <HAL_DMA_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a48:	f7ff fdae 	bl	80005a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x270>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	2026      	movs	r0, #38	; 0x26
 8000a5e:	f000 fa1a 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a62:	2026      	movs	r0, #38	; 0x26
 8000a64:	f000 fa33 	bl	8000ece <HAL_NVIC_EnableIRQ>
}
 8000a68:	e0a4      	b.n	8000bb4 <HAL_UART_MspInit+0x390>
 8000a6a:	bf00      	nop
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800
 8000a78:	20000378 	.word	0x20000378
 8000a7c:	40020058 	.word	0x40020058
 8000a80:	200003bc 	.word	0x200003bc
 8000a84:	40020044 	.word	0x40020044
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	20000400 	.word	0x20000400
 8000a90:	4002006c 	.word	0x4002006c
 8000a94:	20000444 	.word	0x20000444
 8000a98:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <HAL_UART_MspInit+0x398>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	f040 8086 	bne.w	8000bb4 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa8:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <HAL_UART_MspInit+0x39c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4619      	mov	r1, r3
 8000aec:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <HAL_UART_MspInit+0x3a0>)
 8000aee:	f000 fe8d 	bl	800180c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4619      	mov	r1, r3
 8000b06:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <HAL_UART_MspInit+0x3a0>)
 8000b08:	f000 fe80 	bl	800180c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <HAL_UART_MspInit+0x3a8>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b3c:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b3e:	f000 f9e1 	bl	8000f04 <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x328>
      Error_Handler();
 8000b48:	f7ff fd2e 	bl	80005a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b52:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_UART_MspInit+0x3a4>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_UART_MspInit+0x3b0>)
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b60:	2210      	movs	r2, #16
 8000b62:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b8a:	f000 f9bb 	bl	8000f04 <HAL_DMA_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8000b94:	f7ff fd08 	bl	80005a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <HAL_UART_MspInit+0x3ac>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	2027      	movs	r0, #39	; 0x27
 8000baa:	f000 f974 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bae:	2027      	movs	r0, #39	; 0x27
 8000bb0:	f000 f98d 	bl	8000ece <HAL_NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3730      	adds	r7, #48	; 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40004800 	.word	0x40004800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	20000488 	.word	0x20000488
 8000bcc:	40020030 	.word	0x40020030
 8000bd0:	200004cc 	.word	0x200004cc
 8000bd4:	4002001c 	.word	0x4002001c

08000bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd8:	f7ff fda0 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bde:	490c      	ldr	r1, [pc, #48]	; (8000c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf4:	4c09      	ldr	r4, [pc, #36]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f003 fd2d 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c06:	f7ff fc75 	bl	80004f4 <main>
  bx lr
 8000c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c14:	08004718 	.word	0x08004718
  ldr r2, =_sbss
 8000c18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c1c:	20001268 	.word	0x20001268

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x28>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f923 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fcb8 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f93b 	bl	8000eea <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f903 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000510 	.word	0x20000510

08000cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000510 	.word	0x20000510

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4906      	ldr	r1, [pc, #24]	; (8000d80 <__NVIC_EnableIRQ+0x34>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff90 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff2d 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff42 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff90 	bl	8000dd8 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff35 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa2 	bl	8000e3c <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e059      	b.n	8000fce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_DMA_Init+0xd4>)
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d80f      	bhi.n	8000f46 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_DMA_Init+0xd8>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <HAL_DMA_Init+0xdc>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	009a      	lsls	r2, r3, #2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <HAL_DMA_Init+0xe0>)
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f44:	e00e      	b.n	8000f64 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_DMA_Init+0xe4>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_DMA_Init+0xdc>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	009a      	lsls	r2, r3, #2
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_DMA_Init+0xe8>)
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40020407 	.word	0x40020407
 8000fdc:	bffdfff8 	.word	0xbffdfff8
 8000fe0:	cccccccd 	.word	0xcccccccd
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	bffdfbf8 	.word	0xbffdfbf8
 8000fec:	40020400 	.word	0x40020400

08000ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Start_IT+0x20>
 800100c:	2302      	movs	r3, #2
 800100e:	e04b      	b.n	80010a8 <HAL_DMA_Start_IT+0xb8>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d13a      	bne.n	800109a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 fbb1 	bl	80017b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 020e 	orr.w	r2, r2, #14
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e00f      	b.n	8001088 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0204 	bic.w	r2, r2, #4
 8001076:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 020a 	orr.w	r2, r2, #10
 8001086:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e005      	b.n	80010a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d008      	beq.n	80010da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2204      	movs	r2, #4
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e020      	b.n	800111c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 020e 	bic.w	r2, r2, #14
 80010e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d005      	beq.n	800114c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e0d6      	b.n	80012fa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <HAL_DMA_Abort_IT+0x1dc>)
 8001174:	429a      	cmp	r2, r3
 8001176:	d958      	bls.n	800122a <HAL_DMA_Abort_IT+0x102>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a62      	ldr	r2, [pc, #392]	; (8001308 <HAL_DMA_Abort_IT+0x1e0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d04f      	beq.n	8001222 <HAL_DMA_Abort_IT+0xfa>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a61      	ldr	r2, [pc, #388]	; (800130c <HAL_DMA_Abort_IT+0x1e4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d048      	beq.n	800121e <HAL_DMA_Abort_IT+0xf6>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_DMA_Abort_IT+0x1e8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d040      	beq.n	8001218 <HAL_DMA_Abort_IT+0xf0>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <HAL_DMA_Abort_IT+0x1ec>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d038      	beq.n	8001212 <HAL_DMA_Abort_IT+0xea>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_DMA_Abort_IT+0x1f0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d030      	beq.n	800120c <HAL_DMA_Abort_IT+0xe4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a5b      	ldr	r2, [pc, #364]	; (800131c <HAL_DMA_Abort_IT+0x1f4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d028      	beq.n	8001206 <HAL_DMA_Abort_IT+0xde>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_DMA_Abort_IT+0x1dc>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d020      	beq.n	8001200 <HAL_DMA_Abort_IT+0xd8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_DMA_Abort_IT+0x1f8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d019      	beq.n	80011fc <HAL_DMA_Abort_IT+0xd4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a55      	ldr	r2, [pc, #340]	; (8001324 <HAL_DMA_Abort_IT+0x1fc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d012      	beq.n	80011f8 <HAL_DMA_Abort_IT+0xd0>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a54      	ldr	r2, [pc, #336]	; (8001328 <HAL_DMA_Abort_IT+0x200>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00a      	beq.n	80011f2 <HAL_DMA_Abort_IT+0xca>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_DMA_Abort_IT+0x204>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d102      	bne.n	80011ec <HAL_DMA_Abort_IT+0xc4>
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	e01b      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	e018      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	e015      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 80011f8:	2310      	movs	r3, #16
 80011fa:	e013      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e011      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 8001200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001204:	e00e      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 8001206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800120a:	e00b      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	e008      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	e005      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	e002      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 800121e:	2310      	movs	r3, #16
 8001220:	e000      	b.n	8001224 <HAL_DMA_Abort_IT+0xfc>
 8001222:	2301      	movs	r3, #1
 8001224:	4a42      	ldr	r2, [pc, #264]	; (8001330 <HAL_DMA_Abort_IT+0x208>)
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e057      	b.n	80012da <HAL_DMA_Abort_IT+0x1b2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a36      	ldr	r2, [pc, #216]	; (8001308 <HAL_DMA_Abort_IT+0x1e0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04f      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x1ac>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a34      	ldr	r2, [pc, #208]	; (800130c <HAL_DMA_Abort_IT+0x1e4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d048      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x1a8>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a33      	ldr	r2, [pc, #204]	; (8001310 <HAL_DMA_Abort_IT+0x1e8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d040      	beq.n	80012ca <HAL_DMA_Abort_IT+0x1a2>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <HAL_DMA_Abort_IT+0x1ec>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d038      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x19c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a30      	ldr	r2, [pc, #192]	; (8001318 <HAL_DMA_Abort_IT+0x1f0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d030      	beq.n	80012be <HAL_DMA_Abort_IT+0x196>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_DMA_Abort_IT+0x1f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d028      	beq.n	80012b8 <HAL_DMA_Abort_IT+0x190>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_DMA_Abort_IT+0x1dc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d020      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x18a>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <HAL_DMA_Abort_IT+0x1f8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_DMA_Abort_IT+0x186>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_DMA_Abort_IT+0x1fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d012      	beq.n	80012aa <HAL_DMA_Abort_IT+0x182>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_DMA_Abort_IT+0x200>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00a      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x17c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_DMA_Abort_IT+0x204>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <HAL_DMA_Abort_IT+0x176>
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	e01b      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 800129e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a2:	e018      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	e015      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012aa:	2310      	movs	r3, #16
 80012ac:	e013      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e011      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b6:	e00e      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012bc:	e00b      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c2:	e008      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	e005      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	e002      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012d0:	2310      	movs	r3, #16
 80012d2:	e000      	b.n	80012d6 <HAL_DMA_Abort_IT+0x1ae>
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_DMA_Abort_IT+0x20c>)
 80012d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    } 
  }
  return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020080 	.word	0x40020080
 8001308:	40020008 	.word	0x40020008
 800130c:	4002001c 	.word	0x4002001c
 8001310:	40020030 	.word	0x40020030
 8001314:	40020044 	.word	0x40020044
 8001318:	40020058 	.word	0x40020058
 800131c:	4002006c 	.word	0x4002006c
 8001320:	40020408 	.word	0x40020408
 8001324:	4002041c 	.word	0x4002041c
 8001328:	40020430 	.word	0x40020430
 800132c:	40020444 	.word	0x40020444
 8001330:	40020400 	.word	0x40020400
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2204      	movs	r2, #4
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80f1 	beq.w	8001544 <HAL_DMA_IRQHandler+0x20c>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80eb 	beq.w	8001544 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_DMA_IRQHandler+0x1d8>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d958      	bls.n	800144a <HAL_DMA_IRQHandler+0x112>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <HAL_DMA_IRQHandler+0x1dc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d04f      	beq.n	8001442 <HAL_DMA_IRQHandler+0x10a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a5c      	ldr	r2, [pc, #368]	; (8001518 <HAL_DMA_IRQHandler+0x1e0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d048      	beq.n	800143e <HAL_DMA_IRQHandler+0x106>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_DMA_IRQHandler+0x1e4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d040      	beq.n	8001438 <HAL_DMA_IRQHandler+0x100>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a59      	ldr	r2, [pc, #356]	; (8001520 <HAL_DMA_IRQHandler+0x1e8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d038      	beq.n	8001432 <HAL_DMA_IRQHandler+0xfa>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_DMA_IRQHandler+0x1ec>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d030      	beq.n	800142c <HAL_DMA_IRQHandler+0xf4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a56      	ldr	r2, [pc, #344]	; (8001528 <HAL_DMA_IRQHandler+0x1f0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d028      	beq.n	8001426 <HAL_DMA_IRQHandler+0xee>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	; (8001510 <HAL_DMA_IRQHandler+0x1d8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d020      	beq.n	8001420 <HAL_DMA_IRQHandler+0xe8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_DMA_IRQHandler+0x1f4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d019      	beq.n	800141c <HAL_DMA_IRQHandler+0xe4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_DMA_IRQHandler+0x1f8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d012      	beq.n	8001418 <HAL_DMA_IRQHandler+0xe0>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <HAL_DMA_IRQHandler+0x1fc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00a      	beq.n	8001412 <HAL_DMA_IRQHandler+0xda>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_DMA_IRQHandler+0x200>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d102      	bne.n	800140c <HAL_DMA_IRQHandler+0xd4>
 8001406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140a:	e01b      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 800140c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001410:	e018      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	e015      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	e013      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 800141c:	2304      	movs	r3, #4
 800141e:	e011      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001420:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001424:	e00e      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142a:	e00b      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 800142c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001430:	e008      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001436:	e005      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	e002      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 800143e:	2340      	movs	r3, #64	; 0x40
 8001440:	e000      	b.n	8001444 <HAL_DMA_IRQHandler+0x10c>
 8001442:	2304      	movs	r3, #4
 8001444:	4a3d      	ldr	r2, [pc, #244]	; (800153c <HAL_DMA_IRQHandler+0x204>)
 8001446:	6053      	str	r3, [r2, #4]
 8001448:	e057      	b.n	80014fa <HAL_DMA_IRQHandler+0x1c2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_DMA_IRQHandler+0x1dc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04f      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x1bc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_DMA_IRQHandler+0x1e0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d048      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x1b8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_DMA_IRQHandler+0x1e4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d040      	beq.n	80014ea <HAL_DMA_IRQHandler+0x1b2>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2c      	ldr	r2, [pc, #176]	; (8001520 <HAL_DMA_IRQHandler+0x1e8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d038      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x1ac>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_DMA_IRQHandler+0x1ec>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d030      	beq.n	80014de <HAL_DMA_IRQHandler+0x1a6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_DMA_IRQHandler+0x1f0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d028      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1a0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_DMA_IRQHandler+0x1d8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d020      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x19a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_DMA_IRQHandler+0x1f4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_DMA_IRQHandler+0x196>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <HAL_DMA_IRQHandler+0x1f8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d012      	beq.n	80014ca <HAL_DMA_IRQHandler+0x192>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_DMA_IRQHandler+0x1fc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x18c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_DMA_IRQHandler+0x200>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d102      	bne.n	80014be <HAL_DMA_IRQHandler+0x186>
 80014b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014bc:	e01b      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014c2:	e018      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c8:	e015      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	e013      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e011      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014d6:	e00e      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014dc:	e00b      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014e2:	e008      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e8:	e005      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	e002      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014f0:	2340      	movs	r3, #64	; 0x40
 80014f2:	e000      	b.n	80014f6 <HAL_DMA_IRQHandler+0x1be>
 80014f4:	2304      	movs	r3, #4
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_DMA_IRQHandler+0x208>)
 80014f8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8136 	beq.w	8001770 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800150c:	e130      	b.n	8001770 <HAL_DMA_IRQHandler+0x438>
 800150e:	bf00      	nop
 8001510:	40020080 	.word	0x40020080
 8001514:	40020008 	.word	0x40020008
 8001518:	4002001c 	.word	0x4002001c
 800151c:	40020030 	.word	0x40020030
 8001520:	40020044 	.word	0x40020044
 8001524:	40020058 	.word	0x40020058
 8001528:	4002006c 	.word	0x4002006c
 800152c:	40020408 	.word	0x40020408
 8001530:	4002041c 	.word	0x4002041c
 8001534:	40020430 	.word	0x40020430
 8001538:	40020444 	.word	0x40020444
 800153c:	40020400 	.word	0x40020400
 8001540:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2202      	movs	r2, #2
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80dd 	beq.w	8001710 <HAL_DMA_IRQHandler+0x3d8>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80d7 	beq.w	8001710 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020a 	bic.w	r2, r2, #10
 800157e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b7b      	ldr	r3, [pc, #492]	; (800177c <HAL_DMA_IRQHandler+0x444>)
 8001590:	429a      	cmp	r2, r3
 8001592:	d958      	bls.n	8001646 <HAL_DMA_IRQHandler+0x30e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a79      	ldr	r2, [pc, #484]	; (8001780 <HAL_DMA_IRQHandler+0x448>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d04f      	beq.n	800163e <HAL_DMA_IRQHandler+0x306>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a78      	ldr	r2, [pc, #480]	; (8001784 <HAL_DMA_IRQHandler+0x44c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d048      	beq.n	800163a <HAL_DMA_IRQHandler+0x302>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a76      	ldr	r2, [pc, #472]	; (8001788 <HAL_DMA_IRQHandler+0x450>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d040      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2fc>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_DMA_IRQHandler+0x454>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d038      	beq.n	800162e <HAL_DMA_IRQHandler+0x2f6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_DMA_IRQHandler+0x458>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d030      	beq.n	8001628 <HAL_DMA_IRQHandler+0x2f0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a72      	ldr	r2, [pc, #456]	; (8001794 <HAL_DMA_IRQHandler+0x45c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d028      	beq.n	8001622 <HAL_DMA_IRQHandler+0x2ea>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a69      	ldr	r2, [pc, #420]	; (800177c <HAL_DMA_IRQHandler+0x444>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d020      	beq.n	800161c <HAL_DMA_IRQHandler+0x2e4>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_DMA_IRQHandler+0x460>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d019      	beq.n	8001618 <HAL_DMA_IRQHandler+0x2e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6c      	ldr	r2, [pc, #432]	; (800179c <HAL_DMA_IRQHandler+0x464>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d012      	beq.n	8001614 <HAL_DMA_IRQHandler+0x2dc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6b      	ldr	r2, [pc, #428]	; (80017a0 <HAL_DMA_IRQHandler+0x468>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00a      	beq.n	800160e <HAL_DMA_IRQHandler+0x2d6>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_DMA_IRQHandler+0x46c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d102      	bne.n	8001608 <HAL_DMA_IRQHandler+0x2d0>
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	e01b      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160c:	e018      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 800160e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001612:	e015      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001614:	2320      	movs	r3, #32
 8001616:	e013      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001618:	2302      	movs	r3, #2
 800161a:	e011      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 800161c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162c:	e008      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	e005      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	e002      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 800163a:	2320      	movs	r3, #32
 800163c:	e000      	b.n	8001640 <HAL_DMA_IRQHandler+0x308>
 800163e:	2302      	movs	r3, #2
 8001640:	4a59      	ldr	r2, [pc, #356]	; (80017a8 <HAL_DMA_IRQHandler+0x470>)
 8001642:	6053      	str	r3, [r2, #4]
 8001644:	e057      	b.n	80016f6 <HAL_DMA_IRQHandler+0x3be>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_DMA_IRQHandler+0x448>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04f      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x3b8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_DMA_IRQHandler+0x44c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d048      	beq.n	80016ec <HAL_DMA_IRQHandler+0x3b4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_DMA_IRQHandler+0x450>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d040      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x3ae>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_DMA_IRQHandler+0x454>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d038      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x3a8>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_DMA_IRQHandler+0x458>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d030      	beq.n	80016da <HAL_DMA_IRQHandler+0x3a2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a45      	ldr	r2, [pc, #276]	; (8001794 <HAL_DMA_IRQHandler+0x45c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d028      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x39c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3d      	ldr	r2, [pc, #244]	; (800177c <HAL_DMA_IRQHandler+0x444>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d020      	beq.n	80016ce <HAL_DMA_IRQHandler+0x396>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_DMA_IRQHandler+0x460>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_DMA_IRQHandler+0x392>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a40      	ldr	r2, [pc, #256]	; (800179c <HAL_DMA_IRQHandler+0x464>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d012      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x38e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_DMA_IRQHandler+0x468>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x388>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <HAL_DMA_IRQHandler+0x46c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_DMA_IRQHandler+0x382>
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	e01b      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016be:	e018      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c4:	e015      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016c6:	2320      	movs	r3, #32
 80016c8:	e013      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e011      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d2:	e00e      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016d8:	e00b      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	e008      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	e005      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ea:	e002      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016ec:	2320      	movs	r3, #32
 80016ee:	e000      	b.n	80016f2 <HAL_DMA_IRQHandler+0x3ba>
 80016f0:	2302      	movs	r3, #2
 80016f2:	4a2e      	ldr	r2, [pc, #184]	; (80017ac <HAL_DMA_IRQHandler+0x474>)
 80016f4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	2b00      	cmp	r3, #0
 8001704:	d034      	beq.n	8001770 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800170e:	e02f      	b.n	8001770 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2208      	movs	r2, #8
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d028      	beq.n	8001772 <HAL_DMA_IRQHandler+0x43a>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 020e 	bic.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
    }
  }
  return;
 8001770:	bf00      	nop
 8001772:	bf00      	nop
}
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020080 	.word	0x40020080
 8001780:	40020008 	.word	0x40020008
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40020030 	.word	0x40020030
 800178c:	40020044 	.word	0x40020044
 8001790:	40020058 	.word	0x40020058
 8001794:	4002006c 	.word	0x4002006c
 8001798:	40020408 	.word	0x40020408
 800179c:	4002041c 	.word	0x4002041c
 80017a0:	40020430 	.word	0x40020430
 80017a4:	40020444 	.word	0x40020444
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020000 	.word	0x40020000

080017b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d108      	bne.n	80017f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ee:	e007      	b.n	8001800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	60da      	str	r2, [r3, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e179      	b.n	8001b14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001820:	2201      	movs	r2, #1
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8168 	bne.w	8001b0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x290>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d05e      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001848:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x290>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d875      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x294>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d058      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x294>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d86f      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800185a:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x298>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d052      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001860:	4a90      	ldr	r2, [pc, #576]	; (8001aa4 <HAL_GPIO_Init+0x298>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d869      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001866:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_GPIO_Init+0x29c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d04c      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_GPIO_Init+0x29c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d863      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001872:	4a8e      	ldr	r2, [pc, #568]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d046      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001878:	4a8c      	ldr	r2, [pc, #560]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d85d      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d82a      	bhi.n	80018d8 <HAL_GPIO_Init+0xcc>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d859      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <HAL_GPIO_Init+0x80>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	08001907 	.word	0x08001907
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018f3 	.word	0x080018f3
 8001898:	08001935 	.word	0x08001935
 800189c:	0800193b 	.word	0x0800193b
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	0800193b 	.word	0x0800193b
 80018a8:	0800193b 	.word	0x0800193b
 80018ac:	0800193b 	.word	0x0800193b
 80018b0:	0800193b 	.word	0x0800193b
 80018b4:	0800193b 	.word	0x0800193b
 80018b8:	0800193b 	.word	0x0800193b
 80018bc:	0800193b 	.word	0x0800193b
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	0800193b 	.word	0x0800193b
 80018c8:	0800193b 	.word	0x0800193b
 80018cc:	0800193b 	.word	0x0800193b
 80018d0:	080018e9 	.word	0x080018e9
 80018d4:	080018fd 	.word	0x080018fd
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_GPIO_Init+0x2a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018de:	e02c      	b.n	800193a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e029      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e024      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	3308      	adds	r3, #8
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e01f      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	330c      	adds	r3, #12
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e01a      	b.n	800193c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190e:	2304      	movs	r3, #4
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e013      	b.n	800193c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	611a      	str	r2, [r3, #16]
          break;
 8001926:	e009      	b.n	800193c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	615a      	str	r2, [r3, #20]
          break;
 8001932:	e003      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x130>
          break;
 800193a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d801      	bhi.n	8001946 <HAL_GPIO_Init+0x13a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <HAL_GPIO_Init+0x13e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d802      	bhi.n	8001958 <HAL_GPIO_Init+0x14c>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x152>
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3b08      	subs	r3, #8
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	210f      	movs	r1, #15
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80c1 	beq.w	8001b0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a4:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3c      	ldr	r2, [pc, #240]	; (8001abc <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d01f      	beq.n	8001a10 <HAL_GPIO_Init+0x204>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_GPIO_Init+0x2b4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d019      	beq.n	8001a0c <HAL_GPIO_Init+0x200>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <HAL_GPIO_Init+0x2b8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_Init+0x1fc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <HAL_GPIO_Init+0x2bc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_Init+0x1f8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a38      	ldr	r2, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x2c0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x1f4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2c4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_Init+0x1f0>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e00a      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4924      	ldr	r1, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4920      	ldr	r1, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d025      	beq.n	8001ad8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4910      	ldr	r1, [pc, #64]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e025      	b.n	8001ae6 <HAL_GPIO_Init+0x2da>
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40011400 	.word	0x40011400
 8001acc:	40011800 	.word	0x40011800
 8001ad0:	40011c00 	.word	0x40011c00
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4909      	ldr	r1, [pc, #36]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	3301      	adds	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ae7e 	bne.w	8001820 <HAL_GPIO_Init+0x14>
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	372c      	adds	r7, #44	; 0x2c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e272      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d112      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d10b      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d168      	bne.n	8001c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e24c      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x76>
 8001b9c:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e02e      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xbc>
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f860 	bl	8000cd4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f85c 	bl	8000cd4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e200      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe4>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f84c 	bl	8000cd4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f848 	bl	8000cd4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1ec      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x10c>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c0      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4939      	ldr	r1, [pc, #228]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff f801 	bl	8000cd4 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7fe fffd 	bl	8000cd4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a1      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4927      	ldr	r1, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7fe ffe0 	bl	8000cd4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7fe ffdc 	bl	8000cd4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e180      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03a      	beq.n	8001db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d019      	beq.n	8001d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7fe ffc0 	bl	8000cd4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe ffbc 	bl	8000cd4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e160      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 face 	bl	8002318 <RCC_Delay>
 8001d7c:	e01c      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffa6 	bl	8000cd4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8a:	e00f      	b.n	8001dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7fe ffa2 	bl	8000cd4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d908      	bls.n	8001dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e146      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	42420000 	.word	0x42420000
 8001da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e9      	bne.n	8001d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a6 	beq.w	8001f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7e      	ldr	r2, [pc, #504]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ff63 	bl	8000cd4 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7fe ff5f 	bl	8000cd4 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e103      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4c8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x312>
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e02d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x334>
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x356>
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a60      	ldr	r2, [pc, #384]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff13 	bl	8000cd4 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe ff0f 	bl	8000cd4 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0b1      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fefd 	bl	8000cd4 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7fe fef9 	bl	8000cd4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e09b      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8087 	beq.w	800202a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d061      	beq.n	8001fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d146      	bne.n	8001fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fecd 	bl	8000cd4 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fec9 	bl	8000cd4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e06d      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4921      	ldr	r1, [pc, #132]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a19      	ldr	r1, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fe9d 	bl	8000cd4 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fe99 	bl	8000cd4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46a>
 8001fbc:	e035      	b.n	800202a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe86 	bl	8000cd4 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fe82 	bl	8000cd4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e026      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x498>
 8001fea:	e01e      	b.n	800202a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e019      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x500>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4965      	ldr	r1, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e073      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4936      	ldr	r1, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7fe fdd4 	bl	8000cd4 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe fdd0 	bl	8000cd4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e053      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1cc>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fd32 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	080046e4 	.word	0x080046e4
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x30>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x36>
 800223a:	e027      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	e027      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0c5b      	lsrs	r3, r3, #17
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	fb03 f202 	mul.w	r2, r3, r2
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	613b      	str	r3, [r7, #16]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800228e:	613b      	str	r3, [r7, #16]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	693b      	ldr	r3, [r7, #16]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	080046fc 	.word	0x080046fc
 80022ac:	0800470c 	.word	0x0800470c
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022cc:	f7ff fff2 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4903      	ldr	r1, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080046f4 	.word	0x080046f4

080022f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0adb      	lsrs	r3, r3, #11
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	080046f4 	.word	0x080046f4

08002318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <RCC_Delay+0x34>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <RCC_Delay+0x38>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002334:	bf00      	nop
  }
  while (Delay --);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	60fa      	str	r2, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <RCC_Delay+0x1c>
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000000 	.word	0x20000000
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e042      	b.n	80023ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fa52 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 ff47 	bl	800322c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b20      	cmp	r3, #32
 8002412:	d175      	bne.n	8002500 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_UART_Transmit+0x2c>
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e06e      	b.n	8002502 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2221      	movs	r2, #33	; 0x21
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fc4f 	bl	8000cd4 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d108      	bne.n	8002460 <HAL_UART_Transmit+0x6c>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e003      	b.n	8002468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002468:	e02e      	b.n	80024c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2200      	movs	r2, #0
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc23 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e03a      	b.n	8002502 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3302      	adds	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e007      	b.n	80024ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1cb      	bne.n	800246a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fbef 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e006      	b.n	8002502 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	4613      	mov	r3, r2
 8002516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d112      	bne.n	800254a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Receive_DMA+0x26>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e00b      	b.n	800254c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	461a      	mov	r2, r3
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fc17 	bl	8002d74 <UART_Start_Receive_DMA>
 8002546:	4603      	mov	r3, r0
 8002548:	e000      	b.n	800254c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ba      	sub	sp, #232	; 0xe8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
 80025a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fd7c 	bl	80030b0 <UART_Receive_IT>
      return;
 80025b8:	e25b      	b.n	8002a72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80de 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
 80025c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80d1 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
 8002656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 81f2 	beq.w	8002a68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fd07 	bl	80030b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_UART_IRQHandler+0x17a>
 80026c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04f      	beq.n	800276e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fc11 	bl	8002ef6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d041      	beq.n	8002766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800270e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800271a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d9      	bne.n	80026e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	4a7e      	ldr	r2, [pc, #504]	; (8002934 <HAL_UART_IRQHandler+0x3e0>)
 800273c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fcf0 	bl	8001128 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e00e      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f99c 	bl	8002a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	e00a      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f998 	bl	8002a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	e006      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f994 	bl	8002a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800277a:	e175      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	bf00      	nop
    return;
 800277e:	e173      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 814f 	bne.w	8002a28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8148 	beq.w	8002a28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8141 	beq.w	8002a28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80b6 	beq.w	8002938 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8145 	beq.w	8002a6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f080 813e 	bcs.w	8002a6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b20      	cmp	r3, #32
 8002800:	f000 8088 	beq.w	8002914 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002812:	e853 3f00 	ldrex	r3, [r3]
 8002816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800281a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002830:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800283c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1d9      	bne.n	8002804 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002874:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002878:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800287c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e1      	bne.n	8002850 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e3      	bne.n	800288c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80028f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fbce 	bl	80010b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002922:	b29b      	uxth	r3, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	b29b      	uxth	r3, r3
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8bf 	bl	8002aae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002930:	e09c      	b.n	8002a6c <HAL_UART_IRQHandler+0x518>
 8002932:	bf00      	nop
 8002934:	08002fbb 	.word	0x08002fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002940:	b29b      	uxth	r3, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 808e 	beq.w	8002a70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8089 	beq.w	8002a70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002982:	647a      	str	r2, [r7, #68]	; 0x44
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e3      	bne.n	800295e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3314      	adds	r3, #20
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	623b      	str	r3, [r7, #32]
   return(result);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3314      	adds	r3, #20
 80029b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029ba:	633a      	str	r2, [r7, #48]	; 0x30
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e3      	bne.n	8002996 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0310 	bic.w	r3, r3, #16
 80029f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a00:	61fa      	str	r2, [r7, #28]
 8002a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	69b9      	ldr	r1, [r7, #24]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e3      	bne.n	80029dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f844 	bl	8002aae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a26:	e023      	b.n	8002a70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_UART_IRQHandler+0x4f4>
 8002a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 face 	bl	8002fe2 <UART_Transmit_IT>
    return;
 8002a46:	e014      	b.n	8002a72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <HAL_UART_IRQHandler+0x51e>
 8002a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb0d 	bl	8003080 <UART_EndTransmit_IT>
    return;
 8002a66:	e004      	b.n	8002a72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a70:	bf00      	nop
  }
}
 8002a72:	37e8      	adds	r7, #232	; 0xe8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b09c      	sub	sp, #112	; 0x70
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d172      	bne.n	8002bc6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	667b      	str	r3, [r7, #100]	; 0x64
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3314      	adds	r3, #20
 8002b38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d119      	bne.n	8002bc6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0310 	bic.w	r3, r3, #16
 8002ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bb2:	61fa      	str	r2, [r7, #28]
 8002bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	2200      	movs	r2, #0
 8002bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bdc:	f7ff ff67 	bl	8002aae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002be0:	e002      	b.n	8002be8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002be2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002be4:	f7fd fc0c 	bl	8000400 <HAL_UART_RxCpltCallback>
}
 8002be8:	bf00      	nop
 8002bea:	3770      	adds	r7, #112	; 0x70
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d108      	bne.n	8002c1e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff ff49 	bl	8002aae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c1c:	e002      	b.n	8002c24 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ff33 	bl	8002a8a <HAL_UART_RxHalfCpltCallback>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b21      	cmp	r3, #33	; 0x21
 8002c5e:	d108      	bne.n	8002c72 <UART_DMAError+0x46>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c6c:	68b8      	ldr	r0, [r7, #8]
 8002c6e:	f000 f91b 	bl	8002ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b22      	cmp	r3, #34	; 0x22
 8002c92:	d108      	bne.n	8002ca6 <UART_DMAError+0x7a>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ca0:	68b8      	ldr	r0, [r7, #8]
 8002ca2:	f000 f928 	bl	8002ef6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	f7ff fef2 	bl	8002a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd0:	e03b      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d037      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fd fffb 	bl	8000cd4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e03a      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d023      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d020      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d01d      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d116      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8df 	bl	8002ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00f      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d0b4      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b098      	sub	sp, #96	; 0x60
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2222      	movs	r2, #34	; 0x22
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	4a3e      	ldr	r2, [pc, #248]	; (8002e9c <UART_Start_Receive_DMA+0x128>)
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <UART_Start_Receive_DMA+0x12c>)
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <UART_Start_Receive_DMA+0x130>)
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2200      	movs	r2, #0
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f7fe f90c 	bl	8000ff0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	657b      	str	r3, [r7, #84]	; 0x54
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e74:	653b      	str	r3, [r7, #80]	; 0x50
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3314      	adds	r3, #20
 8002e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6a39      	ldr	r1, [r7, #32]
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e5      	bne.n	8002e5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3760      	adds	r7, #96	; 0x60
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	08002ac5 	.word	0x08002ac5
 8002ea0:	08002bf1 	.word	0x08002bf1
 8002ea4:	08002c2d 	.word	0x08002c2d

08002ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	61ba      	str	r2, [r7, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002eec:	bf00      	nop
 8002eee:	3724      	adds	r7, #36	; 0x24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b095      	sub	sp, #84	; 0x54
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1e:	643a      	str	r2, [r7, #64]	; 0x40
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d119      	bne.n	8002fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	61ba      	str	r2, [r7, #24]
 8002f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fb0:	bf00      	nop
 8002fb2:	3754      	adds	r7, #84	; 0x54
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fd61 	bl	8002a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b21      	cmp	r3, #33	; 0x21
 8002ff4:	d13e      	bne.n	8003074 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d114      	bne.n	800302a <UART_Transmit_IT+0x48>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d110      	bne.n	800302a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	e008      	b.n	800303c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6211      	str	r1, [r2, #32]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10f      	bne.n	8003070 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fce9 	bl	8002a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b22      	cmp	r3, #34	; 0x22
 80030c2:	f040 80ae 	bne.w	8003222 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d117      	bne.n	8003100 <UART_Receive_IT+0x50>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	1c9a      	adds	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	e026      	b.n	800314e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	d007      	beq.n	8003124 <UART_Receive_IT+0x74>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <UART_Receive_IT+0x82>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e008      	b.n	8003144 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800315e:	2b00      	cmp	r3, #0
 8003160:	d15d      	bne.n	800321e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d135      	bne.n	8003214 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	613b      	str	r3, [r7, #16]
   return(result);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f023 0310 	bic.w	r3, r3, #16
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	623a      	str	r2, [r7, #32]
 80031d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	61bb      	str	r3, [r7, #24]
   return(result);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d10a      	bne.n	8003206 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fc4e 	bl	8002aae <HAL_UARTEx_RxEventCallback>
 8003212:	e002      	b.n	800321a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd f8f3 	bl	8000400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e002      	b.n	8003224 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3730      	adds	r7, #48	; 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003266:	f023 030c 	bic.w	r3, r3, #12
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	430b      	orrs	r3, r1
 8003272:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <UART_SetConfig+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d103      	bne.n	800329c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7ff f82c 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	e002      	b.n	80032a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800329c:	f7ff f814 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80032a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <UART_SetConfig+0x118>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	0119      	lsls	r1, r3, #4
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <UART_SetConfig+0x118>)
 80032da:	fba3 0302 	umull	r0, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2064      	movs	r0, #100	; 0x64
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <UART_SetConfig+0x118>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f8:	4419      	add	r1, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <UART_SetConfig+0x118>)
 8003312:	fba3 0302 	umull	r0, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2064      	movs	r0, #100	; 0x64
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	; 0x32
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <UART_SetConfig+0x118>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 020f 	and.w	r2, r3, #15
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	440a      	add	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013800 	.word	0x40013800
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f103 0208 	add.w	r2, r3, #8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f103 0208 	add.w	r2, r3, #8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f103 0208 	add.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d103      	bne.n	8003404 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e00c      	b.n	800341e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3308      	adds	r3, #8
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e002      	b.n	8003412 <vListInsert+0x2e>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d2f6      	bcs.n	800340c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d103      	bne.n	8003488 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08e      	sub	sp, #56	; 0x38
 80034aa:	af04      	add	r7, sp, #16
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <xTaskCreateStatic+0x46>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	61fb      	str	r3, [r7, #28]
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ec:	2354      	movs	r3, #84	; 0x54
 80034ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b54      	cmp	r3, #84	; 0x54
 80034f4:	d00a      	beq.n	800350c <xTaskCreateStatic+0x66>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	61bb      	str	r3, [r7, #24]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800350c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01e      	beq.n	8003552 <xTaskCreateStatic+0xac>
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01b      	beq.n	8003552 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800352c:	2300      	movs	r3, #0
 800352e:	9303      	str	r3, [sp, #12]
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f850 	bl	80035ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800354a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354c:	f000 f8d4 	bl	80036f8 <prvAddNewTaskToReadyList>
 8003550:	e001      	b.n	8003556 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003556:	697b      	ldr	r3, [r7, #20]
	}
 8003558:	4618      	mov	r0, r3
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af04      	add	r7, sp, #16
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fe83 	bl	8004280 <pvPortMalloc>
 800357a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003582:	2054      	movs	r0, #84	; 0x54
 8003584:	f000 fe7c 	bl	8004280 <pvPortMalloc>
 8003588:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
 8003596:	e005      	b.n	80035a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	f000 ff3d 	bl	8004418 <vPortFree>
 800359e:	e001      	b.n	80035a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d017      	beq.n	80035da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9303      	str	r3, [sp, #12]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f80e 	bl	80035ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035ce:	69f8      	ldr	r0, [r7, #28]
 80035d0:	f000 f892 	bl	80036f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	e002      	b.n	80035e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035e0:	69bb      	ldr	r3, [r7, #24]
	}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b088      	sub	sp, #32
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003602:	3b01      	subs	r3, #1
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f023 0307 	bic.w	r3, r3, #7
 8003610:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <prvInitialiseNewTask+0x48>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	617b      	str	r3, [r7, #20]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01f      	beq.n	8003678 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	e012      	b.n	8003664 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	7819      	ldrb	r1, [r3, #0]
 8003646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	3334      	adds	r3, #52	; 0x34
 800364e:	460a      	mov	r2, r1
 8003650:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b0f      	cmp	r3, #15
 8003668:	d9e9      	bls.n	800363e <prvInitialiseNewTask+0x54>
 800366a:	e000      	b.n	800366e <prvInitialiseNewTask+0x84>
			{
				break;
 800366c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003676:	e003      	b.n	8003680 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	2b06      	cmp	r3, #6
 8003684:	d901      	bls.n	800368a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003686:	2306      	movs	r3, #6
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	3304      	adds	r3, #4
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fe70 	bl	8003386 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	3318      	adds	r3, #24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fe6b 	bl	8003386 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	f1c3 0207 	rsb	r2, r3, #7
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f000 fc21 	bl	8003f20 <pxPortInitialiseStack>
 80036de:	4602      	mov	r2, r0
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003700:	f000 fcfc 	bl	80040fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <prvAddNewTaskToReadyList+0xb8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <prvAddNewTaskToReadyList+0xb8>)
 800370c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <prvAddNewTaskToReadyList+0xbc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003716:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <prvAddNewTaskToReadyList+0xbc>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <prvAddNewTaskToReadyList+0xb8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d110      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003724:	f000 faba 	bl	8003c9c <prvInitialiseTaskLists>
 8003728:	e00d      	b.n	8003746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <prvAddNewTaskToReadyList+0xc0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <prvAddNewTaskToReadyList+0xbc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d802      	bhi.n	8003746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <prvAddNewTaskToReadyList+0xbc>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <prvAddNewTaskToReadyList+0xc4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <prvAddNewTaskToReadyList+0xc4>)
 800374e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4313      	orrs	r3, r2
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <prvAddNewTaskToReadyList+0xcc>)
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7ff fe10 	bl	800339e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800377e:	f000 fced 	bl	800415c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <prvAddNewTaskToReadyList+0xc0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00e      	beq.n	80037a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <prvAddNewTaskToReadyList+0xbc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	429a      	cmp	r2, r3
 8003796:	d207      	bcs.n	80037a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000614 	.word	0x20000614
 80037b4:	20000514 	.word	0x20000514
 80037b8:	20000620 	.word	0x20000620
 80037bc:	20000630 	.word	0x20000630
 80037c0:	2000061c 	.word	0x2000061c
 80037c4:	20000518 	.word	0x20000518
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d017      	beq.n	800380e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <vTaskDelay+0x60>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <vTaskDelay+0x30>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	60bb      	str	r3, [r7, #8]
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037fc:	f000 f87a 	bl	80038f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003800:	2100      	movs	r1, #0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fb26 	bl	8003e54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003808:	f000 f882 	bl	8003910 <xTaskResumeAll>
 800380c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <vTaskDelay+0x64>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000063c 	.word	0x2000063c
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003842:	463a      	mov	r2, r7
 8003844:	1d39      	adds	r1, r7, #4
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fd9a 	bl	8000384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	9202      	str	r2, [sp, #8]
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2300      	movs	r3, #0
 8003860:	460a      	mov	r2, r1
 8003862:	491e      	ldr	r1, [pc, #120]	; (80038dc <vTaskStartScheduler+0xa8>)
 8003864:	481e      	ldr	r0, [pc, #120]	; (80038e0 <vTaskStartScheduler+0xac>)
 8003866:	f7ff fe1e 	bl	80034a6 <xTaskCreateStatic>
 800386a:	4603      	mov	r3, r0
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <vTaskStartScheduler+0xb0>)
 800386e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <vTaskStartScheduler+0xb0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e001      	b.n	8003882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d116      	bne.n	80038b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	613b      	str	r3, [r7, #16]
}
 800389a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <vTaskStartScheduler+0xb4>)
 800389e:	f04f 32ff 	mov.w	r2, #4294967295
 80038a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <vTaskStartScheduler+0xb8>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <vTaskStartScheduler+0xbc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038b0:	f000 fbb2 	bl	8004018 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038b4:	e00e      	b.n	80038d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d10a      	bne.n	80038d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <vTaskStartScheduler+0x9e>
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	080046dc 	.word	0x080046dc
 80038e0:	08003c6d 	.word	0x08003c6d
 80038e4:	20000638 	.word	0x20000638
 80038e8:	20000634 	.word	0x20000634
 80038ec:	20000620 	.word	0x20000620
 80038f0:	20000618 	.word	0x20000618

080038f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <vTaskSuspendAll+0x18>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a03      	ldr	r2, [pc, #12]	; (800390c <vTaskSuspendAll+0x18>)
 8003900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	2000063c 	.word	0x2000063c

08003910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <xTaskResumeAll+0x114>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <xTaskResumeAll+0x2c>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	603b      	str	r3, [r7, #0]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800393c:	f000 fbde 	bl	80040fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <xTaskResumeAll+0x114>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3b01      	subs	r3, #1
 8003946:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <xTaskResumeAll+0x114>)
 8003948:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <xTaskResumeAll+0x114>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d161      	bne.n	8003a16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003952:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <xTaskResumeAll+0x118>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d05d      	beq.n	8003a16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800395a:	e02e      	b.n	80039ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <xTaskResumeAll+0x11c>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3318      	adds	r3, #24
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fd73 	bl	8003454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3304      	adds	r3, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fd6e 	bl	8003454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	2201      	movs	r2, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <xTaskResumeAll+0x120>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <xTaskResumeAll+0x120>)
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <xTaskResumeAll+0x124>)
 8003998:	441a      	add	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3304      	adds	r3, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7ff fcfc 	bl	800339e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <xTaskResumeAll+0x128>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <xTaskResumeAll+0x12c>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <xTaskResumeAll+0x11c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1cc      	bne.n	800395c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c8:	f000 fa06 	bl	8003dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <xTaskResumeAll+0x130>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d8:	f000 f836 	bl	8003a48 <xTaskIncrementTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <xTaskResumeAll+0x12c>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f1      	bne.n	80039d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <xTaskResumeAll+0x130>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <xTaskResumeAll+0x12c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a02:	2301      	movs	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <xTaskResumeAll+0x134>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a16:	f000 fba1 	bl	800415c <vPortExitCritical>

	return xAlreadyYielded;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	2000063c 	.word	0x2000063c
 8003a28:	20000614 	.word	0x20000614
 8003a2c:	200005d4 	.word	0x200005d4
 8003a30:	2000061c 	.word	0x2000061c
 8003a34:	20000518 	.word	0x20000518
 8003a38:	20000514 	.word	0x20000514
 8003a3c:	20000628 	.word	0x20000628
 8003a40:	20000624 	.word	0x20000624
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a52:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <xTaskIncrementTick+0x144>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 808e 	bne.w	8003b78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	; (8003b90 <xTaskIncrementTick+0x148>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a64:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <xTaskIncrementTick+0x148>)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d120      	bne.n	8003ab2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a70:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <xTaskIncrementTick+0x14c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	603b      	str	r3, [r7, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <xTaskIncrementTick+0x46>
 8003a90:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <xTaskIncrementTick+0x14c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <xTaskIncrementTick+0x150>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <xTaskIncrementTick+0x14c>)
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4a3e      	ldr	r2, [pc, #248]	; (8003b98 <xTaskIncrementTick+0x150>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <xTaskIncrementTick+0x154>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <xTaskIncrementTick+0x154>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	f000 f993 	bl	8003dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <xTaskIncrementTick+0x158>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d348      	bcc.n	8003b4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <xTaskIncrementTick+0x14c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <xTaskIncrementTick+0x158>)
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	601a      	str	r2, [r3, #0]
					break;
 8003ace:	e03e      	b.n	8003b4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad0:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <xTaskIncrementTick+0x14c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d203      	bcs.n	8003af0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <xTaskIncrementTick+0x158>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aee:	e02e      	b.n	8003b4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fcad 	bl	8003454 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3318      	adds	r3, #24
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fca4 	bl	8003454 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <xTaskIncrementTick+0x15c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <xTaskIncrementTick+0x15c>)
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <xTaskIncrementTick+0x160>)
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7ff fc32 	bl	800339e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <xTaskIncrementTick+0x164>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3b9      	bcc.n	8003abc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	e7b6      	b.n	8003abc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <xTaskIncrementTick+0x164>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <xTaskIncrementTick+0x160>)
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d901      	bls.n	8003b6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <xTaskIncrementTick+0x168>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e004      	b.n	8003b82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <xTaskIncrementTick+0x16c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <xTaskIncrementTick+0x16c>)
 8003b80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b82:	697b      	ldr	r3, [r7, #20]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000063c 	.word	0x2000063c
 8003b90:	20000618 	.word	0x20000618
 8003b94:	200005cc 	.word	0x200005cc
 8003b98:	200005d0 	.word	0x200005d0
 8003b9c:	2000062c 	.word	0x2000062c
 8003ba0:	20000634 	.word	0x20000634
 8003ba4:	2000061c 	.word	0x2000061c
 8003ba8:	20000518 	.word	0x20000518
 8003bac:	20000514 	.word	0x20000514
 8003bb0:	20000628 	.word	0x20000628
 8003bb4:	20000624 	.word	0x20000624

08003bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <vTaskSwitchContext+0xa0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <vTaskSwitchContext+0xa4>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bcc:	e03f      	b.n	8003c4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <vTaskSwitchContext+0xa4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd4:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <vTaskSwitchContext+0xa8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003be2:	7afb      	ldrb	r3, [r7, #11]
 8003be4:	f1c3 031f 	rsb	r3, r3, #31
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	491e      	ldr	r1, [pc, #120]	; (8003c64 <vTaskSwitchContext+0xac>)
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	607b      	str	r3, [r7, #4]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <vTaskSwitchContext+0x5a>
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <vTaskSwitchContext+0xac>)
 8003c20:	4413      	add	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3308      	adds	r3, #8
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d104      	bne.n	8003c44 <vTaskSwitchContext+0x8c>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <vTaskSwitchContext+0xb0>)
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	2000063c 	.word	0x2000063c
 8003c5c:	20000628 	.word	0x20000628
 8003c60:	2000061c 	.word	0x2000061c
 8003c64:	20000518 	.word	0x20000518
 8003c68:	20000514 	.word	0x20000514

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c74:	f000 f852 	bl	8003d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <prvIdleTask+0x28>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <prvIdleTask+0x2c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c90:	e7f0      	b.n	8003c74 <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	20000518 	.word	0x20000518
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <prvInitialiseTaskLists+0x60>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fb46 	bl	8003348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d9ef      	bls.n	8003ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cca:	f7ff fb3d 	bl	8003348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cce:	480d      	ldr	r0, [pc, #52]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cd0:	f7ff fb3a 	bl	8003348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cd4:	480c      	ldr	r0, [pc, #48]	; (8003d08 <prvInitialiseTaskLists+0x6c>)
 8003cd6:	f7ff fb37 	bl	8003348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cda:	480c      	ldr	r0, [pc, #48]	; (8003d0c <prvInitialiseTaskLists+0x70>)
 8003cdc:	f7ff fb34 	bl	8003348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <prvInitialiseTaskLists+0x74>)
 8003ce2:	f7ff fb31 	bl	8003348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <prvInitialiseTaskLists+0x78>)
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <prvInitialiseTaskLists+0x64>)
 8003cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvInitialiseTaskLists+0x7c>)
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <prvInitialiseTaskLists+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000518 	.word	0x20000518
 8003d00:	200005a4 	.word	0x200005a4
 8003d04:	200005b8 	.word	0x200005b8
 8003d08:	200005d4 	.word	0x200005d4
 8003d0c:	200005e8 	.word	0x200005e8
 8003d10:	20000600 	.word	0x20000600
 8003d14:	200005cc 	.word	0x200005cc
 8003d18:	200005d0 	.word	0x200005d0

08003d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d22:	e019      	b.n	8003d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d24:	f000 f9ea 	bl	80040fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <prvCheckTasksWaitingTermination+0x50>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fb8d 	bl	8003454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <prvCheckTasksWaitingTermination+0x54>)
 8003d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d4e:	f000 fa05 	bl	800415c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f810 	bl	8003d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200005e8 	.word	0x200005e8
 8003d70:	20000614 	.word	0x20000614
 8003d74:	200005fc 	.word	0x200005fc

08003d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb42 	bl	8004418 <vPortFree>
				vPortFree( pxTCB );
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb3f 	bl	8004418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d9a:	e018      	b.n	8003dce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d103      	bne.n	8003dae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb36 	bl	8004418 <vPortFree>
	}
 8003dac:	e00f      	b.n	8003dce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d00a      	beq.n	8003dce <prvDeleteTCB+0x56>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <prvDeleteTCB+0x54>
	}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <prvResetNextTaskUnblockTime+0x38>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <prvResetNextTaskUnblockTime+0x3c>)
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003df0:	e008      	b.n	8003e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <prvResetNextTaskUnblockTime+0x38>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <prvResetNextTaskUnblockTime+0x3c>)
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	200005cc 	.word	0x200005cc
 8003e14:	20000634 	.word	0x20000634

08003e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <xTaskGetSchedulerState+0x34>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e26:	2301      	movs	r3, #1
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	e008      	b.n	8003e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <xTaskGetSchedulerState+0x38>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e34:	2302      	movs	r3, #2
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	e001      	b.n	8003e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e3e:	687b      	ldr	r3, [r7, #4]
	}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000620 	.word	0x20000620
 8003e50:	2000063c 	.word	0x2000063c

08003e54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff faf2 	bl	8003454 <uxListRemove>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d10a      	bne.n	8003eac <prvAddCurrentTaskToDelayedList+0x58>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	481a      	ldr	r0, [pc, #104]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ea6:	f7ff fa7a 	bl	800339e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eaa:	e026      	b.n	8003efa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d209      	bcs.n	8003ed8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7ff fa87 	bl	80033e4 <vListInsert>
}
 8003ed6:	e010      	b.n	8003efa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f7ff fa7d 	bl	80033e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d202      	bcs.n	8003efa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ef4:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6013      	str	r3, [r2, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000618 	.word	0x20000618
 8003f08:	20000514 	.word	0x20000514
 8003f0c:	2000061c 	.word	0x2000061c
 8003f10:	20000600 	.word	0x20000600
 8003f14:	200005d0 	.word	0x200005d0
 8003f18:	200005cc 	.word	0x200005cc
 8003f1c:	20000634 	.word	0x20000634

08003f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b04      	subs	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3b04      	subs	r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f50:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <pxPortInitialiseStack+0x54>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3b14      	subs	r3, #20
 8003f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3b20      	subs	r3, #32
 8003f66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	08003f79 	.word	0x08003f79

08003f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <prvTaskExitError+0x54>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d00a      	beq.n	8003fa2 <prvTaskExitError+0x2a>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <prvTaskExitError+0x28>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fb6:	bf00      	nop
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0fc      	beq.n	8003fb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <pxCurrentTCBConst2>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	6808      	ldr	r0, [r1, #0]
 8003fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fda:	f380 8809 	msr	PSP, r0
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8003fee:	4770      	bx	lr

08003ff0 <pxCurrentTCBConst2>:
 8003ff0:	20000514 	.word	0x20000514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ff8:	4806      	ldr	r0, [pc, #24]	; (8004014 <prvPortStartFirstTask+0x1c>)
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	6800      	ldr	r0, [r0, #0]
 8003ffe:	f380 8808 	msr	MSP, r0
 8004002:	b662      	cpsie	i
 8004004:	b661      	cpsie	f
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	df00      	svc	0
 8004010:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004012:	bf00      	nop
 8004014:	e000ed08 	.word	0xe000ed08

08004018 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <xPortStartScheduler+0xd0>)
 8004020:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <xPortStartScheduler+0xd4>)
 8004044:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004048:	2207      	movs	r2, #7
 800404a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800404c:	e009      	b.n	8004062 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004056:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d0ef      	beq.n	800404e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00a      	beq.n	8004090 <xPortStartScheduler+0x78>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60bb      	str	r3, [r7, #8]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <xPortStartScheduler+0xd8>)
 8004098:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <xPortStartScheduler+0xd8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040a2:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <xPortStartScheduler+0xd8>)
 80040a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <xPortStartScheduler+0xdc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <xPortStartScheduler+0xdc>)
 80040b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <xPortStartScheduler+0xdc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <xPortStartScheduler+0xdc>)
 80040c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040c6:	f000 f8b9 	bl	800423c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <xPortStartScheduler+0xe0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040d0:	f7ff ff92 	bl	8003ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040d4:	f7ff fd70 	bl	8003bb8 <vTaskSwitchContext>
	prvTaskExitError();
 80040d8:	f7ff ff4e 	bl	8003f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e400 	.word	0xe000e400
 80040ec:	20000640 	.word	0x20000640
 80040f0:	20000644 	.word	0x20000644
 80040f4:	e000ed20 	.word	0xe000ed20
 80040f8:	2000000c 	.word	0x2000000c

080040fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	607b      	str	r3, [r7, #4]
}
 8004114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <vPortEnterCritical+0x58>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <vPortEnterCritical+0x58>)
 800411e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <vPortEnterCritical+0x58>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10f      	bne.n	8004148 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <vPortEnterCritical+0x5c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <vPortEnterCritical+0x4c>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	603b      	str	r3, [r7, #0]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vPortEnterCritical+0x4a>
	}
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000000c 	.word	0x2000000c
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <vPortExitCritical+0x4c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <vPortExitCritical+0x24>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <vPortExitCritical+0x4c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3b01      	subs	r3, #1
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <vPortExitCritical+0x4c>)
 8004188:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <vPortExitCritical+0x4c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <vPortExitCritical+0x42>
 8004192:	2300      	movs	r3, #0
 8004194:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800419c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	2000000c 	.word	0x2000000c
 80041ac:	00000000 	.word	0x00000000

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <pxCurrentTCBConst>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041c0:	6010      	str	r0, [r2, #0]
 80041c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80041c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041ca:	f380 8811 	msr	BASEPRI, r0
 80041ce:	f7ff fcf3 	bl	8003bb8 <vTaskSwitchContext>
 80041d2:	f04f 0000 	mov.w	r0, #0
 80041d6:	f380 8811 	msr	BASEPRI, r0
 80041da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041e6:	f380 8809 	msr	PSP, r0
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	4770      	bx	lr

080041f0 <pxCurrentTCBConst>:
 80041f0:	20000514 	.word	0x20000514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	607b      	str	r3, [r7, #4]
}
 8004210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004212:	f7ff fc19 	bl	8003a48 <xTaskIncrementTick>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <xPortSysTickHandler+0x40>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f383 8811 	msr	BASEPRI, r3
}
 800422e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vPortSetupTimerInterrupt+0x30>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <vPortSetupTimerInterrupt+0x38>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <vPortSetupTimerInterrupt+0x3c>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <vPortSetupTimerInterrupt+0x40>)
 800425a:	3b01      	subs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <vPortSetupTimerInterrupt+0x30>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	e000e010 	.word	0xe000e010
 8004270:	e000e018 	.word	0xe000e018
 8004274:	20000000 	.word	0x20000000
 8004278:	10624dd3 	.word	0x10624dd3
 800427c:	e000e014 	.word	0xe000e014

08004280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800428c:	f7ff fb32 	bl	80038f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004290:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <pvPortMalloc+0x180>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004298:	f000 f920 	bl	80044dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <pvPortMalloc+0x184>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 8093 	bne.w	80043d0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01d      	beq.n	80042ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80042b0:	2208      	movs	r2, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f023 0307 	bic.w	r3, r3, #7
 80042c8:	3308      	adds	r3, #8
 80042ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <pvPortMalloc+0x6c>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617b      	str	r3, [r7, #20]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06e      	beq.n	80043d0 <pvPortMalloc+0x150>
 80042f2:	4b45      	ldr	r3, [pc, #276]	; (8004408 <pvPortMalloc+0x188>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d869      	bhi.n	80043d0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042fc:	4b43      	ldr	r3, [pc, #268]	; (800440c <pvPortMalloc+0x18c>)
 80042fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <pvPortMalloc+0x18c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004306:	e004      	b.n	8004312 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d903      	bls.n	8004324 <pvPortMalloc+0xa4>
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f1      	bne.n	8004308 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <pvPortMalloc+0x180>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	429a      	cmp	r2, r3
 800432c:	d050      	beq.n	80043d0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2208      	movs	r2, #8
 8004334:	4413      	add	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	2308      	movs	r3, #8
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	429a      	cmp	r2, r3
 800434e:	d91f      	bls.n	8004390 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <pvPortMalloc+0xf8>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	613b      	str	r3, [r7, #16]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad2      	subs	r2, r2, r3
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800438a:	69b8      	ldr	r0, [r7, #24]
 800438c:	f000 f908 	bl	80045a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <pvPortMalloc+0x188>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <pvPortMalloc+0x188>)
 800439c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <pvPortMalloc+0x188>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <pvPortMalloc+0x190>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d203      	bcs.n	80043b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <pvPortMalloc+0x188>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <pvPortMalloc+0x190>)
 80043b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <pvPortMalloc+0x184>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <pvPortMalloc+0x194>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3301      	adds	r3, #1
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <pvPortMalloc+0x194>)
 80043ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043d0:	f7ff fa9e 	bl	8003910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <pvPortMalloc+0x174>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60fb      	str	r3, [r7, #12]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <pvPortMalloc+0x172>
	return pvReturn;
 80043f4:	69fb      	ldr	r3, [r7, #28]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20001250 	.word	0x20001250
 8004404:	20001264 	.word	0x20001264
 8004408:	20001254 	.word	0x20001254
 800440c:	20001248 	.word	0x20001248
 8004410:	20001258 	.word	0x20001258
 8004414:	2000125c 	.word	0x2000125c

08004418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04d      	beq.n	80044c6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800442a:	2308      	movs	r3, #8
 800442c:	425b      	negs	r3, r3
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <vPortFree+0xb8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <vPortFree+0x44>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60fb      	str	r3, [r7, #12]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <vPortFree+0x62>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60bb      	str	r3, [r7, #8]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <vPortFree+0xb8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01e      	beq.n	80044c6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11a      	bne.n	80044c6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <vPortFree+0xb8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044a0:	f7ff fa28 	bl	80038f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <vPortFree+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4413      	add	r3, r2
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <vPortFree+0xbc>)
 80044b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044b2:	6938      	ldr	r0, [r7, #16]
 80044b4:	f000 f874 	bl	80045a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <vPortFree+0xc0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a06      	ldr	r2, [pc, #24]	; (80044d8 <vPortFree+0xc0>)
 80044c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80044c2:	f7ff fa25 	bl	8003910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044c6:	bf00      	nop
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20001264 	.word	0x20001264
 80044d4:	20001254 	.word	0x20001254
 80044d8:	20001260 	.word	0x20001260

080044dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <prvHeapInit+0xac>)
 80044ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3307      	adds	r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0307 	bic.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <prvHeapInit+0xac>)
 800450c:	4413      	add	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <prvHeapInit+0xb0>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800451a:	4b1c      	ldr	r3, [pc, #112]	; (800458c <prvHeapInit+0xb0>)
 800451c:	2200      	movs	r2, #0
 800451e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004528:	2208      	movs	r2, #8
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <prvHeapInit+0xb4>)
 800453c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <prvHeapInit+0xb4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <prvHeapInit+0xb4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <prvHeapInit+0xb4>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <prvHeapInit+0xb8>)
 800456a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a09      	ldr	r2, [pc, #36]	; (8004598 <prvHeapInit+0xbc>)
 8004572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <prvHeapInit+0xc0>)
 8004576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000648 	.word	0x20000648
 800458c:	20001248 	.word	0x20001248
 8004590:	20001250 	.word	0x20001250
 8004594:	20001258 	.word	0x20001258
 8004598:	20001254 	.word	0x20001254
 800459c:	20001264 	.word	0x20001264

080045a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <prvInsertBlockIntoFreeList+0xa8>)
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e002      	b.n	80045b4 <prvInsertBlockIntoFreeList+0x14>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d8f7      	bhi.n	80045ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d108      	bne.n	80045e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d118      	bne.n	8004628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <prvInsertBlockIntoFreeList+0xac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d00d      	beq.n	800461e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e008      	b.n	8004630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <prvInsertBlockIntoFreeList+0xac>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e003      	b.n	8004630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d002      	beq.n	800463e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	20001248 	.word	0x20001248
 800464c:	20001250 	.word	0x20001250

08004650 <memset>:
 8004650:	4603      	mov	r3, r0
 8004652:	4402      	add	r2, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	2600      	movs	r6, #0
 8004664:	4d0c      	ldr	r5, [pc, #48]	; (8004698 <__libc_init_array+0x38>)
 8004666:	4c0d      	ldr	r4, [pc, #52]	; (800469c <__libc_init_array+0x3c>)
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	f000 f81a 	bl	80046a8 <_init>
 8004674:	2600      	movs	r6, #0
 8004676:	4d0a      	ldr	r5, [pc, #40]	; (80046a0 <__libc_init_array+0x40>)
 8004678:	4c0a      	ldr	r4, [pc, #40]	; (80046a4 <__libc_init_array+0x44>)
 800467a:	1b64      	subs	r4, r4, r5
 800467c:	10a4      	asrs	r4, r4, #2
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08004710 	.word	0x08004710
 800469c:	08004710 	.word	0x08004710
 80046a0:	08004710 	.word	0x08004710
 80046a4:	08004714 	.word	0x08004714

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
