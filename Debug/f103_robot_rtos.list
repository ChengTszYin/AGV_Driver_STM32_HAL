
f103_robot_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa98  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800ac88  0800ac88  0001ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad80  0800ad80  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad80  0800ad80  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad80  0800ad80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ad88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  20000068  0800adf0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800adf0  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015553  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003814  00000000  00000000  00035627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00038e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f67  00000000  00000000  0003a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4c6  00000000  00000000  0003b15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4d1  00000000  00000000  00057625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3065  00000000  00000000  00071af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005758  00000000  00000000  00114b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000068 	.word	0x20000068
 800020c:	00000000 	.word	0x00000000
 8000210:	0800ac70 	.word	0x0800ac70

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000006c 	.word	0x2000006c
 800022c:	0800ac70 	.word	0x0800ac70

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2iz>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d215      	bcs.n	8000a12 <__aeabi_d2iz+0x36>
 80009e6:	d511      	bpl.n	8000a0c <__aeabi_d2iz+0x30>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d912      	bls.n	8000a18 <__aeabi_d2iz+0x3c>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	fa23 f002 	lsr.w	r0, r3, r2
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a16:	d105      	bne.n	8000a24 <__aeabi_d2iz+0x48>
 8000a18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_frsub>:
 8000a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a30:	e002      	b.n	8000a38 <__addsf3>
 8000a32:	bf00      	nop

08000a34 <__aeabi_fsub>:
 8000a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a38 <__addsf3>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a40:	ea92 0f03 	teqne	r2, r3
 8000a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4c:	d06a      	beq.n	8000b24 <__addsf3+0xec>
 8000a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a56:	bfc1      	itttt	gt
 8000a58:	18d2      	addgt	r2, r2, r3
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	4048      	eorgt	r0, r1
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	bf88      	it	hi
 8000a68:	4770      	bxhi	lr
 8000a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4249      	negne	r1, r1
 8000a8a:	ea92 0f03 	teq	r2, r3
 8000a8e:	d03f      	beq.n	8000b10 <__addsf3+0xd8>
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	fa41 fc03 	asr.w	ip, r1, r3
 8000a98:	eb10 000c 	adds.w	r0, r0, ip
 8000a9c:	f1c3 0320 	rsb	r3, r3, #32
 8000aa0:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__addsf3+0x78>
 8000aaa:	4249      	negs	r1, r1
 8000aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab4:	d313      	bcc.n	8000ade <__addsf3+0xa6>
 8000ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aba:	d306      	bcc.n	8000aca <__addsf3+0x92>
 8000abc:	0840      	lsrs	r0, r0, #1
 8000abe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac2:	f102 0201 	add.w	r2, r2, #1
 8000ac6:	2afe      	cmp	r2, #254	; 0xfe
 8000ac8:	d251      	bcs.n	8000b6e <__addsf3+0x136>
 8000aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad2:	bf08      	it	eq
 8000ad4:	f020 0001 	biceq.w	r0, r0, #1
 8000ad8:	ea40 0003 	orr.w	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	0049      	lsls	r1, r1, #1
 8000ae0:	eb40 0000 	adc.w	r0, r0, r0
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aec:	d2ed      	bcs.n	8000aca <__addsf3+0x92>
 8000aee:	fab0 fc80 	clz	ip, r0
 8000af2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af6:	ebb2 020c 	subs.w	r2, r2, ip
 8000afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afe:	bfaa      	itet	ge
 8000b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b04:	4252      	neglt	r2, r2
 8000b06:	4318      	orrge	r0, r3
 8000b08:	bfbc      	itt	lt
 8000b0a:	40d0      	lsrlt	r0, r2
 8000b0c:	4318      	orrlt	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	f092 0f00 	teq	r2, #0
 8000b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b18:	bf06      	itte	eq
 8000b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1e:	3201      	addeq	r2, #1
 8000b20:	3b01      	subne	r3, #1
 8000b22:	e7b5      	b.n	8000a90 <__addsf3+0x58>
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d021      	beq.n	8000b78 <__addsf3+0x140>
 8000b34:	ea92 0f03 	teq	r2, r3
 8000b38:	d004      	beq.n	8000b44 <__addsf3+0x10c>
 8000b3a:	f092 0f00 	teq	r2, #0
 8000b3e:	bf08      	it	eq
 8000b40:	4608      	moveq	r0, r1
 8000b42:	4770      	bx	lr
 8000b44:	ea90 0f01 	teq	r0, r1
 8000b48:	bf1c      	itt	ne
 8000b4a:	2000      	movne	r0, #0
 8000b4c:	4770      	bxne	lr
 8000b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b52:	d104      	bne.n	8000b5e <__addsf3+0x126>
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	bf28      	it	cs
 8000b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b62:	bf3c      	itt	cc
 8000b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bxcc	lr
 8000b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b7c:	bf16      	itet	ne
 8000b7e:	4608      	movne	r0, r1
 8000b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b84:	4601      	movne	r1, r0
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	bf06      	itte	eq
 8000b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8e:	ea90 0f01 	teqeq	r0, r1
 8000b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ui2f>:
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e004      	b.n	8000ba8 <__aeabi_i2f+0x8>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_i2f>:
 8000ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	bf48      	it	mi
 8000ba6:	4240      	negmi	r0, r0
 8000ba8:	ea5f 0c00 	movs.w	ip, r0
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	e01c      	b.n	8000bf6 <__aeabi_l2f+0x2a>

08000bbc <__aeabi_ul2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e00a      	b.n	8000be0 <__aeabi_l2f+0x14>
 8000bca:	bf00      	nop

08000bcc <__aeabi_l2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__aeabi_l2f+0x14>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	ea5f 0c01 	movs.w	ip, r1
 8000be4:	bf02      	ittt	eq
 8000be6:	4684      	moveq	ip, r0
 8000be8:	4601      	moveq	r1, r0
 8000bea:	2000      	moveq	r0, #0
 8000bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bfa:	fabc f28c 	clz	r2, ip
 8000bfe:	3a08      	subs	r2, #8
 8000c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c04:	db10      	blt.n	8000c28 <__aeabi_l2f+0x5c>
 8000c06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c18:	fa20 f202 	lsr.w	r2, r0, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f102 0220 	add.w	r2, r2, #32
 8000c2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c38:	fa21 f202 	lsr.w	r2, r1, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_fmul>:
 8000c48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c50:	bf1e      	ittt	ne
 8000c52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c56:	ea92 0f0c 	teqne	r2, ip
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d06f      	beq.n	8000d40 <__aeabi_fmul+0xf8>
 8000c60:	441a      	add	r2, r3
 8000c62:	ea80 0c01 	eor.w	ip, r0, r1
 8000c66:	0240      	lsls	r0, r0, #9
 8000c68:	bf18      	it	ne
 8000c6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6e:	d01e      	beq.n	8000cae <__aeabi_fmul+0x66>
 8000c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c88:	bf3e      	ittt	cc
 8000c8a:	0049      	lslcc	r1, r1, #1
 8000c8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c90:	005b      	lslcc	r3, r3, #1
 8000c92:	ea40 0001 	orr.w	r0, r0, r1
 8000c96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c9a:	2afd      	cmp	r2, #253	; 0xfd
 8000c9c:	d81d      	bhi.n	8000cda <__aeabi_fmul+0x92>
 8000c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	4770      	bx	lr
 8000cae:	f090 0f00 	teq	r0, #0
 8000cb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb6:	bf08      	it	eq
 8000cb8:	0249      	lsleq	r1, r1, #9
 8000cba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cc2:	3a7f      	subs	r2, #127	; 0x7f
 8000cc4:	bfc2      	ittt	gt
 8000cc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cce:	4770      	bxgt	lr
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	dc5d      	bgt.n	8000d98 <__aeabi_fmul+0x150>
 8000cdc:	f112 0f19 	cmn.w	r2, #25
 8000ce0:	bfdc      	itt	le
 8000ce2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce6:	4770      	bxle	lr
 8000ce8:	f1c2 0200 	rsb	r2, r2, #0
 8000cec:	0041      	lsls	r1, r0, #1
 8000cee:	fa21 f102 	lsr.w	r1, r1, r2
 8000cf2:	f1c2 0220 	rsb	r2, r2, #32
 8000cf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfe:	f140 0000 	adc.w	r0, r0, #0
 8000d02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d06:	bf08      	it	eq
 8000d08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0c:	4770      	bx	lr
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0040      	lsleq	r0, r0, #1
 8000d1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1e:	3a01      	subeq	r2, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xce>
 8000d22:	ea40 000c 	orr.w	r0, r0, ip
 8000d26:	f093 0f00 	teq	r3, #0
 8000d2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0049      	lsleq	r1, r1, #1
 8000d32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d36:	3b01      	subeq	r3, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fmul+0xe6>
 8000d3a:	ea41 010c 	orr.w	r1, r1, ip
 8000d3e:	e78f      	b.n	8000c60 <__aeabi_fmul+0x18>
 8000d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	bf18      	it	ne
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d00a      	beq.n	8000d66 <__aeabi_fmul+0x11e>
 8000d50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d54:	bf18      	it	ne
 8000d56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d5a:	d1d8      	bne.n	8000d0e <__aeabi_fmul+0xc6>
 8000d5c:	ea80 0001 	eor.w	r0, r0, r1
 8000d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	4770      	bx	lr
 8000d66:	f090 0f00 	teq	r0, #0
 8000d6a:	bf17      	itett	ne
 8000d6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d70:	4608      	moveq	r0, r1
 8000d72:	f091 0f00 	teqne	r1, #0
 8000d76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d7a:	d014      	beq.n	8000da6 <__aeabi_fmul+0x15e>
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	d101      	bne.n	8000d86 <__aeabi_fmul+0x13e>
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	d10f      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d86:	ea93 0f0c 	teq	r3, ip
 8000d8a:	d103      	bne.n	8000d94 <__aeabi_fmul+0x14c>
 8000d8c:	024b      	lsls	r3, r1, #9
 8000d8e:	bf18      	it	ne
 8000d90:	4608      	movne	r0, r1
 8000d92:	d108      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000daa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_fdiv>:
 8000db0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db8:	bf1e      	ittt	ne
 8000dba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dbe:	ea92 0f0c 	teqne	r2, ip
 8000dc2:	ea93 0f0c 	teqne	r3, ip
 8000dc6:	d069      	beq.n	8000e9c <__aeabi_fdiv+0xec>
 8000dc8:	eba2 0203 	sub.w	r2, r2, r3
 8000dcc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd6:	d037      	beq.n	8000e48 <__aeabi_fdiv+0x98>
 8000dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ddc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de8:	428b      	cmp	r3, r1
 8000dea:	bf38      	it	cc
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000df2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df6:	428b      	cmp	r3, r1
 8000df8:	bf24      	itt	cs
 8000dfa:	1a5b      	subcs	r3, r3, r1
 8000dfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e04:	bf24      	itt	cs
 8000e06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e12:	bf24      	itt	cs
 8000e14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e20:	bf24      	itt	cs
 8000e22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	bf18      	it	ne
 8000e2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e32:	d1e0      	bne.n	8000df6 <__aeabi_fdiv+0x46>
 8000e34:	2afd      	cmp	r2, #253	; 0xfd
 8000e36:	f63f af50 	bhi.w	8000cda <__aeabi_fmul+0x92>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e40:	bf08      	it	eq
 8000e42:	f020 0001 	biceq.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e50:	327f      	adds	r2, #127	; 0x7f
 8000e52:	bfc2      	ittt	gt
 8000e54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e5c:	4770      	bxgt	lr
 8000e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	3a01      	subs	r2, #1
 8000e68:	e737      	b.n	8000cda <__aeabi_fmul+0x92>
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xc2>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fdiv+0xda>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e795      	b.n	8000dc8 <__aeabi_fdiv+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d108      	bne.n	8000eb8 <__aeabi_fdiv+0x108>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	f47f af7d 	bne.w	8000da6 <__aeabi_fmul+0x15e>
 8000eac:	ea93 0f0c 	teq	r3, ip
 8000eb0:	f47f af70 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e776      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000eb8:	ea93 0f0c 	teq	r3, ip
 8000ebc:	d104      	bne.n	8000ec8 <__aeabi_fdiv+0x118>
 8000ebe:	024b      	lsls	r3, r1, #9
 8000ec0:	f43f af4c 	beq.w	8000d5c <__aeabi_fmul+0x114>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e76e      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ecc:	bf18      	it	ne
 8000ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	d1ca      	bne.n	8000e6a <__aeabi_fdiv+0xba>
 8000ed4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed8:	f47f af5c 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000edc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee0:	f47f af3c 	bne.w	8000d5c <__aeabi_fmul+0x114>
 8000ee4:	e75f      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ee6:	bf00      	nop

08000ee8 <reverseBits>:

#ifndef INC_CRC_H_
#define INC_CRC_H_

uint8_t reverseBits(uint8_t value)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	e010      	b.n	8000f1e <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	79f9      	ldrb	r1, [r7, #7]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	fa41 f303 	asr.w	r3, r1, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	ddeb      	ble.n	8000efc <reverseBits+0x14>
	}
	return result;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	4613      	mov	r3, r2
 8000f44:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 8000f4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d049      	beq.n	8000fe8 <crc8+0xb8>
 8000f54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d045      	beq.n	8000fe8 <crc8+0xb8>
		crc = reverseBits(crc);
 8000f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffc1 	bl	8000ee8 <reverseBits>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffba 	bl	8000ee8 <reverseBits>
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	e028      	b.n	8000fd0 <crc8+0xa0>
			crc ^= data[i];
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	4413      	add	r3, r2
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8a:	4053      	eors	r3, r2
 8000f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	e016      	b.n	8000fc4 <crc8+0x94>
 8000f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <crc8+0x82>
 8000fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4053      	eors	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	e003      	b.n	8000fba <crc8+0x8a>
 8000fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb6:	085b      	lsrs	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b07      	cmp	r3, #7
 8000fc8:	dde5      	ble.n	8000f96 <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3d2      	bcc.n	8000f7e <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8000fd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000fdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe6:	e056      	b.n	8001096 <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	e037      	b.n	800105e <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 8000fee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <crc8+0xd8>
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff72 	bl	8000ee8 <reverseBits>
 8001004:	4603      	mov	r3, r0
 8001006:	e003      	b.n	8001010 <crc8+0xe0>
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25a      	sxtb	r2, r3
 8001012:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001016:	4053      	eors	r3, r2
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e016      	b.n	8001052 <crc8+0x122>
 8001024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001028:	2b00      	cmp	r3, #0
 800102a:	da09      	bge.n	8001040 <crc8+0x110>
 800102c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	b25a      	sxtb	r2, r3
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4053      	eors	r3, r2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	e003      	b.n	8001048 <crc8+0x118>
 8001040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b07      	cmp	r3, #7
 8001056:	dde5      	ble.n	8001024 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	3301      	adds	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3c3      	bcc.n	8000fee <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 8001066:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <crc8+0x156>
 800106e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff38 	bl	8000ee8 <reverseBits>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001080:	4053      	eors	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	e005      	b.n	8001092 <crc8+0x162>
 8001086:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800108a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800108e:	4053      	eors	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 8001096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800109a:	4618      	mov	r0, r3
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <checkCRC+0x50>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <checkCRC+0x54>)
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	2100      	movs	r1, #0
 80010b6:	9102      	str	r1, [sp, #8]
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	2231      	movs	r2, #49	; 0x31
 80010c0:	2109      	movs	r1, #9
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff34 	bl	8000f30 <crc8>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3309      	adds	r3, #9
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <checkCRC+0x36>
			return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e007      	b.n	80010ea <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3309      	adds	r3, #9
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <checkCRC+0x44>
			return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <checkCRC+0x46>
		}
	else return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000001 	.word	0x20000001

080010fc <receiveFromBuffer>:

void receiveFromBuffer()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001100:	2219      	movs	r2, #25
 8001102:	4904      	ldr	r1, [pc, #16]	; (8001114 <receiveFromBuffer+0x18>)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <receiveFromBuffer+0x1c>)
 8001106:	f007 f814 	bl	8008132 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <receiveFromBuffer+0x20>)
 800110c:	f000 f834 	bl	8001178 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000088 	.word	0x20000088
 8001118:	20000508 	.word	0x20000508
 800111c:	200000bc 	.word	0x200000bc

08001120 <send>:

void send(uint8_t crc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	if(crc)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d011      	beq.n	8001154 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <send+0x48>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <send+0x4c>)
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	2100      	movs	r1, #0
 800113a:	9102      	str	r1, [sp, #8]
 800113c:	9201      	str	r2, [sp, #4]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	2231      	movs	r2, #49	; 0x31
 8001144:	2109      	movs	r1, #9
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <send+0x50>)
 8001148:	f7ff fef2 	bl	8000f30 <crc8>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <send+0x50>)
 8001152:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 8001154:	230a      	movs	r3, #10
 8001156:	220a      	movs	r2, #10
 8001158:	4905      	ldr	r1, [pc, #20]	; (8001170 <send+0x50>)
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <send+0x54>)
 800115c:	f006 ff5e 	bl	800801c <HAL_UART_Transmit>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000001 	.word	0x20000001
 8001170:	200000d4 	.word	0x200000d4
 8001174:	20000508 	.word	0x20000508

08001178 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 812f 	bne.w	80013ea <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <Parse_DMA_All+0x290>)
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 8001194:	4b9c      	ldr	r3, [pc, #624]	; (8001408 <Parse_DMA_All+0x290>)
 8001196:	785a      	ldrb	r2, [r3, #1]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 800119c:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <Parse_DMA_All+0x290>)
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b98      	ldr	r3, [pc, #608]	; (8001408 <Parse_DMA_All+0x290>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 80011b0:	8afb      	ldrh	r3, [r7, #22]
 80011b2:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 80011b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db14      	blt.n	80011e6 <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 80011bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fced 	bl	8000ba0 <__aeabi_i2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd3b 	bl	8000c48 <__aeabi_fmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	498d      	ldr	r1, [pc, #564]	; (800140c <Parse_DMA_All+0x294>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdea 	bl	8000db0 <__aeabi_fdiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	e013      	b.n	800120e <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 80011e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcd8 	bl	8000ba0 <__aeabi_i2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fd26 	bl	8000c48 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4984      	ldr	r1, [pc, #528]	; (8001410 <Parse_DMA_All+0x298>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fdd5 	bl	8000db0 <__aeabi_fdiv>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 800120e:	4b7e      	ldr	r3, [pc, #504]	; (8001408 <Parse_DMA_All+0x290>)
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <Parse_DMA_All+0x290>)
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21b      	sxth	r3, r3
 8001220:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 8001222:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <Parse_DMA_All+0x29c>)
 8001228:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <Parse_DMA_All+0x29c>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8001234:	dd11      	ble.n	800125a <Parse_DMA_All+0xe2>
 8001236:	4b77      	ldr	r3, [pc, #476]	; (8001414 <Parse_DMA_All+0x29c>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <Parse_DMA_All+0x29c>)
 8001246:	801a      	strh	r2, [r3, #0]
 8001248:	4b72      	ldr	r3, [pc, #456]	; (8001414 <Parse_DMA_All+0x29c>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <Parse_DMA_All+0x29c>)
 8001258:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <Parse_DMA_All+0x29c>)
 800125c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <Parse_DMA_All+0x290>)
 8001266:	799a      	ldrb	r2, [r3, #6]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 800126c:	4b66      	ldr	r3, [pc, #408]	; (8001408 <Parse_DMA_All+0x290>)
 800126e:	79db      	ldrb	r3, [r3, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fc91 	bl	8000b98 <__aeabi_ui2f>
 8001276:	4603      	mov	r3, r0
 8001278:	4967      	ldr	r1, [pc, #412]	; (8001418 <Parse_DMA_All+0x2a0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fce4 	bl	8000c48 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f940 	bl	8000508 <__aeabi_f2d>
 8001288:	a35d      	add	r3, pc, #372	; (adr r3, 8001400 <Parse_DMA_All+0x288>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fabd 	bl	800080c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f009 fca3 	bl	800abe4 <round>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fb99 	bl	80009dc <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 80012b2:	4b55      	ldr	r3, [pc, #340]	; (8001408 <Parse_DMA_All+0x290>)
 80012b4:	7a1a      	ldrb	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <Parse_DMA_All+0x2a4>)
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <Parse_DMA_All+0x2a4>)
 80012c4:	785a      	ldrb	r2, [r3, #1]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <Parse_DMA_All+0x2a4>)
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <Parse_DMA_All+0x2a4>)
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 80012e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db14      	blt.n	8001314 <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 80012ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc56 	bl	8000ba0 <__aeabi_i2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fca4 	bl	8000c48 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	4942      	ldr	r1, [pc, #264]	; (800140c <Parse_DMA_All+0x294>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fd53 	bl	8000db0 <__aeabi_fdiv>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	e013      	b.n	800133c <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001314:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc41 	bl	8000ba0 <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fc8f 	bl	8000c48 <__aeabi_fmul>
 800132a:	4603      	mov	r3, r0
 800132c:	4938      	ldr	r1, [pc, #224]	; (8001410 <Parse_DMA_All+0x298>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd3e 	bl	8000db0 <__aeabi_fdiv>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <Parse_DMA_All+0x2a4>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <Parse_DMA_All+0x2a4>)
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 8001350:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <Parse_DMA_All+0x2a8>)
 8001356:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <Parse_DMA_All+0x2a8>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8001362:	dd11      	ble.n	8001388 <Parse_DMA_All+0x210>
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <Parse_DMA_All+0x2a8>)
 8001366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136a:	b29b      	uxth	r3, r3
 800136c:	3301      	adds	r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <Parse_DMA_All+0x2a8>)
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <Parse_DMA_All+0x2a8>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3b01      	subs	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <Parse_DMA_All+0x2a8>)
 8001386:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <Parse_DMA_All+0x2a8>)
 800138a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <Parse_DMA_All+0x2a4>)
 8001394:	799a      	ldrb	r2, [r3, #6]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <Parse_DMA_All+0x2a4>)
 800139c:	79db      	ldrb	r3, [r3, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fbfa 	bl	8000b98 <__aeabi_ui2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	491c      	ldr	r1, [pc, #112]	; (8001418 <Parse_DMA_All+0x2a0>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fc4d 	bl	8000c48 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8a9 	bl	8000508 <__aeabi_f2d>
 80013b6:	a312      	add	r3, pc, #72	; (adr r3, 8001400 <Parse_DMA_All+0x288>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff fa26 	bl	800080c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f009 fc0c 	bl	800abe4 <round>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fb02 	bl	80009dc <__aeabi_d2iz>
 80013d8:	4603      	mov	r3, r0
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Parse_DMA_All+0x2a4>)
 80013e2:	7a1a      	ldrb	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 80013e8:	e005      	b.n	80013f6 <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	81da      	strh	r2, [r3, #14]
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	00000000 	.word	0x00000000
 8001404:	406fe000 	.word	0x406fe000
 8001408:	200000a4 	.word	0x200000a4
 800140c:	46fffe00 	.word	0x46fffe00
 8001410:	c6fffe00 	.word	0xc6fffe00
 8001414:	20000086 	.word	0x20000086
 8001418:	43b40000 	.word	0x43b40000
 800141c:	200000b0 	.word	0x200000b0
 8001420:	20000084 	.word	0x20000084

08001424 <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	460b      	mov	r3, r1
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 8001436:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800143a:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800143e:	dd02      	ble.n	8001446 <setVelocity+0x22>
 8001440:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001444:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 8001446:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800144a:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800144e:	da02      	bge.n	8001456 <setVelocity+0x32>
 8001450:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 8001454:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 8001456:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	bfb8      	it	lt
 800145e:	425b      	neglt	r3, r3
 8001460:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 8001462:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da06      	bge.n	8001478 <setVelocity+0x54>
 800146a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <setVelocity+0x54>
 8001472:	8bfb      	ldrh	r3, [r7, #30]
 8001474:	425b      	negs	r3, r3
 8001476:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 8001478:	8bfb      	ldrh	r3, [r7, #30]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 8001480:	8bfb      	ldrh	r3, [r7, #30]
 8001482:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	733b      	strb	r3, [r7, #12]
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	737b      	strb	r3, [r7, #13]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	2300      	movs	r3, #0
 8001496:	743b      	strb	r3, [r7, #16]
 8001498:	2300      	movs	r3, #0
 800149a:	747b      	strb	r3, [r7, #17]
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	74bb      	strb	r3, [r7, #18]
 80014a0:	2300      	movs	r3, #0
 80014a2:	74fb      	strb	r3, [r7, #19]
 80014a4:	2300      	movs	r3, #0
 80014a6:	753b      	strb	r3, [r7, #20]
 80014a8:	2300      	movs	r3, #0
 80014aa:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	e00c      	b.n	80014cc <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 80014b2:	f107 020c 	add.w	r2, r7, #12
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4413      	add	r3, r2
 80014ba:	7819      	ldrb	r1, [r3, #0]
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <setVelocity+0xc0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4413      	add	r3, r2
 80014c2:	460a      	mov	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	ddef      	ble.n	80014b2 <setVelocity+0x8e>
	}
	send(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fe24 	bl	8001120 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000d4 	.word	0x200000d4

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_DMA_Init+0x88>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_DMA_Init+0x88>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_DMA_Init+0x88>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	200c      	movs	r0, #12
 800150c:	f001 fe95 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001510:	200c      	movs	r0, #12
 8001512:	f001 feae 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	200d      	movs	r0, #13
 800151c:	f001 fe8d 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001520:	200d      	movs	r0, #13
 8001522:	f001 fea6 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	200e      	movs	r0, #14
 800152c:	f001 fe85 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001530:	200e      	movs	r0, #14
 8001532:	f001 fe9e 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	200f      	movs	r0, #15
 800153c:	f001 fe7d 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001540:	200f      	movs	r0, #15
 8001542:	f001 fe96 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2105      	movs	r1, #5
 800154a:	2010      	movs	r0, #16
 800154c:	f001 fe75 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001550:	2010      	movs	r0, #16
 8001552:	f001 fe8e 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2011      	movs	r0, #17
 800155c:	f001 fe6d 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001560:	2011      	movs	r0, #17
 8001562:	f001 fe86 	bl	8003272 <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <checksum>:
/* USER CODE BEGIN PD */



uint8_t checksum(uint8_t *data, uint8_t len)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < len - 1; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
 8001588:	e009      	b.n	800159e <checksum+0x2a>
	{
		crc += data[i];
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4413      	add	r3, r2
 8001596:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < len - 1; i++)
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	3301      	adds	r3, #1
 800159c:	73bb      	strb	r3, [r7, #14]
 800159e:	7bba      	ldrb	r2, [r7, #14]
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <checksum+0x16>
	}
	return crc;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes, MotorControl *motors)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	uint8_t data[8];
	for (uint8_t i = 0; i < 8; i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
 80015c2:	e00b      	b.n	80015dc <HostMessageParse+0x28>
	{
		data[i] = receiveBytes[i];
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	441a      	add	r2, r3
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	3318      	adds	r3, #24
 80015d0:	443b      	add	r3, r7
 80015d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 8; i++)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	3301      	adds	r3, #1
 80015da:	75fb      	strb	r3, [r7, #23]
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d9f0      	bls.n	80015c4 <HostMessageParse+0x10>
	}
	uint8_t checking = checksum(data, 8);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2108      	movs	r1, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffc3 	bl	8001574 <checksum>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75bb      	strb	r3, [r7, #22]
	if (checking == data[7])
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	7dba      	ldrb	r2, [r7, #22]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d117      	bne.n	800162a <HostMessageParse+0x76>
	{
		motors->LeftID = data[1];
 80015fa:	7b7a      	ldrb	r2, [r7, #13]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	701a      	strb	r2, [r3, #0]
		motors->LeftSpeed = (data[2] << 8) | data[3];
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	805a      	strh	r2, [r3, #2]
		motors->RightID = data[4];
 8001612:	7c3a      	ldrb	r2, [r7, #16]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	705a      	strb	r2, [r3, #1]
		motors->RightSpeed = (data[5] << 8) | data[6];
 8001618:	7c7b      	ldrb	r3, [r7, #17]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	7cbb      	ldrb	r3, [r7, #18]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21a      	sxth	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 800162a:	2204      	movs	r2, #4
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f008 fe46 	bl	800a2c0 <memset>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <d80nk_read>:

void d80nk_read()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	481c      	ldr	r0, [pc, #112]	; (80016b8 <d80nk_read+0x7c>)
 8001648:	f002 fc52 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <d80nk_read+0x7c>)
 8001656:	f002 fc4b 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	4815      	ldr	r0, [pc, #84]	; (80016b8 <d80nk_read+0x7c>)
 8001664:	f002 fc44 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800166c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <d80nk_read+0x7c>)
 8001672:	f002 fc3d 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e013      	b.n	80016a8 <d80nk_read+0x6c>
	{
		if (pinStates[i] == GPIO_PIN_SET)
 8001680:	1d3a      	adds	r2, r7, #4
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <d80nk_read+0x80>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e004      	b.n	80016a2 <d80nk_read+0x66>
		}
		else
		{
			d80nk_[i] = '1';
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <d80nk_read+0x80>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	2231      	movs	r2, #49	; 0x31
 80016a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	dde8      	ble.n	8001680 <d80nk_read+0x44>
			//			sprintf(message,"Sensor ON\n");
			//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	200000e0 	.word	0x200000e0

080016c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <vApplicationGetIdleTaskMemory+0x28>)
 80016d0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <vApplicationGetIdleTaskMemory+0x2c>)
 80016d6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000128 	.word	0x20000128
 80016ec:	2000017c 	.word	0x2000017c

080016f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(Serial_Task, "Serial_Task_", 128, NULL, 4, &Serial_Task_Handler);
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_FREERTOS_Init+0x60>)
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2304      	movs	r3, #4
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <MX_FREERTOS_Init+0x64>)
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_FREERTOS_Init+0x68>)
 8001706:	f007 fd3f 	bl	8009188 <xTaskCreate>
	xTaskCreate(Sensor_Task, "Sensor_Task", 128, NULL, 3, &Sensor_Task_Handler);
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_FREERTOS_Init+0x6c>)
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2303      	movs	r3, #3
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	4912      	ldr	r1, [pc, #72]	; (8001760 <MX_FREERTOS_Init+0x70>)
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <MX_FREERTOS_Init+0x74>)
 800171a:	f007 fd35 	bl	8009188 <xTaskCreate>
	xTaskCreate(IMU_Task, "IMU_Task", 128, NULL, 3, IMU_Task_Handler);
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_FREERTOS_Init+0x78>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2303      	movs	r3, #3
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	490f      	ldr	r1, [pc, #60]	; (800176c <MX_FREERTOS_Init+0x7c>)
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <MX_FREERTOS_Init+0x80>)
 8001730:	f007 fd2a 	bl	8009188 <xTaskCreate>
	xTaskCreate(Feedback_Task, "Feedback_Task", 128, NULL, 3, Feedback_Task_Handler);
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_FREERTOS_Init+0x84>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	2303      	movs	r3, #3
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <MX_FREERTOS_Init+0x88>)
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_FREERTOS_Init+0x8c>)
 8001746:	f007 fd1f 	bl	8009188 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000118 	.word	0x20000118
 8001754:	0800ac88 	.word	0x0800ac88
 8001758:	0800191d 	.word	0x0800191d
 800175c:	2000011c 	.word	0x2000011c
 8001760:	0800ac98 	.word	0x0800ac98
 8001764:	08001b9d 	.word	0x08001b9d
 8001768:	20000120 	.word	0x20000120
 800176c:	0800aca4 	.word	0x0800aca4
 8001770:	08001be1 	.word	0x08001be1
 8001774:	20000124 	.word	0x20000124
 8001778:	0800acb0 	.word	0x0800acb0
 800177c:	080019c5 	.word	0x080019c5

08001780 <HAL_TIM_PeriodElapsedCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d117      	bne.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if (huart2Received)
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			huart2Received = 0; // Reset the flag
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
			timerCounter = 0;	// Reset the timer counter
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
			{
				timerCounter = 1;
			}
		}
	}
}
 80017a6:	e00b      	b.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x40>
			timerCounter++;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017b0:	6013      	str	r3, [r2, #0]
			if (timerCounter >= 2) // Adjust the value based on your timer period (e.g., 2 for 1 second if the timer period is 0.5 seconds)
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d902      	bls.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x40>
				timerCounter = 1;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000478 	.word	0x20000478
 80017d0:	20000111 	.word	0x20000111
 80017d4:	20000114 	.word	0x20000114

080017d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a44      	ldr	r2, [pc, #272]	; (80018f4 <HAL_UART_RxCpltCallback+0x11c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10e      	bne.n	8001806 <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_UART_RxCpltCallback+0x120>)
 80017ea:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_UART_RxCpltCallback+0x124>)
 80017ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f0:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes, &motors);
 80017f4:	4942      	ldr	r1, [pc, #264]	; (8001900 <HAL_UART_RxCpltCallback+0x128>)
 80017f6:	4840      	ldr	r0, [pc, #256]	; (80018f8 <HAL_UART_RxCpltCallback+0x120>)
 80017f8:	f7ff fedc 	bl	80015b4 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1, receiveBuff, sizeof(receiveBuff));
 80017fc:	2208      	movs	r2, #8
 80017fe:	493f      	ldr	r1, [pc, #252]	; (80018fc <HAL_UART_RxCpltCallback+0x124>)
 8001800:	483c      	ldr	r0, [pc, #240]	; (80018f4 <HAL_UART_RxCpltCallback+0x11c>)
 8001802:	f006 fc96 	bl	8008132 <HAL_UART_Receive_DMA>
	}

	if (huart == &huart2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a3e      	ldr	r2, [pc, #248]	; (8001904 <HAL_UART_RxCpltCallback+0x12c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d16e      	bne.n	80018ec <HAL_UART_RxCpltCallback+0x114>
	{
		huart2Received = 1;
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_UART_RxCpltCallback+0x130>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
		timerCounter = 0;
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_UART_RxCpltCallback+0x134>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
		short len = strlen(responseBuffer);
 800181a:	483d      	ldr	r0, [pc, #244]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 800181c:	f7fe fd08 	bl	8000230 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	847b      	strh	r3, [r7, #34]	; 0x22
		short arraysz = sizeof(responseBuffer) / sizeof(*responseBuffer);
 8001824:	2319      	movs	r3, #25
 8001826:	843b      	strh	r3, [r7, #32]
		for (int i = 0; i < arraysz; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e04f      	b.n	80018ce <HAL_UART_RxCpltCallback+0xf6>
		{
			if (responseBuffer[i] == motors.LeftID)
 800182e:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	4413      	add	r3, r2
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_UART_RxCpltCallback+0x128>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d11e      	bne.n	800187c <HAL_UART_RxCpltCallback+0xa4>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	4a33      	ldr	r2, [pc, #204]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 8001842:	441a      	add	r2, r3
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	6810      	ldr	r0, [r2, #0]
 800184a:	6851      	ldr	r1, [r2, #4]
 800184c:	c303      	stmia	r3!, {r0, r1}
 800184e:	8912      	ldrh	r2, [r2, #8]
 8001850:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fc24 	bl	80010a4 <checkCRC>
 800185c:	4603      	mov	r3, r0
 800185e:	77bb      	strb	r3, [r7, #30]
				if (checking)
 8001860:	7fbb      	ldrb	r3, [r7, #30]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d030      	beq.n	80018c8 <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferL, &responseBuffer[i], 10);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 800186a:	441a      	add	r2, r3
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_UART_RxCpltCallback+0x13c>)
 800186e:	6810      	ldr	r0, [r2, #0]
 8001870:	6851      	ldr	r1, [r2, #4]
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	6059      	str	r1, [r3, #4]
 8001876:	8912      	ldrh	r2, [r2, #8]
 8001878:	811a      	strh	r2, [r3, #8]
 800187a:	e025      	b.n	80018c8 <HAL_UART_RxCpltCallback+0xf0>
				}
			}
			else if (responseBuffer[i] == motors.RightID)
 800187c:	4a24      	ldr	r2, [pc, #144]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	4413      	add	r3, r2
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_UART_RxCpltCallback+0x128>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	429a      	cmp	r2, r3
 800188a:	d11d      	bne.n	80018c8 <HAL_UART_RxCpltCallback+0xf0>
			{
				uint8_t sigmentBuffer[10];
				memcpy(sigmentBuffer, &responseBuffer[i], 10);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 8001890:	441a      	add	r2, r3
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	6810      	ldr	r0, [r2, #0]
 8001898:	6851      	ldr	r1, [r2, #4]
 800189a:	c303      	stmia	r3!, {r0, r1}
 800189c:	8912      	ldrh	r2, [r2, #8]
 800189e:	801a      	strh	r2, [r3, #0]
				uint8_t checking = checkCRC(&sigmentBuffer);
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fbfd 	bl	80010a4 <checkCRC>
 80018aa:	4603      	mov	r3, r0
 80018ac:	77fb      	strb	r3, [r7, #31]
				if (checking)
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <HAL_UART_RxCpltCallback+0xf0>
				{
					memcpy(responseBufferH, &responseBuffer[i], 10);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 80018b8:	441a      	add	r2, r3
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_UART_RxCpltCallback+0x140>)
 80018bc:	6810      	ldr	r0, [r2, #0]
 80018be:	6851      	ldr	r1, [r2, #4]
 80018c0:	6018      	str	r0, [r3, #0]
 80018c2:	6059      	str	r1, [r3, #4]
 80018c4:	8912      	ldrh	r2, [r2, #8]
 80018c6:	811a      	strh	r2, [r3, #8]
		for (int i = 0; i < arraysz; i++)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3301      	adds	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbaa      	blt.n	800182e <HAL_UART_RxCpltCallback+0x56>
				}
			}
		}
		memset(responseBuffer, 0, sizeof(responseBuffer));
 80018d8:	2219      	movs	r2, #25
 80018da:	2100      	movs	r1, #0
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 80018de:	f008 fcef 	bl	800a2c0 <memset>
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 80018e2:	2219      	movs	r2, #25
 80018e4:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_UART_RxCpltCallback+0x138>)
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_UART_RxCpltCallback+0x12c>)
 80018e8:	f006 fc23 	bl	8008132 <HAL_UART_Receive_DMA>
	}
}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200004c0 	.word	0x200004c0
 80018f8:	200000e4 	.word	0x200000e4
 80018fc:	200000ec 	.word	0x200000ec
 8001900:	200000f4 	.word	0x200000f4
 8001904:	20000508 	.word	0x20000508
 8001908:	20000111 	.word	0x20000111
 800190c:	20000114 	.word	0x20000114
 8001910:	20000088 	.word	0x20000088
 8001914:	200000b0 	.word	0x200000b0
 8001918:	200000a4 	.word	0x200000a4

0800191c <Serial_Task>:

void Serial_Task(void *argument)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8001924:	481e      	ldr	r0, [pc, #120]	; (80019a0 <Serial_Task+0x84>)
 8001926:	f005 fbcb 	bl	80070c0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, receiveBuff, sizeof(receiveBuff));
 800192a:	2208      	movs	r2, #8
 800192c:	491d      	ldr	r1, [pc, #116]	; (80019a4 <Serial_Task+0x88>)
 800192e:	481e      	ldr	r0, [pc, #120]	; (80019a8 <Serial_Task+0x8c>)
 8001930:	f006 fbff 	bl	8008132 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001934:	2219      	movs	r2, #25
 8001936:	491d      	ldr	r1, [pc, #116]	; (80019ac <Serial_Task+0x90>)
 8001938:	481d      	ldr	r0, [pc, #116]	; (80019b0 <Serial_Task+0x94>)
 800193a:	f006 fbfa 	bl	8008132 <HAL_UART_Receive_DMA>
	uint32_t send_delay = pdMS_TO_TICKS(100);
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <Serial_Task+0x98>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <Serial_Task+0x98>)
 800194a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff fd67 	bl	8001424 <setVelocity>
		vTaskDelay(L_R_delay);
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <Serial_Task+0x9c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fd4a 	bl	80093f4 <vTaskDelay>
		setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <Serial_Task+0x98>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	4618      	mov	r0, r3
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <Serial_Task+0x98>)
 8001968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff fd58 	bl	8001424 <setVelocity>
		receiveFromBuffer();
 8001974:	f7ff fbc2 	bl	80010fc <receiveFromBuffer>
		Parse_DMA_All(&wheelsensor, timerCounter);
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <Serial_Task+0xa0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <Serial_Task+0xa4>)
 8001980:	f7ff fbfa 	bl	8001178 <Parse_DMA_All>
		vTaskDelay(send_delay);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f007 fd35 	bl	80093f4 <vTaskDelay>
		//	  uint8_t str[30];
		//	  sprintf(str, "%L: %d R: %d\n", wheelsensor.LeftVelocity,  wheelsensor.RightVelocity);
		//	  HAL_UART_Transmit(&huart3, str, sizeof(str), HAL_MAX_DELAY);
		HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 800198a:	2219      	movs	r2, #25
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <Serial_Task+0x90>)
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <Serial_Task+0x94>)
 8001990:	f006 fbcf 	bl	8008132 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, receiveBuff, sizeof(receiveBuff));
 8001994:	2208      	movs	r2, #8
 8001996:	4903      	ldr	r1, [pc, #12]	; (80019a4 <Serial_Task+0x88>)
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <Serial_Task+0x8c>)
 800199a:	f006 fbca 	bl	8008132 <HAL_UART_Receive_DMA>
	{
 800199e:	e7d0      	b.n	8001942 <Serial_Task+0x26>
 80019a0:	20000478 	.word	0x20000478
 80019a4:	200000ec 	.word	0x200000ec
 80019a8:	200004c0 	.word	0x200004c0
 80019ac:	20000088 	.word	0x20000088
 80019b0:	20000508 	.word	0x20000508
 80019b4:	200000f4 	.word	0x200000f4
 80019b8:	20000004 	.word	0x20000004
 80019bc:	20000114 	.word	0x20000114
 80019c0:	200000bc 	.word	0x200000bc

080019c4 <Feedback_Task>:
	}
}

void Feedback_Task(void *argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 80019cc:	23c8      	movs	r3, #200	; 0xc8
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(1)
	{
		uint8_t sendData[36];
		sendData[0] = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	723b      	strb	r3, [r7, #8]
		sendData[1] = (wheelsensor.leftii) & 0xFF;
 80019d4:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <Feedback_Task+0x1c0>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	727b      	strb	r3, [r7, #9]
		sendData[2] = ((wheelsensor.LeftVelocity)>>8) & 0xFF;
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <Feedback_Task+0x1c0>)
 80019dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019e0:	121b      	asrs	r3, r3, #8
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	72bb      	strb	r3, [r7, #10]
		sendData[3] = wheelsensor.LeftVelocity & 0xFF;
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <Feedback_Task+0x1c0>)
 80019ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	72fb      	strb	r3, [r7, #11]
		sendData[4] = wheelsensor.reightii & 0xFF;
 80019f2:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <Feedback_Task+0x1c0>)
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	733b      	strb	r3, [r7, #12]
		sendData[5] = ((wheelsensor.RightVelocity)>>8) & 0xFF;
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <Feedback_Task+0x1c0>)
 80019fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019fe:	121b      	asrs	r3, r3, #8
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	737b      	strb	r3, [r7, #13]
		sendData[6] = wheelsensor.RightVelocity & 0xFF;
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <Feedback_Task+0x1c0>)
 8001a08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	73bb      	strb	r3, [r7, #14]
		sendData[7] = (my_95Q.Acc_x >> 8) & 0xFF;
 8001a10:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	121b      	asrs	r3, r3, #8
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
		sendData[8] = my_95Q.Acc_x & 0XFF;
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	743b      	strb	r3, [r7, #16]
		sendData[9] = (my_95Q.Acc_y >> 8) & 0XFF;
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2e:	121b      	asrs	r3, r3, #8
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	747b      	strb	r3, [r7, #17]
		sendData[10] = my_95Q.Acc_y & 0xFF;
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	74bb      	strb	r3, [r7, #18]
		sendData[11] = (my_95Q.Acc_z >> 8) & 0xFF;
 8001a40:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a46:	121b      	asrs	r3, r3, #8
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	74fb      	strb	r3, [r7, #19]
		sendData[12] = my_95Q.Acc_z & 0xFF;
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	753b      	strb	r3, [r7, #20]
		sendData[13] = (my_95Q.Gyro_x >> 8) & 0XFF;
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a5e:	121b      	asrs	r3, r3, #8
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	757b      	strb	r3, [r7, #21]
		sendData[14] = my_95Q.Gyro_x & 0xFF;
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	75bb      	strb	r3, [r7, #22]
		sendData[15] = (my_95Q.Gyro_y >> 8) & 0XFF;
 8001a70:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	75fb      	strb	r3, [r7, #23]
		sendData[16] = my_95Q.Gyro_y & 0xFF;
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	763b      	strb	r3, [r7, #24]
		sendData[17] = (my_95Q.Gyro_z >> 8) & 0XFF;
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a8e:	121b      	asrs	r3, r3, #8
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	767b      	strb	r3, [r7, #25]
		sendData[18] = my_95Q.Gyro_z >> 8 & 0xFF;
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <Feedback_Task+0x1c4>)
 8001a98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a9c:	121b      	asrs	r3, r3, #8
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	76bb      	strb	r3, [r7, #26]
		sendData[19] = (my_95Q.Q0 >> 8) & 0xFF;
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <Feedback_Task+0x1c4>)
 8001aa6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001aaa:	121b      	asrs	r3, r3, #8
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	76fb      	strb	r3, [r7, #27]
		sendData[20] = my_95Q.Q0 & 0xFF;
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <Feedback_Task+0x1c4>)
 8001ab4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	773b      	strb	r3, [r7, #28]
		sendData[21] = (my_95Q.Q1 >> 8) & 0xFF;
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <Feedback_Task+0x1c4>)
 8001abe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ac2:	121b      	asrs	r3, r3, #8
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	777b      	strb	r3, [r7, #29]
		sendData[22] = my_95Q.Q1 & 0xFF;
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <Feedback_Task+0x1c4>)
 8001acc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	77bb      	strb	r3, [r7, #30]
		sendData[23] = (my_95Q.Q2 >> 8) & 0xFF;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <Feedback_Task+0x1c4>)
 8001ad6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ada:	121b      	asrs	r3, r3, #8
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	77fb      	strb	r3, [r7, #31]
		sendData[24] = my_95Q.Q2 & 0xFF;
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <Feedback_Task+0x1c4>)
 8001ae4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f887 3020 	strb.w	r3, [r7, #32]
		sendData[25] = (my_95Q.Q3 >> 8) & 0xFF;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <Feedback_Task+0x1c4>)
 8001af0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001af4:	121b      	asrs	r3, r3, #8
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		sendData[26] = my_95Q.Q3 & 0xFF;
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <Feedback_Task+0x1c4>)
 8001b00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		sendData[27] = (distance1 >> 8) & 0xFF;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <Feedback_Task+0x1c8>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		sendData[28] = (distance1) & 0xFF;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <Feedback_Task+0x1c8>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		sendData[29] = (distance2 >> 8) & 0xFF;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <Feedback_Task+0x1cc>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		sendData[30] = (distance2) & 0xFF;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <Feedback_Task+0x1cc>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		sendData[31] = d80nk_[0] & 0xFF;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <Feedback_Task+0x1d0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		sendData[32] = d80nk_[1] & 0xFF;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <Feedback_Task+0x1d0>)
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		sendData[33] = d80nk_[2] & 0xFF;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <Feedback_Task+0x1d0>)
 8001b4c:	789b      	ldrb	r3, [r3, #2]
 8001b4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		sendData[34] = d80nk_[3] & 0xFF;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <Feedback_Task+0x1d0>)
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		sendData[35] = checksum(sendData, 36);
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2124      	movs	r1, #36	; 0x24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd07 	bl	8001574 <checksum>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_UART_Transmit(&huart1, sendData, 36, HAL_MAX_DELAY);
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	2224      	movs	r2, #36	; 0x24
 8001b76:	4808      	ldr	r0, [pc, #32]	; (8001b98 <Feedback_Task+0x1d4>)
 8001b78:	f006 fa50 	bl	800801c <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8001b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b7e:	f007 fc39 	bl	80093f4 <vTaskDelay>
	{
 8001b82:	e725      	b.n	80019d0 <Feedback_Task+0xc>
 8001b84:	200000bc 	.word	0x200000bc
 8001b88:	200000fc 	.word	0x200000fc
 8001b8c:	200003d8 	.word	0x200003d8
 8001b90:	200003e2 	.word	0x200003e2
 8001b94:	200000e0 	.word	0x200000e0
 8001b98:	200004c0 	.word	0x200004c0

08001b9c <Sensor_Task>:
	}
}

void Sensor_Task(void *argument)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	uint32_t send_delay = pdMS_TO_TICKS(100);
 8001ba4:	2364      	movs	r3, #100	; 0x64
 8001ba6:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Start(&htim2);
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <Sensor_Task+0x3c>)
 8001baa:	f005 fa31 	bl	8007010 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <Sensor_Task+0x3c>)
 8001bb2:	f005 fb3d 	bl	8007230 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <Sensor_Task+0x40>)
 8001bb8:	f005 fa2a 	bl	8007010 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <Sensor_Task+0x40>)
 8001bc0:	f005 fb36 	bl	8007230 <HAL_TIM_IC_Start_IT>
	while (1)
	{
		HCSR04_Read();
 8001bc4:	f000 fb24 	bl	8002210 <HCSR04_Read>
		_HCSR04_Read();
 8001bc8:	f000 fb5a 	bl	8002280 <_HCSR04_Read>
		d80nk_read();
 8001bcc:	f7ff fd36 	bl	800163c <d80nk_read>
		vTaskDelay(send_delay);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f007 fc0f 	bl	80093f4 <vTaskDelay>
	{
 8001bd6:	e7f5      	b.n	8001bc4 <Sensor_Task+0x28>
 8001bd8:	200003e8 	.word	0x200003e8
 8001bdc:	20000430 	.word	0x20000430

08001be0 <IMU_Task>:

/// @brief IMU control and display task
/// @param argument

void IMU_Task(void *argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint32_t tick_delay = pdMS_TO_TICKS(200);
 8001be8:	23c8      	movs	r3, #200	; 0xc8
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t inited = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t debug[30];
	do {
		inited = gy95_Init(&td);
 8001bf2:	4818      	ldr	r0, [pc, #96]	; (8001c54 <IMU_Task+0x74>)
 8001bf4:	f000 f8dc 	bl	8001db0 <gy95_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		sprintf(debug, "IMU not inited\n");
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4915      	ldr	r1, [pc, #84]	; (8001c58 <IMU_Task+0x78>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f008 fb3b 	bl	800a280 <siprintf>
		HAL_UART_Transmit(&huart3, debug, sizeof(debug), HAL_MAX_DELAY);
 8001c0a:	f107 010c 	add.w	r1, r7, #12
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	221e      	movs	r2, #30
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <IMU_Task+0x7c>)
 8001c16:	f006 fa01 	bl	800801c <HAL_UART_Transmit>
		vTaskDelay(tick_delay);
 8001c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c1c:	f007 fbea 	bl	80093f4 <vTaskDelay>
	    } while (inited != 1);
 8001c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d1e4      	bne.n	8001bf2 <IMU_Task+0x12>
	while(1)
	{
		sprintf(debug, "IMU is inited\n");
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <IMU_Task+0x80>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f008 fb26 	bl	800a280 <siprintf>
		HAL_UART_Transmit(&huart3, debug, sizeof(debug), HAL_MAX_DELAY);
 8001c34:	f107 010c 	add.w	r1, r7, #12
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	221e      	movs	r2, #30
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <IMU_Task+0x7c>)
 8001c40:	f006 f9ec 	bl	800801c <HAL_UART_Transmit>
		gy95_All(&my_95Q);
 8001c44:	4807      	ldr	r0, [pc, #28]	; (8001c64 <IMU_Task+0x84>)
 8001c46:	f000 f8e3 	bl	8001e10 <gy95_All>
		vTaskDelay(tick_delay);
 8001c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c4c:	f007 fbd2 	bl	80093f4 <vTaskDelay>
	{
 8001c50:	e7ea      	b.n	8001c28 <IMU_Task+0x48>
 8001c52:	bf00      	nop
 8001c54:	20000110 	.word	0x20000110
 8001c58:	0800acc0 	.word	0x0800acc0
 8001c5c:	20000550 	.word	0x20000550
 8001c60:	0800acd0 	.word	0x0800acd0
 8001c64:	200000fc 	.word	0x200000fc

08001c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_GPIO_Init+0xa4>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2182      	movs	r1, #130	; 0x82
 8001cc8:	4811      	ldr	r0, [pc, #68]	; (8001d10 <MX_GPIO_Init+0xa8>)
 8001cca:	f002 f928 	bl	8003f1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001cce:	2382      	movs	r3, #130	; 0x82
 8001cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <MX_GPIO_Init+0xa8>)
 8001ce6:	f001 ff6f 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_GPIO_Init+0xac>)
 8001d00:	f001 ff62 	bl	8003bc8 <HAL_GPIO_Init>

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00

08001d18 <iic_read>:
 */
#include "gy95t.h"
#include "usart.h"

void iic_read(uint8_t add, uint8_t *data, uint8_t len)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    uint8_t mess[20];

    ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iic_add << 1, &add, 1, 100);
 8001d28:	1dfa      	adds	r2, r7, #7
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	21a4      	movs	r1, #164	; 0xa4
 8001d32:	481b      	ldr	r0, [pc, #108]	; (8001da0 <iic_read+0x88>)
 8001d34:	f002 fa64 	bl	8004200 <HAL_I2C_Master_Transmit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <iic_read+0x46>
		sprintf(mess, "not transmit to I2C device\n");
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4917      	ldr	r1, [pc, #92]	; (8001da4 <iic_read+0x8c>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f008 fa99 	bl	800a280 <siprintf>
		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
 8001d4e:	f107 0108 	add.w	r1, r7, #8
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	2214      	movs	r2, #20
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <iic_read+0x90>)
 8001d5a:	f006 f95f 	bl	800801c <HAL_UART_Transmit>
    }


    ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)iic_add << 1, data, len, 100);
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2264      	movs	r2, #100	; 0x64
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	21a4      	movs	r1, #164	; 0xa4
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <iic_read+0x88>)
 8001d6c:	f002 fb46 	bl	80043fc <HAL_I2C_Master_Receive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <iic_read+0x7e>
		sprintf(mess, "no receive from I2C device");
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	490b      	ldr	r1, [pc, #44]	; (8001dac <iic_read+0x94>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f008 fa7d 	bl	800a280 <siprintf>
		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
 8001d86:	f107 0108 	add.w	r1, r7, #8
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	2214      	movs	r2, #20
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <iic_read+0x90>)
 8001d92:	f006 f943 	bl	800801c <HAL_UART_Transmit>
    }
    // If everything is OK
//	sprintf(mess, "I2C Read OK\n");
//	HAL_UART_Transmit(&huart1, (uint8_t*)mess, strlen(mess), HAL_MAX_DELAY);

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000037c 	.word	0x2000037c
 8001da4:	0800ace0 	.word	0x0800ace0
 8001da8:	200004c0 	.word	0x200004c0
 8001dac:	0800acfc 	.word	0x0800acfc

08001db0 <gy95_Init>:

uint8_t gy95_Init(uint8_t *data)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t init = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iic_add << 1, 0x02, 1, 200);
 8001dbc:	23c8      	movs	r3, #200	; 0xc8
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	21a4      	movs	r1, #164	; 0xa4
 8001dc6:	4811      	ldr	r0, [pc, #68]	; (8001e0c <gy95_Init+0x5c>)
 8001dc8:	f002 fa1a 	bl	8004200 <HAL_I2C_Master_Transmit>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK) {
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <gy95_Init+0x2a>
		init = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)iic_add << 1, &data, 1, 100);
 8001dda:	1d3a      	adds	r2, r7, #4
 8001ddc:	2364      	movs	r3, #100	; 0x64
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	21a4      	movs	r1, #164	; 0xa4
 8001de4:	4809      	ldr	r0, [pc, #36]	; (8001e0c <gy95_Init+0x5c>)
 8001de6:	f002 fb09 	bl	80043fc <HAL_I2C_Master_Receive>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <gy95_Init+0x48>
		init = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
	}
	if(data != 1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <gy95_Init+0x52>
	{
		init = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
	}
	return init;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000037c 	.word	0x2000037c

08001e10 <gy95_All>:


void gy95_All(gy* my_95Q)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	uint8_t data_L;
    uint8_t data_H;

    iic_read(ACC_X_L, &data_L, 1);
 8001e18:	f107 030f 	add.w	r3, r7, #15
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2008      	movs	r0, #8
 8001e22:	f7ff ff79 	bl	8001d18 <iic_read>
    iic_read(ACC_X_H, &data_H, 1);
 8001e26:	f107 030e 	add.w	r3, r7, #14
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2009      	movs	r0, #9
 8001e30:	f7ff ff72 	bl	8001d18 <iic_read>
    my_95Q->Acc_x = (int16_t)((data_H << 8) | data_L);
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	801a      	strh	r2, [r3, #0]

    iic_read(ACC_Y_L, &data_L, 1);
 8001e46:	f107 030f 	add.w	r3, r7, #15
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f7ff ff62 	bl	8001d18 <iic_read>
    iic_read(ACC_Y_H, &data_H, 1);
 8001e54:	f107 030e 	add.w	r3, r7, #14
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	200b      	movs	r0, #11
 8001e5e:	f7ff ff5b 	bl	8001d18 <iic_read>
    my_95Q->Acc_y = (int16_t)((data_H << 8) | data_L);
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	805a      	strh	r2, [r3, #2]

    iic_read(ACC_Z_L, &data_L, 1);
 8001e74:	f107 030f 	add.w	r3, r7, #15
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f7ff ff4b 	bl	8001d18 <iic_read>
    iic_read(ACC_Z_H, &data_H, 1);
 8001e82:	f107 030e 	add.w	r3, r7, #14
 8001e86:	2201      	movs	r2, #1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	200d      	movs	r0, #13
 8001e8c:	f7ff ff44 	bl	8001d18 <iic_read>
    my_95Q->Acc_z = (int16_t)((data_H << 8) | data_L);
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	809a      	strh	r2, [r3, #4]

    iic_read(GYRO_X_L, &data_L, 1);
 8001ea2:	f107 030f 	add.w	r3, r7, #15
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	200e      	movs	r0, #14
 8001eac:	f7ff ff34 	bl	8001d18 <iic_read>
    iic_read(GYRO_X_H, &data_H, 1);
 8001eb0:	f107 030e 	add.w	r3, r7, #14
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	200f      	movs	r0, #15
 8001eba:	f7ff ff2d 	bl	8001d18 <iic_read>
    my_95Q->Gyro_x = (int16_t)((data_H << 8) | data_L);
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	80da      	strh	r2, [r3, #6]

    iic_read(GYRO_Y_L, &data_L, 1);
 8001ed0:	f107 030f 	add.w	r3, r7, #15
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	2010      	movs	r0, #16
 8001eda:	f7ff ff1d 	bl	8001d18 <iic_read>
    iic_read(GYRO_Y_H, &data_H, 1);
 8001ede:	f107 030e 	add.w	r3, r7, #14
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	2011      	movs	r0, #17
 8001ee8:	f7ff ff16 	bl	8001d18 <iic_read>
    my_95Q->Gyro_y = (int16_t)((data_H << 8) | data_L);
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	811a      	strh	r2, [r3, #8]

    iic_read(GYRO_Z_L, &data_L, 1);
 8001efe:	f107 030f 	add.w	r3, r7, #15
 8001f02:	2201      	movs	r2, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	2012      	movs	r0, #18
 8001f08:	f7ff ff06 	bl	8001d18 <iic_read>
    iic_read(GYRO_Z_H, &data_H, 1);
 8001f0c:	f107 030e 	add.w	r3, r7, #14
 8001f10:	2201      	movs	r2, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	2013      	movs	r0, #19
 8001f16:	f7ff feff 	bl	8001d18 <iic_read>
    my_95Q->Gyro_z = (int16_t)((data_H << 8) | data_L);
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	815a      	strh	r2, [r3, #10]

    iic_read(Q0_L, &data_L, 1);
 8001f2c:	f107 030f 	add.w	r3, r7, #15
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	2023      	movs	r0, #35	; 0x23
 8001f36:	f7ff feef 	bl	8001d18 <iic_read>
    iic_read(Q0_H, &data_H, 1);
 8001f3a:	f107 030e 	add.w	r3, r7, #14
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4619      	mov	r1, r3
 8001f42:	2024      	movs	r0, #36	; 0x24
 8001f44:	f7ff fee8 	bl	8001d18 <iic_read>
    my_95Q->Q0 = (int16_t)((data_H << 8) | data_L) / 1000;
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4a33      	ldr	r2, [pc, #204]	; (8002024 <gy95_All+0x214>)
 8001f58:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5c:	1192      	asrs	r2, r2, #6
 8001f5e:	17db      	asrs	r3, r3, #31
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	819a      	strh	r2, [r3, #12]

    iic_read(Q1_L, &data_L, 1);
 8001f68:	f107 030f 	add.w	r3, r7, #15
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2025      	movs	r0, #37	; 0x25
 8001f72:	f7ff fed1 	bl	8001d18 <iic_read>
	iic_read(Q1_H, &data_H, 1);
 8001f76:	f107 030e 	add.w	r3, r7, #14
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	f7ff feca 	bl	8001d18 <iic_read>
	my_95Q->Q1 = (int16_t)((data_H << 8) | data_L) / 1000;
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <gy95_All+0x214>)
 8001f94:	fb82 1203 	smull	r1, r2, r2, r3
 8001f98:	1192      	asrs	r2, r2, #6
 8001f9a:	17db      	asrs	r3, r3, #31
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	81da      	strh	r2, [r3, #14]

	iic_read(Q2_L, &data_L, 1);
 8001fa4:	f107 030f 	add.w	r3, r7, #15
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	2027      	movs	r0, #39	; 0x27
 8001fae:	f7ff feb3 	bl	8001d18 <iic_read>
	iic_read(Q2_H, &data_H, 1);
 8001fb2:	f107 030e 	add.w	r3, r7, #14
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2028      	movs	r0, #40	; 0x28
 8001fbc:	f7ff feac 	bl	8001d18 <iic_read>
	my_95Q->Q2 = (int16_t)((data_H << 8) | data_L) / 1000;
 8001fc0:	7bbb      	ldrb	r3, [r7, #14]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <gy95_All+0x214>)
 8001fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd4:	1192      	asrs	r2, r2, #6
 8001fd6:	17db      	asrs	r3, r3, #31
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	821a      	strh	r2, [r3, #16]

	iic_read(Q3_L, &data_L, 1);
 8001fe0:	f107 030f 	add.w	r3, r7, #15
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	2029      	movs	r0, #41	; 0x29
 8001fea:	f7ff fe95 	bl	8001d18 <iic_read>
	iic_read(Q3_H, &data_H, 1);
 8001fee:	f107 030e 	add.w	r3, r7, #14
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	202a      	movs	r0, #42	; 0x2a
 8001ff8:	f7ff fe8e 	bl	8001d18 <iic_read>
	my_95Q->Q3 = (int16_t)((data_H << 8) | data_L) / 1000;
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21a      	sxth	r2, r3
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <gy95_All+0x214>)
 800200c:	fb82 1203 	smull	r1, r2, r2, r3
 8002010:	1192      	asrs	r2, r2, #6
 8002012:	17db      	asrs	r3, r3, #31
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	b21a      	sxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	825a      	strh	r2, [r3, #18]
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	10624dd3 	.word	0x10624dd3

08002028 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_I2C1_Init+0x50>)
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <MX_I2C1_Init+0x54>)
 8002030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_I2C1_Init+0x50>)
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <MX_I2C1_Init+0x58>)
 8002036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_I2C1_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_I2C1_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_I2C1_Init+0x50>)
 8002046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_I2C1_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_I2C1_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_I2C1_Init+0x50>)
 8002066:	f001 ff73 	bl	8003f50 <HAL_I2C_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002070:	f000 f8b0 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000037c 	.word	0x2000037c
 800207c:	40005400 	.word	0x40005400
 8002080:	00061a80 	.word	0x00061a80

08002084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_I2C_MspInit+0x80>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d12b      	bne.n	80020fc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020bc:	23c0      	movs	r3, #192	; 0xc0
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c0:	2312      	movs	r3, #18
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	480f      	ldr	r0, [pc, #60]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020d0:	f001 fd7a 	bl	8003bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020de:	61d3      	str	r3, [r2, #28]
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2105      	movs	r1, #5
 80020f0:	201f      	movs	r0, #31
 80020f2:	f001 f8a2 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020f6:	201f      	movs	r0, #31
 80020f8:	f001 f8bb 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005400 	.word	0x40005400
 8002108:	40021000 	.word	0x40021000
 800210c:	40010c00 	.word	0x40010c00

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002114:	f000 ff58 	bl	8002fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002118:	f000 f817 	bl	800214a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f7ff fda4 	bl	8001c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8002120:	f7ff f9e2 	bl	80014e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002124:	f000 fcd2 	bl	8002acc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002128:	f000 fcfa 	bl	8002b20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800212c:	f000 fd22 	bl	8002b74 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002130:	f7ff ff7a 	bl	8002028 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002134:	f000 fb08 	bl	8002748 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002138:	f000 fb76 	bl	8002828 <MX_TIM3_Init>
  MX_TIM4_Init();
 800213c:	f000 fbe4 	bl	8002908 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002140:	f7ff fad6 	bl	80016f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  vTaskStartScheduler();
 8002144:	f007 f98a 	bl	800945c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002148:	e7fe      	b.n	8002148 <main+0x38>

0800214a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b090      	sub	sp, #64	; 0x40
 800214e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	2228      	movs	r2, #40	; 0x28
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f008 f8b1 	bl	800a2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800217a:	2301      	movs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002188:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218e:	f107 0318 	add.w	r3, r7, #24
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fadc 	bl	8006750 <HAL_RCC_OscConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800219e:	f000 f819 	bl	80021d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a2:	230f      	movs	r3, #15
 80021a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	2302      	movs	r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2102      	movs	r1, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fd49 	bl	8006c54 <HAL_RCC_ClockConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021c8:	f000 f804 	bl	80021d4 <Error_Handler>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3740      	adds	r7, #64	; 0x40
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021dc:	e7fe      	b.n	80021dc <Error_Handler+0x8>
	...

080021e0 <delay_us>:
uint16_t _IC_value2=0;
uint16_t _Difference =0;
uint16_t distance2 =0;

void delay_us(uint16_t time)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2,0);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <delay_us+0x2c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
  while(__HAL_TIM_GET_COUNTER(&htim2)<time);
 80021f2:	bf00      	nop
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <delay_us+0x2c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3f9      	bcc.n	80021f4 <delay_us+0x14>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	200003e8 	.word	0x200003e8

08002210 <HCSR04_Read>:

uint16_t HCSR04_Read(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2102      	movs	r1, #2
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <HCSR04_Read+0x64>)
 800221a:	f001 fe80 	bl	8003f1e <HAL_GPIO_WritePin>
	delay_us(2);
 800221e:	2002      	movs	r0, #2
 8002220:	f7ff ffde 	bl	80021e0 <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	2102      	movs	r1, #2
 8002228:	4812      	ldr	r0, [pc, #72]	; (8002274 <HCSR04_Read+0x64>)
 800222a:	f001 fe78 	bl	8003f1e <HAL_GPIO_WritePin>
	delay_us(12);
 800222e:	200c      	movs	r0, #12
 8002230:	f7ff ffd6 	bl	80021e0 <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2102      	movs	r1, #2
 8002238:	480e      	ldr	r0, [pc, #56]	; (8002274 <HCSR04_Read+0x64>)
 800223a:	f001 fe70 	bl	8003f1e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HCSR04_Read+0x68>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HCSR04_Read+0x68>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 020a 	bic.w	r2, r2, #10
 800224c:	621a      	str	r2, [r3, #32]
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HCSR04_Read+0x68>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HCSR04_Read+0x68>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a12      	ldr	r2, [r2, #32]
 8002258:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC1);
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HCSR04_Read+0x68>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HCSR04_Read+0x68>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0202 	orr.w	r2, r2, #2
 8002268:	60da      	str	r2, [r3, #12]
	//HAL_Delay(100);
	return distance1;
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <HCSR04_Read+0x6c>)
 800226c:	881b      	ldrh	r3, [r3, #0]
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40010800 	.word	0x40010800
 8002278:	200003e8 	.word	0x200003e8
 800227c:	200003d8 	.word	0x200003d8

08002280 <_HCSR04_Read>:

uint16_t _HCSR04_Read(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	4816      	ldr	r0, [pc, #88]	; (80022e4 <_HCSR04_Read+0x64>)
 800228a:	f001 fe48 	bl	8003f1e <HAL_GPIO_WritePin>
	delay_us(2);
 800228e:	2002      	movs	r0, #2
 8002290:	f7ff ffa6 	bl	80021e0 <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	4812      	ldr	r0, [pc, #72]	; (80022e4 <_HCSR04_Read+0x64>)
 800229a:	f001 fe40 	bl	8003f1e <HAL_GPIO_WritePin>
	delay_us(12);
 800229e:	200c      	movs	r0, #12
 80022a0:	f7ff ff9e 	bl	80021e0 <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	480e      	ldr	r0, [pc, #56]	; (80022e4 <_HCSR04_Read+0x64>)
 80022aa:	f001 fe38 	bl	8003f1e <HAL_GPIO_WritePin>

	__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_HCSR04_Read+0x68>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <_HCSR04_Read+0x68>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020a 	bic.w	r2, r2, #10
 80022bc:	621a      	str	r2, [r3, #32]
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <_HCSR04_Read+0x68>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <_HCSR04_Read+0x68>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a12      	ldr	r2, [r2, #32]
 80022c8:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_CC1);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <_HCSR04_Read+0x68>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <_HCSR04_Read+0x68>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0202 	orr.w	r2, r2, #2
 80022d8:	60da      	str	r2, [r3, #12]
	//HAL_Delay(100);
	return distance2;
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <_HCSR04_Read+0x6c>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40010800 	.word	0x40010800
 80022e8:	20000430 	.word	0x20000430
 80022ec:	200003e2 	.word	0x200003e2

080022f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  if(htim==&htim2 &&htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d174      	bne.n	80023ea <HAL_TIM_IC_CaptureCallback+0xfa>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7f1b      	ldrb	r3, [r3, #28]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d170      	bne.n	80023ea <HAL_TIM_IC_CaptureCallback+0xfa>
	{
		if(IS_First_CAPTURED==0)
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			IS_First_CAPTURED=1;
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
			IC_value1=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8002316:	2100      	movs	r1, #0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 faf7 	bl	800790c <HAL_TIM_ReadCapturedValue>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002324:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 020a 	bic.w	r2, r2, #10
 8002334:	621a      	str	r2, [r3, #32]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0202 	orr.w	r2, r2, #2
 8002344:	621a      	str	r2, [r3, #32]
 8002346:	e050      	b.n	80023ea <HAL_TIM_IC_CaptureCallback+0xfa>
		}
		else if(IS_First_CAPTURED==1)
 8002348:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d14c      	bne.n	80023ea <HAL_TIM_IC_CaptureCallback+0xfa>
		{
			IS_First_CAPTURED=0;
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
			IC_value2=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8002356:	2100      	movs	r1, #0
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f005 fad7 	bl	800790c <HAL_TIM_ReadCapturedValue>
 800235e:	4603      	mov	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002364:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

			//����
			if(IC_value1 < IC_value2)
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d208      	bcs.n	800238c <HAL_TIM_IC_CaptureCallback+0x9c>
			{
				Difference = IC_value2-IC_value1;
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x200>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b5b      	ldr	r3, [pc, #364]	; (80024f4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e00f      	b.n	80023ac <HAL_TIM_IC_CaptureCallback+0xbc>
			}
			else if(IC_value1 > IC_value2)
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d909      	bls.n	80023ac <HAL_TIM_IC_CaptureCallback+0xbc>
			{
				Difference = 0xffff - IC_value1+IC_value2;
 8002398:	4b55      	ldr	r3, [pc, #340]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x200>)
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_TIM_IC_CaptureCallback+0x204>)
 80023aa:	801a      	strh	r2, [r3, #0]
			}

			distance1 = Difference/58;
 80023ac:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_TIM_IC_CaptureCallback+0x204>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_TIM_IC_CaptureCallback+0x20c>)
 80023bc:	801a      	strh	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020a 	bic.w	r2, r2, #10
 80023cc:	621a      	str	r2, [r3, #32]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a12      	ldr	r2, [r2, #32]
 80023d8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0202 	bic.w	r2, r2, #2
 80023e8:	60da      	str	r2, [r3, #12]

			}
	 }
  if(htim==&htim3 &&htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a44      	ldr	r2, [pc, #272]	; (8002500 <HAL_TIM_IC_CaptureCallback+0x210>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d174      	bne.n	80024dc <HAL_TIM_IC_CaptureCallback+0x1ec>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d170      	bne.n	80024dc <HAL_TIM_IC_CaptureCallback+0x1ec>
  	{
  		if(_IS_First_CAPTURED==0)
 80023fa:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_TIM_IC_CaptureCallback+0x214>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11b      	bne.n	800243a <HAL_TIM_IC_CaptureCallback+0x14a>
  		{
  			_IS_First_CAPTURED=1;
 8002402:	4b40      	ldr	r3, [pc, #256]	; (8002504 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
  			_IC_value1=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8002408:	2100      	movs	r1, #0
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f005 fa7e 	bl	800790c <HAL_TIM_ReadCapturedValue>
 8002410:	4603      	mov	r3, r0
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002416:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a1a      	ldr	r2, [r3, #32]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020a 	bic.w	r2, r2, #10
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	621a      	str	r2, [r3, #32]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
  			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);

  			}
  	 }
}
 8002438:	e050      	b.n	80024dc <HAL_TIM_IC_CaptureCallback+0x1ec>
  		else if(_IS_First_CAPTURED==1)
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_TIM_IC_CaptureCallback+0x214>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d14c      	bne.n	80024dc <HAL_TIM_IC_CaptureCallback+0x1ec>
  			_IS_First_CAPTURED=0;
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
  			_IC_value2=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8002448:	2100      	movs	r1, #0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f005 fa5e 	bl	800790c <HAL_TIM_ReadCapturedValue>
 8002450:	4603      	mov	r3, r0
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002456:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_COUNTER(htim,0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
  			if(_IC_value1 < _IC_value2)
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d208      	bcs.n	800247e <HAL_TIM_IC_CaptureCallback+0x18e>
  				_Difference = _IC_value2-_IC_value1;
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_TIM_IC_CaptureCallback+0x21c>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_TIM_IC_CaptureCallback+0x220>)
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	e00f      	b.n	800249e <HAL_TIM_IC_CaptureCallback+0x1ae>
  			else if(_IC_value1 > _IC_value2)
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d909      	bls.n	800249e <HAL_TIM_IC_CaptureCallback+0x1ae>
  				_Difference = 0xffff - _IC_value1+ _IC_value2;
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_TIM_IC_CaptureCallback+0x21c>)
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_TIM_IC_CaptureCallback+0x220>)
 800249c:	801a      	strh	r2, [r3, #0]
  			distance2 = _Difference/58;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_TIM_IC_CaptureCallback+0x220>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_TIM_IC_CaptureCallback+0x224>)
 80024ae:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a1a      	ldr	r2, [r3, #32]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020a 	bic.w	r2, r2, #10
 80024be:	621a      	str	r2, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a12      	ldr	r2, [r2, #32]
 80024ca:	621a      	str	r2, [r3, #32]
  			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0202 	bic.w	r2, r2, #2
 80024da:	60da      	str	r2, [r3, #12]
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200003e8 	.word	0x200003e8
 80024e8:	200003d0 	.word	0x200003d0
 80024ec:	200003d2 	.word	0x200003d2
 80024f0:	200003d4 	.word	0x200003d4
 80024f4:	200003d6 	.word	0x200003d6
 80024f8:	8d3dcb09 	.word	0x8d3dcb09
 80024fc:	200003d8 	.word	0x200003d8
 8002500:	20000430 	.word	0x20000430
 8002504:	200003da 	.word	0x200003da
 8002508:	200003dc 	.word	0x200003dc
 800250c:	200003de 	.word	0x200003de
 8002510:	200003e0 	.word	0x200003e0
 8002514:	200003e2 	.word	0x200003e2

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_MspInit+0x68>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_MspInit+0x68>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6193      	str	r3, [r2, #24]
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_MspInit+0x68>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_MspInit+0x68>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_MspInit+0x68>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_MspInit+0x68>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	210f      	movs	r1, #15
 8002552:	f06f 0001 	mvn.w	r0, #1
 8002556:	f000 fe70 	bl	800323a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_MspInit+0x6c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_MspInit+0x6c>)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b6:	f000 fd4d 	bl	8003054 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025ba:	f007 fa41 	bl	8009a40 <xTaskGetSchedulerState>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d001      	beq.n	80025c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80025c4:	f007 fc30 	bl	8009e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Channel2_IRQHandler+0x10>)
 80025d2:	f001 f883 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200006ec 	.word	0x200006ec

080025e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Channel3_IRQHandler+0x10>)
 80025e6:	f001 f879 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200006a8 	.word	0x200006a8

080025f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <DMA1_Channel4_IRQHandler+0x10>)
 80025fa:	f001 f86f 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200005dc 	.word	0x200005dc

08002608 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Channel5_IRQHandler+0x10>)
 800260e:	f001 f865 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000598 	.word	0x20000598

0800261c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Channel6_IRQHandler+0x10>)
 8002622:	f001 f85b 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000620 	.word	0x20000620

08002630 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <DMA1_Channel7_IRQHandler+0x10>)
 8002636:	f001 f851 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000664 	.word	0x20000664

08002644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM2_IRQHandler+0x10>)
 800264a:	f004 ff0b 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200003e8 	.word	0x200003e8

08002658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <TIM3_IRQHandler+0x10>)
 800265e:	f004 ff01 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000430 	.word	0x20000430

0800266c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM4_IRQHandler+0x10>)
 8002672:	f004 fef7 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000478 	.word	0x20000478

08002680 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <I2C1_EV_IRQHandler+0x10>)
 8002686:	f002 f925 	bl	80048d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000037c 	.word	0x2000037c

08002694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <USART1_IRQHandler+0x10>)
 800269a:	f005 fd6f 	bl	800817c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200004c0 	.word	0x200004c0

080026a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <USART2_IRQHandler+0x10>)
 80026ae:	f005 fd65 	bl	800817c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000508 	.word	0x20000508

080026bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <USART3_IRQHandler+0x10>)
 80026c2:	f005 fd5b 	bl	800817c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000550 	.word	0x20000550

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f007 fde6 	bl	800a2d0 <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000c000 	.word	0x2000c000
 8002730:	00000400 	.word	0x00000400
 8002734:	200003e4 	.word	0x200003e4
 8002738:	200015d0 	.word	0x200015d0

0800273c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274e:	f107 0318 	add.w	r3, r7, #24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002766:	463b      	mov	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <MX_TIM2_Init+0xdc>)
 8002774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002778:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <MX_TIM2_Init+0xdc>)
 800277c:	2247      	movs	r2, #71	; 0x47
 800277e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <MX_TIM2_Init+0xdc>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <MX_TIM2_Init+0xdc>)
 8002788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278e:	4b25      	ldr	r3, [pc, #148]	; (8002824 <MX_TIM2_Init+0xdc>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <MX_TIM2_Init+0xdc>)
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800279a:	4822      	ldr	r0, [pc, #136]	; (8002824 <MX_TIM2_Init+0xdc>)
 800279c:	f004 fbe8 	bl	8006f70 <HAL_TIM_Base_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80027a6:	f7ff fd15 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	4619      	mov	r1, r3
 80027b6:	481b      	ldr	r0, [pc, #108]	; (8002824 <MX_TIM2_Init+0xdc>)
 80027b8:	f004 ffe0 	bl	800777c <HAL_TIM_ConfigClockSource>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027c2:	f7ff fd07 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80027c6:	4817      	ldr	r0, [pc, #92]	; (8002824 <MX_TIM2_Init+0xdc>)
 80027c8:	f004 fcda 	bl	8007180 <HAL_TIM_IC_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027d2:	f7ff fcff 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4619      	mov	r1, r3
 80027e4:	480f      	ldr	r0, [pc, #60]	; (8002824 <MX_TIM2_Init+0xdc>)
 80027e6:	f005 fb4b 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80027f0:	f7ff fcf0 	bl	80021d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027f4:	2300      	movs	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027f8:	2301      	movs	r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002804:	463b      	mov	r3, r7
 8002806:	2200      	movs	r2, #0
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <MX_TIM2_Init+0xdc>)
 800280c:	f004 ff1a 	bl	8007644 <HAL_TIM_IC_ConfigChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002816:	f7ff fcdd 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200003e8 	.word	0x200003e8

08002828 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282e:	f107 0318 	add.w	r3, r7, #24
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002846:	463b      	mov	r3, r7
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <MX_TIM3_Init+0xd8>)
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <MX_TIM3_Init+0xdc>)
 8002856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <MX_TIM3_Init+0xd8>)
 800285a:	2247      	movs	r2, #71	; 0x47
 800285c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <MX_TIM3_Init+0xd8>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002864:	4b26      	ldr	r3, [pc, #152]	; (8002900 <MX_TIM3_Init+0xd8>)
 8002866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <MX_TIM3_Init+0xd8>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <MX_TIM3_Init+0xd8>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002878:	4821      	ldr	r0, [pc, #132]	; (8002900 <MX_TIM3_Init+0xd8>)
 800287a:	f004 fb79 	bl	8006f70 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002884:	f7ff fca6 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800288e:	f107 0318 	add.w	r3, r7, #24
 8002892:	4619      	mov	r1, r3
 8002894:	481a      	ldr	r0, [pc, #104]	; (8002900 <MX_TIM3_Init+0xd8>)
 8002896:	f004 ff71 	bl	800777c <HAL_TIM_ConfigClockSource>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80028a0:	f7ff fc98 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80028a4:	4816      	ldr	r0, [pc, #88]	; (8002900 <MX_TIM3_Init+0xd8>)
 80028a6:	f004 fc6b 	bl	8007180 <HAL_TIM_IC_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028b0:	f7ff fc90 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	4619      	mov	r1, r3
 80028c2:	480f      	ldr	r0, [pc, #60]	; (8002900 <MX_TIM3_Init+0xd8>)
 80028c4:	f005 fadc 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80028ce:	f7ff fc81 	bl	80021d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028d6:	2301      	movs	r3, #1
 80028d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028e2:	463b      	mov	r3, r7
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_TIM3_Init+0xd8>)
 80028ea:	f004 feab 	bl	8007644 <HAL_TIM_IC_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80028f4:	f7ff fc6e 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000430 	.word	0x20000430
 8002904:	40000400 	.word	0x40000400

08002908 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	463b      	mov	r3, r7
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <MX_TIM4_Init+0x94>)
 8002926:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <MX_TIM4_Init+0x98>)
 8002928:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_TIM4_Init+0x94>)
 800292c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002930:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_TIM4_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_TIM4_Init+0x94>)
 800293a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_TIM4_Init+0x94>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <MX_TIM4_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <MX_TIM4_Init+0x94>)
 800294e:	f004 fb0f 	bl	8006f70 <HAL_TIM_Base_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002958:	f7ff fc3c 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	4619      	mov	r1, r3
 8002968:	480c      	ldr	r0, [pc, #48]	; (800299c <MX_TIM4_Init+0x94>)
 800296a:	f004 ff07 	bl	800777c <HAL_TIM_ConfigClockSource>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002974:	f7ff fc2e 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002980:	463b      	mov	r3, r7
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_TIM4_Init+0x94>)
 8002986:	f005 fa7b 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002990:	f7ff fc20 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000478 	.word	0x20000478
 80029a0:	40000800 	.word	0x40000800

080029a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0320 	add.w	r3, r7, #32
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d12c      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029f4:	2301      	movs	r3, #1
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0320 	add.w	r3, r7, #32
 8002a04:	4619      	mov	r1, r3
 8002a06:	482e      	ldr	r0, [pc, #184]	; (8002ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8002a08:	f001 f8de 	bl	8003bc8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2105      	movs	r1, #5
 8002a10:	201c      	movs	r0, #28
 8002a12:	f000 fc12 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a16:	201c      	movs	r0, #28
 8002a18:	f000 fc2b 	bl	8003272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a1c:	e04a      	b.n	8002ab4 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_TIM_Base_MspInit+0x120>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d12c      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a23      	ldr	r2, [pc, #140]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	61d3      	str	r3, [r2, #28]
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a58:	2340      	movs	r3, #64	; 0x40
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 0320 	add.w	r3, r7, #32
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4815      	ldr	r0, [pc, #84]	; (8002ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8002a6c:	f001 f8ac 	bl	8003bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2105      	movs	r1, #5
 8002a74:	201d      	movs	r0, #29
 8002a76:	f000 fbe0 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a7a:	201d      	movs	r0, #29
 8002a7c:	f000 fbf9 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 8002a80:	e018      	b.n	8002ab4 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_TIM_Base_MspInit+0x124>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d113      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	61d3      	str	r3, [r2, #28]
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_TIM_Base_MspInit+0x118>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	201e      	movs	r0, #30
 8002aaa:	f000 fbc6 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002aae:	201e      	movs	r0, #30
 8002ab0:	f000 fbdf 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 8002ab4:	bf00      	nop
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40000800 	.word	0x40000800

08002acc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <MX_USART1_UART_Init+0x50>)
 8002ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002af2:	220c      	movs	r2, #12
 8002af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_USART1_UART_Init+0x4c>)
 8002b04:	f005 fa3a 	bl	8007f7c <HAL_UART_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b0e:	f7ff fb61 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200004c0 	.word	0x200004c0
 8002b1c:	40013800 	.word	0x40013800

08002b20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <MX_USART2_UART_Init+0x50>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b58:	f005 fa10 	bl	8007f7c <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b62:	f7ff fb37 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000508 	.word	0x20000508
 8002b70:	40004400 	.word	0x40004400

08002b74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <MX_USART3_UART_Init+0x50>)
 8002b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002bac:	f005 f9e6 	bl	8007f7c <HAL_UART_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bb6:	f7ff fb0d 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000550 	.word	0x20000550
 8002bc4:	40004800 	.word	0x40004800

08002bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a8b      	ldr	r2, [pc, #556]	; (8002e10 <HAL_UART_MspInit+0x248>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f040 8087 	bne.w	8002cf8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	4b8a      	ldr	r3, [pc, #552]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4a89      	ldr	r2, [pc, #548]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6193      	str	r3, [r2, #24]
 8002bf6:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6193      	str	r3, [r2, #24]
 8002c0e:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	487a      	ldr	r0, [pc, #488]	; (8002e18 <HAL_UART_MspInit+0x250>)
 8002c30:	f000 ffca 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 0320 	add.w	r3, r7, #32
 8002c46:	4619      	mov	r1, r3
 8002c48:	4873      	ldr	r0, [pc, #460]	; (8002e18 <HAL_UART_MspInit+0x250>)
 8002c4a:	f000 ffbd 	bl	8003bc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c50:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <HAL_UART_MspInit+0x258>)
 8002c52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c54:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5a:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c60:	4b6e      	ldr	r3, [pc, #440]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c66:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c7e:	4867      	ldr	r0, [pc, #412]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c80:	f000 fb12 	bl	80032a8 <HAL_DMA_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002c8a:	f7ff faa3 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a62      	ldr	r2, [pc, #392]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c94:	4a61      	ldr	r2, [pc, #388]	; (8002e1c <HAL_UART_MspInit+0x254>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c9a:	4b62      	ldr	r3, [pc, #392]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002c9c:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_UART_MspInit+0x260>)
 8002c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ca0:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cac:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb8:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc4:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cca:	4856      	ldr	r0, [pc, #344]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002ccc:	f000 faec 	bl	80032a8 <HAL_DMA_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002cd6:	f7ff fa7d 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_UART_MspInit+0x25c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2105      	movs	r1, #5
 8002cea:	2025      	movs	r0, #37	; 0x25
 8002cec:	f000 faa5 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cf0:	2025      	movs	r0, #37	; 0x25
 8002cf2:	f000 fabe 	bl	8003272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cf6:	e12f      	b.n	8002f58 <HAL_UART_MspInit+0x390>
  else if(uartHandle->Instance==USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	; (8002e2c <HAL_UART_MspInit+0x264>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f040 809e 	bne.w	8002e40 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4a42      	ldr	r2, [pc, #264]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0e:	61d3      	str	r3, [r2, #28]
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_UART_MspInit+0x24c>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d34:	2304      	movs	r3, #4
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	4619      	mov	r1, r3
 8002d46:	4834      	ldr	r0, [pc, #208]	; (8002e18 <HAL_UART_MspInit+0x250>)
 8002d48:	f000 ff3e 	bl	8003bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 0320 	add.w	r3, r7, #32
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	482e      	ldr	r0, [pc, #184]	; (8002e18 <HAL_UART_MspInit+0x250>)
 8002d60:	f000 ff32 	bl	8003bc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_UART_MspInit+0x26c>)
 8002d68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d94:	4826      	ldr	r0, [pc, #152]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002d96:	f000 fa87 	bl	80032a8 <HAL_DMA_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002da0:	f7ff fa18 	bl	80021d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002da8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_UART_MspInit+0x268>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002db2:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <HAL_UART_MspInit+0x274>)
 8002db4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002db8:	2210      	movs	r2, #16
 8002dba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002de0:	4815      	ldr	r0, [pc, #84]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002de2:	f000 fa61 	bl	80032a8 <HAL_DMA_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002dec:	f7ff f9f2 	bl	80021d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_UART_MspInit+0x270>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2105      	movs	r1, #5
 8002e00:	2026      	movs	r0, #38	; 0x26
 8002e02:	f000 fa1a 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e06:	2026      	movs	r0, #38	; 0x26
 8002e08:	f000 fa33 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 8002e0c:	e0a4      	b.n	8002f58 <HAL_UART_MspInit+0x390>
 8002e0e:	bf00      	nop
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010800 	.word	0x40010800
 8002e1c:	20000598 	.word	0x20000598
 8002e20:	40020058 	.word	0x40020058
 8002e24:	200005dc 	.word	0x200005dc
 8002e28:	40020044 	.word	0x40020044
 8002e2c:	40004400 	.word	0x40004400
 8002e30:	20000620 	.word	0x20000620
 8002e34:	4002006c 	.word	0x4002006c
 8002e38:	20000664 	.word	0x20000664
 8002e3c:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_UART_MspInit+0x398>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	f040 8086 	bne.w	8002f58 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e4c:	4b45      	ldr	r3, [pc, #276]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e56:	61d3      	str	r3, [r2, #28]
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a3e      	ldr	r2, [pc, #248]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <HAL_UART_MspInit+0x39c>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 0320 	add.w	r3, r7, #32
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4835      	ldr	r0, [pc, #212]	; (8002f68 <HAL_UART_MspInit+0x3a0>)
 8002e92:	f000 fe99 	bl	8003bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0320 	add.w	r3, r7, #32
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	482f      	ldr	r0, [pc, #188]	; (8002f68 <HAL_UART_MspInit+0x3a0>)
 8002eac:	f000 fe8c 	bl	8003bc8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <HAL_UART_MspInit+0x3a8>)
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ece:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ee0:	4822      	ldr	r0, [pc, #136]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ee2:	f000 f9e1 	bl	80032a8 <HAL_DMA_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8002eec:	f7ff f972 	bl	80021d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_UART_MspInit+0x3a4>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_UART_MspInit+0x3b0>)
 8002f00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f04:	2210      	movs	r2, #16
 8002f06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f2c:	4811      	ldr	r0, [pc, #68]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f2e:	f000 f9bb 	bl	80032a8 <HAL_DMA_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8002f38:	f7ff f94c 	bl	80021d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_UART_MspInit+0x3ac>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	2027      	movs	r0, #39	; 0x27
 8002f4e:	f000 f974 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f52:	2027      	movs	r0, #39	; 0x27
 8002f54:	f000 f98d 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010c00 	.word	0x40010c00
 8002f6c:	200006a8 	.word	0x200006a8
 8002f70:	40020030 	.word	0x40020030
 8002f74:	200006ec 	.word	0x200006ec
 8002f78:	4002001c 	.word	0x4002001c

08002f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f7c:	f7ff fbde 	bl	800273c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f80:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f82:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f84:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f88:	e002      	b.n	8002f90 <LoopCopyDataInit>

08002f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8e:	3304      	adds	r3, #4

08002f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f94:	d3f9      	bcc.n	8002f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f98:	4c09      	ldr	r4, [pc, #36]	; (8002fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f9c:	e001      	b.n	8002fa2 <LoopFillZerobss>

08002f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa0:	3204      	adds	r2, #4

08002fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa4:	d3fb      	bcc.n	8002f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f007 f999 	bl	800a2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002faa:	f7ff f8b1 	bl	8002110 <main>
  bx lr
 8002fae:	4770      	bx	lr
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002fb8:	0800ad88 	.word	0x0800ad88
  ldr r2, =_sbss
 8002fbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002fc0:	200015d0 	.word	0x200015d0

08002fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_2_IRQHandler>
	...

08002fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_Init+0x28>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_Init+0x28>)
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 f923 	bl	8003224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fde:	200f      	movs	r0, #15
 8002fe0:	f000 f808 	bl	8002ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe4:	f7ff fa98 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_InitTick+0x54>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_InitTick+0x58>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300a:	fbb3 f3f1 	udiv	r3, r3, r1
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f93b 	bl	800328e <HAL_SYSTICK_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e00e      	b.n	8003040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d80a      	bhi.n	800303e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003028:	2200      	movs	r2, #0
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f000 f903 	bl	800323a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_InitTick+0x5c>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000008 	.word	0x20000008
 800304c:	20000010 	.word	0x20000010
 8003050:	2000000c 	.word	0x2000000c

08003054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_IncTick+0x1c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_IncTick+0x20>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	4a03      	ldr	r2, [pc, #12]	; (8003074 <HAL_IncTick+0x20>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	20000010 	.word	0x20000010
 8003074:	20000730 	.word	0x20000730

08003078 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <HAL_GetTick+0x10>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000730 	.word	0x20000730

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4906      	ldr	r1, [pc, #24]	; (8003124 <__NVIC_EnableIRQ+0x34>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	; (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	; (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f0:	d301      	bcc.n	80031f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00f      	b.n	8003216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <SysTick_Config+0x40>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fe:	210f      	movs	r1, #15
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f7ff ff90 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <SysTick_Config+0x40>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <SysTick_Config+0x40>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff2d 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324c:	f7ff ff42 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f7ff ff90 	bl	800317c <NVIC_EncodePriority>
 800325c:	4602      	mov	r2, r0
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff5f 	bl	8003128 <__NVIC_SetPriority>
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff35 	bl	80030f0 <__NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffa2 	bl	80031e0 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e059      	b.n	8003372 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_DMA_Init+0xd4>)
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d80f      	bhi.n	80032ea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_DMA_Init+0xd8>)
 80032d2:	4413      	add	r3, r2
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <HAL_DMA_Init+0xdc>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <HAL_DMA_Init+0xe0>)
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032e8:	e00e      	b.n	8003308 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_DMA_Init+0xe4>)
 80032f2:	4413      	add	r3, r2
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_DMA_Init+0xdc>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_DMA_Init+0xe8>)
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800331e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40020407 	.word	0x40020407
 8003380:	bffdfff8 	.word	0xbffdfff8
 8003384:	cccccccd 	.word	0xcccccccd
 8003388:	40020000 	.word	0x40020000
 800338c:	bffdfbf8 	.word	0xbffdfbf8
 8003390:	40020400 	.word	0x40020400

08003394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_DMA_Start_IT+0x20>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e04b      	b.n	800344c <HAL_DMA_Start_IT+0xb8>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d13a      	bne.n	800343e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbbe 	bl	8003b6e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 020e 	orr.w	r2, r2, #14
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e00f      	b.n	800342c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 020a 	orr.w	r2, r2, #10
 800342a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e005      	b.n	800344a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003446:	2302      	movs	r3, #2
 8003448:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d008      	beq.n	800347e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e020      	b.n	80034c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 020e 	bic.w	r2, r2, #14
 800348c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d005      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2204      	movs	r2, #4
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e0d6      	b.n	800369e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020e 	bic.w	r2, r2, #14
 80034fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b64      	ldr	r3, [pc, #400]	; (80036a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003518:	429a      	cmp	r2, r3
 800351a:	d958      	bls.n	80035ce <HAL_DMA_Abort_IT+0x102>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a62      	ldr	r2, [pc, #392]	; (80036ac <HAL_DMA_Abort_IT+0x1e0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d04f      	beq.n	80035c6 <HAL_DMA_Abort_IT+0xfa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a61      	ldr	r2, [pc, #388]	; (80036b0 <HAL_DMA_Abort_IT+0x1e4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d048      	beq.n	80035c2 <HAL_DMA_Abort_IT+0xf6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5f      	ldr	r2, [pc, #380]	; (80036b4 <HAL_DMA_Abort_IT+0x1e8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d040      	beq.n	80035bc <HAL_DMA_Abort_IT+0xf0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5e      	ldr	r2, [pc, #376]	; (80036b8 <HAL_DMA_Abort_IT+0x1ec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d038      	beq.n	80035b6 <HAL_DMA_Abort_IT+0xea>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5c      	ldr	r2, [pc, #368]	; (80036bc <HAL_DMA_Abort_IT+0x1f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d030      	beq.n	80035b0 <HAL_DMA_Abort_IT+0xe4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_DMA_Abort_IT+0x1f4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d028      	beq.n	80035aa <HAL_DMA_Abort_IT+0xde>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_DMA_Abort_IT+0x1dc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d020      	beq.n	80035a4 <HAL_DMA_Abort_IT+0xd8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <HAL_DMA_Abort_IT+0x1f8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d019      	beq.n	80035a0 <HAL_DMA_Abort_IT+0xd4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_DMA_Abort_IT+0x1fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d012      	beq.n	800359c <HAL_DMA_Abort_IT+0xd0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_DMA_Abort_IT+0x200>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00a      	beq.n	8003596 <HAL_DMA_Abort_IT+0xca>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_DMA_Abort_IT+0x204>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d102      	bne.n	8003590 <HAL_DMA_Abort_IT+0xc4>
 800358a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358e:	e01b      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 8003590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003594:	e018      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 8003596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359a:	e015      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 800359c:	2310      	movs	r3, #16
 800359e:	e013      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e011      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a8:	e00e      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ae:	e00b      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b4:	e008      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ba:	e005      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	e002      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035c2:	2310      	movs	r3, #16
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_Abort_IT+0xfc>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4a42      	ldr	r2, [pc, #264]	; (80036d4 <HAL_DMA_Abort_IT+0x208>)
 80035ca:	6053      	str	r3, [r2, #4]
 80035cc:	e057      	b.n	800367e <HAL_DMA_Abort_IT+0x1b2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a36      	ldr	r2, [pc, #216]	; (80036ac <HAL_DMA_Abort_IT+0x1e0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d04f      	beq.n	8003678 <HAL_DMA_Abort_IT+0x1ac>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <HAL_DMA_Abort_IT+0x1e4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d048      	beq.n	8003674 <HAL_DMA_Abort_IT+0x1a8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a33      	ldr	r2, [pc, #204]	; (80036b4 <HAL_DMA_Abort_IT+0x1e8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d040      	beq.n	800366e <HAL_DMA_Abort_IT+0x1a2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <HAL_DMA_Abort_IT+0x1ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d038      	beq.n	8003668 <HAL_DMA_Abort_IT+0x19c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a30      	ldr	r2, [pc, #192]	; (80036bc <HAL_DMA_Abort_IT+0x1f0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d030      	beq.n	8003662 <HAL_DMA_Abort_IT+0x196>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2e      	ldr	r2, [pc, #184]	; (80036c0 <HAL_DMA_Abort_IT+0x1f4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d028      	beq.n	800365c <HAL_DMA_Abort_IT+0x190>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d020      	beq.n	8003656 <HAL_DMA_Abort_IT+0x18a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_DMA_Abort_IT+0x1f8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_DMA_Abort_IT+0x186>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <HAL_DMA_Abort_IT+0x1fc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d012      	beq.n	800364e <HAL_DMA_Abort_IT+0x182>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_DMA_Abort_IT+0x200>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00a      	beq.n	8003648 <HAL_DMA_Abort_IT+0x17c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <HAL_DMA_Abort_IT+0x204>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d102      	bne.n	8003642 <HAL_DMA_Abort_IT+0x176>
 800363c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003640:	e01b      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	e018      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364c:	e015      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 800364e:	2310      	movs	r3, #16
 8003650:	e013      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003652:	2301      	movs	r3, #1
 8003654:	e011      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003656:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800365a:	e00e      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 800365c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003660:	e00b      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	e008      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366c:	e005      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 800366e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003672:	e002      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003674:	2310      	movs	r3, #16
 8003676:	e000      	b.n	800367a <HAL_DMA_Abort_IT+0x1ae>
 8003678:	2301      	movs	r3, #1
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_DMA_Abort_IT+0x20c>)
 800367c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
    } 
  }
  return status;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40020080 	.word	0x40020080
 80036ac:	40020008 	.word	0x40020008
 80036b0:	4002001c 	.word	0x4002001c
 80036b4:	40020030 	.word	0x40020030
 80036b8:	40020044 	.word	0x40020044
 80036bc:	40020058 	.word	0x40020058
 80036c0:	4002006c 	.word	0x4002006c
 80036c4:	40020408 	.word	0x40020408
 80036c8:	4002041c 	.word	0x4002041c
 80036cc:	40020430 	.word	0x40020430
 80036d0:	40020444 	.word	0x40020444
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020000 	.word	0x40020000

080036dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2204      	movs	r2, #4
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80f1 	beq.w	80038e8 <HAL_DMA_IRQHandler+0x20c>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80eb 	beq.w	80038e8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_DMA_IRQHandler+0x1d8>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d958      	bls.n	80037ee <HAL_DMA_IRQHandler+0x112>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5d      	ldr	r2, [pc, #372]	; (80038b8 <HAL_DMA_IRQHandler+0x1dc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04f      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x10a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5c      	ldr	r2, [pc, #368]	; (80038bc <HAL_DMA_IRQHandler+0x1e0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d048      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x106>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a5a      	ldr	r2, [pc, #360]	; (80038c0 <HAL_DMA_IRQHandler+0x1e4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d040      	beq.n	80037dc <HAL_DMA_IRQHandler+0x100>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a59      	ldr	r2, [pc, #356]	; (80038c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d038      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xfa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <HAL_DMA_IRQHandler+0x1ec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d030      	beq.n	80037d0 <HAL_DMA_IRQHandler+0xf4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_DMA_IRQHandler+0x1f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d028      	beq.n	80037ca <HAL_DMA_IRQHandler+0xee>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_DMA_IRQHandler+0x1d8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d020      	beq.n	80037c4 <HAL_DMA_IRQHandler+0xe8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_DMA_IRQHandler+0x1f4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d019      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xe4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a50      	ldr	r2, [pc, #320]	; (80038d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d012      	beq.n	80037bc <HAL_DMA_IRQHandler+0xe0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <HAL_DMA_IRQHandler+0x1fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00a      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xda>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <HAL_DMA_IRQHandler+0x200>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d102      	bne.n	80037b0 <HAL_DMA_IRQHandler+0xd4>
 80037aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ae:	e01b      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037b4:	e018      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ba:	e015      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	e013      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037c0:	2304      	movs	r3, #4
 80037c2:	e011      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037c8:	e00e      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ce:	e00b      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037d4:	e008      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037da:	e005      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e0:	e002      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037e2:	2340      	movs	r3, #64	; 0x40
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_IRQHandler+0x10c>
 80037e6:	2304      	movs	r3, #4
 80037e8:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <HAL_DMA_IRQHandler+0x204>)
 80037ea:	6053      	str	r3, [r2, #4]
 80037ec:	e057      	b.n	800389e <HAL_DMA_IRQHandler+0x1c2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_DMA_IRQHandler+0x1dc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d04f      	beq.n	8003898 <HAL_DMA_IRQHandler+0x1bc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <HAL_DMA_IRQHandler+0x1e0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d048      	beq.n	8003894 <HAL_DMA_IRQHandler+0x1b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2e      	ldr	r2, [pc, #184]	; (80038c0 <HAL_DMA_IRQHandler+0x1e4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d040      	beq.n	800388e <HAL_DMA_IRQHandler+0x1b2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <HAL_DMA_IRQHandler+0x1e8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d038      	beq.n	8003888 <HAL_DMA_IRQHandler+0x1ac>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <HAL_DMA_IRQHandler+0x1ec>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d030      	beq.n	8003882 <HAL_DMA_IRQHandler+0x1a6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_DMA_IRQHandler+0x1f0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d028      	beq.n	800387c <HAL_DMA_IRQHandler+0x1a0>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <HAL_DMA_IRQHandler+0x1d8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d020      	beq.n	8003876 <HAL_DMA_IRQHandler+0x19a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <HAL_DMA_IRQHandler+0x1f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d019      	beq.n	8003872 <HAL_DMA_IRQHandler+0x196>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d012      	beq.n	800386e <HAL_DMA_IRQHandler+0x192>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_DMA_IRQHandler+0x1fc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x18c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a21      	ldr	r2, [pc, #132]	; (80038dc <HAL_DMA_IRQHandler+0x200>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <HAL_DMA_IRQHandler+0x186>
 800385c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003860:	e01b      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003862:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003866:	e018      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386c:	e015      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	e013      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003872:	2304      	movs	r3, #4
 8003874:	e011      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800387a:	e00e      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 800387c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003880:	e00b      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003882:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003886:	e008      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800388c:	e005      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 800388e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003892:	e002      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003894:	2340      	movs	r3, #64	; 0x40
 8003896:	e000      	b.n	800389a <HAL_DMA_IRQHandler+0x1be>
 8003898:	2304      	movs	r3, #4
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <HAL_DMA_IRQHandler+0x208>)
 800389c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8136 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	e130      	b.n	8003b14 <HAL_DMA_IRQHandler+0x438>
 80038b2:	bf00      	nop
 80038b4:	40020080 	.word	0x40020080
 80038b8:	40020008 	.word	0x40020008
 80038bc:	4002001c 	.word	0x4002001c
 80038c0:	40020030 	.word	0x40020030
 80038c4:	40020044 	.word	0x40020044
 80038c8:	40020058 	.word	0x40020058
 80038cc:	4002006c 	.word	0x4002006c
 80038d0:	40020408 	.word	0x40020408
 80038d4:	4002041c 	.word	0x4002041c
 80038d8:	40020430 	.word	0x40020430
 80038dc:	40020444 	.word	0x40020444
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2202      	movs	r2, #2
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80dd 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x3d8>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80d7 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020a 	bic.w	r2, r2, #10
 8003922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <HAL_DMA_IRQHandler+0x444>)
 8003934:	429a      	cmp	r2, r3
 8003936:	d958      	bls.n	80039ea <HAL_DMA_IRQHandler+0x30e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a79      	ldr	r2, [pc, #484]	; (8003b24 <HAL_DMA_IRQHandler+0x448>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04f      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x306>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a78      	ldr	r2, [pc, #480]	; (8003b28 <HAL_DMA_IRQHandler+0x44c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d048      	beq.n	80039de <HAL_DMA_IRQHandler+0x302>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a76      	ldr	r2, [pc, #472]	; (8003b2c <HAL_DMA_IRQHandler+0x450>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d040      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x2fc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_DMA_IRQHandler+0x454>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d038      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x2f6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a73      	ldr	r2, [pc, #460]	; (8003b34 <HAL_DMA_IRQHandler+0x458>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d030      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2f0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_DMA_IRQHandler+0x45c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d028      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x2ea>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a69      	ldr	r2, [pc, #420]	; (8003b20 <HAL_DMA_IRQHandler+0x444>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d020      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x2e4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_DMA_IRQHandler+0x460>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d019      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2e0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_DMA_IRQHandler+0x464>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d012      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x2dc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6b      	ldr	r2, [pc, #428]	; (8003b44 <HAL_DMA_IRQHandler+0x468>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00a      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2d6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <HAL_DMA_IRQHandler+0x46c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d102      	bne.n	80039ac <HAL_DMA_IRQHandler+0x2d0>
 80039a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039aa:	e01b      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	e018      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b6:	e015      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039b8:	2320      	movs	r3, #32
 80039ba:	e013      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039bc:	2302      	movs	r3, #2
 80039be:	e011      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c4:	e00e      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039ca:	e00b      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d0:	e008      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d6:	e005      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039dc:	e002      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039de:	2320      	movs	r3, #32
 80039e0:	e000      	b.n	80039e4 <HAL_DMA_IRQHandler+0x308>
 80039e2:	2302      	movs	r3, #2
 80039e4:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <HAL_DMA_IRQHandler+0x470>)
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e057      	b.n	8003a9a <HAL_DMA_IRQHandler+0x3be>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a4d      	ldr	r2, [pc, #308]	; (8003b24 <HAL_DMA_IRQHandler+0x448>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04f      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x3b8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_DMA_IRQHandler+0x44c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d048      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x3b4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_DMA_IRQHandler+0x450>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x3ae>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a48      	ldr	r2, [pc, #288]	; (8003b30 <HAL_DMA_IRQHandler+0x454>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d038      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x3a8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a47      	ldr	r2, [pc, #284]	; (8003b34 <HAL_DMA_IRQHandler+0x458>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d030      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <HAL_DMA_IRQHandler+0x45c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d028      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x39c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <HAL_DMA_IRQHandler+0x444>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d020      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x396>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <HAL_DMA_IRQHandler+0x460>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x392>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <HAL_DMA_IRQHandler+0x464>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d012      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x38e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <HAL_DMA_IRQHandler+0x468>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x388>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3d      	ldr	r2, [pc, #244]	; (8003b48 <HAL_DMA_IRQHandler+0x46c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x382>
 8003a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a5c:	e01b      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a62:	e018      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a68:	e015      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e013      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e011      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a76:	e00e      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a7c:	e00b      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a82:	e008      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a88:	e005      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a8e:	e002      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a90:	2320      	movs	r3, #32
 8003a92:	e000      	b.n	8003a96 <HAL_DMA_IRQHandler+0x3ba>
 8003a94:	2302      	movs	r3, #2
 8003a96:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <HAL_DMA_IRQHandler+0x474>)
 8003a98:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d034      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ab2:	e02f      	b.n	8003b14 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2208      	movs	r2, #8
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d028      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x43a>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 020e 	bic.w	r2, r2, #14
 8003adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
    }
  }
  return;
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
}
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40020080 	.word	0x40020080
 8003b24:	40020008 	.word	0x40020008
 8003b28:	4002001c 	.word	0x4002001c
 8003b2c:	40020030 	.word	0x40020030
 8003b30:	40020044 	.word	0x40020044
 8003b34:	40020058 	.word	0x40020058
 8003b38:	4002006c 	.word	0x4002006c
 8003b3c:	40020408 	.word	0x40020408
 8003b40:	4002041c 	.word	0x4002041c
 8003b44:	40020430 	.word	0x40020430
 8003b48:	40020444 	.word	0x40020444
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020000 	.word	0x40020000

08003b54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b62:	b2db      	uxtb	r3, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d108      	bne.n	8003bae <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bac:	e007      	b.n	8003bbe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	60da      	str	r2, [r3, #12]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	; 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bda:	e179      	b.n	8003ed0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	f040 8168 	bne.w	8003eca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a96      	ldr	r2, [pc, #600]	; (8003e58 <HAL_GPIO_Init+0x290>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d05e      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c04:	4a94      	ldr	r2, [pc, #592]	; (8003e58 <HAL_GPIO_Init+0x290>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d875      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c0a:	4a94      	ldr	r2, [pc, #592]	; (8003e5c <HAL_GPIO_Init+0x294>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d058      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c10:	4a92      	ldr	r2, [pc, #584]	; (8003e5c <HAL_GPIO_Init+0x294>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d86f      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c16:	4a92      	ldr	r2, [pc, #584]	; (8003e60 <HAL_GPIO_Init+0x298>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d052      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c1c:	4a90      	ldr	r2, [pc, #576]	; (8003e60 <HAL_GPIO_Init+0x298>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d869      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c22:	4a90      	ldr	r2, [pc, #576]	; (8003e64 <HAL_GPIO_Init+0x29c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04c      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c28:	4a8e      	ldr	r2, [pc, #568]	; (8003e64 <HAL_GPIO_Init+0x29c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d863      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c2e:	4a8e      	ldr	r2, [pc, #568]	; (8003e68 <HAL_GPIO_Init+0x2a0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d046      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c34:	4a8c      	ldr	r2, [pc, #560]	; (8003e68 <HAL_GPIO_Init+0x2a0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d85d      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c3a:	2b12      	cmp	r3, #18
 8003c3c:	d82a      	bhi.n	8003c94 <HAL_GPIO_Init+0xcc>
 8003c3e:	2b12      	cmp	r3, #18
 8003c40:	d859      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_GPIO_Init+0x80>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003cc3 	.word	0x08003cc3
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003caf 	.word	0x08003caf
 8003c54:	08003cf1 	.word	0x08003cf1
 8003c58:	08003cf7 	.word	0x08003cf7
 8003c5c:	08003cf7 	.word	0x08003cf7
 8003c60:	08003cf7 	.word	0x08003cf7
 8003c64:	08003cf7 	.word	0x08003cf7
 8003c68:	08003cf7 	.word	0x08003cf7
 8003c6c:	08003cf7 	.word	0x08003cf7
 8003c70:	08003cf7 	.word	0x08003cf7
 8003c74:	08003cf7 	.word	0x08003cf7
 8003c78:	08003cf7 	.word	0x08003cf7
 8003c7c:	08003cf7 	.word	0x08003cf7
 8003c80:	08003cf7 	.word	0x08003cf7
 8003c84:	08003cf7 	.word	0x08003cf7
 8003c88:	08003cf7 	.word	0x08003cf7
 8003c8c:	08003ca5 	.word	0x08003ca5
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_GPIO_Init+0x2a4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c9a:	e02c      	b.n	8003cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	623b      	str	r3, [r7, #32]
          break;
 8003ca2:	e029      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	623b      	str	r3, [r7, #32]
          break;
 8003cac:	e024      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e01f      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	623b      	str	r3, [r7, #32]
          break;
 8003cc0:	e01a      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cca:	2304      	movs	r3, #4
 8003ccc:	623b      	str	r3, [r7, #32]
          break;
 8003cce:	e013      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd8:	2308      	movs	r3, #8
 8003cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	611a      	str	r2, [r3, #16]
          break;
 8003ce2:	e009      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	615a      	str	r2, [r3, #20]
          break;
 8003cee:	e003      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
          break;
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          break;
 8003cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2bff      	cmp	r3, #255	; 0xff
 8003cfc:	d801      	bhi.n	8003d02 <HAL_GPIO_Init+0x13a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	e001      	b.n	8003d06 <HAL_GPIO_Init+0x13e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2bff      	cmp	r3, #255	; 0xff
 8003d0c:	d802      	bhi.n	8003d14 <HAL_GPIO_Init+0x14c>
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	e002      	b.n	8003d1a <HAL_GPIO_Init+0x152>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	3b08      	subs	r3, #8
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	210f      	movs	r1, #15
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80c1 	beq.w	8003eca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a48      	ldr	r2, [pc, #288]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d60:	4a44      	ldr	r2, [pc, #272]	; (8003e74 <HAL_GPIO_Init+0x2ac>)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3c      	ldr	r2, [pc, #240]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01f      	beq.n	8003dcc <HAL_GPIO_Init+0x204>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_GPIO_Init+0x2b4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d019      	beq.n	8003dc8 <HAL_GPIO_Init+0x200>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_GPIO_Init+0x2b8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_GPIO_Init+0x1fc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a39      	ldr	r2, [pc, #228]	; (8003e84 <HAL_GPIO_Init+0x2bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00d      	beq.n	8003dc0 <HAL_GPIO_Init+0x1f8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_GPIO_Init+0x2c0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <HAL_GPIO_Init+0x1f4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <HAL_GPIO_Init+0x2c4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_GPIO_Init+0x1f0>
 8003db4:	2305      	movs	r3, #5
 8003db6:	e00a      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003db8:	2306      	movs	r3, #6
 8003dba:	e008      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	e006      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e004      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e002      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_GPIO_Init+0x206>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	f002 0203 	and.w	r2, r2, #3
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	4093      	lsls	r3, r2
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dde:	4925      	ldr	r1, [pc, #148]	; (8003e74 <HAL_GPIO_Init+0x2ac>)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	3302      	adds	r3, #2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	4924      	ldr	r1, [pc, #144]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	4920      	ldr	r1, [pc, #128]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	491a      	ldr	r1, [pc, #104]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60cb      	str	r3, [r1, #12]
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	4916      	ldr	r1, [pc, #88]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d025      	beq.n	8003e94 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	e025      	b.n	8003ea2 <HAL_GPIO_Init+0x2da>
 8003e56:	bf00      	nop
 8003e58:	10320000 	.word	0x10320000
 8003e5c:	10310000 	.word	0x10310000
 8003e60:	10220000 	.word	0x10220000
 8003e64:	10210000 	.word	0x10210000
 8003e68:	10120000 	.word	0x10120000
 8003e6c:	10110000 	.word	0x10110000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	40011800 	.word	0x40011800
 8003e8c:	40011c00 	.word	0x40011c00
 8003e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	4913      	ldr	r1, [pc, #76]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e006      	b.n	8003eca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4909      	ldr	r1, [pc, #36]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f ae7e 	bne.w	8003bdc <HAL_GPIO_Init+0x14>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	372c      	adds	r7, #44	; 0x2c
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e001      	b.n	8003f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	807b      	strh	r3, [r7, #2]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f2e:	787b      	ldrb	r3, [r7, #1]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f34:	887a      	ldrh	r2, [r7, #2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f3a:	e003      	b.n	8003f44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	041a      	lsls	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e12b      	b.n	80041ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe f884 	bl	8002084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	; 0x24
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f002 ff96 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a81      	ldr	r2, [pc, #516]	; (80041c4 <HAL_I2C_Init+0x274>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d807      	bhi.n	8003fd4 <HAL_I2C_Init+0x84>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a80      	ldr	r2, [pc, #512]	; (80041c8 <HAL_I2C_Init+0x278>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bf94      	ite	ls
 8003fcc:	2301      	movls	r3, #1
 8003fce:	2300      	movhi	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e006      	b.n	8003fe2 <HAL_I2C_Init+0x92>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a7d      	ldr	r2, [pc, #500]	; (80041cc <HAL_I2C_Init+0x27c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0e7      	b.n	80041ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a78      	ldr	r2, [pc, #480]	; (80041d0 <HAL_I2C_Init+0x280>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0c9b      	lsrs	r3, r3, #18
 8003ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a6a      	ldr	r2, [pc, #424]	; (80041c4 <HAL_I2C_Init+0x274>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d802      	bhi.n	8004024 <HAL_I2C_Init+0xd4>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3301      	adds	r3, #1
 8004022:	e009      	b.n	8004038 <HAL_I2C_Init+0xe8>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a69      	ldr	r2, [pc, #420]	; (80041d4 <HAL_I2C_Init+0x284>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	3301      	adds	r3, #1
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800404a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	495c      	ldr	r1, [pc, #368]	; (80041c4 <HAL_I2C_Init+0x274>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d819      	bhi.n	800408c <HAL_I2C_Init+0x13c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e59      	subs	r1, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fbb1 f3f3 	udiv	r3, r1, r3
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	f640 73fc 	movw	r3, #4092	; 0xffc
 800406c:	400b      	ands	r3, r1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_I2C_Init+0x138>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e59      	subs	r1, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004086:	e051      	b.n	800412c <HAL_I2C_Init+0x1dc>
 8004088:	2304      	movs	r3, #4
 800408a:	e04f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d111      	bne.n	80040b8 <HAL_I2C_Init+0x168>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e012      	b.n	80040de <HAL_I2C_Init+0x18e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Init+0x196>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_I2C_Init+0x1dc>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_I2C_Init+0x1bc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e58      	subs	r0, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	440b      	add	r3, r1
 80040fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410a:	e00f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	0099      	lsls	r1, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6809      	ldr	r1, [r1, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800415a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6911      	ldr	r1, [r2, #16]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	000186a0 	.word	0x000186a0
 80041c8:	001e847f 	.word	0x001e847f
 80041cc:	003d08ff 	.word	0x003d08ff
 80041d0:	431bde83 	.word	0x431bde83
 80041d4:	10624dd3 	.word	0x10624dd3

080041d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d103      	bne.n	80041f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  }
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004214:	f7fe ff30 	bl	8003078 <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 80e0 	bne.w	80043e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2319      	movs	r3, #25
 800422e:	2201      	movs	r2, #1
 8004230:	4970      	ldr	r1, [pc, #448]	; (80043f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f002 f80a 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	e0d3      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2C_Master_Transmit+0x50>
 800424c:	2302      	movs	r3, #2
 800424e:	e0cc      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2210      	movs	r2, #16
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042b8:	8979      	ldrh	r1, [r7, #10]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f001 fdcc 	bl	8005e5c <I2C_MasterRequestWrite>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e08d      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042e4:	e066      	b.n	80043b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f002 f8c8 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d107      	bne.n	800430e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06b      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11b      	bne.n	8004388 <HAL_I2C_Master_Transmit+0x188>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d017      	beq.n	8004388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f002 f8bf 	bl	8006510 <I2C_WaitOnBTFFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2b04      	cmp	r3, #4
 800439e:	d107      	bne.n	80043b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01a      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d194      	bne.n	80042e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	00100002 	.word	0x00100002
 80043f8:	ffff0000 	.word	0xffff0000

080043fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	460b      	mov	r3, r1
 800440a:	817b      	strh	r3, [r7, #10]
 800440c:	4613      	mov	r3, r2
 800440e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004414:	f7fe fe30 	bl	8003078 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	f040 824b 	bne.w	80048be <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2319      	movs	r3, #25
 800442e:	2201      	movs	r2, #1
 8004430:	497f      	ldr	r1, [pc, #508]	; (8004630 <HAL_I2C_Master_Receive+0x234>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 ff0a 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
 8004440:	e23e      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_I2C_Master_Receive+0x54>
 800444c:	2302      	movs	r3, #2
 800444e:	e237      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d007      	beq.n	8004476 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2222      	movs	r2, #34	; 0x22
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2210      	movs	r2, #16
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	893a      	ldrh	r2, [r7, #8]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <HAL_I2C_Master_Receive+0x238>)
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f001 fd4e 	bl	8005f60 <I2C_MasterRequestRead>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1f8      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e1cc      	b.n	8004898 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11e      	bne.n	8004544 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004516:	b672      	cpsid	i
}
 8004518:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004540:	b662      	cpsie	i
}
 8004542:	e035      	b.n	80045b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	2b02      	cmp	r3, #2
 800454a:	d11e      	bne.n	800458a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800455c:	b672      	cpsid	i
}
 800455e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004586:	b662      	cpsie	i
}
 8004588:	e012      	b.n	80045b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045b0:	e172      	b.n	8004898 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	f200 811f 	bhi.w	80047fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d123      	bne.n	800460c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f002 f81b 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e173      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a
 800460a:	e145      	b.n	8004898 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	2b02      	cmp	r3, #2
 8004612:	d152      	bne.n	80046ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	4906      	ldr	r1, [pc, #24]	; (8004638 <HAL_I2C_Master_Receive+0x23c>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f001 fe14 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e148      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
 800462e:	bf00      	nop
 8004630:	00100002 	.word	0x00100002
 8004634:	ffff0000 	.word	0xffff0000
 8004638:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800463c:	b672      	cpsid	i
}
 800463e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004682:	b662      	cpsie	i
}
 8004684:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b8:	e0ee      	b.n	8004898 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2200      	movs	r2, #0
 80046c2:	4981      	ldr	r1, [pc, #516]	; (80048c8 <HAL_I2C_Master_Receive+0x4cc>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f001 fdc1 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0f5      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046e4:	b672      	cpsid	i
}
 80046e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800471a:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_I2C_Master_Receive+0x4d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	4a6b      	ldr	r2, [pc, #428]	; (80048d0 <HAL_I2C_Master_Receive+0x4d4>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0a1a      	lsrs	r2, r3, #8
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00da      	lsls	r2, r3, #3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	3b01      	subs	r3, #1
 8004738:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d118      	bne.n	8004772 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004762:	b662      	cpsie	i
}
 8004764:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0a6      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b04      	cmp	r3, #4
 800477e:	d1d9      	bne.n	8004734 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047c2:	b662      	cpsie	i
}
 80047c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047f8:	e04e      	b.n	8004898 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f001 ff00 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e058      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d124      	bne.n	8004898 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f ae88 	bne.w	80045b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00010004 	.word	0x00010004
 80048cc:	20000008 	.word	0x20000008
 80048d0:	14f8b589 	.word	0x14f8b589

080048d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b10      	cmp	r3, #16
 8004902:	d003      	beq.n	800490c <HAL_I2C_EV_IRQHandler+0x38>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	f040 80b1 	bne.w	8004a6e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x6e>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800492c:	d003      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x62>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004934:	d101      	bne.n	800493a <HAL_I2C_EV_IRQHandler+0x66>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x68>
 800493a:	2300      	movs	r3, #0
 800493c:	2b01      	cmp	r3, #1
 800493e:	f000 8114 	beq.w	8004b6a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <HAL_I2C_EV_IRQHandler+0x90>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	2b00      	cmp	r3, #0
 8004954:	d006      	beq.n	8004964 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 fedf 	bl	800671a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fccd 	bl	80052fc <I2C_Master_SB>
 8004962:	e083      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0xac>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fd44 	bl	8005406 <I2C_Master_ADD10>
 800497e:	e075      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0xc8>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fd5f 	bl	8005458 <I2C_Master_ADDR>
 800499a:	e067      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d036      	beq.n	8004a14 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	f000 80db 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_I2C_EV_IRQHandler+0x10a>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_I2C_EV_IRQHandler+0x10a>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f92d 	bl	8004c36 <I2C_MasterTransmit_TXE>
 80049dc:	e046      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80c2 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80bc 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049f6:	7bbb      	ldrb	r3, [r7, #14]
 80049f8:	2b21      	cmp	r3, #33	; 0x21
 80049fa:	d103      	bne.n	8004a04 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f9b6 	bl	8004d6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a02:	e0b4      	b.n	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	f040 80b1 	bne.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa24 	bl	8004e5a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a12:	e0ac      	b.n	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	f000 80a4 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x178>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x178>
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 faa0 	bl	8004f8a <I2C_MasterReceive_RXNE>
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 808b 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8085 	beq.w	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb58 	bl	800511a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6a:	e080      	b.n	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
 8004a6c:	e07f      	b.n	8004b6e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e007      	b.n	8004a90 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d011      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x1ea>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 ff25 	bl	8005906 <I2C_Slave_ADDR>
 8004abc:	e05a      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x206>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ff60 	bl	8005998 <I2C_Slave_STOPF>
 8004ad8:	e04c      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d002      	beq.n	8004ae6 <HAL_I2C_EV_IRQHandler+0x212>
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	2b29      	cmp	r3, #41	; 0x29
 8004ae4:	d120      	bne.n	8004b28 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x238>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x238>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fe42 	bl	800578e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b0a:	e032      	b.n	8004b72 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d02d      	beq.n	8004b72 <HAL_I2C_EV_IRQHandler+0x29e>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d028      	beq.n	8004b72 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fe71 	bl	8005808 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b26:	e024      	b.n	8004b72 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x27a>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x27a>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe7e 	bl	8005848 <I2C_SlaveReceive_RXNE>
 8004b4c:	e012      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 feae 	bl	80058c4 <I2C_SlaveReceive_BTF>
 8004b68:	e004      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d150      	bne.n	8004cfe <I2C_MasterTransmit_TXE+0xc8>
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b21      	cmp	r3, #33	; 0x21
 8004c60:	d14d      	bne.n	8004cfe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d01d      	beq.n	8004ca4 <I2C_MasterTransmit_TXE+0x6e>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d01a      	beq.n	8004ca4 <I2C_MasterTransmit_TXE+0x6e>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c74:	d016      	beq.n	8004ca4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2211      	movs	r2, #17
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ff6c 	bl	8004b7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ca2:	e060      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d107      	bne.n	8004cee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff81 	bl	8004bee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cec:	e03b      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff3f 	bl	8004b7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cfc:	e033      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b21      	cmp	r3, #33	; 0x21
 8004d02:	d005      	beq.n	8004d10 <I2C_MasterTransmit_TXE+0xda>
 8004d04:	7bbb      	ldrb	r3, [r7, #14]
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d12d      	bne.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b22      	cmp	r3, #34	; 0x22
 8004d0e:	d12a      	bne.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d2a:	e01c      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d103      	bne.n	8004d40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f88e 	bl	8004e5a <I2C_MemoryTransmit_TXE_BTF>
}
 8004d3e:	e012      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d64:	e7ff      	b.n	8004d66 <I2C_MasterTransmit_TXE+0x130>
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b21      	cmp	r3, #33	; 0x21
 8004d86:	d164      	bne.n	8004e52 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004db6:	e04c      	b.n	8004e52 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d01d      	beq.n	8004dfa <I2C_MasterTransmit_BTF+0x8c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d01a      	beq.n	8004dfa <I2C_MasterTransmit_BTF+0x8c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dca:	d016      	beq.n	8004dfa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2211      	movs	r2, #17
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fec1 	bl	8004b7a <HAL_I2C_MasterTxCpltCallback>
}
 8004df8:	e02b      	b.n	8004e52 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e08:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e18:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d107      	bne.n	8004e44 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff fed6 	bl	8004bee <HAL_I2C_MemTxCpltCallback>
}
 8004e42:	e006      	b.n	8004e52 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fe94 	bl	8004b7a <HAL_I2C_MasterTxCpltCallback>
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d11d      	bne.n	8004eae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10b      	bne.n	8004e92 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004e90:	e077      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	121b      	asrs	r3, r3, #8
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eac:	e069      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10b      	bne.n	8004ece <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ecc:	e059      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d152      	bne.n	8004f7c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b22      	cmp	r3, #34	; 0x22
 8004eda:	d10d      	bne.n	8004ef8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ef6:	e044      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d015      	beq.n	8004f2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b21      	cmp	r3, #33	; 0x21
 8004f06:	d112      	bne.n	8004f2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f2c:	e029      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d124      	bne.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b21      	cmp	r3, #33	; 0x21
 8004f3c:	d121      	bne.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe3a 	bl	8004bee <HAL_I2C_MemTxCpltCallback>
}
 8004f7a:	e002      	b.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff f92b 	bl	80041d8 <I2C_Flush_DR>
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b22      	cmp	r3, #34	; 0x22
 8004f9c:	f040 80b9 	bne.w	8005112 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d921      	bls.n	8004ff8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	f040 8096 	bne.w	8005112 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ff6:	e08c      	b.n	8005112 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d07f      	beq.n	8005100 <I2C_MasterReceive_RXNE+0x176>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d002      	beq.n	800500c <I2C_MasterReceive_RXNE+0x82>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d179      	bne.n	8005100 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 fac7 	bl	80065a0 <I2C_WaitOnSTOPRequestThroughIT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d14c      	bne.n	80050b2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005026:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005036:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d10a      	bne.n	8005088 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fdbd 	bl	8004c00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005086:	e044      	b.n	8005112 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d002      	beq.n	800509c <I2C_MasterReceive_RXNE+0x112>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b20      	cmp	r3, #32
 800509a:	d103      	bne.n	80050a4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
 80050a2:	e002      	b.n	80050aa <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2212      	movs	r2, #18
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fd6e 	bl	8004b8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050b0:	e02f      	b.n	8005112 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff fd8a 	bl	8004c12 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050fe:	e008      	b.n	8005112 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	605a      	str	r2, [r3, #4]
}
 8005110:	e7ff      	b.n	8005112 <I2C_MasterReceive_RXNE+0x188>
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b04      	cmp	r3, #4
 8005130:	d11b      	bne.n	800516a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005140:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005168:	e0c4      	b.n	80052f4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b03      	cmp	r3, #3
 8005172:	d129      	bne.n	80051c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005182:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00a      	beq.n	80051a0 <I2C_MasterReceive_BTF+0x86>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d007      	beq.n	80051a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051c6:	e095      	b.n	80052f4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d17d      	bne.n	80052ce <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d002      	beq.n	80051de <I2C_MasterReceive_BTF+0xc4>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d108      	bne.n	80051f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e016      	b.n	800521e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d002      	beq.n	80051fc <I2C_MasterReceive_BTF+0xe2>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d108      	bne.n	800520e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e007      	b.n	800521e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005278:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d10a      	bne.n	80052a4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fcaf 	bl	8004c00 <HAL_I2C_MemRxCpltCallback>
}
 80052a2:	e027      	b.n	80052f4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d002      	beq.n	80052b8 <I2C_MasterReceive_BTF+0x19e>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d103      	bne.n	80052c0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
 80052be:	e002      	b.n	80052c6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2212      	movs	r2, #18
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fc60 	bl	8004b8c <HAL_I2C_MasterRxCpltCallback>
}
 80052cc:	e012      	b.n	80052f4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d117      	bne.n	8005340 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005328:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800532a:	e067      	b.n	80053fc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]
}
 800533e:	e05d      	b.n	80053fc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005348:	d133      	bne.n	80053b2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b21      	cmp	r3, #33	; 0x21
 8005354:	d109      	bne.n	800536a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005366:	611a      	str	r2, [r3, #16]
 8005368:	e008      	b.n	800537c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <I2C_Master_SB+0x92>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d032      	beq.n	80053fc <I2C_Master_SB+0x100>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02d      	beq.n	80053fc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ae:	605a      	str	r2, [r3, #4]
}
 80053b0:	e024      	b.n	80053fc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10e      	bne.n	80053d8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	b29b      	uxth	r3, r3
 80053c0:	11db      	asrs	r3, r3, #7
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0306 	and.w	r3, r3, #6
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f063 030f 	orn	r3, r3, #15
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]
}
 80053d6:	e011      	b.n	80053fc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10d      	bne.n	80053fc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	11db      	asrs	r3, r3, #7
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f063 030e 	orn	r3, r3, #14
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	b2da      	uxtb	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <I2C_Master_ADD10+0x26>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <I2C_Master_ADD10+0x48>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	605a      	str	r2, [r3, #4]
  }
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005458:	b480      	push	{r7}
 800545a:	b091      	sub	sp, #68	; 0x44
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b22      	cmp	r3, #34	; 0x22
 8005480:	f040 8174 	bne.w	800576c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10f      	bne.n	80054ac <I2C_Master_ADDR+0x54>
 800548c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10b      	bne.n	80054ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	e16b      	b.n	8005784 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11d      	bne.n	80054f0 <I2C_Master_ADDR+0x98>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054bc:	d118      	bne.n	80054f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50
 80054ee:	e149      	b.n	8005784 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d113      	bne.n	8005522 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054fa:	2300      	movs	r3, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e120      	b.n	8005764 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	f040 808a 	bne.w	8005642 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005534:	d137      	bne.n	80055a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005554:	d113      	bne.n	800557e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005564:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	e0f2      	b.n	8005764 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e0de      	b.n	8005764 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d02e      	beq.n	800560a <I2C_Master_ADDR+0x1b2>
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d02b      	beq.n	800560a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	2b12      	cmp	r3, #18
 80055b6:	d102      	bne.n	80055be <I2C_Master_ADDR+0x166>
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d125      	bne.n	800560a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d00e      	beq.n	80055e2 <I2C_Master_ADDR+0x18a>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d00b      	beq.n	80055e2 <I2C_Master_ADDR+0x18a>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d008      	beq.n	80055e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e007      	b.n	80055f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	e0ac      	b.n	8005764 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561a:	2300      	movs	r3, #0
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e090      	b.n	8005764 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d158      	bne.n	80056fe <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	2b04      	cmp	r3, #4
 8005650:	d021      	beq.n	8005696 <I2C_Master_ADDR+0x23e>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	2b02      	cmp	r3, #2
 8005656:	d01e      	beq.n	8005696 <I2C_Master_ADDR+0x23e>
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	2b10      	cmp	r3, #16
 800565c:	d01b      	beq.n	8005696 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e012      	b.n	80056bc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ca:	d14b      	bne.n	8005764 <I2C_Master_ADDR+0x30c>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056d2:	d00b      	beq.n	80056ec <I2C_Master_ADDR+0x294>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d008      	beq.n	80056ec <I2C_Master_ADDR+0x294>
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d005      	beq.n	80056ec <I2C_Master_ADDR+0x294>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d002      	beq.n	80056ec <I2C_Master_ADDR+0x294>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d13b      	bne.n	8005764 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	e032      	b.n	8005764 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800570c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	d117      	bne.n	800574e <I2C_Master_ADDR+0x2f6>
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005724:	d00b      	beq.n	800573e <I2C_Master_ADDR+0x2e6>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2b01      	cmp	r3, #1
 800572a:	d008      	beq.n	800573e <I2C_Master_ADDR+0x2e6>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b08      	cmp	r3, #8
 8005730:	d005      	beq.n	800573e <I2C_Master_ADDR+0x2e6>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b10      	cmp	r3, #16
 8005736:	d002      	beq.n	800573e <I2C_Master_ADDR+0x2e6>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	2b20      	cmp	r3, #32
 800573c:	d107      	bne.n	800574e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800574c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800576a:	e00b      	b.n	8005784 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576c:	2300      	movs	r3, #0
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
}
 8005782:	e7ff      	b.n	8005784 <I2C_Master_ADDR+0x32c>
 8005784:	bf00      	nop
 8005786:	3744      	adds	r7, #68	; 0x44
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02b      	beq.n	8005800 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d114      	bne.n	8005800 <I2C_SlaveTransmit_TXE+0x72>
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b29      	cmp	r3, #41	; 0x29
 80057da:	d111      	bne.n	8005800 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2221      	movs	r2, #33	; 0x21
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2228      	movs	r2, #40	; 0x28
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f9cf 	bl	8004b9e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d011      	beq.n	800583e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02c      	beq.n	80058bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d114      	bne.n	80058bc <I2C_SlaveReceive_RXNE+0x74>
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b2a      	cmp	r3, #42	; 0x2a
 8005896:	d111      	bne.n	80058bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2222      	movs	r2, #34	; 0x22
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2228      	movs	r2, #40	; 0x28
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff f97a 	bl	8004bb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d012      	beq.n	80058fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005920:	2b28      	cmp	r3, #40	; 0x28
 8005922:	d125      	bne.n	8005970 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	81bb      	strh	r3, [r7, #12]
 8005952:	e002      	b.n	800595a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005962:	89ba      	ldrh	r2, [r7, #12]
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff f92a 	bl	8004bc2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800596e:	e00e      	b.n	800598e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80059b8:	2300      	movs	r3, #0
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f4:	d172      	bne.n	8005adc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b22      	cmp	r3, #34	; 0x22
 80059fa:	d002      	beq.n	8005a02 <I2C_Slave_STOPF+0x6a>
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005a00:	d135      	bne.n	8005a6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0204 	orr.w	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f88a 	bl	8003b54 <HAL_DMA_GetState>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d049      	beq.n	8005ada <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	4a69      	ldr	r2, [pc, #420]	; (8005bf0 <I2C_Slave_STOPF+0x258>)
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd fd3a 	bl	80034cc <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d03d      	beq.n	8005ada <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a6c:	e035      	b.n	8005ada <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0204 	orr.w	r2, r3, #4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe f854 	bl	8003b54 <HAL_DMA_GetState>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d014      	beq.n	8005adc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	4a4e      	ldr	r2, [pc, #312]	; (8005bf0 <I2C_Slave_STOPF+0x258>)
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fd04 	bl	80034cc <HAL_DMA_Abort_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	e000      	b.n	8005adc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ada:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d03e      	beq.n	8005b64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d112      	bne.n	8005b1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d112      	bne.n	8005b4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f843 	bl	8005bf8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b72:	e039      	b.n	8005be8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b2a      	cmp	r3, #42	; 0x2a
 8005b78:	d109      	bne.n	8005b8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2228      	movs	r2, #40	; 0x28
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff f811 	bl	8004bb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b28      	cmp	r3, #40	; 0x28
 8005b98:	d111      	bne.n	8005bbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <I2C_Slave_STOPF+0x25c>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff f810 	bl	8004bdc <HAL_I2C_ListenCpltCallback>
}
 8005bbc:	e014      	b.n	8005be8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	d002      	beq.n	8005bcc <I2C_Slave_STOPF+0x234>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b22      	cmp	r3, #34	; 0x22
 8005bca:	d10d      	bne.n	8005be8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fe ffe4 	bl	8004bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	080060fd 	.word	0x080060fd
 8005bf4:	ffff0000 	.word	0xffff0000

08005bf8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d002      	beq.n	8005c1c <I2C_ITError+0x24>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d10a      	bne.n	8005c32 <I2C_ITError+0x3a>
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b22      	cmp	r3, #34	; 0x22
 8005c20:	d107      	bne.n	8005c32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c38:	2b28      	cmp	r3, #40	; 0x28
 8005c3a:	d107      	bne.n	8005c4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2228      	movs	r2, #40	; 0x28
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c4a:	e015      	b.n	8005c78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5a:	d00a      	beq.n	8005c72 <I2C_ITError+0x7a>
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b60      	cmp	r3, #96	; 0x60
 8005c60:	d007      	beq.n	8005c72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c86:	d162      	bne.n	8005d4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d020      	beq.n	8005ce8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	4a6a      	ldr	r2, [pc, #424]	; (8005e54 <I2C_ITError+0x25c>)
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fd fc0a 	bl	80034cc <HAL_DMA_Abort_IT>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8089 	beq.w	8005dd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4798      	blx	r3
 8005ce6:	e074      	b.n	8005dd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	4a59      	ldr	r2, [pc, #356]	; (8005e54 <I2C_ITError+0x25c>)
 8005cee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fd fbe9 	bl	80034cc <HAL_DMA_Abort_IT>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d068      	beq.n	8005dd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d10b      	bne.n	8005d26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
 8005d4c:	e041      	b.n	8005dd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b60      	cmp	r3, #96	; 0x60
 8005d58:	d125      	bne.n	8005da6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d10b      	bne.n	8005d8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fe ff40 	bl	8004c24 <HAL_I2C_AbortCpltCallback>
 8005da4:	e015      	b.n	8005dd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d10b      	bne.n	8005dcc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fe ff20 	bl	8004c12 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10e      	bne.n	8005e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d113      	bne.n	8005e4c <I2C_ITError+0x254>
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b28      	cmp	r3, #40	; 0x28
 8005e28:	d110      	bne.n	8005e4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <I2C_ITError+0x260>)
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fe fec8 	bl	8004bdc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	080060fd 	.word	0x080060fd
 8005e58:	ffff0000 	.word	0xffff0000

08005e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d006      	beq.n	8005e86 <I2C_MasterRequestWrite+0x2a>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d003      	beq.n	8005e86 <I2C_MasterRequestWrite+0x2a>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e84:	d108      	bne.n	8005e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e00b      	b.n	8005eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	2b12      	cmp	r3, #18
 8005e9e:	d107      	bne.n	8005eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f9c5 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d103      	bne.n	8005ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e035      	b.n	8005f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eec:	d108      	bne.n	8005f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eee:	897b      	ldrh	r3, [r7, #10]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e01b      	b.n	8005f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f00:	897b      	ldrh	r3, [r7, #10]
 8005f02:	11db      	asrs	r3, r3, #7
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0306 	and.w	r3, r3, #6
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f063 030f 	orn	r3, r3, #15
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <I2C_MasterRequestWrite+0xfc>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa0e 	bl	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e010      	b.n	8005f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4907      	ldr	r1, [pc, #28]	; (8005f5c <I2C_MasterRequestWrite+0x100>)
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f9fe 	bl	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	00010008 	.word	0x00010008
 8005f5c:	00010002 	.word	0x00010002

08005f60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d006      	beq.n	8005f9a <I2C_MasterRequestRead+0x3a>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d003      	beq.n	8005f9a <I2C_MasterRequestRead+0x3a>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f98:	d108      	bne.n	8005fac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e00b      	b.n	8005fc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	2b11      	cmp	r3, #17
 8005fb2:	d107      	bne.n	8005fc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f93b 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fea:	d103      	bne.n	8005ff4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e079      	b.n	80060ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006000:	d108      	bne.n	8006014 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]
 8006012:	e05f      	b.n	80060d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006014:	897b      	ldrh	r3, [r7, #10]
 8006016:	11db      	asrs	r3, r3, #7
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 0306 	and.w	r3, r3, #6
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f063 030f 	orn	r3, r3, #15
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4930      	ldr	r1, [pc, #192]	; (80060f4 <I2C_MasterRequestRead+0x194>)
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f984 	bl	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e054      	b.n	80060ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006042:	897b      	ldrh	r3, [r7, #10]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4929      	ldr	r1, [pc, #164]	; (80060f8 <I2C_MasterRequestRead+0x198>)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f974 	bl	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e044      	b.n	80060ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006086:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f8d9 	bl	800624c <I2C_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	d103      	bne.n	80060b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e017      	b.n	80060ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80060bc:	897b      	ldrh	r3, [r7, #10]
 80060be:	11db      	asrs	r3, r3, #7
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0306 	and.w	r3, r3, #6
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f063 030e 	orn	r3, r3, #14
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	4907      	ldr	r1, [pc, #28]	; (80060f8 <I2C_MasterRequestRead+0x198>)
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f930 	bl	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	00010008 	.word	0x00010008
 80060f8:	00010002 	.word	0x00010002

080060fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006116:	4b4b      	ldr	r3, [pc, #300]	; (8006244 <I2C_DMAAbort+0x148>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	08db      	lsrs	r3, r3, #3
 800611c:	4a4a      	ldr	r2, [pc, #296]	; (8006248 <I2C_DMAAbort+0x14c>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	0a1a      	lsrs	r2, r3, #8
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00da      	lsls	r2, r3, #3
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006142:	e00a      	b.n	800615a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b01      	subs	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d0ea      	beq.n	8006130 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	2200      	movs	r2, #0
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006188:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	2200      	movs	r2, #0
 800619e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d10e      	bne.n	80061ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f7fe fd1e 	bl	8004c24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061e8:	e027      	b.n	800623a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061f0:	2b28      	cmp	r3, #40	; 0x28
 80061f2:	d117      	bne.n	8006224 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006212:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2228      	movs	r2, #40	; 0x28
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006222:	e007      	b.n	8006234 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006234:	6978      	ldr	r0, [r7, #20]
 8006236:	f7fe fcec 	bl	8004c12 <HAL_I2C_ErrorCallback>
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000008 	.word	0x20000008
 8006248:	14f8b589 	.word	0x14f8b589

0800624c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800625c:	e048      	b.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d044      	beq.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7fc ff07 	bl	8003078 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d302      	bcc.n	800627c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d139      	bne.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10d      	bne.n	80062a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	43da      	mvns	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	e00c      	b.n	80062bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	43da      	mvns	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d116      	bne.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e023      	b.n	8006338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10d      	bne.n	8006316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	43da      	mvns	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	e00c      	b.n	8006330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	43da      	mvns	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	429a      	cmp	r2, r3
 8006334:	d093      	beq.n	800625e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800634e:	e071      	b.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635e:	d123      	bne.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e067      	b.n	8006478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d041      	beq.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fc fe62 	bl	8003078 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d136      	bne.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10c      	bne.n	80063ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	43da      	mvns	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e00b      	b.n	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	43da      	mvns	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4013      	ands	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	f043 0220 	orr.w	r2, r3, #32
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e021      	b.n	8006478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10c      	bne.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	43da      	mvns	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e00b      	b.n	8006470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	43da      	mvns	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4013      	ands	r3, r2
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f af6d 	bne.w	8006350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648c:	e034      	b.n	80064f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f915 	bl	80066be <I2C_IsAcknowledgeFailed>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e034      	b.n	8006508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d028      	beq.n	80064f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fc fde7 	bl	8003078 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11d      	bne.n	80064f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b80      	cmp	r3, #128	; 0x80
 80064c8:	d016      	beq.n	80064f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e007      	b.n	8006508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d1c3      	bne.n	800648e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800651c:	e034      	b.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f8cd 	bl	80066be <I2C_IsAcknowledgeFailed>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e034      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d028      	beq.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fc fd9f 	bl	8003078 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11d      	bne.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b04      	cmp	r3, #4
 8006558:	d016      	beq.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e007      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b04      	cmp	r3, #4
 8006594:	d1c3      	bne.n	800651e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	08db      	lsrs	r3, r3, #3
 80065b2:	4a13      	ldr	r2, [pc, #76]	; (8006600 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	0a1a      	lsrs	r2, r3, #8
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f043 0220 	orr.w	r2, r3, #32
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e008      	b.n	80065f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d0e9      	beq.n	80065c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000008 	.word	0x20000008
 8006600:	14f8b589 	.word	0x14f8b589

08006604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006610:	e049      	b.n	80066a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d119      	bne.n	8006654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0210 	mvn.w	r2, #16
 8006628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e030      	b.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006654:	f7fc fd10 	bl	8003078 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11d      	bne.n	80066a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d016      	beq.n	80066a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f043 0220 	orr.w	r2, r3, #32
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e007      	b.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b40      	cmp	r3, #64	; 0x40
 80066b2:	d1ae      	bne.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d11b      	bne.n	800670e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f043 0204 	orr.w	r2, r3, #4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800672a:	d103      	bne.n	8006734 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006732:	e007      	b.n	8006744 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800673c:	d102      	bne.n	8006744 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2208      	movs	r2, #8
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr
	...

08006750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e272      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8087 	beq.w	800687e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006770:	4b92      	ldr	r3, [pc, #584]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b04      	cmp	r3, #4
 800677a:	d00c      	beq.n	8006796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800677c:	4b8f      	ldr	r3, [pc, #572]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d112      	bne.n	80067ae <HAL_RCC_OscConfig+0x5e>
 8006788:	4b8c      	ldr	r3, [pc, #560]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006794:	d10b      	bne.n	80067ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006796:	4b89      	ldr	r3, [pc, #548]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d06c      	beq.n	800687c <HAL_RCC_OscConfig+0x12c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d168      	bne.n	800687c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e24c      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b6:	d106      	bne.n	80067c6 <HAL_RCC_OscConfig+0x76>
 80067b8:	4b80      	ldr	r3, [pc, #512]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a7f      	ldr	r2, [pc, #508]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	e02e      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x98>
 80067ce:	4b7b      	ldr	r3, [pc, #492]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a7a      	ldr	r2, [pc, #488]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4b78      	ldr	r3, [pc, #480]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a77      	ldr	r2, [pc, #476]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e01d      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0xbc>
 80067f2:	4b72      	ldr	r3, [pc, #456]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a71      	ldr	r2, [pc, #452]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b6f      	ldr	r3, [pc, #444]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e00b      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 800680c:	4b6b      	ldr	r3, [pc, #428]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6a      	ldr	r2, [pc, #424]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b68      	ldr	r3, [pc, #416]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a67      	ldr	r2, [pc, #412]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800681e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc fc24 	bl	8003078 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006834:	f7fc fc20 	bl	8003078 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	; 0x64
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e200      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b5d      	ldr	r3, [pc, #372]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0xe4>
 8006852:	e014      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fc fc10 	bl	8003078 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800685c:	f7fc fc0c 	bl	8003078 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b64      	cmp	r3, #100	; 0x64
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e1ec      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x10c>
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d063      	beq.n	8006952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800688a:	4b4c      	ldr	r3, [pc, #304]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006896:	4b49      	ldr	r3, [pc, #292]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d11c      	bne.n	80068dc <HAL_RCC_OscConfig+0x18c>
 80068a2:	4b46      	ldr	r3, [pc, #280]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d116      	bne.n	80068dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ae:	4b43      	ldr	r3, [pc, #268]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_RCC_OscConfig+0x176>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e1c0      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4939      	ldr	r1, [pc, #228]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	e03a      	b.n	8006952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e4:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <HAL_RCC_OscConfig+0x270>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fc fbc5 	bl	8003078 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fc fbc1 	bl	8003078 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1a1      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006904:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b2a      	ldr	r3, [pc, #168]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4927      	ldr	r1, [pc, #156]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
 8006924:	e015      	b.n	8006952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006926:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <HAL_RCC_OscConfig+0x270>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fc fba4 	bl	8003078 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fc fba0 	bl	8003078 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e180      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d03a      	beq.n	80069d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_RCC_OscConfig+0x274>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800696c:	f7fc fb84 	bl	8003078 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006974:	f7fc fb80 	bl	8003078 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e160      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006992:	2001      	movs	r0, #1
 8006994:	f000 face 	bl	8006f34 <RCC_Delay>
 8006998:	e01c      	b.n	80069d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCC_OscConfig+0x274>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a0:	f7fc fb6a 	bl	8003078 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a6:	e00f      	b.n	80069c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a8:	f7fc fb66 	bl	8003078 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d908      	bls.n	80069c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e146      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
 80069ba:	bf00      	nop
 80069bc:	40021000 	.word	0x40021000
 80069c0:	42420000 	.word	0x42420000
 80069c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c8:	4b92      	ldr	r3, [pc, #584]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e9      	bne.n	80069a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80a6 	beq.w	8006b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e6:	4b8b      	ldr	r3, [pc, #556]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f2:	4b88      	ldr	r3, [pc, #544]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4a87      	ldr	r2, [pc, #540]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	61d3      	str	r3, [r2, #28]
 80069fe:	4b85      	ldr	r3, [pc, #532]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0e:	4b82      	ldr	r3, [pc, #520]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d118      	bne.n	8006a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7e      	ldr	r2, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a26:	f7fc fb27 	bl	8003078 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2e:	f7fc fb23 	bl	8003078 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b64      	cmp	r3, #100	; 0x64
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e103      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a40:	4b75      	ldr	r3, [pc, #468]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d106      	bne.n	8006a62 <HAL_RCC_OscConfig+0x312>
 8006a54:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	4a6e      	ldr	r2, [pc, #440]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6213      	str	r3, [r2, #32]
 8006a60:	e02d      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0x334>
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4a69      	ldr	r2, [pc, #420]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	6213      	str	r3, [r2, #32]
 8006a76:	4b67      	ldr	r3, [pc, #412]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a66      	ldr	r2, [pc, #408]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	6213      	str	r3, [r2, #32]
 8006a82:	e01c      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x356>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	4a60      	ldr	r2, [pc, #384]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	6213      	str	r3, [r2, #32]
 8006a98:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	4a5d      	ldr	r2, [pc, #372]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6213      	str	r3, [r2, #32]
 8006aa4:	e00b      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006aa6:	4b5b      	ldr	r3, [pc, #364]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4a5a      	ldr	r2, [pc, #360]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	6213      	str	r3, [r2, #32]
 8006ab2:	4b58      	ldr	r3, [pc, #352]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	4a57      	ldr	r2, [pc, #348]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d015      	beq.n	8006af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac6:	f7fc fad7 	bl	8003078 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fc fad3 	bl	8003078 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0b1      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae4:	4b4b      	ldr	r3, [pc, #300]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ee      	beq.n	8006ace <HAL_RCC_OscConfig+0x37e>
 8006af0:	e014      	b.n	8006b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af2:	f7fc fac1 	bl	8003078 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af8:	e00a      	b.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fc fabd 	bl	8003078 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e09b      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b10:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ee      	bne.n	8006afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d105      	bne.n	8006b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b22:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4a3b      	ldr	r2, [pc, #236]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8087 	beq.w	8006c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d061      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d146      	bne.n	8006bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4c:	4b33      	ldr	r3, [pc, #204]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fc fa91 	bl	8003078 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5a:	f7fc fa8d 	bl	8003078 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e06d      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b6c:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f0      	bne.n	8006b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d108      	bne.n	8006b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4921      	ldr	r1, [pc, #132]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a19      	ldr	r1, [r3, #32]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	491b      	ldr	r1, [pc, #108]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fc fa61 	bl	8003078 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bba:	f7fc fa5d 	bl	8003078 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e03d      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x46a>
 8006bd8:	e035      	b.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bda:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fc fa4a 	bl	8003078 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fc fa46 	bl	8003078 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e026      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bfa:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x498>
 8006c06:	e01e      	b.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e019      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
 8006c14:	40021000 	.word	0x40021000
 8006c18:	40007000 	.word	0x40007000
 8006c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_OscConfig+0x500>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d001      	beq.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40021000 	.word	0x40021000

08006c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0d0      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c68:	4b6a      	ldr	r3, [pc, #424]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d910      	bls.n	8006c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c76:	4b67      	ldr	r3, [pc, #412]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 0207 	bic.w	r2, r3, #7
 8006c7e:	4965      	ldr	r1, [pc, #404]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c86:	4b63      	ldr	r3, [pc, #396]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0b8      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cb0:	4b59      	ldr	r3, [pc, #356]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a58      	ldr	r2, [pc, #352]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc8:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a52      	ldr	r2, [pc, #328]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd4:	4b50      	ldr	r3, [pc, #320]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	494d      	ldr	r1, [pc, #308]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d040      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cfa:	4b47      	ldr	r3, [pc, #284]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d115      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e07f      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d12:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e073      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d22:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e06b      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d32:	4b39      	ldr	r3, [pc, #228]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4936      	ldr	r1, [pc, #216]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d44:	f7fc f998 	bl	8003078 <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4c:	f7fc f994 	bl	8003078 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e053      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d62:	4b2d      	ldr	r3, [pc, #180]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 020c 	and.w	r2, r3, #12
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d1eb      	bne.n	8006d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d210      	bcs.n	8006da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 0207 	bic.w	r2, r3, #7
 8006d8a:	4922      	ldr	r1, [pc, #136]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e032      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4916      	ldr	r1, [pc, #88]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	490e      	ldr	r1, [pc, #56]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006de2:	f000 f821 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	490a      	ldr	r1, [pc, #40]	; (8006e1c <HAL_RCC_ClockConfig+0x1c8>)
 8006df4:	5ccb      	ldrb	r3, [r1, r3]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1cc>)
 8006dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCC_ClockConfig+0x1d0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fc f8f6 	bl	8002ff4 <HAL_InitTick>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40022000 	.word	0x40022000
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	0800ad20 	.word	0x0800ad20
 8006e20:	20000008 	.word	0x20000008
 8006e24:	2000000c 	.word	0x2000000c

08006e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e42:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x30>
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d003      	beq.n	8006e5e <HAL_RCC_GetSysClockFreq+0x36>
 8006e56:	e027      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e5a:	613b      	str	r3, [r7, #16]
      break;
 8006e5c:	e027      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	0c9b      	lsrs	r3, r3, #18
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
 8006e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	0c5b      	lsrs	r3, r3, #17
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e82:	5cd3      	ldrb	r3, [r2, r3]
 8006e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e8a:	fb03 f202 	mul.w	r2, r3, r2
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e004      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0c      	ldr	r2, [pc, #48]	; (8006ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	613b      	str	r3, [r7, #16]
      break;
 8006ea6:	e002      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006eaa:	613b      	str	r3, [r7, #16]
      break;
 8006eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eae:	693b      	ldr	r3, [r7, #16]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	007a1200 	.word	0x007a1200
 8006ec4:	0800ad38 	.word	0x0800ad38
 8006ec8:	0800ad48 	.word	0x0800ad48
 8006ecc:	003d0900 	.word	0x003d0900

08006ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	20000008 	.word	0x20000008

08006ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ee8:	f7ff fff2 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006eec:	4602      	mov	r2, r0
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	4903      	ldr	r1, [pc, #12]	; (8006f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006efa:	5ccb      	ldrb	r3, [r1, r3]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40021000 	.word	0x40021000
 8006f08:	0800ad30 	.word	0x0800ad30

08006f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f10:	f7ff ffde 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	0adb      	lsrs	r3, r3, #11
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	4903      	ldr	r1, [pc, #12]	; (8006f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	0800ad30 	.word	0x0800ad30

08006f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <RCC_Delay+0x34>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <RCC_Delay+0x38>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	0a5b      	lsrs	r3, r3, #9
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f50:	bf00      	nop
  }
  while (Delay --);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1e5a      	subs	r2, r3, #1
 8006f56:	60fa      	str	r2, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f9      	bne.n	8006f50 <RCC_Delay+0x1c>
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr
 8006f68:	20000008 	.word	0x20000008
 8006f6c:	10624dd3 	.word	0x10624dd3

08006f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e041      	b.n	8007006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fb fd04 	bl	80029a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f000 fd0c 	bl	80079cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d001      	beq.n	8007028 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e03c      	b.n	80070a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1d      	ldr	r2, [pc, #116]	; (80070ac <HAL_TIM_Base_Start+0x9c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d018      	beq.n	800706c <HAL_TIM_Base_Start+0x5c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <HAL_TIM_Base_Start+0xa0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <HAL_TIM_Base_Start+0x5c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704c:	d00e      	beq.n	800706c <HAL_TIM_Base_Start+0x5c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <HAL_TIM_Base_Start+0xa4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_TIM_Base_Start+0x5c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <HAL_TIM_Base_Start+0xa8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <HAL_TIM_Base_Start+0x5c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <HAL_TIM_Base_Start+0xac>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d111      	bne.n	8007090 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b06      	cmp	r3, #6
 800707c:	d010      	beq.n	80070a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708e:	e007      	b.n	80070a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40013400 	.word	0x40013400
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00

080070c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e044      	b.n	8007162 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1d      	ldr	r2, [pc, #116]	; (800716c <HAL_TIM_Base_Start_IT+0xac>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d018      	beq.n	800712c <HAL_TIM_Base_Start_IT+0x6c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_TIM_Base_Start_IT+0xb0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <HAL_TIM_Base_Start_IT+0x6c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710c:	d00e      	beq.n	800712c <HAL_TIM_Base_Start_IT+0x6c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a18      	ldr	r2, [pc, #96]	; (8007174 <HAL_TIM_Base_Start_IT+0xb4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d009      	beq.n	800712c <HAL_TIM_Base_Start_IT+0x6c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_TIM_Base_Start_IT+0xb8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d004      	beq.n	800712c <HAL_TIM_Base_Start_IT+0x6c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_TIM_Base_Start_IT+0xbc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d111      	bne.n	8007150 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b06      	cmp	r3, #6
 800713c:	d010      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0201 	orr.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714e:	e007      	b.n	8007160 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40013400 	.word	0x40013400
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800
 800717c:	40000c00 	.word	0x40000c00

08007180 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e041      	b.n	8007216 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f839 	bl	800721e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f000 fc04 	bl	80079cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_TIM_IC_Start_IT+0x1e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724a:	b2db      	uxtb	r3, r3
 800724c:	e013      	b.n	8007276 <HAL_TIM_IC_Start_IT+0x46>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d104      	bne.n	800725e <HAL_TIM_IC_Start_IT+0x2e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e00b      	b.n	8007276 <HAL_TIM_IC_Start_IT+0x46>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d104      	bne.n	800726e <HAL_TIM_IC_Start_IT+0x3e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726a:	b2db      	uxtb	r3, r3
 800726c:	e003      	b.n	8007276 <HAL_TIM_IC_Start_IT+0x46>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007274:	b2db      	uxtb	r3, r3
 8007276:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <HAL_TIM_IC_Start_IT+0x58>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e013      	b.n	80072b0 <HAL_TIM_IC_Start_IT+0x80>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d104      	bne.n	8007298 <HAL_TIM_IC_Start_IT+0x68>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e00b      	b.n	80072b0 <HAL_TIM_IC_Start_IT+0x80>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b08      	cmp	r3, #8
 800729c:	d104      	bne.n	80072a8 <HAL_TIM_IC_Start_IT+0x78>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e003      	b.n	80072b0 <HAL_TIM_IC_Start_IT+0x80>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d102      	bne.n	80072be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80072b8:	7b7b      	ldrb	r3, [r7, #13]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d001      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e0c2      	b.n	8007448 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_IC_Start_IT+0xa2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	e013      	b.n	80072fa <HAL_TIM_IC_Start_IT+0xca>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_IC_Start_IT+0xb2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	e00b      	b.n	80072fa <HAL_TIM_IC_Start_IT+0xca>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_IC_Start_IT+0xc2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f0:	e003      	b.n	80072fa <HAL_TIM_IC_Start_IT+0xca>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_TIM_IC_Start_IT+0xda>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007308:	e013      	b.n	8007332 <HAL_TIM_IC_Start_IT+0x102>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d104      	bne.n	800731a <HAL_TIM_IC_Start_IT+0xea>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007318:	e00b      	b.n	8007332 <HAL_TIM_IC_Start_IT+0x102>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d104      	bne.n	800732a <HAL_TIM_IC_Start_IT+0xfa>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007328:	e003      	b.n	8007332 <HAL_TIM_IC_Start_IT+0x102>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b0c      	cmp	r3, #12
 8007336:	d841      	bhi.n	80073bc <HAL_TIM_IC_Start_IT+0x18c>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <HAL_TIM_IC_Start_IT+0x110>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007375 	.word	0x08007375
 8007344:	080073bd 	.word	0x080073bd
 8007348:	080073bd 	.word	0x080073bd
 800734c:	080073bd 	.word	0x080073bd
 8007350:	08007387 	.word	0x08007387
 8007354:	080073bd 	.word	0x080073bd
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080073bd 	.word	0x080073bd
 8007360:	08007399 	.word	0x08007399
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073bd 	.word	0x080073bd
 800736c:	080073bd 	.word	0x080073bd
 8007370:	080073ab 	.word	0x080073ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0202 	orr.w	r2, r2, #2
 8007382:	60da      	str	r2, [r3, #12]
      break;
 8007384:	e01d      	b.n	80073c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0204 	orr.w	r2, r2, #4
 8007394:	60da      	str	r2, [r3, #12]
      break;
 8007396:	e014      	b.n	80073c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0208 	orr.w	r2, r2, #8
 80073a6:	60da      	str	r2, [r3, #12]
      break;
 80073a8:	e00b      	b.n	80073c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0210 	orr.w	r2, r2, #16
 80073b8:	60da      	str	r2, [r3, #12]
      break;
 80073ba:	e002      	b.n	80073c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d13e      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fd30 	bl	8007e36 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_TIM_IC_Start_IT+0x220>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_TIM_IC_Start_IT+0x1e2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_TIM_IC_Start_IT+0x224>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_TIM_IC_Start_IT+0x1e2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f2:	d00e      	beq.n	8007412 <HAL_TIM_IC_Start_IT+0x1e2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <HAL_TIM_IC_Start_IT+0x228>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_TIM_IC_Start_IT+0x1e2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a16      	ldr	r2, [pc, #88]	; (800745c <HAL_TIM_IC_Start_IT+0x22c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIM_IC_Start_IT+0x1e2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a14      	ldr	r2, [pc, #80]	; (8007460 <HAL_TIM_IC_Start_IT+0x230>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d111      	bne.n	8007436 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d010      	beq.n	8007446 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007434:	e007      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40013400 	.word	0x40013400
 8007458:	40000400 	.word	0x40000400
 800745c:	40000800 	.word	0x40000800
 8007460:	40000c00 	.word	0x40000c00

08007464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d020      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0202 	mvn.w	r2, #2
 8007498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fa ff1e 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa6c 	bl	8007994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa72 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d020      	beq.n	8007514 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01b      	beq.n	8007514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0204 	mvn.w	r2, #4
 80074e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fa fef8 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8007500:	e005      	b.n	800750e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa46 	bl	8007994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fa4c 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d020      	beq.n	8007560 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0208 	mvn.w	r2, #8
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa fed2 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa20 	bl	8007994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fa26 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0310 	and.w	r3, r3, #16
 8007566:	2b00      	cmp	r3, #0
 8007568:	d020      	beq.n	80075ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01b      	beq.n	80075ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0210 	mvn.w	r2, #16
 800757c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2208      	movs	r2, #8
 8007582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa feac 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8007598:	e005      	b.n	80075a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f9fa 	bl	8007994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fa00 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0201 	mvn.w	r2, #1
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa f8d8 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fcbb 	bl	8007f6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f9d0 	bl	80079b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0220 	mvn.w	r2, #32
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fc8e 	bl	8007f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_TIM_IC_ConfigChannel+0x1e>
 800765e:	2302      	movs	r3, #2
 8007660:	e088      	b.n	8007774 <HAL_TIM_IC_ConfigChannel+0x130>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007680:	f000 fa2a 	bl	8007ad8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 020c 	bic.w	r2, r2, #12
 8007692:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6999      	ldr	r1, [r3, #24]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	689a      	ldr	r2, [r3, #8]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	619a      	str	r2, [r3, #24]
 80076a6:	e060      	b.n	800776a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d11c      	bne.n	80076e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80076be:	f000 fa9f 	bl	8007c00 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6999      	ldr	r1, [r3, #24]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	021a      	lsls	r2, r3, #8
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	619a      	str	r2, [r3, #24]
 80076e6:	e040      	b.n	800776a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d11b      	bne.n	8007726 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076fe:	f000 faea 	bl	8007cd6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 020c 	bic.w	r2, r2, #12
 8007710:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69d9      	ldr	r1, [r3, #28]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	61da      	str	r2, [r3, #28]
 8007724:	e021      	b.n	800776a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b0c      	cmp	r3, #12
 800772a:	d11c      	bne.n	8007766 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800773c:	f000 fb06 	bl	8007d4c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800774e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69d9      	ldr	r1, [r3, #28]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	021a      	lsls	r2, r3, #8
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	61da      	str	r2, [r3, #28]
 8007764:	e001      	b.n	800776a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIM_ConfigClockSource+0x1c>
 8007794:	2302      	movs	r3, #2
 8007796:	e0b4      	b.n	8007902 <HAL_TIM_ConfigClockSource+0x186>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d0:	d03e      	beq.n	8007850 <HAL_TIM_ConfigClockSource+0xd4>
 80077d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d6:	f200 8087 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 80077da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077de:	f000 8086 	beq.w	80078ee <HAL_TIM_ConfigClockSource+0x172>
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e6:	d87f      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 80077e8:	2b70      	cmp	r3, #112	; 0x70
 80077ea:	d01a      	beq.n	8007822 <HAL_TIM_ConfigClockSource+0xa6>
 80077ec:	2b70      	cmp	r3, #112	; 0x70
 80077ee:	d87b      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b60      	cmp	r3, #96	; 0x60
 80077f2:	d050      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x11a>
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d877      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b50      	cmp	r3, #80	; 0x50
 80077fa:	d03c      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0xfa>
 80077fc:	2b50      	cmp	r3, #80	; 0x50
 80077fe:	d873      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d058      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d86f      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d064      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x15a>
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	d86b      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007810:	2b20      	cmp	r3, #32
 8007812:	d060      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d867      	bhi.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d05c      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x15a>
 800781c:	2b10      	cmp	r3, #16
 800781e:	d05a      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007820:	e062      	b.n	80078e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007832:	f000 fae1 	bl	8007df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	609a      	str	r2, [r3, #8]
      break;
 800784e:	e04f      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007860:	f000 faca 	bl	8007df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007872:	609a      	str	r2, [r3, #8]
      break;
 8007874:	e03c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	461a      	mov	r2, r3
 8007884:	f000 f98e 	bl	8007ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2150      	movs	r1, #80	; 0x50
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fa98 	bl	8007dc4 <TIM_ITRx_SetConfig>
      break;
 8007894:	e02c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	461a      	mov	r2, r3
 80078a4:	f000 f9e8 	bl	8007c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2160      	movs	r1, #96	; 0x60
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fa88 	bl	8007dc4 <TIM_ITRx_SetConfig>
      break;
 80078b4:	e01c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	461a      	mov	r2, r3
 80078c4:	f000 f96e 	bl	8007ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2140      	movs	r1, #64	; 0x40
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fa78 	bl	8007dc4 <TIM_ITRx_SetConfig>
      break;
 80078d4:	e00c      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f000 fa6f 	bl	8007dc4 <TIM_ITRx_SetConfig>
      break;
 80078e6:	e003      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e000      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b0c      	cmp	r3, #12
 800791e:	d831      	bhi.n	8007984 <HAL_TIM_ReadCapturedValue+0x78>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800795d 	.word	0x0800795d
 800792c:	08007985 	.word	0x08007985
 8007930:	08007985 	.word	0x08007985
 8007934:	08007985 	.word	0x08007985
 8007938:	08007967 	.word	0x08007967
 800793c:	08007985 	.word	0x08007985
 8007940:	08007985 	.word	0x08007985
 8007944:	08007985 	.word	0x08007985
 8007948:	08007971 	.word	0x08007971
 800794c:	08007985 	.word	0x08007985
 8007950:	08007985 	.word	0x08007985
 8007954:	08007985 	.word	0x08007985
 8007958:	0800797b 	.word	0x0800797b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	60fb      	str	r3, [r7, #12]

      break;
 8007964:	e00f      	b.n	8007986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	60fb      	str	r3, [r7, #12]

      break;
 800796e:	e00a      	b.n	8007986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	60fb      	str	r3, [r7, #12]

      break;
 8007978:	e005      	b.n	8007986 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	60fb      	str	r3, [r7, #12]

      break;
 8007982:	e000      	b.n	8007986 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007984:	bf00      	nop
  }

  return tmpreg;
 8007986:	68fb      	ldr	r3, [r7, #12]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop

08007994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr

080079a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
	...

080079cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a39      	ldr	r2, [pc, #228]	; (8007ac4 <TIM_Base_SetConfig+0xf8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d013      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a38      	ldr	r2, [pc, #224]	; (8007ac8 <TIM_Base_SetConfig+0xfc>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00f      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f2:	d00b      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a35      	ldr	r2, [pc, #212]	; (8007acc <TIM_Base_SetConfig+0x100>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d007      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a34      	ldr	r2, [pc, #208]	; (8007ad0 <TIM_Base_SetConfig+0x104>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <TIM_Base_SetConfig+0x108>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d108      	bne.n	8007a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a28      	ldr	r2, [pc, #160]	; (8007ac4 <TIM_Base_SetConfig+0xf8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <TIM_Base_SetConfig+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <TIM_Base_SetConfig+0xfc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_Base_SetConfig+0x82>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0x82>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a24      	ldr	r2, [pc, #144]	; (8007acc <TIM_Base_SetConfig+0x100>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0x82>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <TIM_Base_SetConfig+0x104>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0x82>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a22      	ldr	r2, [pc, #136]	; (8007ad4 <TIM_Base_SetConfig+0x108>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0f      	ldr	r2, [pc, #60]	; (8007ac4 <TIM_Base_SetConfig+0xf8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_Base_SetConfig+0xc8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a0e      	ldr	r2, [pc, #56]	; (8007ac8 <TIM_Base_SetConfig+0xfc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f023 0201 	bic.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	611a      	str	r2, [r3, #16]
  }
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00

08007ad8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f023 0201 	bic.w	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <TIM_TI1_SetConfig+0xb8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <TIM_TI1_SetConfig+0x56>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <TIM_TI1_SetConfig+0xbc>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00f      	beq.n	8007b2e <TIM_TI1_SetConfig+0x56>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b14:	d00b      	beq.n	8007b2e <TIM_TI1_SetConfig+0x56>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <TIM_TI1_SetConfig+0xc0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d007      	beq.n	8007b2e <TIM_TI1_SetConfig+0x56>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <TIM_TI1_SetConfig+0xc4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d003      	beq.n	8007b2e <TIM_TI1_SetConfig+0x56>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <TIM_TI1_SetConfig+0xc8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d101      	bne.n	8007b32 <TIM_TI1_SetConfig+0x5a>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <TIM_TI1_SetConfig+0x5c>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e003      	b.n	8007b52 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f023 030a 	bic.w	r3, r3, #10
 8007b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f003 030a 	and.w	r3, r3, #10
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40000c00 	.word	0x40000c00

08007ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f023 030a 	bic.w	r3, r3, #10
 8007be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	621a      	str	r2, [r3, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr

08007c00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	f023 0210 	bic.w	r2, r3, #16
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	031b      	lsls	r3, r3, #12
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bc80      	pop	{r7}
 8007c76:	4770      	bx	lr

08007c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f023 0210 	bic.w	r2, r3, #16
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	031b      	lsls	r3, r3, #12
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	621a      	str	r2, [r3, #32]
}
 8007ccc:	bf00      	nop
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b087      	sub	sp, #28
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	031b      	lsls	r3, r3, #12
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	031b      	lsls	r3, r3, #12
 8007da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f043 0307 	orr.w	r3, r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	609a      	str	r2, [r3, #8]
}
 8007dee:	bf00      	nop
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	021a      	lsls	r2, r3, #8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	609a      	str	r2, [r3, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr

08007e36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b087      	sub	sp, #28
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	2201      	movs	r2, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a1a      	ldr	r2, [r3, #32]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	43db      	mvns	r3, r3
 8007e58:	401a      	ands	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e050      	b.n	8007f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d018      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d00e      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d009      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a14      	ldr	r2, [pc, #80]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a12      	ldr	r2, [pc, #72]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d10c      	bne.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00

08007f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e042      	b.n	8008014 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fa fe10 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 ff47 	bl	8008e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b20      	cmp	r3, #32
 800803a:	d175      	bne.n	8008128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_UART_Transmit+0x2c>
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e06e      	b.n	800812a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2221      	movs	r2, #33	; 0x21
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800805a:	f7fb f80d 	bl	8003078 <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d108      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e003      	b.n	8008090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008090:	e02e      	b.n	80080f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2200      	movs	r2, #0
 800809a:	2180      	movs	r1, #128	; 0x80
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fc23 	bl	80088e8 <UART_WaitOnFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e03a      	b.n	800812a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	3302      	adds	r3, #2
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e007      	b.n	80080e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1cb      	bne.n	8008092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	2140      	movs	r1, #64	; 0x40
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fbef 	bl	80088e8 <UART_WaitOnFlagUntilTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e006      	b.n	800812a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	e000      	b.n	800812a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008128:	2302      	movs	r3, #2
  }
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	4613      	mov	r3, r2
 800813e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b20      	cmp	r3, #32
 800814a:	d112      	bne.n	8008172 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Receive_DMA+0x26>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e00b      	b.n	8008174 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	461a      	mov	r2, r3
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fc17 	bl	800899c <UART_Start_Receive_DMA>
 800816e:	4603      	mov	r3, r0
 8008170:	e000      	b.n	8008174 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008172:	2302      	movs	r3, #2
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b0ba      	sub	sp, #232	; 0xe8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10f      	bne.n	80081e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_UART_IRQHandler+0x66>
 80081ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fd7c 	bl	8008cd8 <UART_Receive_IT>
      return;
 80081e0:	e25b      	b.n	800869a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80de 	beq.w	80083a8 <HAL_UART_IRQHandler+0x22c>
 80081ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d106      	bne.n	8008206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80d1 	beq.w	80083a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <HAL_UART_IRQHandler+0xae>
 8008212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	f043 0201 	orr.w	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800822a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <HAL_UART_IRQHandler+0xd2>
 8008236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	f043 0202 	orr.w	r2, r3, #2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800824e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <HAL_UART_IRQHandler+0xf6>
 800825a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	f043 0204 	orr.w	r2, r3, #4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d011      	beq.n	80082a2 <HAL_UART_IRQHandler+0x126>
 800827e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800828a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829a:	f043 0208 	orr.w	r2, r3, #8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 81f2 	beq.w	8008690 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_UART_IRQHandler+0x14e>
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fd07 	bl	8008cd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <HAL_UART_IRQHandler+0x17a>
 80082ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d04f      	beq.n	8008396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fc11 	bl	8008b1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d041      	beq.n	800838e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3314      	adds	r3, #20
 8008310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3314      	adds	r3, #20
 8008332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800833a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800834e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1d9      	bne.n	800830a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d013      	beq.n	8008386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	4a7e      	ldr	r2, [pc, #504]	; (800855c <HAL_UART_IRQHandler+0x3e0>)
 8008364:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	4618      	mov	r0, r3
 800836c:	f7fb f8ae 	bl	80034cc <HAL_DMA_Abort_IT>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d016      	beq.n	80083a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e00e      	b.n	80083a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f99c 	bl	80086c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e00a      	b.n	80083a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f998 	bl	80086c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	e006      	b.n	80083a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f994 	bl	80086c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80083a2:	e175      	b.n	8008690 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	bf00      	nop
    return;
 80083a6:	e173      	b.n	8008690 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	f040 814f 	bne.w	8008650 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 8148 	beq.w	8008650 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8141 	beq.w	8008650 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80b6 	beq.w	8008560 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 8145 	beq.w	8008694 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800840e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008412:	429a      	cmp	r2, r3
 8008414:	f080 813e 	bcs.w	8008694 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800841e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	2b20      	cmp	r3, #32
 8008428:	f000 8088 	beq.w	800853c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800844a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008458:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800845c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008464:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1d9      	bne.n	800842c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848a:	f023 0301 	bic.w	r3, r3, #1
 800848e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800849c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e1      	bne.n	8008478 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e3      	bne.n	80084b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	330c      	adds	r3, #12
 8008500:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	f023 0310 	bic.w	r3, r3, #16
 8008510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800851e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008520:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800852c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e3      	bne.n	80084fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	4618      	mov	r0, r3
 8008538:	f7fa ff8c 	bl	8003454 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800854a:	b29b      	uxth	r3, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	b29b      	uxth	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8bf 	bl	80086d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008558:	e09c      	b.n	8008694 <HAL_UART_IRQHandler+0x518>
 800855a:	bf00      	nop
 800855c:	08008be3 	.word	0x08008be3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008568:	b29b      	uxth	r3, r3
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 808e 	beq.w	8008698 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800857c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 8089 	beq.w	8008698 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	330c      	adds	r3, #12
 800858c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800859c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085aa:	647a      	str	r2, [r7, #68]	; 0x44
 80085ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e3      	bne.n	8008586 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	623b      	str	r3, [r7, #32]
   return(result);
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3314      	adds	r3, #20
 80085de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085e2:	633a      	str	r2, [r7, #48]	; 0x30
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e3      	bne.n	80085be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	60fb      	str	r3, [r7, #12]
   return(result);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0310 	bic.w	r3, r3, #16
 800861a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	330c      	adds	r3, #12
 8008624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008628:	61fa      	str	r2, [r7, #28]
 800862a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	69b9      	ldr	r1, [r7, #24]
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	617b      	str	r3, [r7, #20]
   return(result);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e3      	bne.n	8008604 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f844 	bl	80086d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800864e:	e023      	b.n	8008698 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <HAL_UART_IRQHandler+0x4f4>
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 face 	bl	8008c0a <UART_Transmit_IT>
    return;
 800866e:	e014      	b.n	800869a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <HAL_UART_IRQHandler+0x51e>
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fb0d 	bl	8008ca8 <UART_EndTransmit_IT>
    return;
 800868e:	e004      	b.n	800869a <HAL_UART_IRQHandler+0x51e>
    return;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <HAL_UART_IRQHandler+0x51e>
      return;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <HAL_UART_IRQHandler+0x51e>
      return;
 8008698:	bf00      	nop
  }
}
 800869a:	37e8      	adds	r7, #232	; 0xe8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr

080086d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b09c      	sub	sp, #112	; 0x70
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d172      	bne.n	80087ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870a:	2200      	movs	r2, #0
 800870c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008724:	66bb      	str	r3, [r7, #104]	; 0x68
 8008726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800872e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008730:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800873c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3314      	adds	r3, #20
 8008748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	667b      	str	r3, [r7, #100]	; 0x64
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3314      	adds	r3, #20
 8008760:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008762:	647a      	str	r2, [r7, #68]	; 0x44
 8008764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3314      	adds	r3, #20
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	623b      	str	r3, [r7, #32]
   return(result);
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800878c:	663b      	str	r3, [r7, #96]	; 0x60
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008796:	633a      	str	r2, [r7, #48]	; 0x30
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e5      	bne.n	8008776 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d119      	bne.n	80087ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	330c      	adds	r3, #12
 80087c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f023 0310 	bic.w	r3, r3, #16
 80087d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	330c      	adds	r3, #12
 80087d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087da:	61fa      	str	r2, [r7, #28]
 80087dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	69b9      	ldr	r1, [r7, #24]
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	617b      	str	r3, [r7, #20]
   return(result);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e5      	bne.n	80087ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	2200      	movs	r2, #0
 80087f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008800:	4619      	mov	r1, r3
 8008802:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008804:	f7ff ff67 	bl	80086d6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008808:	e002      	b.n	8008810 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800880a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800880c:	f7f8 ffe4 	bl	80017d8 <HAL_UART_RxCpltCallback>
}
 8008810:	bf00      	nop
 8008812:	3770      	adds	r7, #112	; 0x70
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	2b01      	cmp	r3, #1
 8008832:	d108      	bne.n	8008846 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	b29b      	uxth	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff ff49 	bl	80086d6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008844:	e002      	b.n	800884c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff ff33 	bl	80086b2 <HAL_UART_RxHalfCpltCallback>
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008870:	2b00      	cmp	r3, #0
 8008872:	bf14      	ite	ne
 8008874:	2301      	movne	r3, #1
 8008876:	2300      	moveq	r3, #0
 8008878:	b2db      	uxtb	r3, r3
 800887a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b21      	cmp	r3, #33	; 0x21
 8008886:	d108      	bne.n	800889a <UART_DMAError+0x46>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2200      	movs	r2, #0
 8008892:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008894:	68b8      	ldr	r0, [r7, #8]
 8008896:	f000 f91b 	bl	8008ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bf14      	ite	ne
 80088a8:	2301      	movne	r3, #1
 80088aa:	2300      	moveq	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b22      	cmp	r3, #34	; 0x22
 80088ba:	d108      	bne.n	80088ce <UART_DMAError+0x7a>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2200      	movs	r2, #0
 80088c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088c8:	68b8      	ldr	r0, [r7, #8]
 80088ca:	f000 f928 	bl	8008b1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	f043 0210 	orr.w	r2, r3, #16
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088da:	68b8      	ldr	r0, [r7, #8]
 80088dc:	f7ff fef2 	bl	80086c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f8:	e03b      	b.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d037      	beq.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008902:	f7fa fbb9 	bl	8003078 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <UART_WaitOnFlagUntilTimeout+0x30>
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e03a      	b.n	8008992 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d023      	beq.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d020      	beq.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d01d      	beq.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d116      	bne.n	8008972 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f8df 	bl	8008b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2208      	movs	r2, #8
 8008964:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e00f      	b.n	8008992 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4013      	ands	r3, r2
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	429a      	cmp	r2, r3
 8008980:	bf0c      	ite	eq
 8008982:	2301      	moveq	r3, #1
 8008984:	2300      	movne	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	461a      	mov	r2, r3
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	429a      	cmp	r2, r3
 800898e:	d0b4      	beq.n	80088fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b098      	sub	sp, #96	; 0x60
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2222      	movs	r2, #34	; 0x22
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c8:	4a3e      	ldr	r2, [pc, #248]	; (8008ac4 <UART_Start_Receive_DMA+0x128>)
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	4a3d      	ldr	r2, [pc, #244]	; (8008ac8 <UART_Start_Receive_DMA+0x12c>)
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d8:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <UART_Start_Receive_DMA+0x130>)
 80089da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	2200      	movs	r2, #0
 80089e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	f7fa fcca 	bl	8003394 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d019      	beq.n	8008a52 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e5      	bne.n	8008a1e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3314      	adds	r3, #20
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a72:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	617b      	str	r3, [r7, #20]
   return(result);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8008aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6a39      	ldr	r1, [r7, #32]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3760      	adds	r7, #96	; 0x60
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	080086ed 	.word	0x080086ed
 8008ac8:	08008819 	.word	0x08008819
 8008acc:	08008855 	.word	0x08008855

08008ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b089      	sub	sp, #36	; 0x24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	330c      	adds	r3, #12
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	61ba      	str	r2, [r7, #24]
 8008afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6979      	ldr	r1, [r7, #20]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	613b      	str	r3, [r7, #16]
   return(result);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e5      	bne.n	8008ad8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008b14:	bf00      	nop
 8008b16:	3724      	adds	r7, #36	; 0x24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b095      	sub	sp, #84	; 0x54
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	330c      	adds	r3, #12
 8008b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b46:	643a      	str	r2, [r7, #64]	; 0x40
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e5      	bne.n	8008b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3314      	adds	r3, #20
 8008b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f023 0301 	bic.w	r3, r3, #1
 8008b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3314      	adds	r3, #20
 8008b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e5      	bne.n	8008b5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d119      	bne.n	8008bca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	330c      	adds	r3, #12
 8008b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f023 0310 	bic.w	r3, r3, #16
 8008bac:	647b      	str	r3, [r7, #68]	; 0x44
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bb6:	61ba      	str	r2, [r7, #24]
 8008bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6979      	ldr	r1, [r7, #20]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bd8:	bf00      	nop
 8008bda:	3754      	adds	r7, #84	; 0x54
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr

08008be2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7ff fd61 	bl	80086c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b21      	cmp	r3, #33	; 0x21
 8008c1c:	d13e      	bne.n	8008c9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c26:	d114      	bne.n	8008c52 <UART_Transmit_IT+0x48>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	621a      	str	r2, [r3, #32]
 8008c50:	e008      	b.n	8008c64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6211      	str	r1, [r2, #32]
 8008c5c:	781a      	ldrb	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4619      	mov	r1, r3
 8008c72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10f      	bne.n	8008c98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e000      	b.n	8008c9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fce9 	bl	80086a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08c      	sub	sp, #48	; 0x30
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b22      	cmp	r3, #34	; 0x22
 8008cea:	f040 80ae 	bne.w	8008e4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf6:	d117      	bne.n	8008d28 <UART_Receive_IT+0x50>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d113      	bne.n	8008d28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	629a      	str	r2, [r3, #40]	; 0x28
 8008d26:	e026      	b.n	8008d76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3a:	d007      	beq.n	8008d4c <UART_Receive_IT+0x74>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <UART_Receive_IT+0x82>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e008      	b.n	8008d6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4619      	mov	r1, r3
 8008d84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d15d      	bne.n	8008e46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0220 	bic.w	r2, r2, #32
 8008d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695a      	ldr	r2, [r3, #20]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d135      	bne.n	8008e3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	613b      	str	r3, [r7, #16]
   return(result);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f023 0310 	bic.w	r3, r3, #16
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df6:	623a      	str	r2, [r7, #32]
 8008df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	6a3a      	ldr	r2, [r7, #32]
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e5      	bne.n	8008dd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d10a      	bne.n	8008e2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fc4e 	bl	80086d6 <HAL_UARTEx_RxEventCallback>
 8008e3a:	e002      	b.n	8008e42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7f8 fccb 	bl	80017d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e002      	b.n	8008e4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e000      	b.n	8008e4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e4a:	2302      	movs	r3, #2
  }
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008e8e:	f023 030c 	bic.w	r3, r3, #12
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a2c      	ldr	r2, [pc, #176]	; (8008f68 <UART_SetConfig+0x114>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d103      	bne.n	8008ec4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008ebc:	f7fe f826 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	e002      	b.n	8008eca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ec4:	f7fe f80e 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 8008ec8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009a      	lsls	r2, r3, #2
 8008ed4:	441a      	add	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <UART_SetConfig+0x118>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	0119      	lsls	r1, r3, #4
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009a      	lsls	r2, r3, #2
 8008ef4:	441a      	add	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f00:	4b1a      	ldr	r3, [pc, #104]	; (8008f6c <UART_SetConfig+0x118>)
 8008f02:	fba3 0302 	umull	r0, r3, r3, r2
 8008f06:	095b      	lsrs	r3, r3, #5
 8008f08:	2064      	movs	r0, #100	; 0x64
 8008f0a:	fb00 f303 	mul.w	r3, r0, r3
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	3332      	adds	r3, #50	; 0x32
 8008f14:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <UART_SetConfig+0x118>)
 8008f16:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f20:	4419      	add	r1, r3
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009a      	lsls	r2, r3, #2
 8008f2c:	441a      	add	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <UART_SetConfig+0x118>)
 8008f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2064      	movs	r0, #100	; 0x64
 8008f42:	fb00 f303 	mul.w	r3, r0, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	3332      	adds	r3, #50	; 0x32
 8008f4c:	4a07      	ldr	r2, [pc, #28]	; (8008f6c <UART_SetConfig+0x118>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	40013800 	.word	0x40013800
 8008f6c:	51eb851f 	.word	0x51eb851f

08008f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f103 0208 	add.w	r2, r3, #8
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f103 0208 	add.w	r2, r3, #8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f103 0208 	add.w	r2, r3, #8
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b085      	sub	sp, #20
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	601a      	str	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr

0800900c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d103      	bne.n	800902c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e00c      	b.n	8009046 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3308      	adds	r3, #8
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e002      	b.n	800903a <vListInsert+0x2e>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d2f6      	bcs.n	8009034 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
}
 8009072:	bf00      	nop
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	bc80      	pop	{r7}
 800907a:	4770      	bx	lr

0800907c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6892      	ldr	r2, [r2, #8]
 8009092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6852      	ldr	r2, [r2, #4]
 800909c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d103      	bne.n	80090b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr

080090ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b08e      	sub	sp, #56	; 0x38
 80090d2:	af04      	add	r7, sp, #16
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <xTaskCreateStatic+0x46>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	61fb      	str	r3, [r7, #28]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009114:	2354      	movs	r3, #84	; 0x54
 8009116:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b54      	cmp	r3, #84	; 0x54
 800911c:	d00a      	beq.n	8009134 <xTaskCreateStatic+0x66>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	61bb      	str	r3, [r7, #24]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009134:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01e      	beq.n	800917a <xTaskCreateStatic+0xac>
 800913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913e:	2b00      	cmp	r3, #0
 8009140:	d01b      	beq.n	800917a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	2202      	movs	r2, #2
 8009150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009154:	2300      	movs	r3, #0
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	9302      	str	r3, [sp, #8]
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 f850 	bl	8009212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009174:	f000 f8d4 	bl	8009320 <prvAddNewTaskToReadyList>
 8009178:	e001      	b.n	800917e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800917e:	697b      	ldr	r3, [r7, #20]
	}
 8009180:	4618      	mov	r0, r3
 8009182:	3728      	adds	r7, #40	; 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08c      	sub	sp, #48	; 0x30
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fe87 	bl	8009eb0 <pvPortMalloc>
 80091a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091aa:	2054      	movs	r0, #84	; 0x54
 80091ac:	f000 fe80 	bl	8009eb0 <pvPortMalloc>
 80091b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
 80091be:	e005      	b.n	80091cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f000 ff41 	bl	800a048 <vPortFree>
 80091c6:	e001      	b.n	80091cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d017      	beq.n	8009202 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091da:	88fa      	ldrh	r2, [r7, #6]
 80091dc:	2300      	movs	r3, #0
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 f80e 	bl	8009212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091f6:	69f8      	ldr	r0, [r7, #28]
 80091f8:	f000 f892 	bl	8009320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091fc:	2301      	movs	r3, #1
 80091fe:	61bb      	str	r3, [r7, #24]
 8009200:	e002      	b.n	8009208 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009208:	69bb      	ldr	r3, [r7, #24]
	}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b088      	sub	sp, #32
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800922a:	3b01      	subs	r3, #1
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f023 0307 	bic.w	r3, r3, #7
 8009238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00a      	beq.n	800925a <prvInitialiseNewTask+0x48>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	617b      	str	r3, [r7, #20]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01f      	beq.n	80092a0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]
 8009264:	e012      	b.n	800928c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	4413      	add	r3, r2
 800926c:	7819      	ldrb	r1, [r3, #0]
 800926e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	3334      	adds	r3, #52	; 0x34
 8009276:	460a      	mov	r2, r1
 8009278:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d006      	beq.n	8009294 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	3301      	adds	r3, #1
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b0f      	cmp	r3, #15
 8009290:	d9e9      	bls.n	8009266 <prvInitialiseNewTask+0x54>
 8009292:	e000      	b.n	8009296 <prvInitialiseNewTask+0x84>
			{
				break;
 8009294:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800929e:	e003      	b.n	80092a8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d901      	bls.n	80092b2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092ae:	2306      	movs	r3, #6
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	2200      	movs	r2, #0
 80092c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff fe70 	bl	8008fae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	3318      	adds	r3, #24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fe6b 	bl	8008fae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	f1c3 0207 	rsb	r2, r3, #7
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	2200      	movs	r2, #0
 80092f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	69b8      	ldr	r0, [r7, #24]
 8009302:	f000 fc21 	bl	8009b48 <pxPortInitialiseStack>
 8009306:	4602      	mov	r2, r0
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009316:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009318:	bf00      	nop
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009328:	f000 fd00 	bl	8009d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800932c:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <prvAddNewTaskToReadyList+0xb8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a29      	ldr	r2, [pc, #164]	; (80093d8 <prvAddNewTaskToReadyList+0xb8>)
 8009334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009336:	4b29      	ldr	r3, [pc, #164]	; (80093dc <prvAddNewTaskToReadyList+0xbc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800933e:	4a27      	ldr	r2, [pc, #156]	; (80093dc <prvAddNewTaskToReadyList+0xbc>)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009344:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <prvAddNewTaskToReadyList+0xb8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d110      	bne.n	800936e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800934c:	f000 faba 	bl	80098c4 <prvInitialiseTaskLists>
 8009350:	e00d      	b.n	800936e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <prvAddNewTaskToReadyList+0xc0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800935a:	4b20      	ldr	r3, [pc, #128]	; (80093dc <prvAddNewTaskToReadyList+0xbc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	429a      	cmp	r2, r3
 8009366:	d802      	bhi.n	800936e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009368:	4a1c      	ldr	r2, [pc, #112]	; (80093dc <prvAddNewTaskToReadyList+0xbc>)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800936e:	4b1d      	ldr	r3, [pc, #116]	; (80093e4 <prvAddNewTaskToReadyList+0xc4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <prvAddNewTaskToReadyList+0xc4>)
 8009376:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	2201      	movs	r2, #1
 800937e:	409a      	lsls	r2, r3
 8009380:	4b19      	ldr	r3, [pc, #100]	; (80093e8 <prvAddNewTaskToReadyList+0xc8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4313      	orrs	r3, r2
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <prvAddNewTaskToReadyList+0xc8>)
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4a15      	ldr	r2, [pc, #84]	; (80093ec <prvAddNewTaskToReadyList+0xcc>)
 8009398:	441a      	add	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3304      	adds	r3, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	4610      	mov	r0, r2
 80093a2:	f7ff fe10 	bl	8008fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093a6:	f000 fcf1 	bl	8009d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093aa:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <prvAddNewTaskToReadyList+0xc0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093b2:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <prvAddNewTaskToReadyList+0xbc>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	429a      	cmp	r2, r3
 80093be:	d207      	bcs.n	80093d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <prvAddNewTaskToReadyList+0xd0>)
 80093c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20000834 	.word	0x20000834
 80093dc:	20000734 	.word	0x20000734
 80093e0:	20000840 	.word	0x20000840
 80093e4:	20000850 	.word	0x20000850
 80093e8:	2000083c 	.word	0x2000083c
 80093ec:	20000738 	.word	0x20000738
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d017      	beq.n	8009436 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009406:	4b13      	ldr	r3, [pc, #76]	; (8009454 <vTaskDelay+0x60>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <vTaskDelay+0x30>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	60bb      	str	r3, [r7, #8]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009424:	f000 f87a 	bl	800951c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fb26 	bl	8009a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009430:	f000 f882 	bl	8009538 <xTaskResumeAll>
 8009434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d107      	bne.n	800944c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <vTaskDelay+0x64>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2000085c 	.word	0x2000085c
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	; 0x28
 8009460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800946a:	463a      	mov	r2, r7
 800946c:	1d39      	adds	r1, r7, #4
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4618      	mov	r0, r3
 8009474:	f7f8 f924 	bl	80016c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	9202      	str	r2, [sp, #8]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	460a      	mov	r2, r1
 800948a:	491e      	ldr	r1, [pc, #120]	; (8009504 <vTaskStartScheduler+0xa8>)
 800948c:	481e      	ldr	r0, [pc, #120]	; (8009508 <vTaskStartScheduler+0xac>)
 800948e:	f7ff fe1e 	bl	80090ce <xTaskCreateStatic>
 8009492:	4603      	mov	r3, r0
 8009494:	4a1d      	ldr	r2, [pc, #116]	; (800950c <vTaskStartScheduler+0xb0>)
 8009496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009498:	4b1c      	ldr	r3, [pc, #112]	; (800950c <vTaskStartScheduler+0xb0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e001      	b.n	80094aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d116      	bne.n	80094de <vTaskStartScheduler+0x82>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	613b      	str	r3, [r7, #16]
}
 80094c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094c4:	4b12      	ldr	r3, [pc, #72]	; (8009510 <vTaskStartScheduler+0xb4>)
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094cc:	4b11      	ldr	r3, [pc, #68]	; (8009514 <vTaskStartScheduler+0xb8>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094d2:	4b11      	ldr	r3, [pc, #68]	; (8009518 <vTaskStartScheduler+0xbc>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094d8:	f000 fbb6 	bl	8009c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094dc:	e00e      	b.n	80094fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d10a      	bne.n	80094fc <vTaskStartScheduler+0xa0>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	e7fe      	b.n	80094fa <vTaskStartScheduler+0x9e>
}
 80094fc:	bf00      	nop
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	0800ad18 	.word	0x0800ad18
 8009508:	08009895 	.word	0x08009895
 800950c:	20000858 	.word	0x20000858
 8009510:	20000854 	.word	0x20000854
 8009514:	20000840 	.word	0x20000840
 8009518:	20000838 	.word	0x20000838

0800951c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <vTaskSuspendAll+0x18>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3301      	adds	r3, #1
 8009526:	4a03      	ldr	r2, [pc, #12]	; (8009534 <vTaskSuspendAll+0x18>)
 8009528:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800952a:	bf00      	nop
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	2000085c 	.word	0x2000085c

08009538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009546:	4b41      	ldr	r3, [pc, #260]	; (800964c <xTaskResumeAll+0x114>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <xTaskResumeAll+0x2c>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	603b      	str	r3, [r7, #0]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009564:	f000 fbe2 	bl	8009d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009568:	4b38      	ldr	r3, [pc, #224]	; (800964c <xTaskResumeAll+0x114>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a37      	ldr	r2, [pc, #220]	; (800964c <xTaskResumeAll+0x114>)
 8009570:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009572:	4b36      	ldr	r3, [pc, #216]	; (800964c <xTaskResumeAll+0x114>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d161      	bne.n	800963e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800957a:	4b35      	ldr	r3, [pc, #212]	; (8009650 <xTaskResumeAll+0x118>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d05d      	beq.n	800963e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009582:	e02e      	b.n	80095e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009584:	4b33      	ldr	r3, [pc, #204]	; (8009654 <xTaskResumeAll+0x11c>)
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3318      	adds	r3, #24
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff fd73 	bl	800907c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3304      	adds	r3, #4
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fd6e 	bl	800907c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	2201      	movs	r2, #1
 80095a6:	409a      	lsls	r2, r3
 80095a8:	4b2b      	ldr	r3, [pc, #172]	; (8009658 <xTaskResumeAll+0x120>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	4a2a      	ldr	r2, [pc, #168]	; (8009658 <xTaskResumeAll+0x120>)
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4a27      	ldr	r2, [pc, #156]	; (800965c <xTaskResumeAll+0x124>)
 80095c0:	441a      	add	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f7ff fcfc 	bl	8008fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d2:	4b23      	ldr	r3, [pc, #140]	; (8009660 <xTaskResumeAll+0x128>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	429a      	cmp	r2, r3
 80095da:	d302      	bcc.n	80095e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80095dc:	4b21      	ldr	r3, [pc, #132]	; (8009664 <xTaskResumeAll+0x12c>)
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <xTaskResumeAll+0x11c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1cc      	bne.n	8009584 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095f0:	f000 fa06 	bl	8009a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <xTaskResumeAll+0x130>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d010      	beq.n	8009622 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009600:	f000 f836 	bl	8009670 <xTaskIncrementTick>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <xTaskResumeAll+0x12c>)
 800960c:	2201      	movs	r2, #1
 800960e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3b01      	subs	r3, #1
 8009614:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f1      	bne.n	8009600 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800961c:	4b12      	ldr	r3, [pc, #72]	; (8009668 <xTaskResumeAll+0x130>)
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <xTaskResumeAll+0x12c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800962a:	2301      	movs	r3, #1
 800962c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800962e:	4b0f      	ldr	r3, [pc, #60]	; (800966c <xTaskResumeAll+0x134>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800963e:	f000 fba5 	bl	8009d8c <vPortExitCritical>

	return xAlreadyYielded;
 8009642:	68bb      	ldr	r3, [r7, #8]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	2000085c 	.word	0x2000085c
 8009650:	20000834 	.word	0x20000834
 8009654:	200007f4 	.word	0x200007f4
 8009658:	2000083c 	.word	0x2000083c
 800965c:	20000738 	.word	0x20000738
 8009660:	20000734 	.word	0x20000734
 8009664:	20000848 	.word	0x20000848
 8009668:	20000844 	.word	0x20000844
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800967a:	4b4e      	ldr	r3, [pc, #312]	; (80097b4 <xTaskIncrementTick+0x144>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f040 808e 	bne.w	80097a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009684:	4b4c      	ldr	r3, [pc, #304]	; (80097b8 <xTaskIncrementTick+0x148>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3301      	adds	r3, #1
 800968a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800968c:	4a4a      	ldr	r2, [pc, #296]	; (80097b8 <xTaskIncrementTick+0x148>)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d120      	bne.n	80096da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009698:	4b48      	ldr	r3, [pc, #288]	; (80097bc <xTaskIncrementTick+0x14c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	603b      	str	r3, [r7, #0]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xTaskIncrementTick+0x46>
 80096b8:	4b40      	ldr	r3, [pc, #256]	; (80097bc <xTaskIncrementTick+0x14c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	4b40      	ldr	r3, [pc, #256]	; (80097c0 <xTaskIncrementTick+0x150>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a3e      	ldr	r2, [pc, #248]	; (80097bc <xTaskIncrementTick+0x14c>)
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4a3e      	ldr	r2, [pc, #248]	; (80097c0 <xTaskIncrementTick+0x150>)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	4b3d      	ldr	r3, [pc, #244]	; (80097c4 <xTaskIncrementTick+0x154>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	4a3c      	ldr	r2, [pc, #240]	; (80097c4 <xTaskIncrementTick+0x154>)
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	f000 f993 	bl	8009a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096da:	4b3b      	ldr	r3, [pc, #236]	; (80097c8 <xTaskIncrementTick+0x158>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d348      	bcc.n	8009776 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096e4:	4b35      	ldr	r3, [pc, #212]	; (80097bc <xTaskIncrementTick+0x14c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ee:	4b36      	ldr	r3, [pc, #216]	; (80097c8 <xTaskIncrementTick+0x158>)
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	601a      	str	r2, [r3, #0]
					break;
 80096f6:	e03e      	b.n	8009776 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f8:	4b30      	ldr	r3, [pc, #192]	; (80097bc <xTaskIncrementTick+0x14c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d203      	bcs.n	8009718 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009710:	4a2d      	ldr	r2, [pc, #180]	; (80097c8 <xTaskIncrementTick+0x158>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009716:	e02e      	b.n	8009776 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3304      	adds	r3, #4
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fcad 	bl	800907c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	3318      	adds	r3, #24
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fca4 	bl	800907c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	2201      	movs	r2, #1
 800973a:	409a      	lsls	r2, r3
 800973c:	4b23      	ldr	r3, [pc, #140]	; (80097cc <xTaskIncrementTick+0x15c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4313      	orrs	r3, r2
 8009742:	4a22      	ldr	r2, [pc, #136]	; (80097cc <xTaskIncrementTick+0x15c>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <xTaskIncrementTick+0x160>)
 8009754:	441a      	add	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7ff fc32 	bl	8008fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009766:	4b1b      	ldr	r3, [pc, #108]	; (80097d4 <xTaskIncrementTick+0x164>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	429a      	cmp	r2, r3
 800976e:	d3b9      	bcc.n	80096e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009774:	e7b6      	b.n	80096e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009776:	4b17      	ldr	r3, [pc, #92]	; (80097d4 <xTaskIncrementTick+0x164>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977c:	4914      	ldr	r1, [pc, #80]	; (80097d0 <xTaskIncrementTick+0x160>)
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d901      	bls.n	8009792 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800978e:	2301      	movs	r3, #1
 8009790:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009792:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <xTaskIncrementTick+0x168>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800979a:	2301      	movs	r3, #1
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e004      	b.n	80097aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <xTaskIncrementTick+0x16c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a0d      	ldr	r2, [pc, #52]	; (80097dc <xTaskIncrementTick+0x16c>)
 80097a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097aa:	697b      	ldr	r3, [r7, #20]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000085c 	.word	0x2000085c
 80097b8:	20000838 	.word	0x20000838
 80097bc:	200007ec 	.word	0x200007ec
 80097c0:	200007f0 	.word	0x200007f0
 80097c4:	2000084c 	.word	0x2000084c
 80097c8:	20000854 	.word	0x20000854
 80097cc:	2000083c 	.word	0x2000083c
 80097d0:	20000738 	.word	0x20000738
 80097d4:	20000734 	.word	0x20000734
 80097d8:	20000848 	.word	0x20000848
 80097dc:	20000844 	.word	0x20000844

080097e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097e6:	4b26      	ldr	r3, [pc, #152]	; (8009880 <vTaskSwitchContext+0xa0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ee:	4b25      	ldr	r3, [pc, #148]	; (8009884 <vTaskSwitchContext+0xa4>)
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097f4:	e03f      	b.n	8009876 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80097f6:	4b23      	ldr	r3, [pc, #140]	; (8009884 <vTaskSwitchContext+0xa4>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fc:	4b22      	ldr	r3, [pc, #136]	; (8009888 <vTaskSwitchContext+0xa8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	fab3 f383 	clz	r3, r3
 8009808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800980a:	7afb      	ldrb	r3, [r7, #11]
 800980c:	f1c3 031f 	rsb	r3, r3, #31
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	491e      	ldr	r1, [pc, #120]	; (800988c <vTaskSwitchContext+0xac>)
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	607b      	str	r3, [r7, #4]
}
 8009838:	bf00      	nop
 800983a:	e7fe      	b.n	800983a <vTaskSwitchContext+0x5a>
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4a11      	ldr	r2, [pc, #68]	; (800988c <vTaskSwitchContext+0xac>)
 8009848:	4413      	add	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	605a      	str	r2, [r3, #4]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3308      	adds	r3, #8
 800985e:	429a      	cmp	r2, r3
 8009860:	d104      	bne.n	800986c <vTaskSwitchContext+0x8c>
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	4a07      	ldr	r2, [pc, #28]	; (8009890 <vTaskSwitchContext+0xb0>)
 8009874:	6013      	str	r3, [r2, #0]
}
 8009876:	bf00      	nop
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr
 8009880:	2000085c 	.word	0x2000085c
 8009884:	20000848 	.word	0x20000848
 8009888:	2000083c 	.word	0x2000083c
 800988c:	20000738 	.word	0x20000738
 8009890:	20000734 	.word	0x20000734

08009894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800989c:	f000 f852 	bl	8009944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <prvIdleTask+0x28>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d9f9      	bls.n	800989c <prvIdleTask+0x8>
			{
				taskYIELD();
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <prvIdleTask+0x2c>)
 80098aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098b8:	e7f0      	b.n	800989c <prvIdleTask+0x8>
 80098ba:	bf00      	nop
 80098bc:	20000738 	.word	0x20000738
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ca:	2300      	movs	r3, #0
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	e00c      	b.n	80098ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4a12      	ldr	r2, [pc, #72]	; (8009924 <prvInitialiseTaskLists+0x60>)
 80098dc:	4413      	add	r3, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fb46 	bl	8008f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3301      	adds	r3, #1
 80098e8:	607b      	str	r3, [r7, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b06      	cmp	r3, #6
 80098ee:	d9ef      	bls.n	80098d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098f0:	480d      	ldr	r0, [pc, #52]	; (8009928 <prvInitialiseTaskLists+0x64>)
 80098f2:	f7ff fb3d 	bl	8008f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098f6:	480d      	ldr	r0, [pc, #52]	; (800992c <prvInitialiseTaskLists+0x68>)
 80098f8:	f7ff fb3a 	bl	8008f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098fc:	480c      	ldr	r0, [pc, #48]	; (8009930 <prvInitialiseTaskLists+0x6c>)
 80098fe:	f7ff fb37 	bl	8008f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009902:	480c      	ldr	r0, [pc, #48]	; (8009934 <prvInitialiseTaskLists+0x70>)
 8009904:	f7ff fb34 	bl	8008f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009908:	480b      	ldr	r0, [pc, #44]	; (8009938 <prvInitialiseTaskLists+0x74>)
 800990a:	f7ff fb31 	bl	8008f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800990e:	4b0b      	ldr	r3, [pc, #44]	; (800993c <prvInitialiseTaskLists+0x78>)
 8009910:	4a05      	ldr	r2, [pc, #20]	; (8009928 <prvInitialiseTaskLists+0x64>)
 8009912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009914:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <prvInitialiseTaskLists+0x7c>)
 8009916:	4a05      	ldr	r2, [pc, #20]	; (800992c <prvInitialiseTaskLists+0x68>)
 8009918:	601a      	str	r2, [r3, #0]
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000738 	.word	0x20000738
 8009928:	200007c4 	.word	0x200007c4
 800992c:	200007d8 	.word	0x200007d8
 8009930:	200007f4 	.word	0x200007f4
 8009934:	20000808 	.word	0x20000808
 8009938:	20000820 	.word	0x20000820
 800993c:	200007ec 	.word	0x200007ec
 8009940:	200007f0 	.word	0x200007f0

08009944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800994a:	e019      	b.n	8009980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800994c:	f000 f9ee 	bl	8009d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009950:	4b10      	ldr	r3, [pc, #64]	; (8009994 <prvCheckTasksWaitingTermination+0x50>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fb8d 	bl	800907c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009962:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <prvCheckTasksWaitingTermination+0x54>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3b01      	subs	r3, #1
 8009968:	4a0b      	ldr	r2, [pc, #44]	; (8009998 <prvCheckTasksWaitingTermination+0x54>)
 800996a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <prvCheckTasksWaitingTermination+0x58>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	4a0a      	ldr	r2, [pc, #40]	; (800999c <prvCheckTasksWaitingTermination+0x58>)
 8009974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009976:	f000 fa09 	bl	8009d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f810 	bl	80099a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <prvCheckTasksWaitingTermination+0x58>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e1      	bne.n	800994c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000808 	.word	0x20000808
 8009998:	20000834 	.word	0x20000834
 800999c:	2000081c 	.word	0x2000081c

080099a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d108      	bne.n	80099c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fb46 	bl	800a048 <vPortFree>
				vPortFree( pxTCB );
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb43 	bl	800a048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099c2:	e018      	b.n	80099f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d103      	bne.n	80099d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb3a 	bl	800a048 <vPortFree>
	}
 80099d4:	e00f      	b.n	80099f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d00a      	beq.n	80099f6 <prvDeleteTCB+0x56>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <prvDeleteTCB+0x54>
	}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <prvResetNextTaskUnblockTime+0x38>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <prvResetNextTaskUnblockTime+0x3c>)
 8009a12:	f04f 32ff 	mov.w	r2, #4294967295
 8009a16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a18:	e008      	b.n	8009a2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1a:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <prvResetNextTaskUnblockTime+0x38>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4a04      	ldr	r2, [pc, #16]	; (8009a3c <prvResetNextTaskUnblockTime+0x3c>)
 8009a2a:	6013      	str	r3, [r2, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	200007ec 	.word	0x200007ec
 8009a3c:	20000854 	.word	0x20000854

08009a40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a46:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <xTaskGetSchedulerState+0x34>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e008      	b.n	8009a66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a54:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <xTaskGetSchedulerState+0x38>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	607b      	str	r3, [r7, #4]
 8009a60:	e001      	b.n	8009a66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a62:	2300      	movs	r3, #0
 8009a64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a66:	687b      	ldr	r3, [r7, #4]
	}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000840 	.word	0x20000840
 8009a78:	2000085c 	.word	0x2000085c

08009a7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a86:	4b29      	ldr	r3, [pc, #164]	; (8009b2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a8c:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3304      	adds	r3, #4
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff faf2 	bl	800907c <uxListRemove>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aaa:	43da      	mvns	r2, r3
 8009aac:	4b21      	ldr	r3, [pc, #132]	; (8009b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	4a20      	ldr	r2, [pc, #128]	; (8009b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ab4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d10a      	bne.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x58>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac4:	4b1a      	ldr	r3, [pc, #104]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4619      	mov	r1, r3
 8009acc:	481a      	ldr	r0, [pc, #104]	; (8009b38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ace:	f7ff fa7a 	bl	8008fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ad2:	e026      	b.n	8009b22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009adc:	4b14      	ldr	r3, [pc, #80]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d209      	bcs.n	8009b00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aec:	4b13      	ldr	r3, [pc, #76]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	f7ff fa87 	bl	800900c <vListInsert>
}
 8009afe:	e010      	b.n	8009b22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	f7ff fa7d 	bl	800900c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b12:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d202      	bcs.n	8009b22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b1c:	4a09      	ldr	r2, [pc, #36]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6013      	str	r3, [r2, #0]
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000838 	.word	0x20000838
 8009b30:	20000734 	.word	0x20000734
 8009b34:	2000083c 	.word	0x2000083c
 8009b38:	20000820 	.word	0x20000820
 8009b3c:	200007f0 	.word	0x200007f0
 8009b40:	200007ec 	.word	0x200007ec
 8009b44:	20000854 	.word	0x20000854

08009b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3b04      	subs	r3, #4
 8009b58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3b04      	subs	r3, #4
 8009b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f023 0201 	bic.w	r2, r3, #1
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b78:	4a08      	ldr	r2, [pc, #32]	; (8009b9c <pxPortInitialiseStack+0x54>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3b14      	subs	r3, #20
 8009b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3b20      	subs	r3, #32
 8009b8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b90:	68fb      	ldr	r3, [r7, #12]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bc80      	pop	{r7}
 8009b9a:	4770      	bx	lr
 8009b9c:	08009ba1 	.word	0x08009ba1

08009ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <prvTaskExitError+0x54>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb2:	d00a      	beq.n	8009bca <prvTaskExitError+0x2a>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60fb      	str	r3, [r7, #12]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <prvTaskExitError+0x28>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	60bb      	str	r3, [r7, #8]
}
 8009bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bde:	bf00      	nop
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0fc      	beq.n	8009be0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000014 	.word	0x20000014
	...

08009c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <pxCurrentTCBConst2>)
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	6808      	ldr	r0, [r1, #0]
 8009c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c0a:	f380 8809 	msr	PSP, r0
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8811 	msr	BASEPRI, r0
 8009c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009c1e:	4770      	bx	lr

08009c20 <pxCurrentTCBConst2>:
 8009c20:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c28:	4806      	ldr	r0, [pc, #24]	; (8009c44 <prvPortStartFirstTask+0x1c>)
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	6800      	ldr	r0, [r0, #0]
 8009c2e:	f380 8808 	msr	MSP, r0
 8009c32:	b662      	cpsie	i
 8009c34:	b661      	cpsie	f
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	df00      	svc	0
 8009c40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c42:	bf00      	nop
 8009c44:	e000ed08 	.word	0xe000ed08

08009c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c4e:	4b32      	ldr	r3, [pc, #200]	; (8009d18 <xPortStartScheduler+0xd0>)
 8009c50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	22ff      	movs	r2, #255	; 0xff
 8009c5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <xPortStartScheduler+0xd4>)
 8009c74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c76:	4b2a      	ldr	r3, [pc, #168]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009c78:	2207      	movs	r2, #7
 8009c7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c7c:	e009      	b.n	8009c92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c7e:	4b28      	ldr	r3, [pc, #160]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	4a26      	ldr	r2, [pc, #152]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009c86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b80      	cmp	r3, #128	; 0x80
 8009c9c:	d0ef      	beq.n	8009c7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c9e:	4b20      	ldr	r3, [pc, #128]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f1c3 0307 	rsb	r3, r3, #7
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d00a      	beq.n	8009cc0 <xPortStartScheduler+0x78>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	60bb      	str	r3, [r7, #8]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cc0:	4b17      	ldr	r3, [pc, #92]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009cc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cd2:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <xPortStartScheduler+0xd8>)
 8009cd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cde:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <xPortStartScheduler+0xdc>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <xPortStartScheduler+0xdc>)
 8009ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cea:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <xPortStartScheduler+0xdc>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a0d      	ldr	r2, [pc, #52]	; (8009d24 <xPortStartScheduler+0xdc>)
 8009cf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009cf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cf6:	f000 f8b9 	bl	8009e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <xPortStartScheduler+0xe0>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d00:	f7ff ff92 	bl	8009c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d04:	f7ff fd6c 	bl	80097e0 <vTaskSwitchContext>
	prvTaskExitError();
 8009d08:	f7ff ff4a 	bl	8009ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	e000e400 	.word	0xe000e400
 8009d1c:	20000860 	.word	0x20000860
 8009d20:	20000864 	.word	0x20000864
 8009d24:	e000ed20 	.word	0xe000ed20
 8009d28:	20000014 	.word	0x20000014

08009d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	607b      	str	r3, [r7, #4]
}
 8009d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d46:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <vPortEnterCritical+0x58>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	4a0d      	ldr	r2, [pc, #52]	; (8009d84 <vPortEnterCritical+0x58>)
 8009d4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <vPortEnterCritical+0x58>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d10f      	bne.n	8009d78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d58:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <vPortEnterCritical+0x5c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	603b      	str	r3, [r7, #0]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <vPortEnterCritical+0x4a>
	}
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000014 	.word	0x20000014
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <vPortExitCritical+0x4c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <vPortExitCritical+0x24>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	607b      	str	r3, [r7, #4]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009db0:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <vPortExitCritical+0x4c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	4a08      	ldr	r2, [pc, #32]	; (8009dd8 <vPortExitCritical+0x4c>)
 8009db8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <vPortExitCritical+0x4c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d105      	bne.n	8009dce <vPortExitCritical+0x42>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009dcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr
 8009dd8:	20000014 	.word	0x20000014
 8009ddc:	00000000 	.word	0x00000000

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009df0:	6010      	str	r0, [r2, #0]
 8009df2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009df6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dfa:	f380 8811 	msr	BASEPRI, r0
 8009dfe:	f7ff fcef 	bl	80097e0 <vTaskSwitchContext>
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8811 	msr	BASEPRI, r0
 8009e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	6808      	ldr	r0, [r1, #0]
 8009e12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e16:	f380 8809 	msr	PSP, r0
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	4770      	bx	lr

08009e20 <pxCurrentTCBConst>:
 8009e20:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop

08009e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	607b      	str	r3, [r7, #4]
}
 8009e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e42:	f7ff fc15 	bl	8009670 <xTaskIncrementTick>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <xPortSysTickHandler+0x40>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	f383 8811 	msr	BASEPRI, r3
}
 8009e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <vPortSetupTimerInterrupt+0x30>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e76:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <vPortSetupTimerInterrupt+0x34>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <vPortSetupTimerInterrupt+0x38>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a09      	ldr	r2, [pc, #36]	; (8009ea8 <vPortSetupTimerInterrupt+0x3c>)
 8009e82:	fba2 2303 	umull	r2, r3, r2, r3
 8009e86:	099b      	lsrs	r3, r3, #6
 8009e88:	4a08      	ldr	r2, [pc, #32]	; (8009eac <vPortSetupTimerInterrupt+0x40>)
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e8e:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <vPortSetupTimerInterrupt+0x30>)
 8009e90:	2207      	movs	r2, #7
 8009e92:	601a      	str	r2, [r3, #0]
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr
 8009e9c:	e000e010 	.word	0xe000e010
 8009ea0:	e000e018 	.word	0xe000e018
 8009ea4:	20000008 	.word	0x20000008
 8009ea8:	10624dd3 	.word	0x10624dd3
 8009eac:	e000e014 	.word	0xe000e014

08009eb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	; 0x28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ebc:	f7ff fb2e 	bl	800951c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ec0:	4b5b      	ldr	r3, [pc, #364]	; (800a030 <pvPortMalloc+0x180>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ec8:	f000 f920 	bl	800a10c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ecc:	4b59      	ldr	r3, [pc, #356]	; (800a034 <pvPortMalloc+0x184>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f040 8093 	bne.w	800a000 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01d      	beq.n	8009f1c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d014      	beq.n	8009f1c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f023 0307 	bic.w	r3, r3, #7
 8009ef8:	3308      	adds	r3, #8
 8009efa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <pvPortMalloc+0x6c>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	617b      	str	r3, [r7, #20]
}
 8009f18:	bf00      	nop
 8009f1a:	e7fe      	b.n	8009f1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d06e      	beq.n	800a000 <pvPortMalloc+0x150>
 8009f22:	4b45      	ldr	r3, [pc, #276]	; (800a038 <pvPortMalloc+0x188>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d869      	bhi.n	800a000 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f2c:	4b43      	ldr	r3, [pc, #268]	; (800a03c <pvPortMalloc+0x18c>)
 8009f2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f30:	4b42      	ldr	r3, [pc, #264]	; (800a03c <pvPortMalloc+0x18c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f36:	e004      	b.n	8009f42 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d903      	bls.n	8009f54 <pvPortMalloc+0xa4>
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f1      	bne.n	8009f38 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f54:	4b36      	ldr	r3, [pc, #216]	; (800a030 <pvPortMalloc+0x180>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d050      	beq.n	800a000 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2208      	movs	r2, #8
 8009f64:	4413      	add	r3, r2
 8009f66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	2308      	movs	r3, #8
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d91f      	bls.n	8009fc0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4413      	add	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <pvPortMalloc+0xf8>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	613b      	str	r3, [r7, #16]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fba:	69b8      	ldr	r0, [r7, #24]
 8009fbc:	f000 f908 	bl	800a1d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fc0:	4b1d      	ldr	r3, [pc, #116]	; (800a038 <pvPortMalloc+0x188>)
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <pvPortMalloc+0x188>)
 8009fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fce:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <pvPortMalloc+0x188>)
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	; (800a040 <pvPortMalloc+0x190>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d203      	bcs.n	8009fe2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fda:	4b17      	ldr	r3, [pc, #92]	; (800a038 <pvPortMalloc+0x188>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a18      	ldr	r2, [pc, #96]	; (800a040 <pvPortMalloc+0x190>)
 8009fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <pvPortMalloc+0x184>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	431a      	orrs	r2, r3
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <pvPortMalloc+0x194>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a11      	ldr	r2, [pc, #68]	; (800a044 <pvPortMalloc+0x194>)
 8009ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a000:	f7ff fa9a 	bl	8009538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <pvPortMalloc+0x174>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	60fb      	str	r3, [r7, #12]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <pvPortMalloc+0x172>
	return pvReturn;
 800a024:	69fb      	ldr	r3, [r7, #28]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3728      	adds	r7, #40	; 0x28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20001470 	.word	0x20001470
 800a034:	20001484 	.word	0x20001484
 800a038:	20001474 	.word	0x20001474
 800a03c:	20001468 	.word	0x20001468
 800a040:	20001478 	.word	0x20001478
 800a044:	2000147c 	.word	0x2000147c

0800a048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d04d      	beq.n	800a0f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a05a:	2308      	movs	r3, #8
 800a05c:	425b      	negs	r3, r3
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <vPortFree+0xb8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4013      	ands	r3, r2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <vPortFree+0x44>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60fb      	str	r3, [r7, #12]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <vPortFree+0x62>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	60bb      	str	r3, [r7, #8]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	4b14      	ldr	r3, [pc, #80]	; (800a100 <vPortFree+0xb8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01e      	beq.n	800a0f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11a      	bne.n	800a0f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <vPortFree+0xb8>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	43db      	mvns	r3, r3
 800a0ca:	401a      	ands	r2, r3
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0d0:	f7ff fa24 	bl	800951c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <vPortFree+0xbc>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4413      	add	r3, r2
 800a0de:	4a09      	ldr	r2, [pc, #36]	; (800a104 <vPortFree+0xbc>)
 800a0e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0e2:	6938      	ldr	r0, [r7, #16]
 800a0e4:	f000 f874 	bl	800a1d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <vPortFree+0xc0>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	4a06      	ldr	r2, [pc, #24]	; (800a108 <vPortFree+0xc0>)
 800a0f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0f2:	f7ff fa21 	bl	8009538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20001484 	.word	0x20001484
 800a104:	20001474 	.word	0x20001474
 800a108:	20001480 	.word	0x20001480

0800a10c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a118:	4b27      	ldr	r3, [pc, #156]	; (800a1b8 <prvHeapInit+0xac>)
 800a11a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f003 0307 	and.w	r3, r3, #7
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00c      	beq.n	800a140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3307      	adds	r3, #7
 800a12a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0307 	bic.w	r3, r3, #7
 800a132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	4a1f      	ldr	r2, [pc, #124]	; (800a1b8 <prvHeapInit+0xac>)
 800a13c:	4413      	add	r3, r2
 800a13e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a144:	4a1d      	ldr	r2, [pc, #116]	; (800a1bc <prvHeapInit+0xb0>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a14a:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <prvHeapInit+0xb0>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	4413      	add	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a158:	2208      	movs	r2, #8
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	1a9b      	subs	r3, r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0307 	bic.w	r3, r3, #7
 800a166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <prvHeapInit+0xb4>)
 800a16c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a16e:	4b14      	ldr	r3, [pc, #80]	; (800a1c0 <prvHeapInit+0xb4>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2200      	movs	r2, #0
 800a174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <prvHeapInit+0xb4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a18c:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <prvHeapInit+0xb4>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4a0a      	ldr	r2, [pc, #40]	; (800a1c4 <prvHeapInit+0xb8>)
 800a19a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a09      	ldr	r2, [pc, #36]	; (800a1c8 <prvHeapInit+0xbc>)
 800a1a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1a4:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <prvHeapInit+0xc0>)
 800a1a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1aa:	601a      	str	r2, [r3, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20000868 	.word	0x20000868
 800a1bc:	20001468 	.word	0x20001468
 800a1c0:	20001470 	.word	0x20001470
 800a1c4:	20001478 	.word	0x20001478
 800a1c8:	20001474 	.word	0x20001474
 800a1cc:	20001484 	.word	0x20001484

0800a1d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1d8:	4b27      	ldr	r3, [pc, #156]	; (800a278 <prvInsertBlockIntoFreeList+0xa8>)
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e002      	b.n	800a1e4 <prvInsertBlockIntoFreeList+0x14>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d8f7      	bhi.n	800a1de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d108      	bne.n	800a212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	441a      	add	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	441a      	add	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d118      	bne.n	800a258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <prvInsertBlockIntoFreeList+0xac>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d00d      	beq.n	800a24e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	441a      	add	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	e008      	b.n	800a260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a24e:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <prvInsertBlockIntoFreeList+0xac>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	e003      	b.n	800a260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d002      	beq.n	800a26e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr
 800a278:	20001468 	.word	0x20001468
 800a27c:	20001470 	.word	0x20001470

0800a280 <siprintf>:
 800a280:	b40e      	push	{r1, r2, r3}
 800a282:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a286:	b500      	push	{lr}
 800a288:	b09c      	sub	sp, #112	; 0x70
 800a28a:	ab1d      	add	r3, sp, #116	; 0x74
 800a28c:	9002      	str	r0, [sp, #8]
 800a28e:	9006      	str	r0, [sp, #24]
 800a290:	9107      	str	r1, [sp, #28]
 800a292:	9104      	str	r1, [sp, #16]
 800a294:	4808      	ldr	r0, [pc, #32]	; (800a2b8 <siprintf+0x38>)
 800a296:	4909      	ldr	r1, [pc, #36]	; (800a2bc <siprintf+0x3c>)
 800a298:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29c:	9105      	str	r1, [sp, #20]
 800a29e:	6800      	ldr	r0, [r0, #0]
 800a2a0:	a902      	add	r1, sp, #8
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	f000 f99c 	bl	800a5e0 <_svfiprintf_r>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	9b02      	ldr	r3, [sp, #8]
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	b01c      	add	sp, #112	; 0x70
 800a2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b4:	b003      	add	sp, #12
 800a2b6:	4770      	bx	lr
 800a2b8:	20000064 	.word	0x20000064
 800a2bc:	ffff0208 	.word	0xffff0208

0800a2c0 <memset>:
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4402      	add	r2, r0
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d100      	bne.n	800a2ca <memset+0xa>
 800a2c8:	4770      	bx	lr
 800a2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ce:	e7f9      	b.n	800a2c4 <memset+0x4>

0800a2d0 <__errno>:
 800a2d0:	4b01      	ldr	r3, [pc, #4]	; (800a2d8 <__errno+0x8>)
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20000064 	.word	0x20000064

0800a2dc <__libc_init_array>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	2600      	movs	r6, #0
 800a2e0:	4d0c      	ldr	r5, [pc, #48]	; (800a314 <__libc_init_array+0x38>)
 800a2e2:	4c0d      	ldr	r4, [pc, #52]	; (800a318 <__libc_init_array+0x3c>)
 800a2e4:	1b64      	subs	r4, r4, r5
 800a2e6:	10a4      	asrs	r4, r4, #2
 800a2e8:	42a6      	cmp	r6, r4
 800a2ea:	d109      	bne.n	800a300 <__libc_init_array+0x24>
 800a2ec:	f000 fcc0 	bl	800ac70 <_init>
 800a2f0:	2600      	movs	r6, #0
 800a2f2:	4d0a      	ldr	r5, [pc, #40]	; (800a31c <__libc_init_array+0x40>)
 800a2f4:	4c0a      	ldr	r4, [pc, #40]	; (800a320 <__libc_init_array+0x44>)
 800a2f6:	1b64      	subs	r4, r4, r5
 800a2f8:	10a4      	asrs	r4, r4, #2
 800a2fa:	42a6      	cmp	r6, r4
 800a2fc:	d105      	bne.n	800a30a <__libc_init_array+0x2e>
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	f855 3b04 	ldr.w	r3, [r5], #4
 800a304:	4798      	blx	r3
 800a306:	3601      	adds	r6, #1
 800a308:	e7ee      	b.n	800a2e8 <__libc_init_array+0xc>
 800a30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30e:	4798      	blx	r3
 800a310:	3601      	adds	r6, #1
 800a312:	e7f2      	b.n	800a2fa <__libc_init_array+0x1e>
 800a314:	0800ad80 	.word	0x0800ad80
 800a318:	0800ad80 	.word	0x0800ad80
 800a31c:	0800ad80 	.word	0x0800ad80
 800a320:	0800ad84 	.word	0x0800ad84

0800a324 <__retarget_lock_acquire_recursive>:
 800a324:	4770      	bx	lr

0800a326 <__retarget_lock_release_recursive>:
 800a326:	4770      	bx	lr

0800a328 <memcpy>:
 800a328:	440a      	add	r2, r1
 800a32a:	4291      	cmp	r1, r2
 800a32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a330:	d100      	bne.n	800a334 <memcpy+0xc>
 800a332:	4770      	bx	lr
 800a334:	b510      	push	{r4, lr}
 800a336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33a:	4291      	cmp	r1, r2
 800a33c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a340:	d1f9      	bne.n	800a336 <memcpy+0xe>
 800a342:	bd10      	pop	{r4, pc}

0800a344 <_free_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4605      	mov	r5, r0
 800a348:	2900      	cmp	r1, #0
 800a34a:	d040      	beq.n	800a3ce <_free_r+0x8a>
 800a34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a350:	1f0c      	subs	r4, r1, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfb8      	it	lt
 800a356:	18e4      	addlt	r4, r4, r3
 800a358:	f000 f8dc 	bl	800a514 <__malloc_lock>
 800a35c:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <_free_r+0x8c>)
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	b933      	cbnz	r3, 800a370 <_free_r+0x2c>
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	6014      	str	r4, [r2, #0]
 800a366:	4628      	mov	r0, r5
 800a368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a36c:	f000 b8d8 	b.w	800a520 <__malloc_unlock>
 800a370:	42a3      	cmp	r3, r4
 800a372:	d908      	bls.n	800a386 <_free_r+0x42>
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	1821      	adds	r1, r4, r0
 800a378:	428b      	cmp	r3, r1
 800a37a:	bf01      	itttt	eq
 800a37c:	6819      	ldreq	r1, [r3, #0]
 800a37e:	685b      	ldreq	r3, [r3, #4]
 800a380:	1809      	addeq	r1, r1, r0
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	e7ed      	b.n	800a362 <_free_r+0x1e>
 800a386:	461a      	mov	r2, r3
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b10b      	cbz	r3, 800a390 <_free_r+0x4c>
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d9fa      	bls.n	800a386 <_free_r+0x42>
 800a390:	6811      	ldr	r1, [r2, #0]
 800a392:	1850      	adds	r0, r2, r1
 800a394:	42a0      	cmp	r0, r4
 800a396:	d10b      	bne.n	800a3b0 <_free_r+0x6c>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	4401      	add	r1, r0
 800a39c:	1850      	adds	r0, r2, r1
 800a39e:	4283      	cmp	r3, r0
 800a3a0:	6011      	str	r1, [r2, #0]
 800a3a2:	d1e0      	bne.n	800a366 <_free_r+0x22>
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	4408      	add	r0, r1
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	6053      	str	r3, [r2, #4]
 800a3ae:	e7da      	b.n	800a366 <_free_r+0x22>
 800a3b0:	d902      	bls.n	800a3b8 <_free_r+0x74>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	e7d6      	b.n	800a366 <_free_r+0x22>
 800a3b8:	6820      	ldr	r0, [r4, #0]
 800a3ba:	1821      	adds	r1, r4, r0
 800a3bc:	428b      	cmp	r3, r1
 800a3be:	bf01      	itttt	eq
 800a3c0:	6819      	ldreq	r1, [r3, #0]
 800a3c2:	685b      	ldreq	r3, [r3, #4]
 800a3c4:	1809      	addeq	r1, r1, r0
 800a3c6:	6021      	streq	r1, [r4, #0]
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	6054      	str	r4, [r2, #4]
 800a3cc:	e7cb      	b.n	800a366 <_free_r+0x22>
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	200015c8 	.word	0x200015c8

0800a3d4 <sbrk_aligned>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	4e0e      	ldr	r6, [pc, #56]	; (800a410 <sbrk_aligned+0x3c>)
 800a3d8:	460c      	mov	r4, r1
 800a3da:	6831      	ldr	r1, [r6, #0]
 800a3dc:	4605      	mov	r5, r0
 800a3de:	b911      	cbnz	r1, 800a3e6 <sbrk_aligned+0x12>
 800a3e0:	f000 fbaa 	bl	800ab38 <_sbrk_r>
 800a3e4:	6030      	str	r0, [r6, #0]
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 fba5 	bl	800ab38 <_sbrk_r>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d00a      	beq.n	800a408 <sbrk_aligned+0x34>
 800a3f2:	1cc4      	adds	r4, r0, #3
 800a3f4:	f024 0403 	bic.w	r4, r4, #3
 800a3f8:	42a0      	cmp	r0, r4
 800a3fa:	d007      	beq.n	800a40c <sbrk_aligned+0x38>
 800a3fc:	1a21      	subs	r1, r4, r0
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 fb9a 	bl	800ab38 <_sbrk_r>
 800a404:	3001      	adds	r0, #1
 800a406:	d101      	bne.n	800a40c <sbrk_aligned+0x38>
 800a408:	f04f 34ff 	mov.w	r4, #4294967295
 800a40c:	4620      	mov	r0, r4
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	200015cc 	.word	0x200015cc

0800a414 <_malloc_r>:
 800a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a418:	1ccd      	adds	r5, r1, #3
 800a41a:	f025 0503 	bic.w	r5, r5, #3
 800a41e:	3508      	adds	r5, #8
 800a420:	2d0c      	cmp	r5, #12
 800a422:	bf38      	it	cc
 800a424:	250c      	movcc	r5, #12
 800a426:	2d00      	cmp	r5, #0
 800a428:	4607      	mov	r7, r0
 800a42a:	db01      	blt.n	800a430 <_malloc_r+0x1c>
 800a42c:	42a9      	cmp	r1, r5
 800a42e:	d905      	bls.n	800a43c <_malloc_r+0x28>
 800a430:	230c      	movs	r3, #12
 800a432:	2600      	movs	r6, #0
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	4630      	mov	r0, r6
 800a438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a510 <_malloc_r+0xfc>
 800a440:	f000 f868 	bl	800a514 <__malloc_lock>
 800a444:	f8d8 3000 	ldr.w	r3, [r8]
 800a448:	461c      	mov	r4, r3
 800a44a:	bb5c      	cbnz	r4, 800a4a4 <_malloc_r+0x90>
 800a44c:	4629      	mov	r1, r5
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ffc0 	bl	800a3d4 <sbrk_aligned>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	4604      	mov	r4, r0
 800a458:	d155      	bne.n	800a506 <_malloc_r+0xf2>
 800a45a:	f8d8 4000 	ldr.w	r4, [r8]
 800a45e:	4626      	mov	r6, r4
 800a460:	2e00      	cmp	r6, #0
 800a462:	d145      	bne.n	800a4f0 <_malloc_r+0xdc>
 800a464:	2c00      	cmp	r4, #0
 800a466:	d048      	beq.n	800a4fa <_malloc_r+0xe6>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	4631      	mov	r1, r6
 800a46c:	4638      	mov	r0, r7
 800a46e:	eb04 0903 	add.w	r9, r4, r3
 800a472:	f000 fb61 	bl	800ab38 <_sbrk_r>
 800a476:	4581      	cmp	r9, r0
 800a478:	d13f      	bne.n	800a4fa <_malloc_r+0xe6>
 800a47a:	6821      	ldr	r1, [r4, #0]
 800a47c:	4638      	mov	r0, r7
 800a47e:	1a6d      	subs	r5, r5, r1
 800a480:	4629      	mov	r1, r5
 800a482:	f7ff ffa7 	bl	800a3d4 <sbrk_aligned>
 800a486:	3001      	adds	r0, #1
 800a488:	d037      	beq.n	800a4fa <_malloc_r+0xe6>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	442b      	add	r3, r5
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	f8d8 3000 	ldr.w	r3, [r8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d038      	beq.n	800a50a <_malloc_r+0xf6>
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	42a2      	cmp	r2, r4
 800a49c:	d12b      	bne.n	800a4f6 <_malloc_r+0xe2>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	605a      	str	r2, [r3, #4]
 800a4a2:	e00f      	b.n	800a4c4 <_malloc_r+0xb0>
 800a4a4:	6822      	ldr	r2, [r4, #0]
 800a4a6:	1b52      	subs	r2, r2, r5
 800a4a8:	d41f      	bmi.n	800a4ea <_malloc_r+0xd6>
 800a4aa:	2a0b      	cmp	r2, #11
 800a4ac:	d917      	bls.n	800a4de <_malloc_r+0xca>
 800a4ae:	1961      	adds	r1, r4, r5
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	6025      	str	r5, [r4, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	6059      	strne	r1, [r3, #4]
 800a4b8:	6863      	ldr	r3, [r4, #4]
 800a4ba:	bf08      	it	eq
 800a4bc:	f8c8 1000 	streq.w	r1, [r8]
 800a4c0:	5162      	str	r2, [r4, r5]
 800a4c2:	604b      	str	r3, [r1, #4]
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f104 060b 	add.w	r6, r4, #11
 800a4ca:	f000 f829 	bl	800a520 <__malloc_unlock>
 800a4ce:	f026 0607 	bic.w	r6, r6, #7
 800a4d2:	1d23      	adds	r3, r4, #4
 800a4d4:	1af2      	subs	r2, r6, r3
 800a4d6:	d0ae      	beq.n	800a436 <_malloc_r+0x22>
 800a4d8:	1b9b      	subs	r3, r3, r6
 800a4da:	50a3      	str	r3, [r4, r2]
 800a4dc:	e7ab      	b.n	800a436 <_malloc_r+0x22>
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	6862      	ldr	r2, [r4, #4]
 800a4e2:	d1dd      	bne.n	800a4a0 <_malloc_r+0x8c>
 800a4e4:	f8c8 2000 	str.w	r2, [r8]
 800a4e8:	e7ec      	b.n	800a4c4 <_malloc_r+0xb0>
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	6864      	ldr	r4, [r4, #4]
 800a4ee:	e7ac      	b.n	800a44a <_malloc_r+0x36>
 800a4f0:	4634      	mov	r4, r6
 800a4f2:	6876      	ldr	r6, [r6, #4]
 800a4f4:	e7b4      	b.n	800a460 <_malloc_r+0x4c>
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	e7cc      	b.n	800a494 <_malloc_r+0x80>
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	f000 f80e 	bl	800a520 <__malloc_unlock>
 800a504:	e797      	b.n	800a436 <_malloc_r+0x22>
 800a506:	6025      	str	r5, [r4, #0]
 800a508:	e7dc      	b.n	800a4c4 <_malloc_r+0xb0>
 800a50a:	605b      	str	r3, [r3, #4]
 800a50c:	deff      	udf	#255	; 0xff
 800a50e:	bf00      	nop
 800a510:	200015c8 	.word	0x200015c8

0800a514 <__malloc_lock>:
 800a514:	4801      	ldr	r0, [pc, #4]	; (800a51c <__malloc_lock+0x8>)
 800a516:	f7ff bf05 	b.w	800a324 <__retarget_lock_acquire_recursive>
 800a51a:	bf00      	nop
 800a51c:	200015c4 	.word	0x200015c4

0800a520 <__malloc_unlock>:
 800a520:	4801      	ldr	r0, [pc, #4]	; (800a528 <__malloc_unlock+0x8>)
 800a522:	f7ff bf00 	b.w	800a326 <__retarget_lock_release_recursive>
 800a526:	bf00      	nop
 800a528:	200015c4 	.word	0x200015c4

0800a52c <__ssputs_r>:
 800a52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	461f      	mov	r7, r3
 800a532:	688e      	ldr	r6, [r1, #8]
 800a534:	4682      	mov	sl, r0
 800a536:	42be      	cmp	r6, r7
 800a538:	460c      	mov	r4, r1
 800a53a:	4690      	mov	r8, r2
 800a53c:	680b      	ldr	r3, [r1, #0]
 800a53e:	d82c      	bhi.n	800a59a <__ssputs_r+0x6e>
 800a540:	898a      	ldrh	r2, [r1, #12]
 800a542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a546:	d026      	beq.n	800a596 <__ssputs_r+0x6a>
 800a548:	6965      	ldr	r5, [r4, #20]
 800a54a:	6909      	ldr	r1, [r1, #16]
 800a54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a550:	eba3 0901 	sub.w	r9, r3, r1
 800a554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a558:	1c7b      	adds	r3, r7, #1
 800a55a:	444b      	add	r3, r9
 800a55c:	106d      	asrs	r5, r5, #1
 800a55e:	429d      	cmp	r5, r3
 800a560:	bf38      	it	cc
 800a562:	461d      	movcc	r5, r3
 800a564:	0553      	lsls	r3, r2, #21
 800a566:	d527      	bpl.n	800a5b8 <__ssputs_r+0x8c>
 800a568:	4629      	mov	r1, r5
 800a56a:	f7ff ff53 	bl	800a414 <_malloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	b360      	cbz	r0, 800a5cc <__ssputs_r+0xa0>
 800a572:	464a      	mov	r2, r9
 800a574:	6921      	ldr	r1, [r4, #16]
 800a576:	f7ff fed7 	bl	800a328 <memcpy>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	6126      	str	r6, [r4, #16]
 800a588:	444e      	add	r6, r9
 800a58a:	6026      	str	r6, [r4, #0]
 800a58c:	463e      	mov	r6, r7
 800a58e:	6165      	str	r5, [r4, #20]
 800a590:	eba5 0509 	sub.w	r5, r5, r9
 800a594:	60a5      	str	r5, [r4, #8]
 800a596:	42be      	cmp	r6, r7
 800a598:	d900      	bls.n	800a59c <__ssputs_r+0x70>
 800a59a:	463e      	mov	r6, r7
 800a59c:	4632      	mov	r2, r6
 800a59e:	4641      	mov	r1, r8
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	f000 faaf 	bl	800ab04 <memmove>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	68a3      	ldr	r3, [r4, #8]
 800a5aa:	1b9b      	subs	r3, r3, r6
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	4433      	add	r3, r6
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	f000 fadb 	bl	800ab74 <_realloc_r>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1e0      	bne.n	800a586 <__ssputs_r+0x5a>
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	6921      	ldr	r1, [r4, #16]
 800a5c8:	f7ff febc 	bl	800a344 <_free_r>
 800a5cc:	230c      	movs	r3, #12
 800a5ce:	f8ca 3000 	str.w	r3, [sl]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	e7e9      	b.n	800a5b4 <__ssputs_r+0x88>

0800a5e0 <_svfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	4698      	mov	r8, r3
 800a5e6:	898b      	ldrh	r3, [r1, #12]
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	061b      	lsls	r3, r3, #24
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	b09d      	sub	sp, #116	; 0x74
 800a5f2:	d50e      	bpl.n	800a612 <_svfiprintf_r+0x32>
 800a5f4:	690b      	ldr	r3, [r1, #16]
 800a5f6:	b963      	cbnz	r3, 800a612 <_svfiprintf_r+0x32>
 800a5f8:	2140      	movs	r1, #64	; 0x40
 800a5fa:	f7ff ff0b 	bl	800a414 <_malloc_r>
 800a5fe:	6028      	str	r0, [r5, #0]
 800a600:	6128      	str	r0, [r5, #16]
 800a602:	b920      	cbnz	r0, 800a60e <_svfiprintf_r+0x2e>
 800a604:	230c      	movs	r3, #12
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295
 800a60c:	e0d0      	b.n	800a7b0 <_svfiprintf_r+0x1d0>
 800a60e:	2340      	movs	r3, #64	; 0x40
 800a610:	616b      	str	r3, [r5, #20]
 800a612:	2300      	movs	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	; 0x24
 800a616:	2320      	movs	r3, #32
 800a618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a61c:	2330      	movs	r3, #48	; 0x30
 800a61e:	f04f 0901 	mov.w	r9, #1
 800a622:	f8cd 800c 	str.w	r8, [sp, #12]
 800a626:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a7c8 <_svfiprintf_r+0x1e8>
 800a62a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a62e:	4623      	mov	r3, r4
 800a630:	469a      	mov	sl, r3
 800a632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a636:	b10a      	cbz	r2, 800a63c <_svfiprintf_r+0x5c>
 800a638:	2a25      	cmp	r2, #37	; 0x25
 800a63a:	d1f9      	bne.n	800a630 <_svfiprintf_r+0x50>
 800a63c:	ebba 0b04 	subs.w	fp, sl, r4
 800a640:	d00b      	beq.n	800a65a <_svfiprintf_r+0x7a>
 800a642:	465b      	mov	r3, fp
 800a644:	4622      	mov	r2, r4
 800a646:	4629      	mov	r1, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ff6f 	bl	800a52c <__ssputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f000 80a9 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a656:	445a      	add	r2, fp
 800a658:	9209      	str	r2, [sp, #36]	; 0x24
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80a1 	beq.w	800a7a6 <_svfiprintf_r+0x1c6>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66e:	f10a 0a01 	add.w	sl, sl, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9307      	str	r3, [sp, #28]
 800a676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a67a:	931a      	str	r3, [sp, #104]	; 0x68
 800a67c:	4654      	mov	r4, sl
 800a67e:	2205      	movs	r2, #5
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	4850      	ldr	r0, [pc, #320]	; (800a7c8 <_svfiprintf_r+0x1e8>)
 800a686:	f000 fa67 	bl	800ab58 <memchr>
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	b9d8      	cbnz	r0, 800a6c6 <_svfiprintf_r+0xe6>
 800a68e:	06d0      	lsls	r0, r2, #27
 800a690:	bf44      	itt	mi
 800a692:	2320      	movmi	r3, #32
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a698:	0711      	lsls	r1, r2, #28
 800a69a:	bf44      	itt	mi
 800a69c:	232b      	movmi	r3, #43	; 0x2b
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a8:	d015      	beq.n	800a6d6 <_svfiprintf_r+0xf6>
 800a6aa:	4654      	mov	r4, sl
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	f04f 0c0a 	mov.w	ip, #10
 800a6b2:	9a07      	ldr	r2, [sp, #28]
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ba:	3b30      	subs	r3, #48	; 0x30
 800a6bc:	2b09      	cmp	r3, #9
 800a6be:	d94d      	bls.n	800a75c <_svfiprintf_r+0x17c>
 800a6c0:	b1b0      	cbz	r0, 800a6f0 <_svfiprintf_r+0x110>
 800a6c2:	9207      	str	r2, [sp, #28]
 800a6c4:	e014      	b.n	800a6f0 <_svfiprintf_r+0x110>
 800a6c6:	eba0 0308 	sub.w	r3, r0, r8
 800a6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	46a2      	mov	sl, r4
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	e7d2      	b.n	800a67c <_svfiprintf_r+0x9c>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d19      	adds	r1, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9103      	str	r1, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfbb      	ittet	lt
 800a6e2:	425b      	neglt	r3, r3
 800a6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e8:	9307      	strge	r3, [sp, #28]
 800a6ea:	9307      	strlt	r3, [sp, #28]
 800a6ec:	bfb8      	it	lt
 800a6ee:	9204      	strlt	r2, [sp, #16]
 800a6f0:	7823      	ldrb	r3, [r4, #0]
 800a6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6f4:	d10c      	bne.n	800a710 <_svfiprintf_r+0x130>
 800a6f6:	7863      	ldrb	r3, [r4, #1]
 800a6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fa:	d134      	bne.n	800a766 <_svfiprintf_r+0x186>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3402      	adds	r4, #2
 800a700:	1d1a      	adds	r2, r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	9203      	str	r2, [sp, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfb8      	it	lt
 800a70a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a7cc <_svfiprintf_r+0x1ec>
 800a714:	2203      	movs	r2, #3
 800a716:	4650      	mov	r0, sl
 800a718:	7821      	ldrb	r1, [r4, #0]
 800a71a:	f000 fa1d 	bl	800ab58 <memchr>
 800a71e:	b138      	cbz	r0, 800a730 <_svfiprintf_r+0x150>
 800a720:	2240      	movs	r2, #64	; 0x40
 800a722:	9b04      	ldr	r3, [sp, #16]
 800a724:	eba0 000a 	sub.w	r0, r0, sl
 800a728:	4082      	lsls	r2, r0
 800a72a:	4313      	orrs	r3, r2
 800a72c:	3401      	adds	r4, #1
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a734:	2206      	movs	r2, #6
 800a736:	4826      	ldr	r0, [pc, #152]	; (800a7d0 <_svfiprintf_r+0x1f0>)
 800a738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a73c:	f000 fa0c 	bl	800ab58 <memchr>
 800a740:	2800      	cmp	r0, #0
 800a742:	d038      	beq.n	800a7b6 <_svfiprintf_r+0x1d6>
 800a744:	4b23      	ldr	r3, [pc, #140]	; (800a7d4 <_svfiprintf_r+0x1f4>)
 800a746:	bb1b      	cbnz	r3, 800a790 <_svfiprintf_r+0x1b0>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	3307      	adds	r3, #7
 800a74c:	f023 0307 	bic.w	r3, r3, #7
 800a750:	3308      	adds	r3, #8
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a756:	4433      	add	r3, r6
 800a758:	9309      	str	r3, [sp, #36]	; 0x24
 800a75a:	e768      	b.n	800a62e <_svfiprintf_r+0x4e>
 800a75c:	460c      	mov	r4, r1
 800a75e:	2001      	movs	r0, #1
 800a760:	fb0c 3202 	mla	r2, ip, r2, r3
 800a764:	e7a6      	b.n	800a6b4 <_svfiprintf_r+0xd4>
 800a766:	2300      	movs	r3, #0
 800a768:	f04f 0c0a 	mov.w	ip, #10
 800a76c:	4619      	mov	r1, r3
 800a76e:	3401      	adds	r4, #1
 800a770:	9305      	str	r3, [sp, #20]
 800a772:	4620      	mov	r0, r4
 800a774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a778:	3a30      	subs	r2, #48	; 0x30
 800a77a:	2a09      	cmp	r2, #9
 800a77c:	d903      	bls.n	800a786 <_svfiprintf_r+0x1a6>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0c6      	beq.n	800a710 <_svfiprintf_r+0x130>
 800a782:	9105      	str	r1, [sp, #20]
 800a784:	e7c4      	b.n	800a710 <_svfiprintf_r+0x130>
 800a786:	4604      	mov	r4, r0
 800a788:	2301      	movs	r3, #1
 800a78a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a78e:	e7f0      	b.n	800a772 <_svfiprintf_r+0x192>
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	462a      	mov	r2, r5
 800a796:	4638      	mov	r0, r7
 800a798:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <_svfiprintf_r+0x1f8>)
 800a79a:	a904      	add	r1, sp, #16
 800a79c:	f3af 8000 	nop.w
 800a7a0:	1c42      	adds	r2, r0, #1
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	d1d6      	bne.n	800a754 <_svfiprintf_r+0x174>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	065b      	lsls	r3, r3, #25
 800a7aa:	f53f af2d 	bmi.w	800a608 <_svfiprintf_r+0x28>
 800a7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7b0:	b01d      	add	sp, #116	; 0x74
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4638      	mov	r0, r7
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <_svfiprintf_r+0x1f8>)
 800a7c0:	a904      	add	r1, sp, #16
 800a7c2:	f000 f87d 	bl	800a8c0 <_printf_i>
 800a7c6:	e7eb      	b.n	800a7a0 <_svfiprintf_r+0x1c0>
 800a7c8:	0800ad4a 	.word	0x0800ad4a
 800a7cc:	0800ad50 	.word	0x0800ad50
 800a7d0:	0800ad54 	.word	0x0800ad54
 800a7d4:	00000000 	.word	0x00000000
 800a7d8:	0800a52d 	.word	0x0800a52d

0800a7dc <_printf_common>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	688a      	ldr	r2, [r1, #8]
 800a7e6:	690b      	ldr	r3, [r1, #16]
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	bfb8      	it	lt
 800a7ee:	4613      	movlt	r3, r2
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7fc:	b10a      	cbz	r2, 800a802 <_printf_common+0x26>
 800a7fe:	3301      	adds	r3, #1
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	0699      	lsls	r1, r3, #26
 800a806:	bf42      	ittt	mi
 800a808:	6833      	ldrmi	r3, [r6, #0]
 800a80a:	3302      	addmi	r3, #2
 800a80c:	6033      	strmi	r3, [r6, #0]
 800a80e:	6825      	ldr	r5, [r4, #0]
 800a810:	f015 0506 	ands.w	r5, r5, #6
 800a814:	d106      	bne.n	800a824 <_printf_common+0x48>
 800a816:	f104 0a19 	add.w	sl, r4, #25
 800a81a:	68e3      	ldr	r3, [r4, #12]
 800a81c:	6832      	ldr	r2, [r6, #0]
 800a81e:	1a9b      	subs	r3, r3, r2
 800a820:	42ab      	cmp	r3, r5
 800a822:	dc2b      	bgt.n	800a87c <_printf_common+0xa0>
 800a824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a828:	1e13      	subs	r3, r2, #0
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	bf18      	it	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	0692      	lsls	r2, r2, #26
 800a832:	d430      	bmi.n	800a896 <_printf_common+0xba>
 800a834:	4649      	mov	r1, r9
 800a836:	4638      	mov	r0, r7
 800a838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a83c:	47c0      	blx	r8
 800a83e:	3001      	adds	r0, #1
 800a840:	d023      	beq.n	800a88a <_printf_common+0xae>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	f003 0306 	and.w	r3, r3, #6
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	bf14      	ite	ne
 800a84e:	2500      	movne	r5, #0
 800a850:	6833      	ldreq	r3, [r6, #0]
 800a852:	f04f 0600 	mov.w	r6, #0
 800a856:	bf08      	it	eq
 800a858:	68e5      	ldreq	r5, [r4, #12]
 800a85a:	f104 041a 	add.w	r4, r4, #26
 800a85e:	bf08      	it	eq
 800a860:	1aed      	subeq	r5, r5, r3
 800a862:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a866:	bf08      	it	eq
 800a868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a86c:	4293      	cmp	r3, r2
 800a86e:	bfc4      	itt	gt
 800a870:	1a9b      	subgt	r3, r3, r2
 800a872:	18ed      	addgt	r5, r5, r3
 800a874:	42b5      	cmp	r5, r6
 800a876:	d11a      	bne.n	800a8ae <_printf_common+0xd2>
 800a878:	2000      	movs	r0, #0
 800a87a:	e008      	b.n	800a88e <_printf_common+0xb2>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4652      	mov	r2, sl
 800a880:	4649      	mov	r1, r9
 800a882:	4638      	mov	r0, r7
 800a884:	47c0      	blx	r8
 800a886:	3001      	adds	r0, #1
 800a888:	d103      	bne.n	800a892 <_printf_common+0xb6>
 800a88a:	f04f 30ff 	mov.w	r0, #4294967295
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a892:	3501      	adds	r5, #1
 800a894:	e7c1      	b.n	800a81a <_printf_common+0x3e>
 800a896:	2030      	movs	r0, #48	; 0x30
 800a898:	18e1      	adds	r1, r4, r3
 800a89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8a4:	4422      	add	r2, r4
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8ac:	e7c2      	b.n	800a834 <_printf_common+0x58>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	47c0      	blx	r8
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d0e6      	beq.n	800a88a <_printf_common+0xae>
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7d9      	b.n	800a874 <_printf_common+0x98>

0800a8c0 <_printf_i>:
 800a8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	7e0f      	ldrb	r7, [r1, #24]
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	2f78      	cmp	r7, #120	; 0x78
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	469a      	mov	sl, r3
 800a8d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8d6:	d807      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8d8:	2f62      	cmp	r7, #98	; 0x62
 800a8da:	d80a      	bhi.n	800a8f2 <_printf_i+0x32>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	f000 80d5 	beq.w	800aa8c <_printf_i+0x1cc>
 800a8e2:	2f58      	cmp	r7, #88	; 0x58
 800a8e4:	f000 80c1 	beq.w	800aa6a <_printf_i+0x1aa>
 800a8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8f0:	e03a      	b.n	800a968 <_printf_i+0xa8>
 800a8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8f6:	2b15      	cmp	r3, #21
 800a8f8:	d8f6      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8fa:	a101      	add	r1, pc, #4	; (adr r1, 800a900 <_printf_i+0x40>)
 800a8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a900:	0800a959 	.word	0x0800a959
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a8e9 	.word	0x0800a8e9
 800a90c:	0800a8e9 	.word	0x0800a8e9
 800a910:	0800a8e9 	.word	0x0800a8e9
 800a914:	0800a8e9 	.word	0x0800a8e9
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a8e9 	.word	0x0800a8e9
 800a920:	0800a8e9 	.word	0x0800a8e9
 800a924:	0800a8e9 	.word	0x0800a8e9
 800a928:	0800a8e9 	.word	0x0800a8e9
 800a92c:	0800aa73 	.word	0x0800aa73
 800a930:	0800a999 	.word	0x0800a999
 800a934:	0800aa2d 	.word	0x0800aa2d
 800a938:	0800a8e9 	.word	0x0800a8e9
 800a93c:	0800a8e9 	.word	0x0800a8e9
 800a940:	0800aa95 	.word	0x0800aa95
 800a944:	0800a8e9 	.word	0x0800a8e9
 800a948:	0800a999 	.word	0x0800a999
 800a94c:	0800a8e9 	.word	0x0800a8e9
 800a950:	0800a8e9 	.word	0x0800a8e9
 800a954:	0800aa35 	.word	0x0800aa35
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	1d1a      	adds	r2, r3, #4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	602a      	str	r2, [r5, #0]
 800a960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a968:	2301      	movs	r3, #1
 800a96a:	e0a0      	b.n	800aaae <_printf_i+0x1ee>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	0607      	lsls	r7, r0, #24
 800a972:	f103 0104 	add.w	r1, r3, #4
 800a976:	6029      	str	r1, [r5, #0]
 800a978:	d501      	bpl.n	800a97e <_printf_i+0xbe>
 800a97a:	681e      	ldr	r6, [r3, #0]
 800a97c:	e003      	b.n	800a986 <_printf_i+0xc6>
 800a97e:	0646      	lsls	r6, r0, #25
 800a980:	d5fb      	bpl.n	800a97a <_printf_i+0xba>
 800a982:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a986:	2e00      	cmp	r6, #0
 800a988:	da03      	bge.n	800a992 <_printf_i+0xd2>
 800a98a:	232d      	movs	r3, #45	; 0x2d
 800a98c:	4276      	negs	r6, r6
 800a98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a992:	230a      	movs	r3, #10
 800a994:	4859      	ldr	r0, [pc, #356]	; (800aafc <_printf_i+0x23c>)
 800a996:	e012      	b.n	800a9be <_printf_i+0xfe>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	6820      	ldr	r0, [r4, #0]
 800a99c:	1d19      	adds	r1, r3, #4
 800a99e:	6029      	str	r1, [r5, #0]
 800a9a0:	0605      	lsls	r5, r0, #24
 800a9a2:	d501      	bpl.n	800a9a8 <_printf_i+0xe8>
 800a9a4:	681e      	ldr	r6, [r3, #0]
 800a9a6:	e002      	b.n	800a9ae <_printf_i+0xee>
 800a9a8:	0641      	lsls	r1, r0, #25
 800a9aa:	d5fb      	bpl.n	800a9a4 <_printf_i+0xe4>
 800a9ac:	881e      	ldrh	r6, [r3, #0]
 800a9ae:	2f6f      	cmp	r7, #111	; 0x6f
 800a9b0:	bf0c      	ite	eq
 800a9b2:	2308      	moveq	r3, #8
 800a9b4:	230a      	movne	r3, #10
 800a9b6:	4851      	ldr	r0, [pc, #324]	; (800aafc <_printf_i+0x23c>)
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9be:	6865      	ldr	r5, [r4, #4]
 800a9c0:	2d00      	cmp	r5, #0
 800a9c2:	bfa8      	it	ge
 800a9c4:	6821      	ldrge	r1, [r4, #0]
 800a9c6:	60a5      	str	r5, [r4, #8]
 800a9c8:	bfa4      	itt	ge
 800a9ca:	f021 0104 	bicge.w	r1, r1, #4
 800a9ce:	6021      	strge	r1, [r4, #0]
 800a9d0:	b90e      	cbnz	r6, 800a9d6 <_printf_i+0x116>
 800a9d2:	2d00      	cmp	r5, #0
 800a9d4:	d04b      	beq.n	800aa6e <_printf_i+0x1ae>
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9dc:	fb03 6711 	mls	r7, r3, r1, r6
 800a9e0:	5dc7      	ldrb	r7, [r0, r7]
 800a9e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9e6:	4637      	mov	r7, r6
 800a9e8:	42bb      	cmp	r3, r7
 800a9ea:	460e      	mov	r6, r1
 800a9ec:	d9f4      	bls.n	800a9d8 <_printf_i+0x118>
 800a9ee:	2b08      	cmp	r3, #8
 800a9f0:	d10b      	bne.n	800aa0a <_printf_i+0x14a>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	07de      	lsls	r6, r3, #31
 800a9f6:	d508      	bpl.n	800aa0a <_printf_i+0x14a>
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	6861      	ldr	r1, [r4, #4]
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	bfde      	ittt	le
 800aa00:	2330      	movle	r3, #48	; 0x30
 800aa02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa0a:	1b52      	subs	r2, r2, r5
 800aa0c:	6122      	str	r2, [r4, #16]
 800aa0e:	464b      	mov	r3, r9
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f8cd a000 	str.w	sl, [sp]
 800aa18:	aa03      	add	r2, sp, #12
 800aa1a:	f7ff fedf 	bl	800a7dc <_printf_common>
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d14a      	bne.n	800aab8 <_printf_i+0x1f8>
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	b004      	add	sp, #16
 800aa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	f043 0320 	orr.w	r3, r3, #32
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	2778      	movs	r7, #120	; 0x78
 800aa36:	4832      	ldr	r0, [pc, #200]	; (800ab00 <_printf_i+0x240>)
 800aa38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	6829      	ldr	r1, [r5, #0]
 800aa40:	061f      	lsls	r7, r3, #24
 800aa42:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa46:	d402      	bmi.n	800aa4e <_printf_i+0x18e>
 800aa48:	065f      	lsls	r7, r3, #25
 800aa4a:	bf48      	it	mi
 800aa4c:	b2b6      	uxthmi	r6, r6
 800aa4e:	07df      	lsls	r7, r3, #31
 800aa50:	bf48      	it	mi
 800aa52:	f043 0320 	orrmi.w	r3, r3, #32
 800aa56:	6029      	str	r1, [r5, #0]
 800aa58:	bf48      	it	mi
 800aa5a:	6023      	strmi	r3, [r4, #0]
 800aa5c:	b91e      	cbnz	r6, 800aa66 <_printf_i+0x1a6>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f023 0320 	bic.w	r3, r3, #32
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	2310      	movs	r3, #16
 800aa68:	e7a6      	b.n	800a9b8 <_printf_i+0xf8>
 800aa6a:	4824      	ldr	r0, [pc, #144]	; (800aafc <_printf_i+0x23c>)
 800aa6c:	e7e4      	b.n	800aa38 <_printf_i+0x178>
 800aa6e:	4615      	mov	r5, r2
 800aa70:	e7bd      	b.n	800a9ee <_printf_i+0x12e>
 800aa72:	682b      	ldr	r3, [r5, #0]
 800aa74:	6826      	ldr	r6, [r4, #0]
 800aa76:	1d18      	adds	r0, r3, #4
 800aa78:	6961      	ldr	r1, [r4, #20]
 800aa7a:	6028      	str	r0, [r5, #0]
 800aa7c:	0635      	lsls	r5, r6, #24
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	d501      	bpl.n	800aa86 <_printf_i+0x1c6>
 800aa82:	6019      	str	r1, [r3, #0]
 800aa84:	e002      	b.n	800aa8c <_printf_i+0x1cc>
 800aa86:	0670      	lsls	r0, r6, #25
 800aa88:	d5fb      	bpl.n	800aa82 <_printf_i+0x1c2>
 800aa8a:	8019      	strh	r1, [r3, #0]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4615      	mov	r5, r2
 800aa90:	6123      	str	r3, [r4, #16]
 800aa92:	e7bc      	b.n	800aa0e <_printf_i+0x14e>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	2100      	movs	r1, #0
 800aa98:	1d1a      	adds	r2, r3, #4
 800aa9a:	602a      	str	r2, [r5, #0]
 800aa9c:	681d      	ldr	r5, [r3, #0]
 800aa9e:	6862      	ldr	r2, [r4, #4]
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 f859 	bl	800ab58 <memchr>
 800aaa6:	b108      	cbz	r0, 800aaac <_printf_i+0x1ec>
 800aaa8:	1b40      	subs	r0, r0, r5
 800aaaa:	6060      	str	r0, [r4, #4]
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	2300      	movs	r3, #0
 800aab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab6:	e7aa      	b.n	800aa0e <_printf_i+0x14e>
 800aab8:	462a      	mov	r2, r5
 800aaba:	4649      	mov	r1, r9
 800aabc:	4640      	mov	r0, r8
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	47d0      	blx	sl
 800aac2:	3001      	adds	r0, #1
 800aac4:	d0ad      	beq.n	800aa22 <_printf_i+0x162>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	079b      	lsls	r3, r3, #30
 800aaca:	d413      	bmi.n	800aaf4 <_printf_i+0x234>
 800aacc:	68e0      	ldr	r0, [r4, #12]
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	4298      	cmp	r0, r3
 800aad2:	bfb8      	it	lt
 800aad4:	4618      	movlt	r0, r3
 800aad6:	e7a6      	b.n	800aa26 <_printf_i+0x166>
 800aad8:	2301      	movs	r3, #1
 800aada:	4632      	mov	r2, r6
 800aadc:	4649      	mov	r1, r9
 800aade:	4640      	mov	r0, r8
 800aae0:	47d0      	blx	sl
 800aae2:	3001      	adds	r0, #1
 800aae4:	d09d      	beq.n	800aa22 <_printf_i+0x162>
 800aae6:	3501      	adds	r5, #1
 800aae8:	68e3      	ldr	r3, [r4, #12]
 800aaea:	9903      	ldr	r1, [sp, #12]
 800aaec:	1a5b      	subs	r3, r3, r1
 800aaee:	42ab      	cmp	r3, r5
 800aaf0:	dcf2      	bgt.n	800aad8 <_printf_i+0x218>
 800aaf2:	e7eb      	b.n	800aacc <_printf_i+0x20c>
 800aaf4:	2500      	movs	r5, #0
 800aaf6:	f104 0619 	add.w	r6, r4, #25
 800aafa:	e7f5      	b.n	800aae8 <_printf_i+0x228>
 800aafc:	0800ad5b 	.word	0x0800ad5b
 800ab00:	0800ad6c 	.word	0x0800ad6c

0800ab04 <memmove>:
 800ab04:	4288      	cmp	r0, r1
 800ab06:	b510      	push	{r4, lr}
 800ab08:	eb01 0402 	add.w	r4, r1, r2
 800ab0c:	d902      	bls.n	800ab14 <memmove+0x10>
 800ab0e:	4284      	cmp	r4, r0
 800ab10:	4623      	mov	r3, r4
 800ab12:	d807      	bhi.n	800ab24 <memmove+0x20>
 800ab14:	1e43      	subs	r3, r0, #1
 800ab16:	42a1      	cmp	r1, r4
 800ab18:	d008      	beq.n	800ab2c <memmove+0x28>
 800ab1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab22:	e7f8      	b.n	800ab16 <memmove+0x12>
 800ab24:	4601      	mov	r1, r0
 800ab26:	4402      	add	r2, r0
 800ab28:	428a      	cmp	r2, r1
 800ab2a:	d100      	bne.n	800ab2e <memmove+0x2a>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab36:	e7f7      	b.n	800ab28 <memmove+0x24>

0800ab38 <_sbrk_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4d05      	ldr	r5, [pc, #20]	; (800ab54 <_sbrk_r+0x1c>)
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f7 fdc4 	bl	80026d0 <_sbrk>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_sbrk_r+0x1a>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_sbrk_r+0x1a>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	200015c0 	.word	0x200015c0

0800ab58 <memchr>:
 800ab58:	4603      	mov	r3, r0
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	b2c9      	uxtb	r1, r1
 800ab5e:	4402      	add	r2, r0
 800ab60:	4293      	cmp	r3, r2
 800ab62:	4618      	mov	r0, r3
 800ab64:	d101      	bne.n	800ab6a <memchr+0x12>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e003      	b.n	800ab72 <memchr+0x1a>
 800ab6a:	7804      	ldrb	r4, [r0, #0]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	428c      	cmp	r4, r1
 800ab70:	d1f6      	bne.n	800ab60 <memchr+0x8>
 800ab72:	bd10      	pop	{r4, pc}

0800ab74 <_realloc_r>:
 800ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab78:	4680      	mov	r8, r0
 800ab7a:	4614      	mov	r4, r2
 800ab7c:	460e      	mov	r6, r1
 800ab7e:	b921      	cbnz	r1, 800ab8a <_realloc_r+0x16>
 800ab80:	4611      	mov	r1, r2
 800ab82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	f7ff bc45 	b.w	800a414 <_malloc_r>
 800ab8a:	b92a      	cbnz	r2, 800ab98 <_realloc_r+0x24>
 800ab8c:	f7ff fbda 	bl	800a344 <_free_r>
 800ab90:	4625      	mov	r5, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab98:	f000 f81b 	bl	800abd2 <_malloc_usable_size_r>
 800ab9c:	4284      	cmp	r4, r0
 800ab9e:	4607      	mov	r7, r0
 800aba0:	d802      	bhi.n	800aba8 <_realloc_r+0x34>
 800aba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aba6:	d812      	bhi.n	800abce <_realloc_r+0x5a>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4640      	mov	r0, r8
 800abac:	f7ff fc32 	bl	800a414 <_malloc_r>
 800abb0:	4605      	mov	r5, r0
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0ed      	beq.n	800ab92 <_realloc_r+0x1e>
 800abb6:	42bc      	cmp	r4, r7
 800abb8:	4622      	mov	r2, r4
 800abba:	4631      	mov	r1, r6
 800abbc:	bf28      	it	cs
 800abbe:	463a      	movcs	r2, r7
 800abc0:	f7ff fbb2 	bl	800a328 <memcpy>
 800abc4:	4631      	mov	r1, r6
 800abc6:	4640      	mov	r0, r8
 800abc8:	f7ff fbbc 	bl	800a344 <_free_r>
 800abcc:	e7e1      	b.n	800ab92 <_realloc_r+0x1e>
 800abce:	4635      	mov	r5, r6
 800abd0:	e7df      	b.n	800ab92 <_realloc_r+0x1e>

0800abd2 <_malloc_usable_size_r>:
 800abd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd6:	1f18      	subs	r0, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bfbc      	itt	lt
 800abdc:	580b      	ldrlt	r3, [r1, r0]
 800abde:	18c0      	addlt	r0, r0, r3
 800abe0:	4770      	bx	lr
	...

0800abe4 <round>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800abea:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800abee:	2a13      	cmp	r2, #19
 800abf0:	460b      	mov	r3, r1
 800abf2:	4605      	mov	r5, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	dc18      	bgt.n	800ac2a <round+0x46>
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	da09      	bge.n	800ac10 <round+0x2c>
 800abfc:	3201      	adds	r2, #1
 800abfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ac02:	d103      	bne.n	800ac0c <round+0x28>
 800ac04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	e029      	b.n	800ac64 <round+0x80>
 800ac10:	4816      	ldr	r0, [pc, #88]	; (800ac6c <round+0x88>)
 800ac12:	4110      	asrs	r0, r2
 800ac14:	4001      	ands	r1, r0
 800ac16:	4329      	orrs	r1, r5
 800ac18:	d011      	beq.n	800ac3e <round+0x5a>
 800ac1a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac1e:	fa41 f202 	asr.w	r2, r1, r2
 800ac22:	4413      	add	r3, r2
 800ac24:	ea23 0300 	bic.w	r3, r3, r0
 800ac28:	e7f0      	b.n	800ac0c <round+0x28>
 800ac2a:	2a33      	cmp	r2, #51	; 0x33
 800ac2c:	dd0a      	ble.n	800ac44 <round+0x60>
 800ac2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ac32:	d104      	bne.n	800ac3e <round+0x5a>
 800ac34:	4602      	mov	r2, r0
 800ac36:	f7f5 fb09 	bl	800024c <__adddf3>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	4628      	mov	r0, r5
 800ac40:	4621      	mov	r1, r4
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ac4c:	40f8      	lsrs	r0, r7
 800ac4e:	4228      	tst	r0, r5
 800ac50:	d0f5      	beq.n	800ac3e <round+0x5a>
 800ac52:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800ac56:	2201      	movs	r2, #1
 800ac58:	408a      	lsls	r2, r1
 800ac5a:	1952      	adds	r2, r2, r5
 800ac5c:	bf28      	it	cs
 800ac5e:	3301      	addcs	r3, #1
 800ac60:	ea22 0200 	bic.w	r2, r2, r0
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	e7e7      	b.n	800ac3a <round+0x56>
 800ac6a:	bf00      	nop
 800ac6c:	000fffff 	.word	0x000fffff

0800ac70 <_init>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	bf00      	nop
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr

0800ac7c <_fini>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	bf00      	nop
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr
