
f103_robotv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008bb8  08008bb8  00018bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca8  08008ca8  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008ca8  08008ca8  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ca8  08008ca8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008cb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000108  08008db8  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08008db8  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127fb  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e0f  00000000  00000000  0003296f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00035780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d38  00000000  00000000  00036858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2f1  00000000  00000000  00037590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b8c  00000000  00000000  00052881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c033  00000000  00000000  0006940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e94  00000000  00000000  00105440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000108 	.word	0x20000108
 8000204:	00000000 	.word	0x00000000
 8000208:	08008b9c 	.word	0x08008b9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000010c 	.word	0x2000010c
 8000224:	08008b9c 	.word	0x08008b9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <reverseBits>:
#ifndef INC_CRC_H_
#define INC_CRC_H_


uint8_t reverseBits(uint8_t value)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e010      	b.n	800109e <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b25a      	sxtb	r2, r3
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	fa41 f303 	asr.w	r3, r1, r3
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddeb      	ble.n	800107c <reverseBits+0x14>
	}
	return result;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 80010cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d049      	beq.n	8001168 <crc8+0xb8>
 80010d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d045      	beq.n	8001168 <crc8+0xb8>
		crc = reverseBits(crc);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffc1 	bl	8001068 <reverseBits>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffba 	bl	8001068 <reverseBits>
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e028      	b.n	8001150 <crc8+0xa0>
			crc ^= data[i];
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	4413      	add	r3, r2
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110a:	4053      	eors	r3, r2
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e016      	b.n	8001144 <crc8+0x94>
 8001116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <crc8+0x82>
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4053      	eors	r3, r2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	e003      	b.n	800113a <crc8+0x8a>
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dde5      	ble.n	8001116 <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	3301      	adds	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3d2      	bcc.n	80010fe <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8001158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800115c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001160:	4053      	eors	r3, r2
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001166:	e056      	b.n	8001216 <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e037      	b.n	80011de <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 800116e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <crc8+0xd8>
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff72 	bl	8001068 <reverseBits>
 8001184:	4603      	mov	r3, r0
 8001186:	e003      	b.n	8001190 <crc8+0xe0>
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001196:	4053      	eors	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e016      	b.n	80011d2 <crc8+0x122>
 80011a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da09      	bge.n	80011c0 <crc8+0x110>
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4053      	eors	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e003      	b.n	80011c8 <crc8+0x118>
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	dde5      	ble.n	80011a4 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3301      	adds	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3c3      	bcc.n	800116e <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80011e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <crc8+0x156>
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff38 	bl	8001068 <reverseBits>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001200:	4053      	eors	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e005      	b.n	8001212 <crc8+0x162>
 8001206:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800120a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800120e:	4053      	eors	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
 800122a:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <checkCRC+0x50>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <checkCRC+0x54>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	2100      	movs	r1, #0
 8001236:	9102      	str	r1, [sp, #8]
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	2231      	movs	r2, #49	; 0x31
 8001240:	2109      	movs	r1, #9
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff34 	bl	80010b0 <crc8>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3309      	adds	r3, #9
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <checkCRC+0x36>
			return 1;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3309      	adds	r3, #9
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <checkCRC+0x44>
			return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <checkCRC+0x46>
		}
	else return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000
 8001278:	20000001 	.word	0x20000001

0800127c <receiveFromBuffer>:

void receiveFromBuffer()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001280:	2219      	movs	r2, #25
 8001282:	4904      	ldr	r1, [pc, #16]	; (8001294 <receiveFromBuffer+0x18>)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <receiveFromBuffer+0x1c>)
 8001286:	f005 fd04 	bl	8006c92 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <receiveFromBuffer+0x20>)
 800128c:	f000 f834 	bl	80012f8 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000128 	.word	0x20000128
 8001298:	200003d0 	.word	0x200003d0
 800129c:	2000015c 	.word	0x2000015c

080012a0 <send>:

void send(uint8_t crc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	if(crc)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d011      	beq.n	80012d4 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <send+0x48>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <send+0x4c>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	2100      	movs	r1, #0
 80012ba:	9102      	str	r1, [sp, #8]
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	2231      	movs	r2, #49	; 0x31
 80012c4:	2109      	movs	r1, #9
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <send+0x50>)
 80012c8:	f7ff fef2 	bl	80010b0 <crc8>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <send+0x50>)
 80012d2:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 80012d4:	230a      	movs	r3, #10
 80012d6:	220a      	movs	r2, #10
 80012d8:	4905      	ldr	r1, [pc, #20]	; (80012f0 <send+0x50>)
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <send+0x54>)
 80012dc:	f005 fc56 	bl	8006b8c <HAL_UART_Transmit>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000001 	.word	0x20000001
 80012f0:	20000174 	.word	0x20000174
 80012f4:	200003d0 	.word	0x200003d0

080012f8 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor, uint8_t connected)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	if (!connected)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 812f 	bne.w	800156a <Parse_DMA_All+0x272>
	{
		if(sizeof(responseBufferH)>0)
			{
				sensor->leftii = responseBufferH[0];
 800130c:	4b9e      	ldr	r3, [pc, #632]	; (8001588 <Parse_DMA_All+0x290>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	701a      	strb	r2, [r3, #0]
				sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 8001314:	4b9c      	ldr	r3, [pc, #624]	; (8001588 <Parse_DMA_All+0x290>)
 8001316:	785a      	ldrb	r2, [r3, #1]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	709a      	strb	r2, [r3, #2]
				uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <Parse_DMA_All+0x290>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b98      	ldr	r3, [pc, #608]	; (8001588 <Parse_DMA_All+0x290>)
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	82fb      	strh	r3, [r7, #22]
				short currentR = current;
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	82bb      	strh	r3, [r7, #20]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 8001334:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db14      	blt.n	8001366 <Parse_DMA_All+0x6e>
					sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 800133c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fcc7 	bl	8000cd4 <__aeabi_i2f>
 8001346:	4603      	mov	r3, r0
 8001348:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fd15 	bl	8000d7c <__aeabi_fmul>
 8001352:	4603      	mov	r3, r0
 8001354:	498d      	ldr	r1, [pc, #564]	; (800158c <Parse_DMA_All+0x294>)
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdc4 	bl	8000ee4 <__aeabi_fdiv>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	e013      	b.n	800138e <Parse_DMA_All+0x96>
				} else {
					sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fcb2 	bl	8000cd4 <__aeabi_i2f>
 8001370:	4603      	mov	r3, r0
 8001372:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd00 	bl	8000d7c <__aeabi_fmul>
 800137c:	4603      	mov	r3, r0
 800137e:	4984      	ldr	r1, [pc, #528]	; (8001590 <Parse_DMA_All+0x298>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fdaf 	bl	8000ee4 <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	605a      	str	r2, [r3, #4]
				}
				uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 800138e:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <Parse_DMA_All+0x290>)
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b7c      	ldr	r3, [pc, #496]	; (8001588 <Parse_DMA_All+0x290>)
 8001398:	795b      	ldrb	r3, [r3, #5]
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21b      	sxth	r3, r3
 80013a0:	827b      	strh	r3, [r7, #18]
				velocityL = velocity;
 80013a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013a6:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <Parse_DMA_All+0x29c>)
 80013a8:	801a      	strh	r2, [r3, #0]
				if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <Parse_DMA_All+0x29c>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80013b4:	dd11      	ble.n	80013da <Parse_DMA_All+0xe2>
 80013b6:	4b77      	ldr	r3, [pc, #476]	; (8001594 <Parse_DMA_All+0x29c>)
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b73      	ldr	r3, [pc, #460]	; (8001594 <Parse_DMA_All+0x29c>)
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	4b72      	ldr	r3, [pc, #456]	; (8001594 <Parse_DMA_All+0x29c>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <Parse_DMA_All+0x29c>)
 80013d8:	801a      	strh	r2, [r3, #0]
				sensor->LeftVelocity = velocityL;
 80013da:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <Parse_DMA_All+0x29c>)
 80013dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	819a      	strh	r2, [r3, #12]
				sensor->Leftwinding_temp = responseBufferH[6];
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <Parse_DMA_All+0x290>)
 80013e6:	799a      	ldrb	r2, [r3, #6]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	741a      	strb	r2, [r3, #16]
				sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <Parse_DMA_All+0x290>)
 80013ee:	79db      	ldrb	r3, [r3, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc6b 	bl	8000ccc <__aeabi_ui2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4967      	ldr	r1, [pc, #412]	; (8001598 <Parse_DMA_All+0x2a0>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fcbe 	bl	8000d7c <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f87c 	bl	8000500 <__aeabi_f2d>
 8001408:	a35d      	add	r3, pc, #372	; (adr r3, 8001580 <Parse_DMA_All+0x288>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f9f9 	bl	8000804 <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f007 faab 	bl	8008974 <round>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fb73 	bl	8000b10 <__aeabi_d2iz>
 800142a:	4603      	mov	r3, r0
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	825a      	strh	r2, [r3, #18]
				sensor->Righterror = responseBufferH[8];
 8001432:	4b55      	ldr	r3, [pc, #340]	; (8001588 <Parse_DMA_All+0x290>)
 8001434:	7a1a      	ldrb	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	75da      	strb	r2, [r3, #23]
		//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
		//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
			}
			if(sizeof(responseBufferL)>0)
			{
				sensor->reightii = responseBufferL[0];
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <Parse_DMA_All+0x2a4>)
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	705a      	strb	r2, [r3, #1]
				sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <Parse_DMA_All+0x2a4>)
 8001444:	785a      	ldrb	r2, [r3, #1]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	70da      	strb	r2, [r3, #3]
				uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <Parse_DMA_All+0x2a4>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <Parse_DMA_All+0x2a4>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21b      	sxth	r3, r3
 800145c:	823b      	strh	r3, [r7, #16]
				short currentR = current;
 800145e:	8a3b      	ldrh	r3, [r7, #16]
 8001460:	81fb      	strh	r3, [r7, #14]
				if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
				if (currentR >= 0) {
 8001462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db14      	blt.n	8001494 <Parse_DMA_All+0x19c>
					sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 800146a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc30 	bl	8000cd4 <__aeabi_i2f>
 8001474:	4603      	mov	r3, r0
 8001476:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc7e 	bl	8000d7c <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	4942      	ldr	r1, [pc, #264]	; (800158c <Parse_DMA_All+0x294>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fd2d 	bl	8000ee4 <__aeabi_fdiv>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	e013      	b.n	80014bc <Parse_DMA_All+0x1c4>
				} else {
					sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc1b 	bl	8000cd4 <__aeabi_i2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc69 	bl	8000d7c <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4938      	ldr	r1, [pc, #224]	; (8001590 <Parse_DMA_All+0x298>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fd18 	bl	8000ee4 <__aeabi_fdiv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
				}
				uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <Parse_DMA_All+0x2a4>)
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <Parse_DMA_All+0x2a4>)
 80014c6:	795b      	ldrb	r3, [r3, #5]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	81bb      	strh	r3, [r7, #12]
				velocityR = velocity;
 80014d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <Parse_DMA_All+0x2a8>)
 80014d6:	801a      	strh	r2, [r3, #0]
				if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <Parse_DMA_All+0x2a8>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014e2:	dd11      	ble.n	8001508 <Parse_DMA_All+0x210>
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <Parse_DMA_All+0x2a8>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <Parse_DMA_All+0x2a8>)
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <Parse_DMA_All+0x2a8>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <Parse_DMA_All+0x2a8>)
 8001506:	801a      	strh	r2, [r3, #0]
				sensor->RightVelocity = velocityR;
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <Parse_DMA_All+0x2a8>)
 800150a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	81da      	strh	r2, [r3, #14]
				sensor->Rightwinding_temp = responseBufferL[6];
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <Parse_DMA_All+0x2a4>)
 8001514:	799a      	ldrb	r2, [r3, #6]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	745a      	strb	r2, [r3, #17]
				sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <Parse_DMA_All+0x2a4>)
 800151c:	79db      	ldrb	r3, [r3, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbd4 	bl	8000ccc <__aeabi_ui2f>
 8001524:	4603      	mov	r3, r0
 8001526:	491c      	ldr	r1, [pc, #112]	; (8001598 <Parse_DMA_All+0x2a0>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc27 	bl	8000d7c <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffe5 	bl	8000500 <__aeabi_f2d>
 8001536:	a312      	add	r3, pc, #72	; (adr r3, 8001580 <Parse_DMA_All+0x288>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f962 	bl	8000804 <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f007 fa14 	bl	8008974 <round>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fadc 	bl	8000b10 <__aeabi_d2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	829a      	strh	r2, [r3, #20]
				sensor->Righterror = responseBufferL[8];
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <Parse_DMA_All+0x2a4>)
 8001562:	7a1a      	ldrb	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	75da      	strb	r2, [r3, #23]
		sensor->LeftVelocity = 0;
		sensor->RightVelocity = 0;
	}


}
 8001568:	e005      	b.n	8001576 <Parse_DMA_All+0x27e>
		sensor->LeftVelocity = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	819a      	strh	r2, [r3, #12]
		sensor->RightVelocity = 0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	81da      	strh	r2, [r3, #14]
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	00000000 	.word	0x00000000
 8001584:	406fe000 	.word	0x406fe000
 8001588:	20000144 	.word	0x20000144
 800158c:	46fffe00 	.word	0x46fffe00
 8001590:	c6fffe00 	.word	0xc6fffe00
 8001594:	20000126 	.word	0x20000126
 8001598:	43b40000 	.word	0x43b40000
 800159c:	20000150 	.word	0x20000150
 80015a0:	20000124 	.word	0x20000124

080015a4 <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	460b      	mov	r3, r1
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 80015b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ba:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80015be:	dd02      	ble.n	80015c6 <setVelocity+0x22>
 80015c0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80015c4:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 80015c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ca:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80015ce:	da02      	bge.n	80015d6 <setVelocity+0x32>
 80015d0:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 80015d4:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 80015d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80015e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da06      	bge.n	80015f8 <setVelocity+0x54>
 80015ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <setVelocity+0x54>
 80015f2:	8bfb      	ldrh	r3, [r7, #30]
 80015f4:	425b      	negs	r3, r3
 80015f6:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80015f8:	8bfb      	ldrh	r3, [r7, #30]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	733b      	strb	r3, [r7, #12]
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	737b      	strb	r3, [r7, #13]
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	73bb      	strb	r3, [r7, #14]
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	2300      	movs	r3, #0
 8001616:	743b      	strb	r3, [r7, #16]
 8001618:	2300      	movs	r3, #0
 800161a:	747b      	strb	r3, [r7, #17]
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	74bb      	strb	r3, [r7, #18]
 8001620:	2300      	movs	r3, #0
 8001622:	74fb      	strb	r3, [r7, #19]
 8001624:	2300      	movs	r3, #0
 8001626:	753b      	strb	r3, [r7, #20]
 8001628:	2300      	movs	r3, #0
 800162a:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	e00c      	b.n	800164c <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4413      	add	r3, r2
 800163a:	7819      	ldrb	r1, [r3, #0]
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <setVelocity+0xc0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4413      	add	r3, r2
 8001642:	460a      	mov	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b09      	cmp	r3, #9
 8001650:	ddef      	ble.n	8001632 <setVelocity+0x8e>
	}
	send(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff fe24 	bl	80012a0 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000174 	.word	0x20000174

08001668 <SR04_Init>:

SR04_PulseType pulse;
SR04_PulseType pulse2;

void SR04_Init()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <SR04_Init+0x24>)
 800166e:	f004 fad3 	bl	8005c18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8001672:	2100      	movs	r1, #0
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <SR04_Init+0x24>)
 8001676:	f004 fb87 	bl	8005d88 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <SR04_Init+0x28>)
 800167c:	f004 facc 	bl	8005c18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_3);
 8001680:	2108      	movs	r1, #8
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <SR04_Init+0x28>)
 8001684:	f004 fb80 	bl	8005d88 <HAL_TIM_IC_Start_IT>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002b0 	.word	0x200002b0
 8001690:	200002f8 	.word	0x200002f8

08001694 <SR04_Start>:
void SR04_Start()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <SR04_Start+0x44>)
 800169e:	f002 fdd0 	bl	8004242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2102      	movs	r1, #2
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <SR04_Start+0x48>)
 80016a8:	f002 fdcb 	bl	8004242 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 fe67 	bl	8003380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <SR04_Start+0x44>)
 80016b8:	f002 fdc3 	bl	8004242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2102      	movs	r1, #2
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <SR04_Start+0x48>)
 80016c2:	f002 fdbe 	bl	8004242 <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SR04_Start+0x4c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SR04_Start+0x50>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	731a      	strb	r2, [r3, #12]
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	20000180 	.word	0x20000180
 80016e4:	20000190 	.word	0x20000190

080016e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3e      	ldr	r2, [pc, #248]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d138      	bne.n	800176a <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	483a      	ldr	r0, [pc, #232]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001704:	f004 fec6 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 800170e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a1a      	ldr	r2, [r3, #32]
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020a 	bic.w	r2, r2, #10
 800171e:	621a      	str	r2, [r3, #32]
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0202 	orr.w	r2, r2, #2
 800172e:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001732:	2200      	movs	r2, #0
 8001734:	731a      	strb	r2, [r3, #12]
 8001736:	e018      	b.n	800176a <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020a 	bic.w	r2, r2, #10
 8001746:	621a      	str	r2, [r3, #32]
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a12      	ldr	r2, [r2, #32]
 8001752:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 8001754:	2100      	movs	r1, #0
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8001758:	f004 fe9c 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001762:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001766:	2201      	movs	r2, #1
 8001768:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d138      	bne.n	80017e4 <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01b      	beq.n	80017b2 <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 800177a:	2108      	movs	r1, #8
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800177e:	f004 fe89 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001788:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a8:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	731a      	strb	r2, [r3, #12]
			pulse2.rising_flag = 1;
		}
	}


}
 80017b0:	e018      	b.n	80017e4 <HAL_TIM_IC_CaptureCallback+0xfc>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a12      	ldr	r2, [r2, #32]
 80017cc:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 80017ce:	2108      	movs	r1, #8
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017d2:	f004 fe5f 	bl	8006494 <HAL_TIM_ReadCapturedValue>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80017dc:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	731a      	strb	r2, [r3, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002b0 	.word	0x200002b0
 80017f0:	20000180 	.word	0x20000180
 80017f4:	200002f8 	.word	0x200002f8
 80017f8:	20000190 	.word	0x20000190

080017fc <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	885a      	ldrh	r2, [r3, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d908      	bls.n	8001822 <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	885a      	ldrh	r2, [r3, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	809a      	strh	r2, [r3, #4]
 8001820:	e00b      	b.n	800183a <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	885a      	ldrh	r2, [r3, #2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b29b      	uxth	r3, r3
 800182e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001832:	3310      	adds	r3, #16
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa48 	bl	8000cd4 <__aeabi_i2f>
 8001844:	4603      	mov	r3, r0
 8001846:	4910      	ldr	r1, [pc, #64]	; (8001888 <SR04_Calculate+0x8c>)
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa97 	bl	8000d7c <__aeabi_fmul>
 800184e:	4603      	mov	r3, r0
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <SR04_Calculate+0x90>)
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa92 	bl	8000d7c <__aeabi_fmul>
 8001858:	4603      	mov	r3, r0
 800185a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb40 	bl	8000ee4 <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	490a      	ldr	r1, [pc, #40]	; (8001890 <SR04_Calculate+0x94>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb3b 	bl	8000ee4 <__aeabi_fdiv>
 800186e:	4603      	mov	r3, r0
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <SR04_Calculate+0x94>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb36 	bl	8000ee4 <__aeabi_fdiv>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	43aa0000 	.word	0x43aa0000
 800188c:	42c80000 	.word	0x42c80000
 8001890:	447a0000 	.word	0x447a0000

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_DMA_Init+0x78>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_DMA_Init+0x78>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_DMA_Init+0x78>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	200c      	movs	r0, #12
 80018b8:	f001 fe5d 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018bc:	200c      	movs	r0, #12
 80018be:	f001 fe76 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	200d      	movs	r0, #13
 80018c8:	f001 fe55 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018cc:	200d      	movs	r0, #13
 80018ce:	f001 fe6e 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	200f      	movs	r0, #15
 80018d8:	f001 fe4d 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018dc:	200f      	movs	r0, #15
 80018de:	f001 fe66 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2010      	movs	r0, #16
 80018e8:	f001 fe45 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018ec:	2010      	movs	r0, #16
 80018ee:	f001 fe5e 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2011      	movs	r0, #17
 80018f8:	f001 fe3d 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018fc:	2011      	movs	r0, #17
 80018fe:	f001 fe56 	bl	80035ae <HAL_NVIC_EnableIRQ>

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <MX_GPIO_Init+0x108>)
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_GPIO_Init+0x108>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <MX_GPIO_Init+0x108>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <MX_GPIO_Init+0x108>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <MX_GPIO_Init+0x108>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <MX_GPIO_Init+0x108>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <MX_GPIO_Init+0x108>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	2108      	movs	r1, #8
 8001988:	4824      	ldr	r0, [pc, #144]	; (8001a1c <MX_GPIO_Init+0x10c>)
 800198a:	f002 fc5a 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2120      	movs	r1, #32
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <MX_GPIO_Init+0x110>)
 8001994:	f002 fc55 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2102      	movs	r1, #2
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_GPIO_Init+0x114>)
 800199e:	f002 fc50 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_GPIO_Init+0x10c>)
 80019ba:	f002 fa97 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019be:	2320      	movs	r3, #32
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <MX_GPIO_Init+0x110>)
 80019d6:	f002 fa89 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019da:	2302      	movs	r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_GPIO_Init+0x114>)
 80019f2:	f002 fa7b 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_GPIO_Init+0x114>)
 8001a0c:	f002 fa6e 	bl	8003eec <HAL_GPIO_Init>

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00

08001a28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f002 fc1d 	bl	80042a4 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 fb65 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200001a0 	.word	0x200001a0
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	00061a80 	.word	0x00061a80

08001a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_I2C_MspInit+0x70>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d123      	bne.n	8001aec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <HAL_I2C_MspInit+0x78>)
 8001ad0:	f002 fa0c 	bl	8003eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ade:	61d3      	str	r3, [r2, #28]
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_I2C_MspInit+0x74>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010c00 	.word	0x40010c00

08001b00 <distance_Calculate>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void distance_Calculate()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <distance_Calculate+0x14>)
 8001b06:	f7ff fe79 	bl	80017fc <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <distance_Calculate+0x18>)
 8001b0c:	f7ff fe76 	bl	80017fc <SR04_Calculate>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000180 	.word	0x20000180
 8001b18:	20000190 	.word	0x20000190

08001b1c <buzzer>:

void buzzer()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b20:	2120      	movs	r1, #32
 8001b22:	480a      	ldr	r0, [pc, #40]	; (8001b4c <buzzer+0x30>)
 8001b24:	f002 fba5 	bl	8004272 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f001 fc29 	bl	8003380 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b2e:	2120      	movs	r1, #32
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <buzzer+0x30>)
 8001b32:	f002 fb9e 	bl	8004272 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b36:	2064      	movs	r0, #100	; 0x64
 8001b38:	f001 fc22 	bl	8003380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <buzzer+0x30>)
 8001b42:	f002 fb7e 	bl	8004242 <HAL_GPIO_WritePin>

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40010800 	.word	0x40010800

08001b50 <d80nk_read>:

void d80nk_read()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <d80nk_read+0x7c>)
 8001b5c:	f002 fb5a 	bl	8004214 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <d80nk_read+0x7c>)
 8001b6a:	f002 fb53 	bl	8004214 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4815      	ldr	r0, [pc, #84]	; (8001bcc <d80nk_read+0x7c>)
 8001b78:	f002 fb4c 	bl	8004214 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b84:	4811      	ldr	r0, [pc, #68]	; (8001bcc <d80nk_read+0x7c>)
 8001b86:	f002 fb45 	bl	8004214 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<4;i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e013      	b.n	8001bbc <d80nk_read+0x6c>
	{
		if(pinStates[i] == GPIO_PIN_SET)
 8001b94:	1d3a      	adds	r2, r7, #4
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <d80nk_read+0x80>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2230      	movs	r2, #48	; 0x30
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e004      	b.n	8001bb6 <d80nk_read+0x66>

		}
		else
		{
			d80nk_[i] = '1';
 8001bac:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <d80nk_read+0x80>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2231      	movs	r2, #49	; 0x31
 8001bb4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	dde8      	ble.n	8001b94 <d80nk_read+0x44>
//			sprintf(message,"Sensor ON\n");
//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	20000204 	.word	0x20000204

08001bd4 <checksum>:

uint8_t checksum(uint8_t* data, uint8_t len) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	73bb      	strb	r3, [r7, #14]
 8001be8:	e009      	b.n	8001bfe <checksum+0x2a>
       crc += data[i];
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73bb      	strb	r3, [r7, #14]
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf0      	blt.n	8001bea <checksum+0x16>
    }
    return crc;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
 8001c20:	e00b      	b.n	8001c3a <HostMessageParse+0x26>
	{
		data[i] = receiveBytes[i];
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	441a      	add	r2, r3
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	443b      	add	r3, r7
 8001c30:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	3301      	adds	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	d9f0      	bls.n	8001c22 <HostMessageParse+0xe>
	}
	uint8_t checking = checksum(data,8);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	2108      	movs	r1, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffc4 	bl	8001bd4 <checksum>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001c50:	7cfb      	ldrb	r3, [r7, #19]
 8001c52:	7dba      	ldrb	r2, [r7, #22]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d117      	bne.n	8001c88 <HostMessageParse+0x74>
	{
		motors.LeftID = data[1];
 8001c58:	7b7a      	ldrb	r2, [r7, #13]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HostMessageParse+0x88>)
 8001c5c:	701a      	strb	r2, [r3, #0]
		motors.LeftSpeed = (data[2] << 8) | data[3];
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HostMessageParse+0x88>)
 8001c6e:	805a      	strh	r2, [r3, #2]
		motors.RightID = data[4];
 8001c70:	7c3a      	ldrb	r2, [r7, #16]
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HostMessageParse+0x88>)
 8001c74:	705a      	strb	r2, [r3, #1]
		motors.RightSpeed = (data[5] << 8) | data[6];
 8001c76:	7c7b      	ldrb	r3, [r7, #17]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7cbb      	ldrb	r3, [r7, #18]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HostMessageParse+0x88>)
 8001c86:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8001c88:	2204      	movs	r2, #4
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f005 ff53 	bl	8007b38 <memset>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000224 	.word	0x20000224

08001ca0 <SendToHost>:

void SendToHost(struct motor_sensor_t* wheelsensor)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	uint8_t sendData[30];
	sendData[0] = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	723b      	strb	r3, [r7, #8]
	sendData[1] = (wheelsensor->leftii) & 0xFF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	727b      	strb	r3, [r7, #9]
	sendData[2] = ((wheelsensor->LeftVelocity)>>8) & 0xFF;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cb8:	121b      	asrs	r3, r3, #8
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	72bb      	strb	r3, [r7, #10]
	sendData[3] = wheelsensor->LeftVelocity & 0xFF;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	72fb      	strb	r3, [r7, #11]
	sendData[4] = wheelsensor->reightii & 0xFF;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	733b      	strb	r3, [r7, #12]
	sendData[5] = ((wheelsensor->RightVelocity)>>8) & 0xFF;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001cd6:	121b      	asrs	r3, r3, #8
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	737b      	strb	r3, [r7, #13]
	sendData[6] = wheelsensor->RightVelocity & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	73bb      	strb	r3, [r7, #14]
	sendData[7] = (MPU6050.Accel_X_RAW >> 8) & 0xFF;
 8001ce8:	4b48      	ldr	r3, [pc, #288]	; (8001e0c <SendToHost+0x16c>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	121b      	asrs	r3, r3, #8
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73fb      	strb	r3, [r7, #15]
	sendData[8] = MPU6050.Accel_X_RAW & 0XFF;
 8001cf6:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <SendToHost+0x16c>)
 8001cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	743b      	strb	r3, [r7, #16]
	sendData[9] = (MPU6050.Accel_Y_RAW >> 8) & 0XFF;
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <SendToHost+0x16c>)
 8001d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d06:	121b      	asrs	r3, r3, #8
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	747b      	strb	r3, [r7, #17]
	sendData[10] = MPU6050.Accel_Y_RAW & 0xFF;
 8001d0e:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <SendToHost+0x16c>)
 8001d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	74bb      	strb	r3, [r7, #18]
	sendData[11] = (MPU6050.Accel_Z_RAW >> 8) & 0xFF;
 8001d18:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <SendToHost+0x16c>)
 8001d1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d1e:	121b      	asrs	r3, r3, #8
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	74fb      	strb	r3, [r7, #19]
	sendData[12] = MPU6050.Accel_Z_RAW & 0xFF;
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <SendToHost+0x16c>)
 8001d28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	753b      	strb	r3, [r7, #20]
	sendData[13] = (MPU6050.Gyro_X_RAW >> 8) & 0XFF;
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <SendToHost+0x16c>)
 8001d32:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d36:	121b      	asrs	r3, r3, #8
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	757b      	strb	r3, [r7, #21]
	sendData[14] = MPU6050.Gyro_X_RAW & 0xFF;
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <SendToHost+0x16c>)
 8001d40:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	75bb      	strb	r3, [r7, #22]
	sendData[15] = (MPU6050.Gyro_Y_RAW >> 8) & 0XFF;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <SendToHost+0x16c>)
 8001d4a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d4e:	121b      	asrs	r3, r3, #8
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	75fb      	strb	r3, [r7, #23]
	sendData[16] = MPU6050.Gyro_Y_RAW & 0xFF;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <SendToHost+0x16c>)
 8001d58:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	763b      	strb	r3, [r7, #24]
	sendData[17] = (MPU6050.Gyro_Z_RAW >> 8) & 0XFF;
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <SendToHost+0x16c>)
 8001d62:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d66:	121b      	asrs	r3, r3, #8
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	767b      	strb	r3, [r7, #25]
	sendData[18] = MPU6050.Gyro_Z_RAW & 0xFF;
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <SendToHost+0x16c>)
 8001d70:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	76bb      	strb	r3, [r7, #26]
	sendData[19] = (((int)pulse.distance) >> 8) & 0xFF;
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <SendToHost+0x170>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f94d 	bl	800101c <__aeabi_f2iz>
 8001d82:	4603      	mov	r3, r0
 8001d84:	121b      	asrs	r3, r3, #8
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	76fb      	strb	r3, [r7, #27]
	sendData[20] = ((int)pulse.distance) & 0xFF;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <SendToHost+0x170>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f944 	bl	800101c <__aeabi_f2iz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	773b      	strb	r3, [r7, #28]
	sendData[21] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SendToHost+0x174>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f93c 	bl	800101c <__aeabi_f2iz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	121b      	asrs	r3, r3, #8
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	777b      	strb	r3, [r7, #29]
	sendData[22] = ((int)pulse2.distance) & 0xFF;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <SendToHost+0x174>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f933 	bl	800101c <__aeabi_f2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	77bb      	strb	r3, [r7, #30]
	sendData[23] = d80nk_[0] & 0xFF;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <SendToHost+0x178>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	77fb      	strb	r3, [r7, #31]
	sendData[24] = d80nk_[1] & 0xFF;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <SendToHost+0x178>)
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	f887 3020 	strb.w	r3, [r7, #32]
	sendData[25] = d80nk_[2] & 0xFF;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <SendToHost+0x178>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	sendData[26] = d80nk_[3] & 0xFF;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <SendToHost+0x178>)
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	sendData[27] = checksum(sendData, 28);
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	211c      	movs	r1, #28
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fef7 	bl	8001bd4 <checksum>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_UART_Transmit(&huart1, sendData, 28, HAL_MAX_DELAY);
 8001dec:	f107 0108 	add.w	r1, r7, #8
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	221c      	movs	r2, #28
 8001df6:	4809      	ldr	r0, [pc, #36]	; (8001e1c <SendToHost+0x17c>)
 8001df8:	f004 fec8 	bl	8006b8c <HAL_UART_Transmit>
	HAL_Delay(200);
 8001dfc:	20c8      	movs	r0, #200	; 0xc8
 8001dfe:	f001 fabf 	bl	8003380 <HAL_Delay>
}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000230 	.word	0x20000230
 8001e10:	20000180 	.word	0x20000180
 8001e14:	20000190 	.word	0x20000190
 8001e18:	20000204 	.word	0x20000204
 8001e1c:	20000388 	.word	0x20000388

08001e20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a44      	ldr	r2, [pc, #272]	; (8001f3c <HAL_UART_RxCpltCallback+0x11c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10e      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_UART_RxCpltCallback+0x120>)
 8001e32:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_UART_RxCpltCallback+0x124>)
 8001e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e38:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes);
 8001e3c:	4840      	ldr	r0, [pc, #256]	; (8001f40 <HAL_UART_RxCpltCallback+0x120>)
 8001e3e:	f7ff fee9 	bl	8001c14 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e42:	2208      	movs	r2, #8
 8001e44:	493f      	ldr	r1, [pc, #252]	; (8001f44 <HAL_UART_RxCpltCallback+0x124>)
 8001e46:	483d      	ldr	r0, [pc, #244]	; (8001f3c <HAL_UART_RxCpltCallback+0x11c>)
 8001e48:	f004 ff23 	bl	8006c92 <HAL_UART_Receive_DMA>
				}
			}
			memset(responseBuffer, 0, sizeof(responseBuffer));
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
		}
}
 8001e4c:	e072      	b.n	8001f34 <HAL_UART_RxCpltCallback+0x114>
	else if(huart==&huart2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a3d      	ldr	r2, [pc, #244]	; (8001f48 <HAL_UART_RxCpltCallback+0x128>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d16e      	bne.n	8001f34 <HAL_UART_RxCpltCallback+0x114>
			huart2Received = 1;
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_UART_RxCpltCallback+0x12c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
			timerCounter = 0;
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_UART_RxCpltCallback+0x130>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
			short len = strlen(responseBuffer);
 8001e62:	483c      	ldr	r0, [pc, #240]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001e64:	f7fe f9e0 	bl	8000228 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	847b      	strh	r3, [r7, #34]	; 0x22
			short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	843b      	strh	r3, [r7, #32]
			for(int i=0;i<arraysz;i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	e04f      	b.n	8001f16 <HAL_UART_RxCpltCallback+0xf6>
				if(responseBuffer[i]==motors.LeftID)
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_UART_RxCpltCallback+0x138>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d11e      	bne.n	8001ec4 <HAL_UART_RxCpltCallback+0xa4>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001e8a:	441a      	add	r2, r3
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	6810      	ldr	r0, [r2, #0]
 8001e92:	6851      	ldr	r1, [r2, #4]
 8001e94:	c303      	stmia	r3!, {r0, r1}
 8001e96:	8912      	ldrh	r2, [r2, #8]
 8001e98:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f9c0 	bl	8001224 <checkCRC>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	77bb      	strb	r3, [r7, #30]
					if(checking)
 8001ea8:	7fbb      	ldrb	r3, [r7, #30]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d030      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0xf0>
						memcpy(responseBufferL, &responseBuffer[i], 10);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001eb2:	441a      	add	r2, r3
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_UART_RxCpltCallback+0x13c>)
 8001eb6:	6810      	ldr	r0, [r2, #0]
 8001eb8:	6851      	ldr	r1, [r2, #4]
 8001eba:	6018      	str	r0, [r3, #0]
 8001ebc:	6059      	str	r1, [r3, #4]
 8001ebe:	8912      	ldrh	r2, [r2, #8]
 8001ec0:	811a      	strh	r2, [r3, #8]
 8001ec2:	e025      	b.n	8001f10 <HAL_UART_RxCpltCallback+0xf0>
				else if(responseBuffer[i]==motors.RightID)
 8001ec4:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	4413      	add	r3, r2
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_UART_RxCpltCallback+0x138>)
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d11d      	bne.n	8001f10 <HAL_UART_RxCpltCallback+0xf0>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001ed8:	441a      	add	r2, r3
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	6810      	ldr	r0, [r2, #0]
 8001ee0:	6851      	ldr	r1, [r2, #4]
 8001ee2:	c303      	stmia	r3!, {r0, r1}
 8001ee4:	8912      	ldrh	r2, [r2, #8]
 8001ee6:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f999 	bl	8001224 <checkCRC>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77fb      	strb	r3, [r7, #31]
					if(checking)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0xf0>
						memcpy(responseBufferH, &responseBuffer[i], 10);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001f00:	441a      	add	r2, r3
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_UART_RxCpltCallback+0x140>)
 8001f04:	6810      	ldr	r0, [r2, #0]
 8001f06:	6851      	ldr	r1, [r2, #4]
 8001f08:	6018      	str	r0, [r3, #0]
 8001f0a:	6059      	str	r1, [r3, #4]
 8001f0c:	8912      	ldrh	r2, [r2, #8]
 8001f0e:	811a      	strh	r2, [r3, #8]
			for(int i=0;i<arraysz;i++)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3301      	adds	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbaa      	blt.n	8001e76 <HAL_UART_RxCpltCallback+0x56>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8001f20:	2219      	movs	r2, #25
 8001f22:	2100      	movs	r1, #0
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001f26:	f005 fe07 	bl	8007b38 <memset>
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001f2a:	2219      	movs	r2, #25
 8001f2c:	4909      	ldr	r1, [pc, #36]	; (8001f54 <HAL_UART_RxCpltCallback+0x134>)
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <HAL_UART_RxCpltCallback+0x128>)
 8001f30:	f004 feaf 	bl	8006c92 <HAL_UART_Receive_DMA>
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000388 	.word	0x20000388
 8001f40:	200001f4 	.word	0x200001f4
 8001f44:	200001fc 	.word	0x200001fc
 8001f48:	200003d0 	.word	0x200003d0
 8001f4c:	20000208 	.word	0x20000208
 8001f50:	2000020c 	.word	0x2000020c
 8001f54:	20000128 	.word	0x20000128
 8001f58:	20000224 	.word	0x20000224
 8001f5c:	20000150 	.word	0x20000150
 8001f60:	20000144 	.word	0x20000144

08001f64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d117      	bne.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(huart2Received)
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			huart2Received = 0; // Reset the flag
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
			timerCounter = 0; // Reset the timer counter
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
			{
				timerCounter = 1;
			}
		}
	}
}
 8001f8a:	e00b      	b.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
			timerCounter++;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f94:	6013      	str	r3, [r2, #0]
			if(timerCounter >= 2) // Adjust the value based on your timer period (e.g., 2 for 1 second if the timer period is 0.5 seconds)
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d902      	bls.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
				timerCounter = 1;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000340 	.word	0x20000340
 8001fb4:	20000208 	.word	0x20000208
 8001fb8:	2000020c 	.word	0x2000020c

08001fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc0:	f001 f97c 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc4:	f000 f876 	bl	80020b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc8:	f7ff fca2 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fcc:	f7ff fc62 	bl	8001894 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001fd0:	f000 ff22 	bl	8002e18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fd4:	f000 ff4a 	bl	8002e6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001fd8:	f7ff fd26 	bl	8001a28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001fdc:	f000 fd42 	bl	8002a64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fe0:	f000 fdb0 	bl	8002b44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fe4:	f000 fe1e 	bl	8002c24 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001fe8:	4827      	ldr	r0, [pc, #156]	; (8002088 <main+0xcc>)
 8001fea:	f003 fe15 	bl	8005c18 <HAL_TIM_Base_Start_IT>
  MX_USART3_UART_Init();
 8001fee:	f000 ff67 	bl	8002ec0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SR04_Init();
 8001ff2:	f7ff fb39 	bl	8001668 <SR04_Init>
  while (MPU6050_Init(&hi2c1) == 1)
 8001ff6:	e00d      	b.n	8002014 <main+0x58>
    {
  	  sprintf(message,"Device not found. Retry...\n");
 8001ff8:	4924      	ldr	r1, [pc, #144]	; (800208c <main+0xd0>)
 8001ffa:	4825      	ldr	r0, [pc, #148]	; (8002090 <main+0xd4>)
 8001ffc:	f005 fd7c 	bl	8007af8 <siprintf>
  	  HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	2214      	movs	r2, #20
 8002006:	4922      	ldr	r1, [pc, #136]	; (8002090 <main+0xd4>)
 8002008:	4822      	ldr	r0, [pc, #136]	; (8002094 <main+0xd8>)
 800200a:	f004 fdbf 	bl	8006b8c <HAL_UART_Transmit>
  	  HAL_Delay(100);
 800200e:	2064      	movs	r0, #100	; 0x64
 8002010:	f001 f9b6 	bl	8003380 <HAL_Delay>
  while (MPU6050_Init(&hi2c1) == 1)
 8002014:	4820      	ldr	r0, [pc, #128]	; (8002098 <main+0xdc>)
 8002016:	f000 f897 	bl	8002148 <MPU6050_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d0eb      	beq.n	8001ff8 <main+0x3c>
    };
  buzzer();
 8002020:	f7ff fd7c 	bl	8001b1c <buzzer>
  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8002024:	2208      	movs	r2, #8
 8002026:	491d      	ldr	r1, [pc, #116]	; (800209c <main+0xe0>)
 8002028:	481d      	ldr	r0, [pc, #116]	; (80020a0 <main+0xe4>)
 800202a:	f004 fe32 	bl	8006c92 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SR04_Start();
 800202e:	f7ff fb31 	bl	8001694 <SR04_Start>
	  d80nk_read();
 8002032:	f7ff fd8d 	bl	8001b50 <d80nk_read>
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <main+0xe8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <main+0xe8>)
 800203e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	f7ff faad 	bl	80015a4 <setVelocity>
	  HAL_Delay(4);
 800204a:	2004      	movs	r0, #4
 800204c:	f001 f998 	bl	8003380 <HAL_Delay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <main+0xe8>)
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	4618      	mov	r0, r3
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <main+0xe8>)
 8002058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff faa0 	bl	80015a4 <setVelocity>
	  receiveFromBuffer();
 8002064:	f7ff f90a 	bl	800127c <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor, timerCounter);
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <main+0xec>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <main+0xf0>)
 8002070:	f7ff f942 	bl	80012f8 <Parse_DMA_All>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <main+0xf4>)
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <main+0xdc>)
 8002078:	f000 f8be 	bl	80021f8 <MPU6050_Read_All>
	  distance_Calculate();
 800207c:	f7ff fd40 	bl	8001b00 <distance_Calculate>
	  SendToHost(&wheelsensor);
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <main+0xf0>)
 8002082:	f7ff fe0d 	bl	8001ca0 <SendToHost>
  {
 8002086:	e7d2      	b.n	800202e <main+0x72>
 8002088:	20000340 	.word	0x20000340
 800208c:	08008bb8 	.word	0x08008bb8
 8002090:	20000210 	.word	0x20000210
 8002094:	20000418 	.word	0x20000418
 8002098:	200001a0 	.word	0x200001a0
 800209c:	200001fc 	.word	0x200001fc
 80020a0:	20000388 	.word	0x20000388
 80020a4:	20000224 	.word	0x20000224
 80020a8:	2000020c 	.word	0x2000020c
 80020ac:	2000015c 	.word	0x2000015c
 80020b0:	20000230 	.word	0x20000230

080020b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b090      	sub	sp, #64	; 0x40
 80020b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	2228      	movs	r2, #40	; 0x28
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fd38 	bl	8007b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e8:	2302      	movs	r3, #2
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 f92b 	bl	8005358 <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002108:	f000 f819 	bl	800213e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800210c:	230f      	movs	r3, #15
 800210e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002110:	2302      	movs	r3, #2
 8002112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fb98 	bl	800585c <HAL_RCC_ClockConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002132:	f000 f804 	bl	800213e <Error_Handler>
  }
}
 8002136:	bf00      	nop
 8002138:	3740      	adds	r7, #64	; 0x40
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002142:	b672      	cpsid	i
}
 8002144:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002146:	e7fe      	b.n	8002146 <Error_Handler+0x8>

08002148 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af04      	add	r7, sp, #16
 800214e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002150:	2364      	movs	r3, #100	; 0x64
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	2301      	movs	r3, #1
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f107 030f 	add.w	r3, r7, #15
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	2275      	movs	r2, #117	; 0x75
 8002162:	21d0      	movs	r1, #208	; 0xd0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f002 fadb 	bl	8004720 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	2b68      	cmp	r3, #104	; 0x68
 800216e:	d13d      	bne.n	80021ec <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2301      	movs	r3, #1
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	f107 030e 	add.w	r3, r7, #14
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	226b      	movs	r2, #107	; 0x6b
 8002186:	21d0      	movs	r1, #208	; 0xd0
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f002 f9cf 	bl	800452c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800218e:	2307      	movs	r3, #7
 8002190:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002192:	2364      	movs	r3, #100	; 0x64
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	f107 030e 	add.w	r3, r7, #14
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	2219      	movs	r2, #25
 80021a4:	21d0      	movs	r1, #208	; 0xd0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f002 f9c0 	bl	800452c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 80021ac:	2318      	movs	r3, #24
 80021ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021b0:	2364      	movs	r3, #100	; 0x64
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2301      	movs	r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f107 030e 	add.w	r3, r7, #14
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	221c      	movs	r2, #28
 80021c2:	21d0      	movs	r1, #208	; 0xd0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f002 f9b1 	bl	800452c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 80021ca:	2318      	movs	r3, #24
 80021cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021ce:	2364      	movs	r3, #100	; 0x64
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	f107 030e 	add.w	r3, r7, #14
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2301      	movs	r3, #1
 80021de:	221b      	movs	r2, #27
 80021e0:	21d0      	movs	r1, #208	; 0xd0
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f002 f9a2 	bl	800452c <HAL_I2C_Mem_Write>
        return 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <MPU6050_Init+0xa6>
    }
    return 1;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b094      	sub	sp, #80	; 0x50
 80021fe:	af04      	add	r7, sp, #16
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	230e      	movs	r3, #14
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	223b      	movs	r2, #59	; 0x3b
 8002216:	21d0      	movs	r1, #208	; 0xd0
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f002 fa81 	bl	8004720 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800221e:	7a3b      	ldrb	r3, [r7, #8]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	7a7b      	ldrb	r3, [r7, #9]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002230:	7abb      	ldrb	r3, [r7, #10]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	b21a      	sxth	r2, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21a      	sxth	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002242:	7b3b      	ldrb	r3, [r7, #12]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b21a      	sxth	r2, r3
 8002248:	7b7b      	ldrb	r3, [r7, #13]
 800224a:	b21b      	sxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b21a      	sxth	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21a      	sxth	r2, r3
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002262:	7c3b      	ldrb	r3, [r7, #16]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7c7b      	ldrb	r3, [r7, #17]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002274:	7cbb      	ldrb	r3, [r7, #18]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21a      	sxth	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002286:	7d3b      	ldrb	r3, [r7, #20]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	7d7b      	ldrb	r3, [r7, #21]
 800228e:	b21b      	sxth	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b21a      	sxth	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f91c 	bl	80004dc <__aeabi_i2d>
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b95      	ldr	r3, [pc, #596]	; (8002500 <MPU6050_Read_All+0x308>)
 80022aa:	f7fe faab 	bl	8000804 <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f90c 	bl	80004dc <__aeabi_i2d>
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <MPU6050_Read_All+0x308>)
 80022ca:	f7fe fa9b 	bl	8000804 <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f8fc 	bl	80004dc <__aeabi_i2d>
 80022e4:	a380      	add	r3, pc, #512	; (adr r3, 80024e8 <MPU6050_Read_All+0x2f0>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe fa8b 	bl	8000804 <__aeabi_ddiv>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80022f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fce9 	bl	8000cd4 <__aeabi_i2f>
 8002302:	4603      	mov	r3, r0
 8002304:	497f      	ldr	r1, [pc, #508]	; (8002504 <MPU6050_Read_All+0x30c>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fdec 	bl	8000ee4 <__aeabi_fdiv>
 800230c:	4603      	mov	r3, r0
 800230e:	497e      	ldr	r1, [pc, #504]	; (8002508 <MPU6050_Read_All+0x310>)
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fc2b 	bl	8000b6c <__addsf3>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f8d9 	bl	80004dc <__aeabi_i2d>
 800232a:	a371      	add	r3, pc, #452	; (adr r3, 80024f0 <MPU6050_Read_All+0x2f8>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe fa68 	bl	8000804 <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8c9 	bl	80004dc <__aeabi_i2d>
 800234a:	a369      	add	r3, pc, #420	; (adr r3, 80024f0 <MPU6050_Read_All+0x2f8>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe fa58 	bl	8000804 <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8b9 	bl	80004dc <__aeabi_i2d>
 800236a:	a361      	add	r3, pc, #388	; (adr r3, 80024f0 <MPU6050_Read_All+0x2f8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe fa48 	bl	8000804 <__aeabi_ddiv>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800237e:	f000 fff5 	bl	800336c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <MPU6050_Read_All+0x314>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f896 	bl	80004bc <__aeabi_ui2d>
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <MPU6050_Read_All+0x318>)
 8002396:	f7fe fa35 	bl	8000804 <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80023a2:	f000 ffe3 	bl	800336c <HAL_GetTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <MPU6050_Read_All+0x314>)
 80023aa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023c4:	4619      	mov	r1, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f882 	bl	80004dc <__aeabi_i2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f006 f83d 	bl	800845e <sqrt>
 80023e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023f4:	f7fe fb44 	bl	8000a80 <__aeabi_dcmpeq>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f869 	bl	80004dc <__aeabi_i2d>
 800240a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800240e:	f7fe f9f9 	bl	8000804 <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f006 f845 	bl	80084a8 <atan>
 800241e:	a336      	add	r3, pc, #216	; (adr r3, 80024f8 <MPU6050_Read_All+0x300>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f8c4 	bl	80005b0 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002430:	e005      	b.n	800243e <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002444:	425b      	negs	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f848 	bl	80004dc <__aeabi_i2d>
 800244c:	4682      	mov	sl, r0
 800244e:	468b      	mov	fp, r1
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f840 	bl	80004dc <__aeabi_i2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4650      	mov	r0, sl
 8002462:	4659      	mov	r1, fp
 8002464:	f005 fff9 	bl	800845a <atan2>
 8002468:	a323      	add	r3, pc, #140	; (adr r3, 80024f8 <MPU6050_Read_All+0x300>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f89f 	bl	80005b0 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <MPU6050_Read_All+0x31c>)
 8002480:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002484:	f7fe fb06 	bl	8000a94 <__aeabi_dcmplt>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <MPU6050_Read_All+0x2ac>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MPU6050_Read_All+0x320>)
 800249a:	f7fe fb19 	bl	8000ad0 <__aeabi_dcmpgt>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d114      	bne.n	80024ce <MPU6050_Read_All+0x2d6>
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MPU6050_Read_All+0x320>)
 80024aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ae:	f7fe fb0f 	bl	8000ad0 <__aeabi_dcmpgt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d033      	beq.n	8002520 <MPU6050_Read_All+0x328>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MPU6050_Read_All+0x31c>)
 80024c4:	f7fe fae6 	bl	8000a94 <__aeabi_dcmplt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d028      	beq.n	8002520 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 80024ce:	4913      	ldr	r1, [pc, #76]	; (800251c <MPU6050_Read_All+0x324>)
 80024d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80024e2:	e030      	b.n	8002546 <MPU6050_Read_All+0x34e>
 80024e4:	f3af 8000 	nop.w
 80024e8:	00000000 	.word	0x00000000
 80024ec:	40cc2900 	.word	0x40cc2900
 80024f0:	00000000 	.word	0x00000000
 80024f4:	40606000 	.word	0x40606000
 80024f8:	1a63c1f8 	.word	0x1a63c1f8
 80024fc:	404ca5dc 	.word	0x404ca5dc
 8002500:	40d00000 	.word	0x40d00000
 8002504:	43aa0000 	.word	0x43aa0000
 8002508:	42121eb8 	.word	0x42121eb8
 800250c:	200002a8 	.word	0x200002a8
 8002510:	408f4000 	.word	0x408f4000
 8002514:	c0568000 	.word	0xc0568000
 8002518:	40568000 	.word	0x40568000
 800251c:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002526:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800252a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800252e:	e9cd 2300 	strd	r2, r3, [sp]
 8002532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002536:	481c      	ldr	r0, [pc, #112]	; (80025a8 <MPU6050_Read_All+0x3b0>)
 8002538:	f000 f83c 	bl	80025b4 <Kalman_getAngle>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800254c:	4690      	mov	r8, r2
 800254e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MPU6050_Read_All+0x3b4>)
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fe fab8 	bl	8000ad0 <__aeabi_dcmpgt>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800256c:	4614      	mov	r4, r2
 800256e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800257e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002586:	e9cd 2300 	strd	r2, r3, [sp]
 800258a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800258e:	4808      	ldr	r0, [pc, #32]	; (80025b0 <MPU6050_Read_All+0x3b8>)
 8002590:	f000 f810 	bl	80025b4 <Kalman_getAngle>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800259e:	bf00      	nop
 80025a0:	3740      	adds	r7, #64	; 0x40
 80025a2:	46bd      	mov	sp, r7
 80025a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a8:	20000050 	.word	0x20000050
 80025ac:	40568000 	.word	0x40568000
 80025b0:	20000008 	.word	0x20000008

080025b4 <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b092      	sub	sp, #72	; 0x48
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025ca:	f7fd fe39 	bl	8000240 <__aeabi_dsub>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80025dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025e4:	f7fd ffe4 	bl	80005b0 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fe28 	bl	8000244 <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800260a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800260e:	f7fd ffcf 	bl	80005b0 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002620:	f7fd fe0e 	bl	8000240 <__aeabi_dsub>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002632:	f7fd fe05 	bl	8000240 <__aeabi_dsub>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd fdfe 	bl	8000244 <__adddf3>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002654:	f7fd ffac 	bl	80005b0 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fd fdf0 	bl	8000244 <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	68f9      	ldr	r1, [r7, #12]
 800266a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800267a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800267e:	f7fd ff97 	bl	80005b0 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd fdd9 	bl	8000240 <__aeabi_dsub>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	68f9      	ldr	r1, [r7, #12]
 8002694:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80026a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026a8:	f7fd ff82 	bl	80005b0 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fd fdc4 	bl	8000240 <__aeabi_dsub>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026d2:	f7fd ff6d 	bl	80005b0 <__aeabi_dmul>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fd fdb1 	bl	8000244 <__adddf3>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026f8:	f7fd fda4 	bl	8000244 <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800270a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800270e:	f7fe f879 	bl	8000804 <__aeabi_ddiv>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002724:	f7fe f86e 	bl	8000804 <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800273a:	f7fd fd81 	bl	8000240 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800274c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002750:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002754:	f7fd ff2c 	bl	80005b0 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd fd70 	bl	8000244 <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002774:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002778:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800277c:	f7fd ff18 	bl	80005b0 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fd5c 	bl	8000244 <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800279c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027a6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80027b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027b8:	f7fd fefa 	bl	80005b0 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd fd3c 	bl	8000240 <__aeabi_dsub>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80027d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027e0:	f7fd fee6 	bl	80005b0 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd28 	bl	8000240 <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002800:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002808:	f7fd fed2 	bl	80005b0 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4620      	mov	r0, r4
 8002812:	4629      	mov	r1, r5
 8002814:	f7fd fd14 	bl	8000240 <__aeabi_dsub>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002828:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800282c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002830:	f7fd febe 	bl	80005b0 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fd00 	bl	8000240 <__aeabi_dsub>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	3748      	adds	r7, #72	; 0x48
 8002856:	46bd      	mov	sp, r7
 8002858:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_MspInit+0x5c>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_MspInit+0x5c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_MspInit+0x5c>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_MspInit+0x5c>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_MspInit+0x5c>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_MspInit+0x5c>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_MspInit+0x60>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_MspInit+0x60>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c4:	e7fe      	b.n	80028c4 <NMI_Handler+0x4>

080028c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <MemManage_Handler+0x4>

080028d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler+0x4>

080028de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002906:	f000 fd1f 	bl	8003348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <DMA1_Channel2_IRQHandler+0x10>)
 8002916:	f001 f87f 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000570 	.word	0x20000570

08002924 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <DMA1_Channel3_IRQHandler+0x10>)
 800292a:	f001 f875 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000052c 	.word	0x2000052c

08002938 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <DMA1_Channel5_IRQHandler+0x10>)
 800293e:	f001 f86b 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000460 	.word	0x20000460

0800294c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <DMA1_Channel6_IRQHandler+0x10>)
 8002952:	f001 f861 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200004a4 	.word	0x200004a4

08002960 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <DMA1_Channel7_IRQHandler+0x10>)
 8002966:	f001 f857 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200004e8 	.word	0x200004e8

08002974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <TIM2_IRQHandler+0x10>)
 800297a:	f003 fb1f 	bl	8005fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200002b0 	.word	0x200002b0

08002988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <TIM3_IRQHandler+0x10>)
 800298e:	f003 fb15 	bl	8005fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200002f8 	.word	0x200002f8

0800299c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <TIM4_IRQHandler+0x10>)
 80029a2:	f003 fb0b 	bl	8005fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000340 	.word	0x20000340

080029b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <USART1_IRQHandler+0x10>)
 80029b6:	f004 f991 	bl	8006cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000388 	.word	0x20000388

080029c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <USART2_IRQHandler+0x10>)
 80029ca:	f004 f987 	bl	8006cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003d0 	.word	0x200003d0

080029d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <USART3_IRQHandler+0x10>)
 80029de:	f004 f97d 	bl	8006cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000418 	.word	0x20000418

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f005 f894 	bl	8007b48 <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000c000 	.word	0x2000c000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	200002ac 	.word	0x200002ac
 8002a54:	20000700 	.word	0x20000700

08002a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0318 	add.w	r3, r7, #24
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a82:	463b      	mov	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002a98:	2247      	movs	r2, #71	; 0x47
 8002a9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aaa:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ab6:	4822      	ldr	r0, [pc, #136]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002ab8:	f003 f85e 	bl	8005b78 <HAL_TIM_Base_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002ac2:	f7ff fb3c 	bl	800213e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	481b      	ldr	r0, [pc, #108]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002ad4:	f003 fc16 	bl	8006304 <HAL_TIM_ConfigClockSource>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ade:	f7ff fb2e 	bl	800213e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002ae4:	f003 f8f8 	bl	8005cd8 <HAL_TIM_IC_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002aee:	f7ff fb26 	bl	800213e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4619      	mov	r1, r3
 8002b00:	480f      	ldr	r0, [pc, #60]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002b02:	f003 ff75 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002b0c:	f7ff fb17 	bl	800213e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b10:	2300      	movs	r3, #0
 8002b12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b14:	2301      	movs	r3, #1
 8002b16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b20:	463b      	mov	r3, r7
 8002b22:	2200      	movs	r2, #0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4806      	ldr	r0, [pc, #24]	; (8002b40 <MX_TIM2_Init+0xdc>)
 8002b28:	f003 fb50 	bl	80061cc <HAL_TIM_IC_ConfigChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002b32:	f7ff fb04 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200002b0 	.word	0x200002b0

08002b44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b62:	463b      	mov	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b70:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <MX_TIM3_Init+0xdc>)
 8002b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b76:	2247      	movs	r2, #71	; 0x47
 8002b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b80:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b94:	4821      	ldr	r0, [pc, #132]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002b96:	f002 ffef 	bl	8005b78 <HAL_TIM_Base_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002ba0:	f7ff facd 	bl	800213e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002baa:	f107 0318 	add.w	r3, r7, #24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481a      	ldr	r0, [pc, #104]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002bb2:	f003 fba7 	bl	8006304 <HAL_TIM_ConfigClockSource>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bbc:	f7ff fabf 	bl	800213e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002bc0:	4816      	ldr	r0, [pc, #88]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002bc2:	f003 f889 	bl	8005cd8 <HAL_TIM_IC_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bcc:	f7ff fab7 	bl	800213e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480f      	ldr	r0, [pc, #60]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002be0:	f003 ff06 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002bea:	f7ff faa8 	bl	800213e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002bfe:	463b      	mov	r3, r7
 8002c00:	2208      	movs	r2, #8
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_TIM3_Init+0xd8>)
 8002c06:	f003 fae1 	bl	80061cc <HAL_TIM_IC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002c10:	f7ff fa95 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200002f8 	.word	0x200002f8
 8002c20:	40000400 	.word	0x40000400

08002c24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c38:	463b      	mov	r3, r7
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <MX_TIM4_Init+0x98>)
 8002c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c48:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002c4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c6a:	f002 ff85 	bl	8005b78 <HAL_TIM_Base_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002c74:	f7ff fa63 	bl	800213e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c7e:	f107 0308 	add.w	r3, r7, #8
 8002c82:	4619      	mov	r1, r3
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002c86:	f003 fb3d 	bl	8006304 <HAL_TIM_ConfigClockSource>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c90:	f7ff fa55 	bl	800213e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_TIM4_Init+0x94>)
 8002ca2:	f003 fea5 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002cac:	f7ff fa47 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000340 	.word	0x20000340
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d13f      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce0:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	61d3      	str	r3, [r2, #28]
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	4619      	mov	r1, r3
 8002d24:	4837      	ldr	r0, [pc, #220]	; (8002e04 <HAL_TIM_Base_MspInit+0x144>)
 8002d26:	f001 f8e1 	bl	8003eec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_TIM_Base_MspInit+0x148>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <HAL_TIM_Base_MspInit+0x148>)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	201c      	movs	r0, #28
 8002d54:	f000 fc0f 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d58:	201c      	movs	r0, #28
 8002d5a:	f000 fc28 	bl	80035ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d5e:	e04a      	b.n	8002df6 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <HAL_TIM_Base_MspInit+0x14c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12c      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6193      	str	r3, [r2, #24]
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	4619      	mov	r1, r3
 8002dac:	4818      	ldr	r0, [pc, #96]	; (8002e10 <HAL_TIM_Base_MspInit+0x150>)
 8002dae:	f001 f89d 	bl	8003eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	201d      	movs	r0, #29
 8002db8:	f000 fbdd 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dbc:	201d      	movs	r0, #29
 8002dbe:	f000 fbf6 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8002dc2:	e018      	b.n	8002df6 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_TIM_Base_MspInit+0x154>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d113      	bne.n	8002df6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	61d3      	str	r3, [r2, #28]
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_TIM_Base_MspInit+0x140>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	201e      	movs	r0, #30
 8002dec:	f000 fbc3 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002df0:	201e      	movs	r0, #30
 8002df2:	f000 fbdc 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3730      	adds	r7, #48	; 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010800 	.word	0x40010800
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40010c00 	.word	0x40010c00
 8002e14:	40000800 	.word	0x40000800

08002e18 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <MX_USART1_UART_Init+0x50>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e3e:	220c      	movs	r2, #12
 8002e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_USART1_UART_Init+0x4c>)
 8002e50:	f003 fe4c 	bl	8006aec <HAL_UART_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e5a:	f7ff f970 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000388 	.word	0x20000388
 8002e68:	40013800 	.word	0x40013800

08002e6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002ea4:	f003 fe22 	bl	8006aec <HAL_UART_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eae:	f7ff f946 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200003d0 	.word	0x200003d0
 8002ebc:	40004400 	.word	0x40004400

08002ec0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <MX_USART3_UART_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef8:	f003 fdf8 	bl	8006aec <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f02:	f7ff f91c 	bl	800213e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000418 	.word	0x20000418
 8002f10:	40004800 	.word	0x40004800

08002f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	; 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0320 	add.w	r3, r7, #32
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a77      	ldr	r2, [pc, #476]	; (800310c <HAL_UART_MspInit+0x1f8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d160      	bne.n	8002ff6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f34:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b73      	ldr	r3, [pc, #460]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 0320 	add.w	r3, r7, #32
 8002f76:	4619      	mov	r1, r3
 8002f78:	4866      	ldr	r0, [pc, #408]	; (8003114 <HAL_UART_MspInit+0x200>)
 8002f7a:	f000 ffb7 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 0320 	add.w	r3, r7, #32
 8002f90:	4619      	mov	r1, r3
 8002f92:	4860      	ldr	r0, [pc, #384]	; (8003114 <HAL_UART_MspInit+0x200>)
 8002f94:	f000 ffaa 	bl	8003eec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002f9a:	4a60      	ldr	r2, [pc, #384]	; (800311c <HAL_UART_MspInit+0x208>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa4:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb0:	4b59      	ldr	r3, [pc, #356]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb6:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002fbc:	4b56      	ldr	r3, [pc, #344]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fc8:	4853      	ldr	r0, [pc, #332]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fca:	f000 fb0b 	bl	80035e4 <HAL_DMA_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002fd4:	f7ff f8b3 	bl	800213e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fde:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <HAL_UART_MspInit+0x204>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2025      	movs	r0, #37	; 0x25
 8002fea:	f000 fac4 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fee:	2025      	movs	r0, #37	; 0x25
 8002ff0:	f000 fadd 	bl	80035ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ff4:	e12a      	b.n	800324c <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a49      	ldr	r2, [pc, #292]	; (8003120 <HAL_UART_MspInit+0x20c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f040 8099 	bne.w	8003134 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a42      	ldr	r2, [pc, #264]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8003008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300c:	61d3      	str	r3, [r2, #28]
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6193      	str	r3, [r2, #24]
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_UART_MspInit+0x1fc>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003032:	2304      	movs	r3, #4
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	f107 0320 	add.w	r3, r7, #32
 8003042:	4619      	mov	r1, r3
 8003044:	4833      	ldr	r0, [pc, #204]	; (8003114 <HAL_UART_MspInit+0x200>)
 8003046:	f000 ff51 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800304a:	2308      	movs	r3, #8
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	f107 0320 	add.w	r3, r7, #32
 800305a:	4619      	mov	r1, r3
 800305c:	482d      	ldr	r0, [pc, #180]	; (8003114 <HAL_UART_MspInit+0x200>)
 800305e:	f000 ff45 	bl	8003eec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003064:	4a30      	ldr	r2, [pc, #192]	; (8003128 <HAL_UART_MspInit+0x214>)
 8003066:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_UART_MspInit+0x210>)
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800307a:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_UART_MspInit+0x210>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_UART_MspInit+0x210>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003092:	4824      	ldr	r0, [pc, #144]	; (8003124 <HAL_UART_MspInit+0x210>)
 8003094:	f000 faa6 	bl	80035e4 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800309e:	f7ff f84e 	bl	800213e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_UART_MspInit+0x210>)
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_UART_MspInit+0x210>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80030ae:	4b1f      	ldr	r3, [pc, #124]	; (800312c <HAL_UART_MspInit+0x218>)
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_UART_MspInit+0x21c>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_UART_MspInit+0x218>)
 80030b6:	2210      	movs	r2, #16
 80030b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_UART_MspInit+0x218>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_UART_MspInit+0x218>)
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_UART_MspInit+0x218>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_UART_MspInit+0x218>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_UART_MspInit+0x218>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_UART_MspInit+0x218>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030de:	4813      	ldr	r0, [pc, #76]	; (800312c <HAL_UART_MspInit+0x218>)
 80030e0:	f000 fa80 	bl	80035e4 <HAL_DMA_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_UART_MspInit+0x1da>
      Error_Handler();
 80030ea:	f7ff f828 	bl	800213e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_UART_MspInit+0x218>)
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
 80030f4:	4a0d      	ldr	r2, [pc, #52]	; (800312c <HAL_UART_MspInit+0x218>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2026      	movs	r0, #38	; 0x26
 8003100:	f000 fa39 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003104:	2026      	movs	r0, #38	; 0x26
 8003106:	f000 fa52 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 800310a:	e09f      	b.n	800324c <HAL_UART_MspInit+0x338>
 800310c:	40013800 	.word	0x40013800
 8003110:	40021000 	.word	0x40021000
 8003114:	40010800 	.word	0x40010800
 8003118:	20000460 	.word	0x20000460
 800311c:	40020058 	.word	0x40020058
 8003120:	40004400 	.word	0x40004400
 8003124:	200004a4 	.word	0x200004a4
 8003128:	4002006c 	.word	0x4002006c
 800312c:	200004e8 	.word	0x200004e8
 8003130:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_UART_MspInit+0x340>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f040 8086 	bne.w	800324c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003140:	4b45      	ldr	r3, [pc, #276]	; (8003258 <HAL_UART_MspInit+0x344>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a44      	ldr	r2, [pc, #272]	; (8003258 <HAL_UART_MspInit+0x344>)
 8003146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314a:	61d3      	str	r3, [r2, #28]
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_UART_MspInit+0x344>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_UART_MspInit+0x344>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <HAL_UART_MspInit+0x344>)
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	6193      	str	r3, [r2, #24]
 8003164:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_UART_MspInit+0x344>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	4619      	mov	r1, r3
 8003184:	4835      	ldr	r0, [pc, #212]	; (800325c <HAL_UART_MspInit+0x348>)
 8003186:	f000 feb1 	bl	8003eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800318a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	4619      	mov	r1, r3
 800319e:	482f      	ldr	r0, [pc, #188]	; (800325c <HAL_UART_MspInit+0x348>)
 80031a0:	f000 fea4 	bl	8003eec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80031a4:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_UART_MspInit+0x350>)
 80031a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80031d4:	4822      	ldr	r0, [pc, #136]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031d6:	f000 fa05 	bl	80035e4 <HAL_DMA_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 80031e0:	f7fe ffad 	bl	800213e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_UART_MspInit+0x34c>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_UART_MspInit+0x354>)
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_UART_MspInit+0x358>)
 80031f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_UART_MspInit+0x354>)
 80031f8:	2210      	movs	r2, #16
 80031fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_UART_MspInit+0x354>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_UART_MspInit+0x354>)
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_UART_MspInit+0x354>)
 800321c:	2200      	movs	r2, #0
 800321e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003220:	4811      	ldr	r0, [pc, #68]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003222:	f000 f9df 	bl	80035e4 <HAL_DMA_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_UART_MspInit+0x31c>
      Error_Handler();
 800322c:	f7fe ff87 	bl	800213e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <HAL_UART_MspInit+0x354>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800323c:	2200      	movs	r2, #0
 800323e:	2100      	movs	r1, #0
 8003240:	2027      	movs	r0, #39	; 0x27
 8003242:	f000 f998 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003246:	2027      	movs	r0, #39	; 0x27
 8003248:	f000 f9b1 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 800324c:	bf00      	nop
 800324e:	3730      	adds	r7, #48	; 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40004800 	.word	0x40004800
 8003258:	40021000 	.word	0x40021000
 800325c:	40010c00 	.word	0x40010c00
 8003260:	2000052c 	.word	0x2000052c
 8003264:	40020030 	.word	0x40020030
 8003268:	20000570 	.word	0x20000570
 800326c:	4002001c 	.word	0x4002001c

08003270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003270:	f7ff fbf2 	bl	8002a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003274:	480b      	ldr	r0, [pc, #44]	; (80032a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003276:	490c      	ldr	r1, [pc, #48]	; (80032a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800327c:	e002      	b.n	8003284 <LoopCopyDataInit>

0800327e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003282:	3304      	adds	r3, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003288:	d3f9      	bcc.n	800327e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800328c:	4c09      	ldr	r4, [pc, #36]	; (80032b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003290:	e001      	b.n	8003296 <LoopFillZerobss>

08003292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003294:	3204      	adds	r2, #4

08003296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003298:	d3fb      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329a:	f004 fc5b 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800329e:	f7fe fe8d 	bl	8001fbc <main>
  bx lr
 80032a2:	4770      	bx	lr
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80032ac:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 80032b0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80032b4:	20000700 	.word	0x20000700

080032b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC1_2_IRQHandler>
	...

080032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_Init+0x28>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <HAL_Init+0x28>)
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032cc:	2003      	movs	r0, #3
 80032ce:	f000 f947 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d2:	200f      	movs	r0, #15
 80032d4:	f000 f808 	bl	80032e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d8:	f7ff fac0 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000

080032e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_InitTick+0x54>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_InitTick+0x58>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f95f 	bl	80035ca <HAL_SYSTICK_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00e      	b.n	8003334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d80a      	bhi.n	8003332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800331c:	2200      	movs	r2, #0
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f000 f927 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003328:	4a06      	ldr	r2, [pc, #24]	; (8003344 <HAL_InitTick+0x5c>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000098 	.word	0x20000098
 8003340:	200000a0 	.word	0x200000a0
 8003344:	2000009c 	.word	0x2000009c

08003348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_IncTick+0x1c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_IncTick+0x20>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4413      	add	r3, r2
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_IncTick+0x20>)
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	200000a0 	.word	0x200000a0
 8003368:	200005b4 	.word	0x200005b4

0800336c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return uwTick;
 8003370:	4b02      	ldr	r3, [pc, #8]	; (800337c <HAL_GetTick+0x10>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	200005b4 	.word	0x200005b4

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff fff0 	bl	800336c <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffe0 	bl	800336c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200000a0 	.word	0x200000a0

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4906      	ldr	r1, [pc, #24]	; (8003460 <__NVIC_EnableIRQ+0x34>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff90 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff2d 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff42 	bl	8003410 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff90 	bl	80034b8 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5f 	bl	8003464 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff35 	bl	800342c <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e059      	b.n	80036ae <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_DMA_Init+0xd4>)
 8003602:	429a      	cmp	r2, r3
 8003604:	d80f      	bhi.n	8003626 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_DMA_Init+0xd8>)
 800360e:	4413      	add	r3, r2
 8003610:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <HAL_DMA_Init+0xdc>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	009a      	lsls	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a28      	ldr	r2, [pc, #160]	; (80036c4 <HAL_DMA_Init+0xe0>)
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
 8003624:	e00e      	b.n	8003644 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_DMA_Init+0xe4>)
 800362e:	4413      	add	r3, r2
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_DMA_Init+0xdc>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_DMA_Init+0xe8>)
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800365a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800365e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40020407 	.word	0x40020407
 80036bc:	bffdfff8 	.word	0xbffdfff8
 80036c0:	cccccccd 	.word	0xcccccccd
 80036c4:	40020000 	.word	0x40020000
 80036c8:	bffdfbf8 	.word	0xbffdfbf8
 80036cc:	40020400 	.word	0x40020400

080036d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Start_IT+0x20>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e04b      	b.n	8003788 <HAL_DMA_Start_IT+0xb8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d13a      	bne.n	800377a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fbb1 	bl	8003e90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 020e 	orr.w	r2, r2, #14
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e00f      	b.n	8003768 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 020a 	orr.w	r2, r2, #10
 8003766:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e005      	b.n	8003786 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2204      	movs	r2, #4
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e020      	b.n	80037fc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020e 	bic.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
	...

08003808 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d005      	beq.n	800382c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2204      	movs	r2, #4
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e0d6      	b.n	80039da <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020e 	bic.w	r2, r2, #14
 800383a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d958      	bls.n	800390a <HAL_DMA_Abort_IT+0x102>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a62      	ldr	r2, [pc, #392]	; (80039e8 <HAL_DMA_Abort_IT+0x1e0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04f      	beq.n	8003902 <HAL_DMA_Abort_IT+0xfa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a61      	ldr	r2, [pc, #388]	; (80039ec <HAL_DMA_Abort_IT+0x1e4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d048      	beq.n	80038fe <HAL_DMA_Abort_IT+0xf6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5f      	ldr	r2, [pc, #380]	; (80039f0 <HAL_DMA_Abort_IT+0x1e8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_Abort_IT+0xf0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_DMA_Abort_IT+0x1ec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d038      	beq.n	80038f2 <HAL_DMA_Abort_IT+0xea>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5c      	ldr	r2, [pc, #368]	; (80039f8 <HAL_DMA_Abort_IT+0x1f0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d030      	beq.n	80038ec <HAL_DMA_Abort_IT+0xe4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_DMA_Abort_IT+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d028      	beq.n	80038e6 <HAL_DMA_Abort_IT+0xde>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_DMA_Abort_IT+0x1dc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d020      	beq.n	80038e0 <HAL_DMA_Abort_IT+0xd8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a57      	ldr	r2, [pc, #348]	; (8003a00 <HAL_DMA_Abort_IT+0x1f8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d019      	beq.n	80038dc <HAL_DMA_Abort_IT+0xd4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a55      	ldr	r2, [pc, #340]	; (8003a04 <HAL_DMA_Abort_IT+0x1fc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d012      	beq.n	80038d8 <HAL_DMA_Abort_IT+0xd0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a54      	ldr	r2, [pc, #336]	; (8003a08 <HAL_DMA_Abort_IT+0x200>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00a      	beq.n	80038d2 <HAL_DMA_Abort_IT+0xca>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_DMA_Abort_IT+0x204>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d102      	bne.n	80038cc <HAL_DMA_Abort_IT+0xc4>
 80038c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ca:	e01b      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038d0:	e018      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d6:	e015      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038d8:	2310      	movs	r3, #16
 80038da:	e013      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038dc:	2301      	movs	r3, #1
 80038de:	e011      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e4:	e00e      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038ea:	e00b      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f0:	e008      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f6:	e005      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fc:	e002      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 80038fe:	2310      	movs	r3, #16
 8003900:	e000      	b.n	8003904 <HAL_DMA_Abort_IT+0xfc>
 8003902:	2301      	movs	r3, #1
 8003904:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <HAL_DMA_Abort_IT+0x208>)
 8003906:	6053      	str	r3, [r2, #4]
 8003908:	e057      	b.n	80039ba <HAL_DMA_Abort_IT+0x1b2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a36      	ldr	r2, [pc, #216]	; (80039e8 <HAL_DMA_Abort_IT+0x1e0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04f      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x1ac>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_DMA_Abort_IT+0x1e4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d048      	beq.n	80039b0 <HAL_DMA_Abort_IT+0x1a8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <HAL_DMA_Abort_IT+0x1e8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d040      	beq.n	80039aa <HAL_DMA_Abort_IT+0x1a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_DMA_Abort_IT+0x1ec>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d038      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x19c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_DMA_Abort_IT+0x1f0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d030      	beq.n	800399e <HAL_DMA_Abort_IT+0x196>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <HAL_DMA_Abort_IT+0x1f4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d028      	beq.n	8003998 <HAL_DMA_Abort_IT+0x190>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <HAL_DMA_Abort_IT+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d020      	beq.n	8003992 <HAL_DMA_Abort_IT+0x18a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <HAL_DMA_Abort_IT+0x1f8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_DMA_Abort_IT+0x186>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_DMA_Abort_IT+0x1fc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d012      	beq.n	800398a <HAL_DMA_Abort_IT+0x182>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_DMA_Abort_IT+0x200>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00a      	beq.n	8003984 <HAL_DMA_Abort_IT+0x17c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_DMA_Abort_IT+0x204>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_DMA_Abort_IT+0x176>
 8003978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397c:	e01b      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 800397e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003982:	e018      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 8003984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003988:	e015      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 800398a:	2310      	movs	r3, #16
 800398c:	e013      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 800398e:	2301      	movs	r3, #1
 8003990:	e011      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 8003992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003996:	e00e      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 8003998:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800399c:	e00b      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 800399e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039a2:	e008      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 80039a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a8:	e005      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 80039aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ae:	e002      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 80039b0:	2310      	movs	r3, #16
 80039b2:	e000      	b.n	80039b6 <HAL_DMA_Abort_IT+0x1ae>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <HAL_DMA_Abort_IT+0x20c>)
 80039b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
    } 
  }
  return status;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020080 	.word	0x40020080
 80039e8:	40020008 	.word	0x40020008
 80039ec:	4002001c 	.word	0x4002001c
 80039f0:	40020030 	.word	0x40020030
 80039f4:	40020044 	.word	0x40020044
 80039f8:	40020058 	.word	0x40020058
 80039fc:	4002006c 	.word	0x4002006c
 8003a00:	40020408 	.word	0x40020408
 8003a04:	4002041c 	.word	0x4002041c
 8003a08:	40020430 	.word	0x40020430
 8003a0c:	40020444 	.word	0x40020444
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020000 	.word	0x40020000

08003a18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2204      	movs	r2, #4
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80f1 	beq.w	8003c24 <HAL_DMA_IRQHandler+0x20c>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80eb 	beq.w	8003c24 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d958      	bls.n	8003b2a <HAL_DMA_IRQHandler+0x112>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d04f      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x10a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d048      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x106>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_DMA_IRQHandler+0x1e4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d040      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x100>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a59      	ldr	r2, [pc, #356]	; (8003c00 <HAL_DMA_IRQHandler+0x1e8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d038      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xfa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_DMA_IRQHandler+0x1ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d030      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xf4>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_DMA_IRQHandler+0x1f0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d028      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xee>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d020      	beq.n	8003b00 <HAL_DMA_IRQHandler+0xe8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <HAL_DMA_IRQHandler+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d019      	beq.n	8003afc <HAL_DMA_IRQHandler+0xe4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <HAL_DMA_IRQHandler+0x1f8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d012      	beq.n	8003af8 <HAL_DMA_IRQHandler+0xe0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_DMA_IRQHandler+0x1fc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00a      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xda>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <HAL_DMA_IRQHandler+0x200>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d102      	bne.n	8003aec <HAL_DMA_IRQHandler+0xd4>
 8003ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aea:	e01b      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003aec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003af0:	e018      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af6:	e015      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003af8:	2340      	movs	r3, #64	; 0x40
 8003afa:	e013      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003afc:	2304      	movs	r3, #4
 8003afe:	e011      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b04:	e00e      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0a:	e00b      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b10:	e008      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b16:	e005      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1c:	e002      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_IRQHandler+0x10c>
 8003b22:	2304      	movs	r3, #4
 8003b24:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <HAL_DMA_IRQHandler+0x204>)
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e057      	b.n	8003bda <HAL_DMA_IRQHandler+0x1c2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04f      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x1bc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d048      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x1b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <HAL_DMA_IRQHandler+0x1e4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0x1b2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <HAL_DMA_IRQHandler+0x1e8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d038      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x1ac>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_DMA_IRQHandler+0x1ec>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d030      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x1a6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <HAL_DMA_IRQHandler+0x1f0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d028      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x1a0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d020      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x19a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <HAL_DMA_IRQHandler+0x1f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_DMA_IRQHandler+0x196>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <HAL_DMA_IRQHandler+0x1f8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d012      	beq.n	8003baa <HAL_DMA_IRQHandler+0x192>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_DMA_IRQHandler+0x1fc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x18c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_DMA_IRQHandler+0x200>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d102      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x186>
 8003b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b9c:	e01b      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003b9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ba2:	e018      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba8:	e015      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	e013      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e011      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bb6:	e00e      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bbc:	e00b      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc2:	e008      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bc8:	e005      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bce:	e002      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x1be>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_DMA_IRQHandler+0x208>)
 8003bd8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8136 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003bec:	e130      	b.n	8003e50 <HAL_DMA_IRQHandler+0x438>
 8003bee:	bf00      	nop
 8003bf0:	40020080 	.word	0x40020080
 8003bf4:	40020008 	.word	0x40020008
 8003bf8:	4002001c 	.word	0x4002001c
 8003bfc:	40020030 	.word	0x40020030
 8003c00:	40020044 	.word	0x40020044
 8003c04:	40020058 	.word	0x40020058
 8003c08:	4002006c 	.word	0x4002006c
 8003c0c:	40020408 	.word	0x40020408
 8003c10:	4002041c 	.word	0x4002041c
 8003c14:	40020430 	.word	0x40020430
 8003c18:	40020444 	.word	0x40020444
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2202      	movs	r2, #2
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80dd 	beq.w	8003df0 <HAL_DMA_IRQHandler+0x3d8>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80d7 	beq.w	8003df0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 020a 	bic.w	r2, r2, #10
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <HAL_DMA_IRQHandler+0x444>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d958      	bls.n	8003d26 <HAL_DMA_IRQHandler+0x30e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a79      	ldr	r2, [pc, #484]	; (8003e60 <HAL_DMA_IRQHandler+0x448>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04f      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x306>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a78      	ldr	r2, [pc, #480]	; (8003e64 <HAL_DMA_IRQHandler+0x44c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d048      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x302>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a76      	ldr	r2, [pc, #472]	; (8003e68 <HAL_DMA_IRQHandler+0x450>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d040      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x2fc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_DMA_IRQHandler+0x454>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d038      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2f6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <HAL_DMA_IRQHandler+0x458>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d030      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2f0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a72      	ldr	r2, [pc, #456]	; (8003e74 <HAL_DMA_IRQHandler+0x45c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d028      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x2ea>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_DMA_IRQHandler+0x444>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d020      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x2e4>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6e      	ldr	r2, [pc, #440]	; (8003e78 <HAL_DMA_IRQHandler+0x460>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d019      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x2e0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6c      	ldr	r2, [pc, #432]	; (8003e7c <HAL_DMA_IRQHandler+0x464>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d012      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x2dc>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6b      	ldr	r2, [pc, #428]	; (8003e80 <HAL_DMA_IRQHandler+0x468>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00a      	beq.n	8003cee <HAL_DMA_IRQHandler+0x2d6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_DMA_IRQHandler+0x46c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d102      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x2d0>
 8003ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce6:	e01b      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cec:	e018      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf2:	e015      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	e013      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e011      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d00:	e00e      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d06:	e00b      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0c:	e008      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d12:	e005      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d18:	e002      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0x308>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	4a59      	ldr	r2, [pc, #356]	; (8003e88 <HAL_DMA_IRQHandler+0x470>)
 8003d22:	6053      	str	r3, [r2, #4]
 8003d24:	e057      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x3be>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_DMA_IRQHandler+0x448>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04f      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x3b8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <HAL_DMA_IRQHandler+0x44c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d048      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x3b4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a4a      	ldr	r2, [pc, #296]	; (8003e68 <HAL_DMA_IRQHandler+0x450>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x3ae>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a48      	ldr	r2, [pc, #288]	; (8003e6c <HAL_DMA_IRQHandler+0x454>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d038      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x3a8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <HAL_DMA_IRQHandler+0x458>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d030      	beq.n	8003dba <HAL_DMA_IRQHandler+0x3a2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a45      	ldr	r2, [pc, #276]	; (8003e74 <HAL_DMA_IRQHandler+0x45c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d028      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x39c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <HAL_DMA_IRQHandler+0x444>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d020      	beq.n	8003dae <HAL_DMA_IRQHandler+0x396>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a41      	ldr	r2, [pc, #260]	; (8003e78 <HAL_DMA_IRQHandler+0x460>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_DMA_IRQHandler+0x392>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <HAL_DMA_IRQHandler+0x464>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d012      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x38e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3e      	ldr	r2, [pc, #248]	; (8003e80 <HAL_DMA_IRQHandler+0x468>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x388>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <HAL_DMA_IRQHandler+0x46c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x382>
 8003d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d98:	e01b      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d9e:	e018      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da4:	e015      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003da6:	2320      	movs	r3, #32
 8003da8:	e013      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e011      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db2:	e00e      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003db4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003db8:	e00b      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dbe:	e008      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc4:	e005      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dca:	e002      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e000      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x3ba>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <HAL_DMA_IRQHandler+0x474>)
 8003dd4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d034      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dee:	e02f      	b.n	8003e50 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2208      	movs	r2, #8
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d028      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x43a>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d023      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 020e 	bic.w	r2, r2, #14
 8003e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f202 	lsl.w	r2, r1, r2
 8003e28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
    }
  }
  return;
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
}
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40020080 	.word	0x40020080
 8003e60:	40020008 	.word	0x40020008
 8003e64:	4002001c 	.word	0x4002001c
 8003e68:	40020030 	.word	0x40020030
 8003e6c:	40020044 	.word	0x40020044
 8003e70:	40020058 	.word	0x40020058
 8003e74:	4002006c 	.word	0x4002006c
 8003e78:	40020408 	.word	0x40020408
 8003e7c:	4002041c 	.word	0x4002041c
 8003e80:	40020430 	.word	0x40020430
 8003e84:	40020444 	.word	0x40020444
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	40020000 	.word	0x40020000

08003e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d108      	bne.n	8003ed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ece:	e007      	b.n	8003ee0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b08b      	sub	sp, #44	; 0x2c
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efe:	e179      	b.n	80041f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f00:	2201      	movs	r2, #1
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f040 8168 	bne.w	80041ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a96      	ldr	r2, [pc, #600]	; (800417c <HAL_GPIO_Init+0x290>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d05e      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
 8003f28:	4a94      	ldr	r2, [pc, #592]	; (800417c <HAL_GPIO_Init+0x290>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d875      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f2e:	4a94      	ldr	r2, [pc, #592]	; (8004180 <HAL_GPIO_Init+0x294>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d058      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
 8003f34:	4a92      	ldr	r2, [pc, #584]	; (8004180 <HAL_GPIO_Init+0x294>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d86f      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f3a:	4a92      	ldr	r2, [pc, #584]	; (8004184 <HAL_GPIO_Init+0x298>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d052      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
 8003f40:	4a90      	ldr	r2, [pc, #576]	; (8004184 <HAL_GPIO_Init+0x298>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d869      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f46:	4a90      	ldr	r2, [pc, #576]	; (8004188 <HAL_GPIO_Init+0x29c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04c      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
 8003f4c:	4a8e      	ldr	r2, [pc, #568]	; (8004188 <HAL_GPIO_Init+0x29c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d863      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f52:	4a8e      	ldr	r2, [pc, #568]	; (800418c <HAL_GPIO_Init+0x2a0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d046      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
 8003f58:	4a8c      	ldr	r2, [pc, #560]	; (800418c <HAL_GPIO_Init+0x2a0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d85d      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f5e:	2b12      	cmp	r3, #18
 8003f60:	d82a      	bhi.n	8003fb8 <HAL_GPIO_Init+0xcc>
 8003f62:	2b12      	cmp	r3, #18
 8003f64:	d859      	bhi.n	800401a <HAL_GPIO_Init+0x12e>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <HAL_GPIO_Init+0x80>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003fe7 	.word	0x08003fe7
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fd3 	.word	0x08003fd3
 8003f78:	08004015 	.word	0x08004015
 8003f7c:	0800401b 	.word	0x0800401b
 8003f80:	0800401b 	.word	0x0800401b
 8003f84:	0800401b 	.word	0x0800401b
 8003f88:	0800401b 	.word	0x0800401b
 8003f8c:	0800401b 	.word	0x0800401b
 8003f90:	0800401b 	.word	0x0800401b
 8003f94:	0800401b 	.word	0x0800401b
 8003f98:	0800401b 	.word	0x0800401b
 8003f9c:	0800401b 	.word	0x0800401b
 8003fa0:	0800401b 	.word	0x0800401b
 8003fa4:	0800401b 	.word	0x0800401b
 8003fa8:	0800401b 	.word	0x0800401b
 8003fac:	0800401b 	.word	0x0800401b
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_GPIO_Init+0x2a4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fbe:	e02c      	b.n	800401a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	623b      	str	r3, [r7, #32]
          break;
 8003fc6:	e029      	b.n	800401c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	623b      	str	r3, [r7, #32]
          break;
 8003fd0:	e024      	b.n	800401c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	623b      	str	r3, [r7, #32]
          break;
 8003fda:	e01f      	b.n	800401c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	623b      	str	r3, [r7, #32]
          break;
 8003fe4:	e01a      	b.n	800401c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fee:	2304      	movs	r3, #4
 8003ff0:	623b      	str	r3, [r7, #32]
          break;
 8003ff2:	e013      	b.n	800401c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	611a      	str	r2, [r3, #16]
          break;
 8004006:	e009      	b.n	800401c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004008:	2308      	movs	r3, #8
 800400a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	615a      	str	r2, [r3, #20]
          break;
 8004012:	e003      	b.n	800401c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004014:	2300      	movs	r3, #0
 8004016:	623b      	str	r3, [r7, #32]
          break;
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x130>
          break;
 800401a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2bff      	cmp	r3, #255	; 0xff
 8004020:	d801      	bhi.n	8004026 <HAL_GPIO_Init+0x13a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	e001      	b.n	800402a <HAL_GPIO_Init+0x13e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2bff      	cmp	r3, #255	; 0xff
 8004030:	d802      	bhi.n	8004038 <HAL_GPIO_Init+0x14c>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	e002      	b.n	800403e <HAL_GPIO_Init+0x152>
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	3b08      	subs	r3, #8
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	210f      	movs	r1, #15
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	6a39      	ldr	r1, [r7, #32]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80c1 	beq.w	80041ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800406c:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_GPIO_Init+0x2a8>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4a48      	ldr	r2, [pc, #288]	; (8004194 <HAL_GPIO_Init+0x2a8>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6193      	str	r3, [r2, #24]
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_GPIO_Init+0x2a8>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004084:	4a44      	ldr	r2, [pc, #272]	; (8004198 <HAL_GPIO_Init+0x2ac>)
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	3302      	adds	r3, #2
 800408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	; (800419c <HAL_GPIO_Init+0x2b0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01f      	beq.n	80040f0 <HAL_GPIO_Init+0x204>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3b      	ldr	r2, [pc, #236]	; (80041a0 <HAL_GPIO_Init+0x2b4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d019      	beq.n	80040ec <HAL_GPIO_Init+0x200>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	; (80041a4 <HAL_GPIO_Init+0x2b8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_GPIO_Init+0x1fc>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <HAL_GPIO_Init+0x2bc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00d      	beq.n	80040e4 <HAL_GPIO_Init+0x1f8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_GPIO_Init+0x2c0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <HAL_GPIO_Init+0x1f4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <HAL_GPIO_Init+0x2c4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_GPIO_Init+0x1f0>
 80040d8:	2305      	movs	r3, #5
 80040da:	e00a      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040dc:	2306      	movs	r3, #6
 80040de:	e008      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040e0:	2304      	movs	r3, #4
 80040e2:	e006      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040e4:	2303      	movs	r3, #3
 80040e6:	e004      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e002      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_GPIO_Init+0x206>
 80040f0:	2300      	movs	r3, #0
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	f002 0203 	and.w	r2, r2, #3
 80040f8:	0092      	lsls	r2, r2, #2
 80040fa:	4093      	lsls	r3, r2
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004102:	4925      	ldr	r1, [pc, #148]	; (8004198 <HAL_GPIO_Init+0x2ac>)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4924      	ldr	r1, [pc, #144]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	43db      	mvns	r3, r3
 8004132:	4920      	ldr	r1, [pc, #128]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 8004134:	4013      	ands	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	491a      	ldr	r1, [pc, #104]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
 8004150:	e006      	b.n	8004160 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	43db      	mvns	r3, r3
 800415a:	4916      	ldr	r1, [pc, #88]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 800415c:	4013      	ands	r3, r2
 800415e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d025      	beq.n	80041b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4910      	ldr	r1, [pc, #64]	; (80041b4 <HAL_GPIO_Init+0x2c8>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
 8004178:	e025      	b.n	80041c6 <HAL_GPIO_Init+0x2da>
 800417a:	bf00      	nop
 800417c:	10320000 	.word	0x10320000
 8004180:	10310000 	.word	0x10310000
 8004184:	10220000 	.word	0x10220000
 8004188:	10210000 	.word	0x10210000
 800418c:	10120000 	.word	0x10120000
 8004190:	10110000 	.word	0x10110000
 8004194:	40021000 	.word	0x40021000
 8004198:	40010000 	.word	0x40010000
 800419c:	40010800 	.word	0x40010800
 80041a0:	40010c00 	.word	0x40010c00
 80041a4:	40011000 	.word	0x40011000
 80041a8:	40011400 	.word	0x40011400
 80041ac:	40011800 	.word	0x40011800
 80041b0:	40011c00 	.word	0x40011c00
 80041b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	43db      	mvns	r3, r3
 80041c0:	4913      	ldr	r1, [pc, #76]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	490e      	ldr	r1, [pc, #56]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
 80041de:	e006      	b.n	80041ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4909      	ldr	r1, [pc, #36]	; (8004210 <HAL_GPIO_Init+0x324>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	3301      	adds	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f ae7e 	bne.w	8003f00 <HAL_GPIO_Init+0x14>
  }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	372c      	adds	r7, #44	; 0x2c
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	40010400 	.word	0x40010400

08004214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e001      	b.n	8004236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]
 800424e:	4613      	mov	r3, r2
 8004250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004252:	787b      	ldrb	r3, [r7, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800425e:	e003      	b.n	8004268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	041a      	lsls	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	041a      	lsls	r2, r3, #16
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43d9      	mvns	r1, r3
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	400b      	ands	r3, r1
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e12b      	b.n	800450e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fbda 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004308:	f001 fbf0 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a81      	ldr	r2, [pc, #516]	; (8004518 <HAL_I2C_Init+0x274>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d807      	bhi.n	8004328 <HAL_I2C_Init+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_I2C_Init+0x278>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e006      	b.n	8004336 <HAL_I2C_Init+0x92>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_I2C_Init+0x27c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0e7      	b.n	800450e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a78      	ldr	r2, [pc, #480]	; (8004524 <HAL_I2C_Init+0x280>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0c9b      	lsrs	r3, r3, #18
 8004348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a6a      	ldr	r2, [pc, #424]	; (8004518 <HAL_I2C_Init+0x274>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d802      	bhi.n	8004378 <HAL_I2C_Init+0xd4>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	e009      	b.n	800438c <HAL_I2C_Init+0xe8>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	4a69      	ldr	r2, [pc, #420]	; (8004528 <HAL_I2C_Init+0x284>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	3301      	adds	r3, #1
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800439e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	495c      	ldr	r1, [pc, #368]	; (8004518 <HAL_I2C_Init+0x274>)
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d819      	bhi.n	80043e0 <HAL_I2C_Init+0x13c>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e59      	subs	r1, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c0:	400b      	ands	r3, r1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_I2C_Init+0x138>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e59      	subs	r1, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043da:	e051      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043dc:	2304      	movs	r3, #4
 80043de:	e04f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_I2C_Init+0x168>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e012      	b.n	8004432 <HAL_I2C_Init+0x18e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x196>
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <HAL_I2C_Init+0x1bc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	fbb0 f3f3 	udiv	r3, r0, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	e00f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1e58      	subs	r0, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	0099      	lsls	r1, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6809      	ldr	r1, [r1, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6911      	ldr	r1, [r2, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	000186a0 	.word	0x000186a0
 800451c:	001e847f 	.word	0x001e847f
 8004520:	003d08ff 	.word	0x003d08ff
 8004524:	431bde83 	.word	0x431bde83
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004546:	f7fe ff11 	bl	800336c <HAL_GetTick>
 800454a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b20      	cmp	r3, #32
 8004556:	f040 80d9 	bne.w	800470c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2319      	movs	r3, #25
 8004560:	2201      	movs	r2, #1
 8004562:	496d      	ldr	r1, [pc, #436]	; (8004718 <HAL_I2C_Mem_Write+0x1ec>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fcc1 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	e0cc      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Mem_Write+0x56>
 800457e:	2302      	movs	r3, #2
 8004580:	e0c5      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d007      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2221      	movs	r2, #33	; 0x21
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a4d      	ldr	r2, [pc, #308]	; (800471c <HAL_I2C_Mem_Write+0x1f0>)
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ea:	88f8      	ldrh	r0, [r7, #6]
 80045ec:	893a      	ldrh	r2, [r7, #8]
 80045ee:	8979      	ldrh	r1, [r7, #10]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4603      	mov	r3, r0
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 faf8 	bl	8004bf0 <I2C_RequestMemoryWrite>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d052      	beq.n	80046ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e081      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fd86 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06b      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d11b      	bne.n	80046ac <HAL_I2C_Mem_Write+0x180>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1aa      	bne.n	800460a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fd79 	bl	80051b0 <I2C_WaitOnBTFFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d107      	bne.n	80046dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e016      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	00100002 	.word	0x00100002
 800471c:	ffff0000 	.word	0xffff0000

08004720 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	; 0x30
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4603      	mov	r3, r0
 8004730:	817b      	strh	r3, [r7, #10]
 8004732:	460b      	mov	r3, r1
 8004734:	813b      	strh	r3, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800473e:	f7fe fe15 	bl	800336c <HAL_GetTick>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b20      	cmp	r3, #32
 800474e:	f040 8244 	bne.w	8004bda <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2319      	movs	r3, #25
 8004758:	2201      	movs	r2, #1
 800475a:	4982      	ldr	r1, [pc, #520]	; (8004964 <HAL_I2C_Mem_Read+0x244>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fbc5 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
 800476a:	e237      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_I2C_Mem_Read+0x5a>
 8004776:	2302      	movs	r3, #2
 8004778:	e230      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d007      	beq.n	80047a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2222      	movs	r2, #34	; 0x22
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a62      	ldr	r2, [pc, #392]	; (8004968 <HAL_I2C_Mem_Read+0x248>)
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047e2:	88f8      	ldrh	r0, [r7, #6]
 80047e4:	893a      	ldrh	r2, [r7, #8]
 80047e6:	8979      	ldrh	r1, [r7, #10]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4603      	mov	r3, r0
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa92 	bl	8004d1c <I2C_RequestMemoryRead>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e1ec      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e1c0      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	2b01      	cmp	r3, #1
 8004838:	d11e      	bne.n	8004878 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800484a:	b672      	cpsid	i
}
 800484c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004874:	b662      	cpsie	i
}
 8004876:	e035      	b.n	80048e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11e      	bne.n	80048be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004890:	b672      	cpsid	i
}
 8004892:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048ba:	b662      	cpsie	i
}
 80048bc:	e012      	b.n	80048e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048e4:	e166      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	f200 811f 	bhi.w	8004b2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d123      	bne.n	8004940 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fc9f 	bl	8005240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e167      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800493e:	e139      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b02      	cmp	r3, #2
 8004946:	d152      	bne.n	80049ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2200      	movs	r2, #0
 8004950:	4906      	ldr	r1, [pc, #24]	; (800496c <HAL_I2C_Mem_Read+0x24c>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 faca 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e13c      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
 8004962:	bf00      	nop
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000
 800496c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004970:	b672      	cpsid	i
}
 8004972:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049b6:	b662      	cpsie	i
}
 80049b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ec:	e0e2      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2200      	movs	r2, #0
 80049f6:	497b      	ldr	r1, [pc, #492]	; (8004be4 <HAL_I2C_Mem_Read+0x4c4>)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fa77 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0e9      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a18:	b672      	cpsid	i
}
 8004a1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a4e:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_I2C_Mem_Read+0x4c8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	4a65      	ldr	r2, [pc, #404]	; (8004bec <HAL_I2C_Mem_Read+0x4cc>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a1a      	lsrs	r2, r3, #8
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00da      	lsls	r2, r3, #3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d118      	bne.n	8004aa6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a96:	b662      	cpsie	i
}
 8004a98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e09a      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d1d9      	bne.n	8004a68 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004af6:	b662      	cpsie	i
}
 8004af8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b2c:	e042      	b.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fb84 	bl	8005240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e04c      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d118      	bne.n	8004bb4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f ae94 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3728      	adds	r7, #40	; 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00010004 	.word	0x00010004
 8004be8:	20000098 	.word	0x20000098
 8004bec:	14f8b589 	.word	0x14f8b589

08004bf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	817b      	strh	r3, [r7, #10]
 8004c02:	460b      	mov	r3, r1
 8004c04:	813b      	strh	r3, [r7, #8]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f960 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c40:	d103      	bne.n	8004c4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e05f      	b.n	8004d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	492d      	ldr	r1, [pc, #180]	; (8004d18 <I2C_RequestMemoryWrite+0x128>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f9bb 	bl	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e04c      	b.n	8004d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8c:	6a39      	ldr	r1, [r7, #32]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fa46 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d107      	bne.n	8004cb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e02b      	b.n	8004d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d105      	bne.n	8004cc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbc:	893b      	ldrh	r3, [r7, #8]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	611a      	str	r2, [r3, #16]
 8004cc6:	e021      	b.n	8004d0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc8:	893b      	ldrh	r3, [r7, #8]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	6a39      	ldr	r1, [r7, #32]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fa20 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d107      	bne.n	8004cfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e005      	b.n	8004d0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d02:	893b      	ldrh	r3, [r7, #8]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	00010002 	.word	0x00010002

08004d1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	817b      	strh	r3, [r7, #10]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	813b      	strh	r3, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f8c2 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	d103      	bne.n	8004d86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0aa      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	4952      	ldr	r1, [pc, #328]	; (8004ee8 <I2C_RequestMemoryRead+0x1cc>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f91d 	bl	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e097      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f9a8 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e076      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	e021      	b.n	8004e48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f982 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d107      	bne.n	8004e3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e050      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3e:	893b      	ldrh	r3, [r7, #8]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	6a39      	ldr	r1, [r7, #32]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f967 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d107      	bne.n	8004e70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e035      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f82b 	bl	8004eec <I2C_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	d103      	bne.n	8004eb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e013      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eb8:	897b      	ldrh	r3, [r7, #10]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	4906      	ldr	r1, [pc, #24]	; (8004ee8 <I2C_RequestMemoryRead+0x1cc>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f886 	bl	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	00010002 	.word	0x00010002

08004eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004efc:	e048      	b.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d044      	beq.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fe fa31 	bl	800336c <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d139      	bne.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10d      	bne.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	e00c      	b.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d116      	bne.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e023      	b.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d10d      	bne.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	e00c      	b.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	43da      	mvns	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d093      	beq.n	8004efe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fee:	e071      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d123      	bne.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0204 	orr.w	r2, r3, #4
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e067      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d041      	beq.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005050:	f7fe f98c 	bl	800336c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d136      	bne.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10c      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e00b      	b.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	43da      	mvns	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d016      	beq.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e021      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10c      	bne.n	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	43da      	mvns	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e00b      	b.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	43da      	mvns	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4013      	ands	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f af6d 	bne.w	8004ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800512c:	e034      	b.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8e3 	bl	80052fa <I2C_IsAcknowledgeFailed>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e034      	b.n	80051a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d028      	beq.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe f911 	bl	800336c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11d      	bne.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d016      	beq.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d1c3      	bne.n	800512e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051bc:	e034      	b.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f89b 	bl	80052fa <I2C_IsAcknowledgeFailed>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e034      	b.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d028      	beq.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fe f8c9 	bl	800336c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11d      	bne.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d016      	beq.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e007      	b.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d1c3      	bne.n	80051be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800524c:	e049      	b.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d119      	bne.n	8005290 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0210 	mvn.w	r2, #16
 8005264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e030      	b.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fe f86c 	bl	800336c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11d      	bne.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d016      	beq.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e007      	b.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d1ae      	bne.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d11b      	bne.n	800534a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800531a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0204 	orr.w	r2, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
	...

08005358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e272      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8087 	beq.w	8005486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005378:	4b92      	ldr	r3, [pc, #584]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b04      	cmp	r3, #4
 8005382:	d00c      	beq.n	800539e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005384:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 030c 	and.w	r3, r3, #12
 800538c:	2b08      	cmp	r3, #8
 800538e:	d112      	bne.n	80053b6 <HAL_RCC_OscConfig+0x5e>
 8005390:	4b8c      	ldr	r3, [pc, #560]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d10b      	bne.n	80053b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06c      	beq.n	8005484 <HAL_RCC_OscConfig+0x12c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d168      	bne.n	8005484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e24c      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x76>
 80053c0:	4b80      	ldr	r3, [pc, #512]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e02e      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x98>
 80053d6:	4b7b      	ldr	r3, [pc, #492]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7a      	ldr	r2, [pc, #488]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b78      	ldr	r3, [pc, #480]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a77      	ldr	r2, [pc, #476]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0xbc>
 80053fa:	4b72      	ldr	r3, [pc, #456]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a71      	ldr	r2, [pc, #452]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a6e      	ldr	r2, [pc, #440]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0xd4>
 8005414:	4b6b      	ldr	r3, [pc, #428]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6a      	ldr	r2, [pc, #424]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fd ff9a 	bl	800336c <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7fd ff96 	bl	800336c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e200      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544e:	4b5d      	ldr	r3, [pc, #372]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0xe4>
 800545a:	e014      	b.n	8005486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fd ff86 	bl	800336c <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fd ff82 	bl	800336c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e1ec      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005476:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x10c>
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d063      	beq.n	800555a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800549e:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d11c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x18c>
 80054aa:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d116      	bne.n	80054e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_RCC_OscConfig+0x176>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e1c0      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ce:	4b3d      	ldr	r3, [pc, #244]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4939      	ldr	r1, [pc, #228]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e2:	e03a      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCC_OscConfig+0x270>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f2:	f7fd ff3b 	bl	800336c <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fa:	f7fd ff37 	bl	800336c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e1a1      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4927      	ldr	r1, [pc, #156]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	e015      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <HAL_RCC_OscConfig+0x270>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fd ff1a 	bl	800336c <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553c:	f7fd ff16 	bl	800336c <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e180      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03a      	beq.n	80055dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005574:	f7fd fefa 	bl	800336c <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800557c:	f7fd fef6 	bl	800336c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e160      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_RCC_OscConfig+0x26c>)
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800559a:	2001      	movs	r0, #1
 800559c:	f000 face 	bl	8005b3c <RCC_Delay>
 80055a0:	e01c      	b.n	80055dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a8:	f7fd fee0 	bl	800336c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ae:	e00f      	b.n	80055d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b0:	f7fd fedc 	bl	800336c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d908      	bls.n	80055d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e146      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	42420000 	.word	0x42420000
 80055cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	4b92      	ldr	r3, [pc, #584]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e9      	bne.n	80055b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80a6 	beq.w	8005736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ee:	4b8b      	ldr	r3, [pc, #556]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fa:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4a87      	ldr	r2, [pc, #540]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	61d3      	str	r3, [r2, #28]
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b82      	ldr	r3, [pc, #520]	; (8005820 <HAL_RCC_OscConfig+0x4c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <HAL_RCC_OscConfig+0x4c8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a7e      	ldr	r2, [pc, #504]	; (8005820 <HAL_RCC_OscConfig+0x4c8>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fd fe9d 	bl	800336c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fd fe99 	bl	800336c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b64      	cmp	r3, #100	; 0x64
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e103      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b75      	ldr	r3, [pc, #468]	; (8005820 <HAL_RCC_OscConfig+0x4c8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x312>
 800565c:	4b6f      	ldr	r3, [pc, #444]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6213      	str	r3, [r2, #32]
 8005668:	e02d      	b.n	80056c6 <HAL_RCC_OscConfig+0x36e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x334>
 8005672:	4b6a      	ldr	r3, [pc, #424]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4a69      	ldr	r2, [pc, #420]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6213      	str	r3, [r2, #32]
 800567e:	4b67      	ldr	r3, [pc, #412]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4a66      	ldr	r2, [pc, #408]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005684:	f023 0304 	bic.w	r3, r3, #4
 8005688:	6213      	str	r3, [r2, #32]
 800568a:	e01c      	b.n	80056c6 <HAL_RCC_OscConfig+0x36e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b05      	cmp	r3, #5
 8005692:	d10c      	bne.n	80056ae <HAL_RCC_OscConfig+0x356>
 8005694:	4b61      	ldr	r3, [pc, #388]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	4a60      	ldr	r2, [pc, #384]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800569a:	f043 0304 	orr.w	r3, r3, #4
 800569e:	6213      	str	r3, [r2, #32]
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	6213      	str	r3, [r2, #32]
 80056ac:	e00b      	b.n	80056c6 <HAL_RCC_OscConfig+0x36e>
 80056ae:	4b5b      	ldr	r3, [pc, #364]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	4a5a      	ldr	r2, [pc, #360]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	6213      	str	r3, [r2, #32]
 80056ba:	4b58      	ldr	r3, [pc, #352]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4a57      	ldr	r2, [pc, #348]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d015      	beq.n	80056fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fd fe4d 	bl	800336c <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd fe49 	bl	800336c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0b1      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ee      	beq.n	80056d6 <HAL_RCC_OscConfig+0x37e>
 80056f8:	e014      	b.n	8005724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fa:	f7fd fe37 	bl	800336c <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005700:	e00a      	b.n	8005718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f7fd fe33 	bl	800336c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e09b      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005718:	4b40      	ldr	r3, [pc, #256]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1ee      	bne.n	8005702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572a:	4b3c      	ldr	r3, [pc, #240]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4a3b      	ldr	r2, [pc, #236]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8087 	beq.w	800584e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005740:	4b36      	ldr	r3, [pc, #216]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b08      	cmp	r3, #8
 800574a:	d061      	beq.n	8005810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d146      	bne.n	80057e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005754:	4b33      	ldr	r3, [pc, #204]	; (8005824 <HAL_RCC_OscConfig+0x4cc>)
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575a:	f7fd fe07 	bl	800336c <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005762:	f7fd fe03 	bl	800336c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e06d      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f0      	bne.n	8005762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d108      	bne.n	800579c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4921      	ldr	r1, [pc, #132]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800579c:	4b1f      	ldr	r3, [pc, #124]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a19      	ldr	r1, [r3, #32]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	430b      	orrs	r3, r1
 80057ae:	491b      	ldr	r1, [pc, #108]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x4cc>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ba:	f7fd fdd7 	bl	800336c <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fd fdd3 	bl	800336c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e03d      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f0      	beq.n	80057c2 <HAL_RCC_OscConfig+0x46a>
 80057e0:	e035      	b.n	800584e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e2:	4b10      	ldr	r3, [pc, #64]	; (8005824 <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e8:	f7fd fdc0 	bl	800336c <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fd fdbc 	bl	800336c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e026      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_OscConfig+0x4c4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x498>
 800580e:	e01e      	b.n	800584e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e019      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
 800581c:	40021000 	.word	0x40021000
 8005820:	40007000 	.word	0x40007000
 8005824:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCC_OscConfig+0x500>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	429a      	cmp	r2, r3
 800583a:	d106      	bne.n	800584a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d001      	beq.n	800584e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40021000 	.word	0x40021000

0800585c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0d0      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005870:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d910      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	4965      	ldr	r1, [pc, #404]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0b8      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d040      	beq.n	800597c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d115      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e073      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06b      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4936      	ldr	r1, [pc, #216]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800594c:	f7fd fd0e 	bl	800336c <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fd fd0a 	bl	800336c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e053      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 020c 	and.w	r2, r3, #12
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	429a      	cmp	r2, r3
 800597a:	d1eb      	bne.n	8005954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d210      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 0207 	bic.w	r2, r3, #7
 8005992:	4922      	ldr	r1, [pc, #136]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e032      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4916      	ldr	r1, [pc, #88]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	490e      	ldr	r1, [pc, #56]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ea:	f000 f821 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490a      	ldr	r1, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x1c8>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1cc>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1d0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fc6c 	bl	80032e8 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40021000 	.word	0x40021000
 8005a24:	08008bd4 	.word	0x08008bd4
 8005a28:	20000098 	.word	0x20000098
 8005a2c:	2000009c 	.word	0x2000009c

08005a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d002      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x30>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x36>
 8005a5e:	e027      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a62:	613b      	str	r3, [r7, #16]
      break;
 8005a64:	e027      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	0c9b      	lsrs	r3, r3, #18
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a70:	5cd3      	ldrb	r3, [r2, r3]
 8005a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	0c5b      	lsrs	r3, r3, #17
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a92:	fb03 f202 	mul.w	r2, r3, r2
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e004      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0c      	ldr	r2, [pc, #48]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ab2:	613b      	str	r3, [r7, #16]
      break;
 8005ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab6:	693b      	ldr	r3, [r7, #16]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	007a1200 	.word	0x007a1200
 8005acc:	08008bec 	.word	0x08008bec
 8005ad0:	08008bfc 	.word	0x08008bfc
 8005ad4:	003d0900 	.word	0x003d0900

08005ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005adc:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	20000098 	.word	0x20000098

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af0:	f7ff fff2 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	08008be4 	.word	0x08008be4

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b18:	f7ff ffde 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	0adb      	lsrs	r3, r3, #11
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4903      	ldr	r1, [pc, #12]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000
 8005b38:	08008be4 	.word	0x08008be4

08005b3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <RCC_Delay+0x34>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <RCC_Delay+0x38>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a5b      	lsrs	r3, r3, #9
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b58:	bf00      	nop
  }
  while (Delay --);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f9      	bne.n	8005b58 <RCC_Delay+0x1c>
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	20000098 	.word	0x20000098
 8005b74:	10624dd3 	.word	0x10624dd3

08005b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e041      	b.n	8005c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fd f88e 	bl	8002cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f000 fccc 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d001      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e044      	b.n	8005cba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xac>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x6c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x6c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x6c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <HAL_TIM_Base_Start_IT+0xb4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x6c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x6c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d111      	bne.n	8005ca8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d010      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	e007      	b.n	8005cb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00

08005cd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e041      	b.n	8005d6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f839 	bl	8005d76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f000 fc1c 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_IC_Start_IT+0x1e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	e013      	b.n	8005dce <HAL_TIM_IC_Start_IT+0x46>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_IC_Start_IT+0x2e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	e00b      	b.n	8005dce <HAL_TIM_IC_Start_IT+0x46>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_IC_Start_IT+0x3e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e003      	b.n	8005dce <HAL_TIM_IC_Start_IT+0x46>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_TIM_IC_Start_IT+0x58>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e013      	b.n	8005e08 <HAL_TIM_IC_Start_IT+0x80>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d104      	bne.n	8005df0 <HAL_TIM_IC_Start_IT+0x68>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	e00b      	b.n	8005e08 <HAL_TIM_IC_Start_IT+0x80>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d104      	bne.n	8005e00 <HAL_TIM_IC_Start_IT+0x78>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e003      	b.n	8005e08 <HAL_TIM_IC_Start_IT+0x80>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e10:	7b7b      	ldrb	r3, [r7, #13]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0c2      	b.n	8005fa0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <HAL_TIM_IC_Start_IT+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e28:	e013      	b.n	8005e52 <HAL_TIM_IC_Start_IT+0xca>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_IC_Start_IT+0xb2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	e00b      	b.n	8005e52 <HAL_TIM_IC_Start_IT+0xca>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_IC_Start_IT+0xc2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	e003      	b.n	8005e52 <HAL_TIM_IC_Start_IT+0xca>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_IC_Start_IT+0xda>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_IC_Start_IT+0x102>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_IC_Start_IT+0xea>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e70:	e00b      	b.n	8005e8a <HAL_TIM_IC_Start_IT+0x102>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_IC_Start_IT+0xfa>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e80:	e003      	b.n	8005e8a <HAL_TIM_IC_Start_IT+0x102>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d841      	bhi.n	8005f14 <HAL_TIM_IC_Start_IT+0x18c>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_TIM_IC_Start_IT+0x110>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005edf 	.word	0x08005edf
 8005eac:	08005f15 	.word	0x08005f15
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f03 	.word	0x08005f03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0202 	orr.w	r2, r2, #2
 8005eda:	60da      	str	r2, [r3, #12]
      break;
 8005edc:	e01d      	b.n	8005f1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0204 	orr.w	r2, r2, #4
 8005eec:	60da      	str	r2, [r3, #12]
      break;
 8005eee:	e014      	b.n	8005f1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0208 	orr.w	r2, r2, #8
 8005efe:	60da      	str	r2, [r3, #12]
      break;
 8005f00:	e00b      	b.n	8005f1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0210 	orr.w	r2, r2, #16
 8005f10:	60da      	str	r2, [r3, #12]
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
      break;
 8005f18:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d13e      	bne.n	8005f9e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fd3c 	bl	80069a6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <HAL_TIM_IC_Start_IT+0x220>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_TIM_IC_Start_IT+0x224>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00e      	beq.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIM_IC_Start_IT+0x228>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <HAL_TIM_IC_Start_IT+0x22c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <HAL_TIM_IC_Start_IT+0x230>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d111      	bne.n	8005f8e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b06      	cmp	r3, #6
 8005f7a:	d010      	beq.n	8005f9e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8c:	e007      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00

08005fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d122      	bne.n	8006018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d11b      	bne.n	8006018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0202 	mvn.w	r2, #2
 8005fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fb72 	bl	80016e8 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa88 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa8e 	bl	800652e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b04      	cmp	r3, #4
 8006024:	d122      	bne.n	800606c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d11b      	bne.n	800606c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0204 	mvn.w	r2, #4
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fb48 	bl	80016e8 <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa5e 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa64 	bl	800652e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b08      	cmp	r3, #8
 8006078:	d122      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b08      	cmp	r3, #8
 8006086:	d11b      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0208 	mvn.w	r2, #8
 8006090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2204      	movs	r2, #4
 8006096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fb fb1e 	bl	80016e8 <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa34 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa3a 	bl	800652e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0210 	mvn.w	r2, #16
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2208      	movs	r2, #8
 80060ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb faf4 	bl	80016e8 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa0a 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa10 	bl	800652e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0201 	mvn.w	r2, #1
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb ff12 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fcb7 	bl	8006ada <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d107      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f9d4 	bl	8006540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d10e      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d107      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0220 	mvn.w	r2, #32
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fc82 	bl	8006ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e088      	b.n	80062fc <HAL_TIM_IC_ConfigChannel+0x130>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11b      	bne.n	8006230 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006208:	f000 fa1e 	bl	8006648 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 020c 	bic.w	r2, r2, #12
 800621a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6999      	ldr	r1, [r3, #24]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	619a      	str	r2, [r3, #24]
 800622e:	e060      	b.n	80062f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b04      	cmp	r3, #4
 8006234:	d11c      	bne.n	8006270 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006246:	f000 fa93 	bl	8006770 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006258:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6999      	ldr	r1, [r3, #24]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	021a      	lsls	r2, r3, #8
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
 800626e:	e040      	b.n	80062f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b08      	cmp	r3, #8
 8006274:	d11b      	bne.n	80062ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006286:	f000 fade 	bl	8006846 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 020c 	bic.w	r2, r2, #12
 8006298:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	61da      	str	r2, [r3, #28]
 80062ac:	e021      	b.n	80062f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d11c      	bne.n	80062ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80062c4:	f000 fafa 	bl	80068bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69d9      	ldr	r1, [r3, #28]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
 80062ec:	e001      	b.n	80062f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIM_ConfigClockSource+0x1c>
 800631c:	2302      	movs	r3, #2
 800631e:	e0b4      	b.n	800648a <HAL_TIM_ConfigClockSource+0x186>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006358:	d03e      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0xd4>
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	f200 8087 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	f000 8086 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x172>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d87f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d01a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xa6>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d87b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d050      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x11a>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d877      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d03c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0xfa>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d873      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d058      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x13a>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d86f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d064      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d86b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d060      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15a>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d867      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15a>
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d05a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x15a>
 80063a8:	e062      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ba:	f000 fad5 	bl	8006968 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	609a      	str	r2, [r3, #8]
      break;
 80063d6:	e04f      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063e8:	f000 fabe 	bl	8006968 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fa:	609a      	str	r2, [r3, #8]
      break;
 80063fc:	e03c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	461a      	mov	r2, r3
 800640c:	f000 f982 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2150      	movs	r1, #80	; 0x50
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fa8c 	bl	8006934 <TIM_ITRx_SetConfig>
      break;
 800641c:	e02c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800642a:	461a      	mov	r2, r3
 800642c:	f000 f9dc 	bl	80067e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2160      	movs	r1, #96	; 0x60
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fa7c 	bl	8006934 <TIM_ITRx_SetConfig>
      break;
 800643c:	e01c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f962 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fa6c 	bl	8006934 <TIM_ITRx_SetConfig>
      break;
 800645c:	e00c      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fa63 	bl	8006934 <TIM_ITRx_SetConfig>
      break;
 800646e:	e003      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e000      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d831      	bhi.n	800650c <HAL_TIM_ReadCapturedValue+0x78>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064e5 	.word	0x080064e5
 80064b4:	0800650d 	.word	0x0800650d
 80064b8:	0800650d 	.word	0x0800650d
 80064bc:	0800650d 	.word	0x0800650d
 80064c0:	080064ef 	.word	0x080064ef
 80064c4:	0800650d 	.word	0x0800650d
 80064c8:	0800650d 	.word	0x0800650d
 80064cc:	0800650d 	.word	0x0800650d
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	0800650d 	.word	0x0800650d
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	0800650d 	.word	0x0800650d
 80064e0:	08006503 	.word	0x08006503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	60fb      	str	r3, [r7, #12]

      break;
 80064ec:	e00f      	b.n	800650e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	60fb      	str	r3, [r7, #12]

      break;
 80064f6:	e00a      	b.n	800650e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	60fb      	str	r3, [r7, #12]

      break;
 8006500:	e005      	b.n	800650e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	60fb      	str	r3, [r7, #12]

      break;
 800650a:	e000      	b.n	800650e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800650c:	bf00      	nop
  }

  return tmpreg;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
	...

08006554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a33      	ldr	r2, [pc, #204]	; (8006634 <TIM_Base_SetConfig+0xe0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a32      	ldr	r2, [pc, #200]	; (8006638 <TIM_Base_SetConfig+0xe4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0xe8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <TIM_Base_SetConfig+0xec>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <TIM_Base_SetConfig+0xf0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <TIM_Base_SetConfig+0xe0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <TIM_Base_SetConfig+0x82>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a21      	ldr	r2, [pc, #132]	; (8006638 <TIM_Base_SetConfig+0xe4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <TIM_Base_SetConfig+0x82>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d00b      	beq.n	80065d6 <TIM_Base_SetConfig+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1e      	ldr	r2, [pc, #120]	; (800663c <TIM_Base_SetConfig+0xe8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <TIM_Base_SetConfig+0x82>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <TIM_Base_SetConfig+0xec>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0x82>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <TIM_Base_SetConfig+0xf0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <TIM_Base_SetConfig+0xe0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a08      	ldr	r2, [pc, #32]	; (8006638 <TIM_Base_SetConfig+0xe4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d103      	bne.n	8006624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	615a      	str	r2, [r3, #20]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00

08006648 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0201 	bic.w	r2, r3, #1
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_TI1_SetConfig+0xb8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <TIM_TI1_SetConfig+0x56>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <TIM_TI1_SetConfig+0xbc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00f      	beq.n	800669e <TIM_TI1_SetConfig+0x56>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d00b      	beq.n	800669e <TIM_TI1_SetConfig+0x56>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <TIM_TI1_SetConfig+0xc0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_TI1_SetConfig+0x56>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <TIM_TI1_SetConfig+0xc4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_TI1_SetConfig+0x56>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <TIM_TI1_SetConfig+0xc8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <TIM_TI1_SetConfig+0x5a>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <TIM_TI1_SetConfig+0x5c>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e003      	b.n	80066c2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f003 030a 	and.w	r3, r3, #10
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00

08006714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 030a 	bic.w	r3, r3, #10
 8006750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f023 0210 	bic.w	r2, r3, #16
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	031b      	lsls	r3, r3, #12
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	031b      	lsls	r3, r3, #12
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006824:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006882:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	b2db      	uxtb	r3, r3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006896:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	031b      	lsls	r3, r3, #12
 8006900:	b29b      	uxth	r3, r3
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	031b      	lsls	r3, r3, #12
 8006914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	f043 0307 	orr.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	021a      	lsls	r2, r3, #8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	431a      	orrs	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr

080069a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b087      	sub	sp, #28
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2201      	movs	r2, #1
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	43db      	mvns	r3, r3
 80069c8:	401a      	ands	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	431a      	orrs	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e050      	b.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a15      	ldr	r2, [pc, #84]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10c      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00

08006ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e042      	b.n	8006b84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc f9fe 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2224      	movs	r2, #36	; 0x24
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 ff53 	bl	80079dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d16d      	bne.n	8006c88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_UART_Transmit+0x2c>
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e066      	b.n	8006c8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2221      	movs	r2, #33	; 0x21
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bca:	f7fc fbcf 	bl	800336c <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be4:	d108      	bne.n	8006bf8 <HAL_UART_Transmit+0x6c>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e003      	b.n	8006c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c00:	e02a      	b.n	8006c58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	; 0x80
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fc1b 	bl	8007448 <UART_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e036      	b.n	8006c8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3302      	adds	r3, #2
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e007      	b.n	8006c4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	3301      	adds	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1cf      	bne.n	8006c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2140      	movs	r1, #64	; 0x40
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fbeb 	bl	8007448 <UART_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e006      	b.n	8006c8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d112      	bne.n	8006cd2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_UART_Receive_DMA+0x26>
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e00b      	b.n	8006cd4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cc2:	88fb      	ldrh	r3, [r7, #6]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fc2b 	bl	8007524 <UART_Start_Receive_DMA>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	e000      	b.n	8006cd4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b0ba      	sub	sp, #232	; 0xe8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10f      	bne.n	8006d42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_UART_IRQHandler+0x66>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fd90 	bl	8007860 <UART_Receive_IT>
      return;
 8006d40:	e25b      	b.n	80071fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80de 	beq.w	8006f08 <HAL_UART_IRQHandler+0x22c>
 8006d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80d1 	beq.w	8006f08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <HAL_UART_IRQHandler+0xae>
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <HAL_UART_IRQHandler+0xd2>
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	f043 0202 	orr.w	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <HAL_UART_IRQHandler+0xf6>
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	f043 0204 	orr.w	r2, r3, #4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d011      	beq.n	8006e02 <HAL_UART_IRQHandler+0x126>
 8006dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d105      	bne.n	8006df6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f043 0208 	orr.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 81f2 	beq.w	80071f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_UART_IRQHandler+0x14e>
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fd1b 	bl	8007860 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <HAL_UART_IRQHandler+0x17a>
 8006e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04f      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc25 	bl	80076a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d041      	beq.n	8006eee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3314      	adds	r3, #20
 8006e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3314      	adds	r3, #20
 8006e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1d9      	bne.n	8006e6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d013      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	4a7e      	ldr	r2, [pc, #504]	; (80070bc <HAL_UART_IRQHandler+0x3e0>)
 8006ec4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fc fc9c 	bl	8003808 <HAL_DMA_Abort_IT>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d016      	beq.n	8006f04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e00e      	b.n	8006f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f99c 	bl	8007224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	e00a      	b.n	8006f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f998 	bl	8007224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e006      	b.n	8006f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f994 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f02:	e175      	b.n	80071f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f04:	bf00      	nop
    return;
 8006f06:	e173      	b.n	80071f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	f040 814f 	bne.w	80071b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8148 	beq.w	80071b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8141 	beq.w	80071b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80b6 	beq.w	80070c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8145 	beq.w	80071f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f080 813e 	bcs.w	80071f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	f000 8088 	beq.w	800709c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fb8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1d9      	bne.n	8006f8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ffc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007000:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007004:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800700e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e1      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3314      	adds	r3, #20
 800701a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007038:	66fa      	str	r2, [r7, #108]	; 0x6c
 800703a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800703e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800706a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800707e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007080:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800708c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e3      	bne.n	800705a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	4618      	mov	r0, r3
 8007098:	f7fc fb7a 	bl	8003790 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8bf 	bl	8007236 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070b8:	e09c      	b.n	80071f4 <HAL_UART_IRQHandler+0x518>
 80070ba:	bf00      	nop
 80070bc:	0800776b 	.word	0x0800776b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 808e 	beq.w	80071f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8089 	beq.w	80071f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800710a:	647a      	str	r2, [r7, #68]	; 0x44
 800710c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e3      	bne.n	80070e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3314      	adds	r3, #20
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	623b      	str	r3, [r7, #32]
   return(result);
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3314      	adds	r3, #20
 800713e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007142:	633a      	str	r2, [r7, #48]	; 0x30
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e3      	bne.n	800711e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	60fb      	str	r3, [r7, #12]
   return(result);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007188:	61fa      	str	r2, [r7, #28]
 800718a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	617b      	str	r3, [r7, #20]
   return(result);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e3      	bne.n	8007164 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f844 	bl	8007236 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071ae:	e023      	b.n	80071f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0x4f4>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fae2 	bl	8007792 <UART_Transmit_IT>
    return;
 80071ce:	e014      	b.n	80071fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00e      	beq.n	80071fa <HAL_UART_IRQHandler+0x51e>
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb21 	bl	8007830 <UART_EndTransmit_IT>
    return;
 80071ee:	e004      	b.n	80071fa <HAL_UART_IRQHandler+0x51e>
    return;
 80071f0:	bf00      	nop
 80071f2:	e002      	b.n	80071fa <HAL_UART_IRQHandler+0x51e>
      return;
 80071f4:	bf00      	nop
 80071f6:	e000      	b.n	80071fa <HAL_UART_IRQHandler+0x51e>
      return;
 80071f8:	bf00      	nop
  }
}
 80071fa:	37e8      	adds	r7, #232	; 0xe8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b09c      	sub	sp, #112	; 0x70
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d172      	bne.n	800734e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726a:	2200      	movs	r2, #0
 800726c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800727e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007284:	66bb      	str	r3, [r7, #104]	; 0x68
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800728e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007290:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800729c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e5      	bne.n	800726e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072c2:	647a      	str	r2, [r7, #68]	; 0x44
 80072c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e5      	bne.n	80072a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	623b      	str	r3, [r7, #32]
   return(result);
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	663b      	str	r3, [r7, #96]	; 0x60
 80072ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3314      	adds	r3, #20
 80072f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f6:	633a      	str	r2, [r7, #48]	; 0x30
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e5      	bne.n	80072d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	2220      	movs	r2, #32
 800730e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	2b01      	cmp	r3, #1
 8007318:	d119      	bne.n	800734e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60fb      	str	r3, [r7, #12]
   return(result);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 0310 	bic.w	r3, r3, #16
 8007330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800733a:	61fa      	str	r2, [r7, #28]
 800733c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	617b      	str	r3, [r7, #20]
   return(result);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800734e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007350:	2200      	movs	r2, #0
 8007352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	2b01      	cmp	r3, #1
 800735a:	d106      	bne.n	800736a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007360:	4619      	mov	r1, r3
 8007362:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007364:	f7ff ff67 	bl	8007236 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007368:	e002      	b.n	8007370 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800736a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800736c:	f7fa fd58 	bl	8001e20 <HAL_UART_RxCpltCallback>
}
 8007370:	bf00      	nop
 8007372:	3770      	adds	r7, #112	; 0x70
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	2b01      	cmp	r3, #1
 8007392:	d108      	bne.n	80073a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff ff49 	bl	8007236 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073a4:	e002      	b.n	80073ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff ff33 	bl	8007212 <HAL_UART_RxHalfCpltCallback>
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b21      	cmp	r3, #33	; 0x21
 80073e6:	d108      	bne.n	80073fa <UART_DMAError+0x46>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f000 f92f 	bl	8007658 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b22      	cmp	r3, #34	; 0x22
 800741a:	d108      	bne.n	800742e <UART_DMAError+0x7a>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2200      	movs	r2, #0
 8007426:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007428:	68b8      	ldr	r0, [r7, #8]
 800742a:	f000 f93c 	bl	80076a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007432:	f043 0210 	orr.w	r2, r3, #16
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800743a:	68b8      	ldr	r0, [r7, #8]
 800743c:	f7ff fef2 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b090      	sub	sp, #64	; 0x40
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007458:	e050      	b.n	80074fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d04c      	beq.n	80074fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0x30>
 8007468:	f7fb ff80 	bl	800336c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007474:	429a      	cmp	r2, r3
 8007476:	d241      	bcs.n	80074fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	330c      	adds	r3, #12
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007498:	637a      	str	r2, [r7, #52]	; 0x34
 800749a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800749e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e5      	bne.n	8007478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	613b      	str	r3, [r7, #16]
   return(result);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074cc:	623a      	str	r2, [r7, #32]
 80074ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	69f9      	ldr	r1, [r7, #28]
 80074d2:	6a3a      	ldr	r2, [r7, #32]
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e5      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e00f      	b.n	800751c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4013      	ands	r3, r2
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	429a      	cmp	r2, r3
 8007518:	d09f      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3740      	adds	r7, #64	; 0x40
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b098      	sub	sp, #96	; 0x60
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2222      	movs	r2, #34	; 0x22
 8007548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	4a3e      	ldr	r2, [pc, #248]	; (800764c <UART_Start_Receive_DMA+0x128>)
 8007552:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	4a3d      	ldr	r2, [pc, #244]	; (8007650 <UART_Start_Receive_DMA+0x12c>)
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <UART_Start_Receive_DMA+0x130>)
 8007562:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	2200      	movs	r2, #0
 800756a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	f7fc f8a4 	bl	80036d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007588:	2300      	movs	r3, #0
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d019      	beq.n	80075da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80075c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	657b      	str	r3, [r7, #84]	; 0x54
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e5      	bne.n	80075da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	617b      	str	r3, [r7, #20]
   return(result);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	653b      	str	r3, [r7, #80]	; 0x50
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800762e:	627a      	str	r2, [r7, #36]	; 0x24
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6a39      	ldr	r1, [r7, #32]
 8007634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	61fb      	str	r3, [r7, #28]
   return(result);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3760      	adds	r7, #96	; 0x60
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	0800724d 	.word	0x0800724d
 8007650:	08007379 	.word	0x08007379
 8007654:	080073b5 	.word	0x080073b5

08007658 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b089      	sub	sp, #36	; 0x24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	61ba      	str	r2, [r7, #24]
 8007682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	613b      	str	r3, [r7, #16]
   return(result);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800769c:	bf00      	nop
 800769e:	3724      	adds	r7, #36	; 0x24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b095      	sub	sp, #84	; 0x54
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076ce:	643a      	str	r2, [r7, #64]	; 0x40
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	2b01      	cmp	r3, #1
 800771c:	d119      	bne.n	8007752 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	60bb      	str	r3, [r7, #8]
   return(result);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0310 	bic.w	r3, r3, #16
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800773e:	61ba      	str	r2, [r7, #24]
 8007740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	613b      	str	r3, [r7, #16]
   return(result);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e5      	bne.n	800771e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007760:	bf00      	nop
 8007762:	3754      	adds	r7, #84	; 0x54
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff fd4d 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b21      	cmp	r3, #33	; 0x21
 80077a4:	d13e      	bne.n	8007824 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	d114      	bne.n	80077da <UART_Transmit_IT+0x48>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d110      	bne.n	80077da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	621a      	str	r2, [r3, #32]
 80077d8:	e008      	b.n	80077ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	1c59      	adds	r1, r3, #1
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6211      	str	r1, [r2, #32]
 80077e4:	781a      	ldrb	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	4619      	mov	r1, r3
 80077fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10f      	bne.n	8007820 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007846:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff fcd5 	bl	8007200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	; 0x30
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b22      	cmp	r3, #34	; 0x22
 8007872:	f040 80ae 	bne.w	80079d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787e:	d117      	bne.n	80078b0 <UART_Receive_IT+0x50>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d113      	bne.n	80078b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	629a      	str	r2, [r3, #40]	; 0x28
 80078ae:	e026      	b.n	80078fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	d007      	beq.n	80078d4 <UART_Receive_IT+0x74>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <UART_Receive_IT+0x82>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e008      	b.n	80078f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29b      	uxth	r3, r3
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4619      	mov	r1, r3
 800790c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800790e:	2b00      	cmp	r3, #0
 8007910:	d15d      	bne.n	80079ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0220 	bic.w	r2, r2, #32
 8007920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007930:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	2b01      	cmp	r3, #1
 8007956:	d135      	bne.n	80079c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	330c      	adds	r3, #12
 8007964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	613b      	str	r3, [r7, #16]
   return(result);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797e:	623a      	str	r2, [r7, #32]
 8007980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	69f9      	ldr	r1, [r7, #28]
 8007984:	6a3a      	ldr	r2, [r7, #32]
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	61bb      	str	r3, [r7, #24]
   return(result);
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e5      	bne.n	800795e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b10      	cmp	r3, #16
 800799e:	d10a      	bne.n	80079b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fc3a 	bl	8007236 <HAL_UARTEx_RxEventCallback>
 80079c2:	e002      	b.n	80079ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fa fa2b 	bl	8001e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e002      	b.n	80079d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3730      	adds	r7, #48	; 0x30
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a16:	f023 030c 	bic.w	r3, r3, #12
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	430b      	orrs	r3, r1
 8007a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2c      	ldr	r2, [pc, #176]	; (8007af0 <UART_SetConfig+0x114>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d103      	bne.n	8007a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a44:	f7fe f866 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	e002      	b.n	8007a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fe f84e 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8007a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009a      	lsls	r2, r3, #2
 8007a5c:	441a      	add	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a68:	4a22      	ldr	r2, [pc, #136]	; (8007af4 <UART_SetConfig+0x118>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	0119      	lsls	r1, r3, #4
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009a      	lsls	r2, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a88:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <UART_SetConfig+0x118>)
 8007a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	2064      	movs	r0, #100	; 0x64
 8007a92:	fb00 f303 	mul.w	r3, r0, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	3332      	adds	r3, #50	; 0x32
 8007a9c:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <UART_SetConfig+0x118>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa8:	4419      	add	r1, r3
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009a      	lsls	r2, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <UART_SetConfig+0x118>)
 8007ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	2064      	movs	r0, #100	; 0x64
 8007aca:	fb00 f303 	mul.w	r3, r0, r3
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	3332      	adds	r3, #50	; 0x32
 8007ad4:	4a07      	ldr	r2, [pc, #28]	; (8007af4 <UART_SetConfig+0x118>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40013800 	.word	0x40013800
 8007af4:	51eb851f 	.word	0x51eb851f

08007af8 <siprintf>:
 8007af8:	b40e      	push	{r1, r2, r3}
 8007afa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007afe:	b500      	push	{lr}
 8007b00:	b09c      	sub	sp, #112	; 0x70
 8007b02:	ab1d      	add	r3, sp, #116	; 0x74
 8007b04:	9002      	str	r0, [sp, #8]
 8007b06:	9006      	str	r0, [sp, #24]
 8007b08:	9107      	str	r1, [sp, #28]
 8007b0a:	9104      	str	r1, [sp, #16]
 8007b0c:	4808      	ldr	r0, [pc, #32]	; (8007b30 <siprintf+0x38>)
 8007b0e:	4909      	ldr	r1, [pc, #36]	; (8007b34 <siprintf+0x3c>)
 8007b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b14:	9105      	str	r1, [sp, #20]
 8007b16:	6800      	ldr	r0, [r0, #0]
 8007b18:	a902      	add	r1, sp, #8
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	f000 f98e 	bl	8007e3c <_svfiprintf_r>
 8007b20:	2200      	movs	r2, #0
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	b01c      	add	sp, #112	; 0x70
 8007b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b2c:	b003      	add	sp, #12
 8007b2e:	4770      	bx	lr
 8007b30:	200000f0 	.word	0x200000f0
 8007b34:	ffff0208 	.word	0xffff0208

08007b38 <memset>:
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4402      	add	r2, r0
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d100      	bne.n	8007b42 <memset+0xa>
 8007b40:	4770      	bx	lr
 8007b42:	f803 1b01 	strb.w	r1, [r3], #1
 8007b46:	e7f9      	b.n	8007b3c <memset+0x4>

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	200000f0 	.word	0x200000f0

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	2600      	movs	r6, #0
 8007b58:	4d0c      	ldr	r5, [pc, #48]	; (8007b8c <__libc_init_array+0x38>)
 8007b5a:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	f001 f81a 	bl	8008b9c <_init>
 8007b68:	2600      	movs	r6, #0
 8007b6a:	4d0a      	ldr	r5, [pc, #40]	; (8007b94 <__libc_init_array+0x40>)
 8007b6c:	4c0a      	ldr	r4, [pc, #40]	; (8007b98 <__libc_init_array+0x44>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7c:	4798      	blx	r3
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b86:	4798      	blx	r3
 8007b88:	3601      	adds	r6, #1
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	08008ca8 	.word	0x08008ca8
 8007b90:	08008ca8 	.word	0x08008ca8
 8007b94:	08008ca8 	.word	0x08008ca8
 8007b98:	08008cac 	.word	0x08008cac

08007b9c <__retarget_lock_acquire_recursive>:
 8007b9c:	4770      	bx	lr

08007b9e <__retarget_lock_release_recursive>:
 8007b9e:	4770      	bx	lr

08007ba0 <_free_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d040      	beq.n	8007c2a <_free_r+0x8a>
 8007ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bac:	1f0c      	subs	r4, r1, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfb8      	it	lt
 8007bb2:	18e4      	addlt	r4, r4, r3
 8007bb4:	f000 f8dc 	bl	8007d70 <__malloc_lock>
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <_free_r+0x8c>)
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	b933      	cbnz	r3, 8007bcc <_free_r+0x2c>
 8007bbe:	6063      	str	r3, [r4, #4]
 8007bc0:	6014      	str	r4, [r2, #0]
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc8:	f000 b8d8 	b.w	8007d7c <__malloc_unlock>
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d908      	bls.n	8007be2 <_free_r+0x42>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	1821      	adds	r1, r4, r0
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	bf01      	itttt	eq
 8007bd8:	6819      	ldreq	r1, [r3, #0]
 8007bda:	685b      	ldreq	r3, [r3, #4]
 8007bdc:	1809      	addeq	r1, r1, r0
 8007bde:	6021      	streq	r1, [r4, #0]
 8007be0:	e7ed      	b.n	8007bbe <_free_r+0x1e>
 8007be2:	461a      	mov	r2, r3
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	b10b      	cbz	r3, 8007bec <_free_r+0x4c>
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d9fa      	bls.n	8007be2 <_free_r+0x42>
 8007bec:	6811      	ldr	r1, [r2, #0]
 8007bee:	1850      	adds	r0, r2, r1
 8007bf0:	42a0      	cmp	r0, r4
 8007bf2:	d10b      	bne.n	8007c0c <_free_r+0x6c>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	4401      	add	r1, r0
 8007bf8:	1850      	adds	r0, r2, r1
 8007bfa:	4283      	cmp	r3, r0
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	d1e0      	bne.n	8007bc2 <_free_r+0x22>
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4408      	add	r0, r1
 8007c06:	6010      	str	r0, [r2, #0]
 8007c08:	6053      	str	r3, [r2, #4]
 8007c0a:	e7da      	b.n	8007bc2 <_free_r+0x22>
 8007c0c:	d902      	bls.n	8007c14 <_free_r+0x74>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	e7d6      	b.n	8007bc2 <_free_r+0x22>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	1821      	adds	r1, r4, r0
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf01      	itttt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	1809      	addeq	r1, r1, r0
 8007c22:	6021      	streq	r1, [r4, #0]
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	6054      	str	r4, [r2, #4]
 8007c28:	e7cb      	b.n	8007bc2 <_free_r+0x22>
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	200006f8 	.word	0x200006f8

08007c30 <sbrk_aligned>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4e0e      	ldr	r6, [pc, #56]	; (8007c6c <sbrk_aligned+0x3c>)
 8007c34:	460c      	mov	r4, r1
 8007c36:	6831      	ldr	r1, [r6, #0]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b911      	cbnz	r1, 8007c42 <sbrk_aligned+0x12>
 8007c3c:	f000 fbaa 	bl	8008394 <_sbrk_r>
 8007c40:	6030      	str	r0, [r6, #0]
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fba5 	bl	8008394 <_sbrk_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d00a      	beq.n	8007c64 <sbrk_aligned+0x34>
 8007c4e:	1cc4      	adds	r4, r0, #3
 8007c50:	f024 0403 	bic.w	r4, r4, #3
 8007c54:	42a0      	cmp	r0, r4
 8007c56:	d007      	beq.n	8007c68 <sbrk_aligned+0x38>
 8007c58:	1a21      	subs	r1, r4, r0
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fb9a 	bl	8008394 <_sbrk_r>
 8007c60:	3001      	adds	r0, #1
 8007c62:	d101      	bne.n	8007c68 <sbrk_aligned+0x38>
 8007c64:	f04f 34ff 	mov.w	r4, #4294967295
 8007c68:	4620      	mov	r0, r4
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	200006fc 	.word	0x200006fc

08007c70 <_malloc_r>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	1ccd      	adds	r5, r1, #3
 8007c76:	f025 0503 	bic.w	r5, r5, #3
 8007c7a:	3508      	adds	r5, #8
 8007c7c:	2d0c      	cmp	r5, #12
 8007c7e:	bf38      	it	cc
 8007c80:	250c      	movcc	r5, #12
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	4607      	mov	r7, r0
 8007c86:	db01      	blt.n	8007c8c <_malloc_r+0x1c>
 8007c88:	42a9      	cmp	r1, r5
 8007c8a:	d905      	bls.n	8007c98 <_malloc_r+0x28>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	2600      	movs	r6, #0
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4630      	mov	r0, r6
 8007c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d6c <_malloc_r+0xfc>
 8007c9c:	f000 f868 	bl	8007d70 <__malloc_lock>
 8007ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	bb5c      	cbnz	r4, 8007d00 <_malloc_r+0x90>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7ff ffc0 	bl	8007c30 <sbrk_aligned>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	d155      	bne.n	8007d62 <_malloc_r+0xf2>
 8007cb6:	f8d8 4000 	ldr.w	r4, [r8]
 8007cba:	4626      	mov	r6, r4
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	d145      	bne.n	8007d4c <_malloc_r+0xdc>
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d048      	beq.n	8007d56 <_malloc_r+0xe6>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4638      	mov	r0, r7
 8007cca:	eb04 0903 	add.w	r9, r4, r3
 8007cce:	f000 fb61 	bl	8008394 <_sbrk_r>
 8007cd2:	4581      	cmp	r9, r0
 8007cd4:	d13f      	bne.n	8007d56 <_malloc_r+0xe6>
 8007cd6:	6821      	ldr	r1, [r4, #0]
 8007cd8:	4638      	mov	r0, r7
 8007cda:	1a6d      	subs	r5, r5, r1
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7ff ffa7 	bl	8007c30 <sbrk_aligned>
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d037      	beq.n	8007d56 <_malloc_r+0xe6>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	442b      	add	r3, r5
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d038      	beq.n	8007d66 <_malloc_r+0xf6>
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	42a2      	cmp	r2, r4
 8007cf8:	d12b      	bne.n	8007d52 <_malloc_r+0xe2>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	e00f      	b.n	8007d20 <_malloc_r+0xb0>
 8007d00:	6822      	ldr	r2, [r4, #0]
 8007d02:	1b52      	subs	r2, r2, r5
 8007d04:	d41f      	bmi.n	8007d46 <_malloc_r+0xd6>
 8007d06:	2a0b      	cmp	r2, #11
 8007d08:	d917      	bls.n	8007d3a <_malloc_r+0xca>
 8007d0a:	1961      	adds	r1, r4, r5
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	6025      	str	r5, [r4, #0]
 8007d10:	bf18      	it	ne
 8007d12:	6059      	strne	r1, [r3, #4]
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	bf08      	it	eq
 8007d18:	f8c8 1000 	streq.w	r1, [r8]
 8007d1c:	5162      	str	r2, [r4, r5]
 8007d1e:	604b      	str	r3, [r1, #4]
 8007d20:	4638      	mov	r0, r7
 8007d22:	f104 060b 	add.w	r6, r4, #11
 8007d26:	f000 f829 	bl	8007d7c <__malloc_unlock>
 8007d2a:	f026 0607 	bic.w	r6, r6, #7
 8007d2e:	1d23      	adds	r3, r4, #4
 8007d30:	1af2      	subs	r2, r6, r3
 8007d32:	d0ae      	beq.n	8007c92 <_malloc_r+0x22>
 8007d34:	1b9b      	subs	r3, r3, r6
 8007d36:	50a3      	str	r3, [r4, r2]
 8007d38:	e7ab      	b.n	8007c92 <_malloc_r+0x22>
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	6862      	ldr	r2, [r4, #4]
 8007d3e:	d1dd      	bne.n	8007cfc <_malloc_r+0x8c>
 8007d40:	f8c8 2000 	str.w	r2, [r8]
 8007d44:	e7ec      	b.n	8007d20 <_malloc_r+0xb0>
 8007d46:	4623      	mov	r3, r4
 8007d48:	6864      	ldr	r4, [r4, #4]
 8007d4a:	e7ac      	b.n	8007ca6 <_malloc_r+0x36>
 8007d4c:	4634      	mov	r4, r6
 8007d4e:	6876      	ldr	r6, [r6, #4]
 8007d50:	e7b4      	b.n	8007cbc <_malloc_r+0x4c>
 8007d52:	4613      	mov	r3, r2
 8007d54:	e7cc      	b.n	8007cf0 <_malloc_r+0x80>
 8007d56:	230c      	movs	r3, #12
 8007d58:	4638      	mov	r0, r7
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	f000 f80e 	bl	8007d7c <__malloc_unlock>
 8007d60:	e797      	b.n	8007c92 <_malloc_r+0x22>
 8007d62:	6025      	str	r5, [r4, #0]
 8007d64:	e7dc      	b.n	8007d20 <_malloc_r+0xb0>
 8007d66:	605b      	str	r3, [r3, #4]
 8007d68:	deff      	udf	#255	; 0xff
 8007d6a:	bf00      	nop
 8007d6c:	200006f8 	.word	0x200006f8

08007d70 <__malloc_lock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__malloc_lock+0x8>)
 8007d72:	f7ff bf13 	b.w	8007b9c <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	200006f4 	.word	0x200006f4

08007d7c <__malloc_unlock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__malloc_unlock+0x8>)
 8007d7e:	f7ff bf0e 	b.w	8007b9e <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	200006f4 	.word	0x200006f4

08007d88 <__ssputs_r>:
 8007d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8c:	461f      	mov	r7, r3
 8007d8e:	688e      	ldr	r6, [r1, #8]
 8007d90:	4682      	mov	sl, r0
 8007d92:	42be      	cmp	r6, r7
 8007d94:	460c      	mov	r4, r1
 8007d96:	4690      	mov	r8, r2
 8007d98:	680b      	ldr	r3, [r1, #0]
 8007d9a:	d82c      	bhi.n	8007df6 <__ssputs_r+0x6e>
 8007d9c:	898a      	ldrh	r2, [r1, #12]
 8007d9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007da2:	d026      	beq.n	8007df2 <__ssputs_r+0x6a>
 8007da4:	6965      	ldr	r5, [r4, #20]
 8007da6:	6909      	ldr	r1, [r1, #16]
 8007da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dac:	eba3 0901 	sub.w	r9, r3, r1
 8007db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db4:	1c7b      	adds	r3, r7, #1
 8007db6:	444b      	add	r3, r9
 8007db8:	106d      	asrs	r5, r5, #1
 8007dba:	429d      	cmp	r5, r3
 8007dbc:	bf38      	it	cc
 8007dbe:	461d      	movcc	r5, r3
 8007dc0:	0553      	lsls	r3, r2, #21
 8007dc2:	d527      	bpl.n	8007e14 <__ssputs_r+0x8c>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7ff ff53 	bl	8007c70 <_malloc_r>
 8007dca:	4606      	mov	r6, r0
 8007dcc:	b360      	cbz	r0, 8007e28 <__ssputs_r+0xa0>
 8007dce:	464a      	mov	r2, r9
 8007dd0:	6921      	ldr	r1, [r4, #16]
 8007dd2:	f000 fafd 	bl	80083d0 <memcpy>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	6126      	str	r6, [r4, #16]
 8007de4:	444e      	add	r6, r9
 8007de6:	6026      	str	r6, [r4, #0]
 8007de8:	463e      	mov	r6, r7
 8007dea:	6165      	str	r5, [r4, #20]
 8007dec:	eba5 0509 	sub.w	r5, r5, r9
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	42be      	cmp	r6, r7
 8007df4:	d900      	bls.n	8007df8 <__ssputs_r+0x70>
 8007df6:	463e      	mov	r6, r7
 8007df8:	4632      	mov	r2, r6
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	f000 faaf 	bl	8008360 <memmove>
 8007e02:	2000      	movs	r0, #0
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	1b9b      	subs	r3, r3, r6
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4433      	add	r3, r6
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	462a      	mov	r2, r5
 8007e16:	f000 fae9 	bl	80083ec <_realloc_r>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1e0      	bne.n	8007de2 <__ssputs_r+0x5a>
 8007e20:	4650      	mov	r0, sl
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	f7ff febc 	bl	8007ba0 <_free_r>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	f8ca 3000 	str.w	r3, [sl]
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	e7e9      	b.n	8007e10 <__ssputs_r+0x88>

08007e3c <_svfiprintf_r>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	4698      	mov	r8, r3
 8007e42:	898b      	ldrh	r3, [r1, #12]
 8007e44:	4607      	mov	r7, r0
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	460d      	mov	r5, r1
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	b09d      	sub	sp, #116	; 0x74
 8007e4e:	d50e      	bpl.n	8007e6e <_svfiprintf_r+0x32>
 8007e50:	690b      	ldr	r3, [r1, #16]
 8007e52:	b963      	cbnz	r3, 8007e6e <_svfiprintf_r+0x32>
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	f7ff ff0b 	bl	8007c70 <_malloc_r>
 8007e5a:	6028      	str	r0, [r5, #0]
 8007e5c:	6128      	str	r0, [r5, #16]
 8007e5e:	b920      	cbnz	r0, 8007e6a <_svfiprintf_r+0x2e>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e0d0      	b.n	800800c <_svfiprintf_r+0x1d0>
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	616b      	str	r3, [r5, #20]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9309      	str	r3, [sp, #36]	; 0x24
 8007e72:	2320      	movs	r3, #32
 8007e74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	f04f 0901 	mov.w	r9, #1
 8007e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e82:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008024 <_svfiprintf_r+0x1e8>
 8007e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	469a      	mov	sl, r3
 8007e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e92:	b10a      	cbz	r2, 8007e98 <_svfiprintf_r+0x5c>
 8007e94:	2a25      	cmp	r2, #37	; 0x25
 8007e96:	d1f9      	bne.n	8007e8c <_svfiprintf_r+0x50>
 8007e98:	ebba 0b04 	subs.w	fp, sl, r4
 8007e9c:	d00b      	beq.n	8007eb6 <_svfiprintf_r+0x7a>
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ff6f 	bl	8007d88 <__ssputs_r>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f000 80a9 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb2:	445a      	add	r2, fp
 8007eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80a1 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eca:	f10a 0a01 	add.w	sl, sl, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	9307      	str	r3, [sp, #28]
 8007ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ed6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ed8:	4654      	mov	r4, sl
 8007eda:	2205      	movs	r2, #5
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	4850      	ldr	r0, [pc, #320]	; (8008024 <_svfiprintf_r+0x1e8>)
 8007ee2:	f000 fa67 	bl	80083b4 <memchr>
 8007ee6:	9a04      	ldr	r2, [sp, #16]
 8007ee8:	b9d8      	cbnz	r0, 8007f22 <_svfiprintf_r+0xe6>
 8007eea:	06d0      	lsls	r0, r2, #27
 8007eec:	bf44      	itt	mi
 8007eee:	2320      	movmi	r3, #32
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef4:	0711      	lsls	r1, r2, #28
 8007ef6:	bf44      	itt	mi
 8007ef8:	232b      	movmi	r3, #43	; 0x2b
 8007efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007efe:	f89a 3000 	ldrb.w	r3, [sl]
 8007f02:	2b2a      	cmp	r3, #42	; 0x2a
 8007f04:	d015      	beq.n	8007f32 <_svfiprintf_r+0xf6>
 8007f06:	4654      	mov	r4, sl
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f04f 0c0a 	mov.w	ip, #10
 8007f0e:	9a07      	ldr	r2, [sp, #28]
 8007f10:	4621      	mov	r1, r4
 8007f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f16:	3b30      	subs	r3, #48	; 0x30
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d94d      	bls.n	8007fb8 <_svfiprintf_r+0x17c>
 8007f1c:	b1b0      	cbz	r0, 8007f4c <_svfiprintf_r+0x110>
 8007f1e:	9207      	str	r2, [sp, #28]
 8007f20:	e014      	b.n	8007f4c <_svfiprintf_r+0x110>
 8007f22:	eba0 0308 	sub.w	r3, r0, r8
 8007f26:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	46a2      	mov	sl, r4
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	e7d2      	b.n	8007ed8 <_svfiprintf_r+0x9c>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	1d19      	adds	r1, r3, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	9103      	str	r1, [sp, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfbb      	ittet	lt
 8007f3e:	425b      	neglt	r3, r3
 8007f40:	f042 0202 	orrlt.w	r2, r2, #2
 8007f44:	9307      	strge	r3, [sp, #28]
 8007f46:	9307      	strlt	r3, [sp, #28]
 8007f48:	bfb8      	it	lt
 8007f4a:	9204      	strlt	r2, [sp, #16]
 8007f4c:	7823      	ldrb	r3, [r4, #0]
 8007f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f50:	d10c      	bne.n	8007f6c <_svfiprintf_r+0x130>
 8007f52:	7863      	ldrb	r3, [r4, #1]
 8007f54:	2b2a      	cmp	r3, #42	; 0x2a
 8007f56:	d134      	bne.n	8007fc2 <_svfiprintf_r+0x186>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	3402      	adds	r4, #2
 8007f5c:	1d1a      	adds	r2, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9203      	str	r2, [sp, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfb8      	it	lt
 8007f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008028 <_svfiprintf_r+0x1ec>
 8007f70:	2203      	movs	r2, #3
 8007f72:	4650      	mov	r0, sl
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	f000 fa1d 	bl	80083b4 <memchr>
 8007f7a:	b138      	cbz	r0, 8007f8c <_svfiprintf_r+0x150>
 8007f7c:	2240      	movs	r2, #64	; 0x40
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	eba0 000a 	sub.w	r0, r0, sl
 8007f84:	4082      	lsls	r2, r0
 8007f86:	4313      	orrs	r3, r2
 8007f88:	3401      	adds	r4, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f90:	2206      	movs	r2, #6
 8007f92:	4826      	ldr	r0, [pc, #152]	; (800802c <_svfiprintf_r+0x1f0>)
 8007f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f98:	f000 fa0c 	bl	80083b4 <memchr>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d038      	beq.n	8008012 <_svfiprintf_r+0x1d6>
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <_svfiprintf_r+0x1f4>)
 8007fa2:	bb1b      	cbnz	r3, 8007fec <_svfiprintf_r+0x1b0>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	3308      	adds	r3, #8
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	4433      	add	r3, r6
 8007fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb6:	e768      	b.n	8007e8a <_svfiprintf_r+0x4e>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	2001      	movs	r0, #1
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	e7a6      	b.n	8007f10 <_svfiprintf_r+0xd4>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f04f 0c0a 	mov.w	ip, #10
 8007fc8:	4619      	mov	r1, r3
 8007fca:	3401      	adds	r4, #1
 8007fcc:	9305      	str	r3, [sp, #20]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd4:	3a30      	subs	r2, #48	; 0x30
 8007fd6:	2a09      	cmp	r2, #9
 8007fd8:	d903      	bls.n	8007fe2 <_svfiprintf_r+0x1a6>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0c6      	beq.n	8007f6c <_svfiprintf_r+0x130>
 8007fde:	9105      	str	r1, [sp, #20]
 8007fe0:	e7c4      	b.n	8007f6c <_svfiprintf_r+0x130>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	e7f0      	b.n	8007fce <_svfiprintf_r+0x192>
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <_svfiprintf_r+0x1f8>)
 8007ff6:	a904      	add	r1, sp, #16
 8007ff8:	f3af 8000 	nop.w
 8007ffc:	1c42      	adds	r2, r0, #1
 8007ffe:	4606      	mov	r6, r0
 8008000:	d1d6      	bne.n	8007fb0 <_svfiprintf_r+0x174>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	065b      	lsls	r3, r3, #25
 8008006:	f53f af2d 	bmi.w	8007e64 <_svfiprintf_r+0x28>
 800800a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800800c:	b01d      	add	sp, #116	; 0x74
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	ab03      	add	r3, sp, #12
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	462a      	mov	r2, r5
 8008018:	4638      	mov	r0, r7
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <_svfiprintf_r+0x1f8>)
 800801c:	a904      	add	r1, sp, #16
 800801e:	f000 f87d 	bl	800811c <_printf_i>
 8008022:	e7eb      	b.n	8007ffc <_svfiprintf_r+0x1c0>
 8008024:	08008bfe 	.word	0x08008bfe
 8008028:	08008c04 	.word	0x08008c04
 800802c:	08008c08 	.word	0x08008c08
 8008030:	00000000 	.word	0x00000000
 8008034:	08007d89 	.word	0x08007d89

08008038 <_printf_common>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	4699      	mov	r9, r3
 8008040:	688a      	ldr	r2, [r1, #8]
 8008042:	690b      	ldr	r3, [r1, #16]
 8008044:	4607      	mov	r7, r0
 8008046:	4293      	cmp	r3, r2
 8008048:	bfb8      	it	lt
 800804a:	4613      	movlt	r3, r2
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008052:	460c      	mov	r4, r1
 8008054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008058:	b10a      	cbz	r2, 800805e <_printf_common+0x26>
 800805a:	3301      	adds	r3, #1
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	0699      	lsls	r1, r3, #26
 8008062:	bf42      	ittt	mi
 8008064:	6833      	ldrmi	r3, [r6, #0]
 8008066:	3302      	addmi	r3, #2
 8008068:	6033      	strmi	r3, [r6, #0]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d106      	bne.n	8008080 <_printf_common+0x48>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	6832      	ldr	r2, [r6, #0]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	42ab      	cmp	r3, r5
 800807e:	dc2b      	bgt.n	80080d8 <_printf_common+0xa0>
 8008080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008084:	1e13      	subs	r3, r2, #0
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	bf18      	it	ne
 800808a:	2301      	movne	r3, #1
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d430      	bmi.n	80080f2 <_printf_common+0xba>
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008098:	47c0      	blx	r8
 800809a:	3001      	adds	r0, #1
 800809c:	d023      	beq.n	80080e6 <_printf_common+0xae>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	f003 0306 	and.w	r3, r3, #6
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	bf14      	ite	ne
 80080aa:	2500      	movne	r5, #0
 80080ac:	6833      	ldreq	r3, [r6, #0]
 80080ae:	f04f 0600 	mov.w	r6, #0
 80080b2:	bf08      	it	eq
 80080b4:	68e5      	ldreq	r5, [r4, #12]
 80080b6:	f104 041a 	add.w	r4, r4, #26
 80080ba:	bf08      	it	eq
 80080bc:	1aed      	subeq	r5, r5, r3
 80080be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80080c2:	bf08      	it	eq
 80080c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080c8:	4293      	cmp	r3, r2
 80080ca:	bfc4      	itt	gt
 80080cc:	1a9b      	subgt	r3, r3, r2
 80080ce:	18ed      	addgt	r5, r5, r3
 80080d0:	42b5      	cmp	r5, r6
 80080d2:	d11a      	bne.n	800810a <_printf_common+0xd2>
 80080d4:	2000      	movs	r0, #0
 80080d6:	e008      	b.n	80080ea <_printf_common+0xb2>
 80080d8:	2301      	movs	r3, #1
 80080da:	4652      	mov	r2, sl
 80080dc:	4649      	mov	r1, r9
 80080de:	4638      	mov	r0, r7
 80080e0:	47c0      	blx	r8
 80080e2:	3001      	adds	r0, #1
 80080e4:	d103      	bne.n	80080ee <_printf_common+0xb6>
 80080e6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	3501      	adds	r5, #1
 80080f0:	e7c1      	b.n	8008076 <_printf_common+0x3e>
 80080f2:	2030      	movs	r0, #48	; 0x30
 80080f4:	18e1      	adds	r1, r4, r3
 80080f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008100:	4422      	add	r2, r4
 8008102:	3302      	adds	r3, #2
 8008104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008108:	e7c2      	b.n	8008090 <_printf_common+0x58>
 800810a:	2301      	movs	r3, #1
 800810c:	4622      	mov	r2, r4
 800810e:	4649      	mov	r1, r9
 8008110:	4638      	mov	r0, r7
 8008112:	47c0      	blx	r8
 8008114:	3001      	adds	r0, #1
 8008116:	d0e6      	beq.n	80080e6 <_printf_common+0xae>
 8008118:	3601      	adds	r6, #1
 800811a:	e7d9      	b.n	80080d0 <_printf_common+0x98>

0800811c <_printf_i>:
 800811c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	7e0f      	ldrb	r7, [r1, #24]
 8008122:	4691      	mov	r9, r2
 8008124:	2f78      	cmp	r7, #120	; 0x78
 8008126:	4680      	mov	r8, r0
 8008128:	460c      	mov	r4, r1
 800812a:	469a      	mov	sl, r3
 800812c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800812e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008132:	d807      	bhi.n	8008144 <_printf_i+0x28>
 8008134:	2f62      	cmp	r7, #98	; 0x62
 8008136:	d80a      	bhi.n	800814e <_printf_i+0x32>
 8008138:	2f00      	cmp	r7, #0
 800813a:	f000 80d5 	beq.w	80082e8 <_printf_i+0x1cc>
 800813e:	2f58      	cmp	r7, #88	; 0x58
 8008140:	f000 80c1 	beq.w	80082c6 <_printf_i+0x1aa>
 8008144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800814c:	e03a      	b.n	80081c4 <_printf_i+0xa8>
 800814e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008152:	2b15      	cmp	r3, #21
 8008154:	d8f6      	bhi.n	8008144 <_printf_i+0x28>
 8008156:	a101      	add	r1, pc, #4	; (adr r1, 800815c <_printf_i+0x40>)
 8008158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081c9 	.word	0x080081c9
 8008164:	08008145 	.word	0x08008145
 8008168:	08008145 	.word	0x08008145
 800816c:	08008145 	.word	0x08008145
 8008170:	08008145 	.word	0x08008145
 8008174:	080081c9 	.word	0x080081c9
 8008178:	08008145 	.word	0x08008145
 800817c:	08008145 	.word	0x08008145
 8008180:	08008145 	.word	0x08008145
 8008184:	08008145 	.word	0x08008145
 8008188:	080082cf 	.word	0x080082cf
 800818c:	080081f5 	.word	0x080081f5
 8008190:	08008289 	.word	0x08008289
 8008194:	08008145 	.word	0x08008145
 8008198:	08008145 	.word	0x08008145
 800819c:	080082f1 	.word	0x080082f1
 80081a0:	08008145 	.word	0x08008145
 80081a4:	080081f5 	.word	0x080081f5
 80081a8:	08008145 	.word	0x08008145
 80081ac:	08008145 	.word	0x08008145
 80081b0:	08008291 	.word	0x08008291
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	1d1a      	adds	r2, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	602a      	str	r2, [r5, #0]
 80081bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0a0      	b.n	800830a <_printf_i+0x1ee>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	0607      	lsls	r7, r0, #24
 80081ce:	f103 0104 	add.w	r1, r3, #4
 80081d2:	6029      	str	r1, [r5, #0]
 80081d4:	d501      	bpl.n	80081da <_printf_i+0xbe>
 80081d6:	681e      	ldr	r6, [r3, #0]
 80081d8:	e003      	b.n	80081e2 <_printf_i+0xc6>
 80081da:	0646      	lsls	r6, r0, #25
 80081dc:	d5fb      	bpl.n	80081d6 <_printf_i+0xba>
 80081de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80081e2:	2e00      	cmp	r6, #0
 80081e4:	da03      	bge.n	80081ee <_printf_i+0xd2>
 80081e6:	232d      	movs	r3, #45	; 0x2d
 80081e8:	4276      	negs	r6, r6
 80081ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ee:	230a      	movs	r3, #10
 80081f0:	4859      	ldr	r0, [pc, #356]	; (8008358 <_printf_i+0x23c>)
 80081f2:	e012      	b.n	800821a <_printf_i+0xfe>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	6820      	ldr	r0, [r4, #0]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	6029      	str	r1, [r5, #0]
 80081fc:	0605      	lsls	r5, r0, #24
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0xe8>
 8008200:	681e      	ldr	r6, [r3, #0]
 8008202:	e002      	b.n	800820a <_printf_i+0xee>
 8008204:	0641      	lsls	r1, r0, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0xe4>
 8008208:	881e      	ldrh	r6, [r3, #0]
 800820a:	2f6f      	cmp	r7, #111	; 0x6f
 800820c:	bf0c      	ite	eq
 800820e:	2308      	moveq	r3, #8
 8008210:	230a      	movne	r3, #10
 8008212:	4851      	ldr	r0, [pc, #324]	; (8008358 <_printf_i+0x23c>)
 8008214:	2100      	movs	r1, #0
 8008216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800821a:	6865      	ldr	r5, [r4, #4]
 800821c:	2d00      	cmp	r5, #0
 800821e:	bfa8      	it	ge
 8008220:	6821      	ldrge	r1, [r4, #0]
 8008222:	60a5      	str	r5, [r4, #8]
 8008224:	bfa4      	itt	ge
 8008226:	f021 0104 	bicge.w	r1, r1, #4
 800822a:	6021      	strge	r1, [r4, #0]
 800822c:	b90e      	cbnz	r6, 8008232 <_printf_i+0x116>
 800822e:	2d00      	cmp	r5, #0
 8008230:	d04b      	beq.n	80082ca <_printf_i+0x1ae>
 8008232:	4615      	mov	r5, r2
 8008234:	fbb6 f1f3 	udiv	r1, r6, r3
 8008238:	fb03 6711 	mls	r7, r3, r1, r6
 800823c:	5dc7      	ldrb	r7, [r0, r7]
 800823e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008242:	4637      	mov	r7, r6
 8008244:	42bb      	cmp	r3, r7
 8008246:	460e      	mov	r6, r1
 8008248:	d9f4      	bls.n	8008234 <_printf_i+0x118>
 800824a:	2b08      	cmp	r3, #8
 800824c:	d10b      	bne.n	8008266 <_printf_i+0x14a>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	07de      	lsls	r6, r3, #31
 8008252:	d508      	bpl.n	8008266 <_printf_i+0x14a>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	6861      	ldr	r1, [r4, #4]
 8008258:	4299      	cmp	r1, r3
 800825a:	bfde      	ittt	le
 800825c:	2330      	movle	r3, #48	; 0x30
 800825e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008262:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008266:	1b52      	subs	r2, r2, r5
 8008268:	6122      	str	r2, [r4, #16]
 800826a:	464b      	mov	r3, r9
 800826c:	4621      	mov	r1, r4
 800826e:	4640      	mov	r0, r8
 8008270:	f8cd a000 	str.w	sl, [sp]
 8008274:	aa03      	add	r2, sp, #12
 8008276:	f7ff fedf 	bl	8008038 <_printf_common>
 800827a:	3001      	adds	r0, #1
 800827c:	d14a      	bne.n	8008314 <_printf_i+0x1f8>
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	b004      	add	sp, #16
 8008284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f043 0320 	orr.w	r3, r3, #32
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	2778      	movs	r7, #120	; 0x78
 8008292:	4832      	ldr	r0, [pc, #200]	; (800835c <_printf_i+0x240>)
 8008294:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	6829      	ldr	r1, [r5, #0]
 800829c:	061f      	lsls	r7, r3, #24
 800829e:	f851 6b04 	ldr.w	r6, [r1], #4
 80082a2:	d402      	bmi.n	80082aa <_printf_i+0x18e>
 80082a4:	065f      	lsls	r7, r3, #25
 80082a6:	bf48      	it	mi
 80082a8:	b2b6      	uxthmi	r6, r6
 80082aa:	07df      	lsls	r7, r3, #31
 80082ac:	bf48      	it	mi
 80082ae:	f043 0320 	orrmi.w	r3, r3, #32
 80082b2:	6029      	str	r1, [r5, #0]
 80082b4:	bf48      	it	mi
 80082b6:	6023      	strmi	r3, [r4, #0]
 80082b8:	b91e      	cbnz	r6, 80082c2 <_printf_i+0x1a6>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	f023 0320 	bic.w	r3, r3, #32
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	2310      	movs	r3, #16
 80082c4:	e7a6      	b.n	8008214 <_printf_i+0xf8>
 80082c6:	4824      	ldr	r0, [pc, #144]	; (8008358 <_printf_i+0x23c>)
 80082c8:	e7e4      	b.n	8008294 <_printf_i+0x178>
 80082ca:	4615      	mov	r5, r2
 80082cc:	e7bd      	b.n	800824a <_printf_i+0x12e>
 80082ce:	682b      	ldr	r3, [r5, #0]
 80082d0:	6826      	ldr	r6, [r4, #0]
 80082d2:	1d18      	adds	r0, r3, #4
 80082d4:	6961      	ldr	r1, [r4, #20]
 80082d6:	6028      	str	r0, [r5, #0]
 80082d8:	0635      	lsls	r5, r6, #24
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	d501      	bpl.n	80082e2 <_printf_i+0x1c6>
 80082de:	6019      	str	r1, [r3, #0]
 80082e0:	e002      	b.n	80082e8 <_printf_i+0x1cc>
 80082e2:	0670      	lsls	r0, r6, #25
 80082e4:	d5fb      	bpl.n	80082de <_printf_i+0x1c2>
 80082e6:	8019      	strh	r1, [r3, #0]
 80082e8:	2300      	movs	r3, #0
 80082ea:	4615      	mov	r5, r2
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	e7bc      	b.n	800826a <_printf_i+0x14e>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	2100      	movs	r1, #0
 80082f4:	1d1a      	adds	r2, r3, #4
 80082f6:	602a      	str	r2, [r5, #0]
 80082f8:	681d      	ldr	r5, [r3, #0]
 80082fa:	6862      	ldr	r2, [r4, #4]
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f859 	bl	80083b4 <memchr>
 8008302:	b108      	cbz	r0, 8008308 <_printf_i+0x1ec>
 8008304:	1b40      	subs	r0, r0, r5
 8008306:	6060      	str	r0, [r4, #4]
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	2300      	movs	r3, #0
 800830e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008312:	e7aa      	b.n	800826a <_printf_i+0x14e>
 8008314:	462a      	mov	r2, r5
 8008316:	4649      	mov	r1, r9
 8008318:	4640      	mov	r0, r8
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	47d0      	blx	sl
 800831e:	3001      	adds	r0, #1
 8008320:	d0ad      	beq.n	800827e <_printf_i+0x162>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	079b      	lsls	r3, r3, #30
 8008326:	d413      	bmi.n	8008350 <_printf_i+0x234>
 8008328:	68e0      	ldr	r0, [r4, #12]
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	4298      	cmp	r0, r3
 800832e:	bfb8      	it	lt
 8008330:	4618      	movlt	r0, r3
 8008332:	e7a6      	b.n	8008282 <_printf_i+0x166>
 8008334:	2301      	movs	r3, #1
 8008336:	4632      	mov	r2, r6
 8008338:	4649      	mov	r1, r9
 800833a:	4640      	mov	r0, r8
 800833c:	47d0      	blx	sl
 800833e:	3001      	adds	r0, #1
 8008340:	d09d      	beq.n	800827e <_printf_i+0x162>
 8008342:	3501      	adds	r5, #1
 8008344:	68e3      	ldr	r3, [r4, #12]
 8008346:	9903      	ldr	r1, [sp, #12]
 8008348:	1a5b      	subs	r3, r3, r1
 800834a:	42ab      	cmp	r3, r5
 800834c:	dcf2      	bgt.n	8008334 <_printf_i+0x218>
 800834e:	e7eb      	b.n	8008328 <_printf_i+0x20c>
 8008350:	2500      	movs	r5, #0
 8008352:	f104 0619 	add.w	r6, r4, #25
 8008356:	e7f5      	b.n	8008344 <_printf_i+0x228>
 8008358:	08008c0f 	.word	0x08008c0f
 800835c:	08008c20 	.word	0x08008c20

08008360 <memmove>:
 8008360:	4288      	cmp	r0, r1
 8008362:	b510      	push	{r4, lr}
 8008364:	eb01 0402 	add.w	r4, r1, r2
 8008368:	d902      	bls.n	8008370 <memmove+0x10>
 800836a:	4284      	cmp	r4, r0
 800836c:	4623      	mov	r3, r4
 800836e:	d807      	bhi.n	8008380 <memmove+0x20>
 8008370:	1e43      	subs	r3, r0, #1
 8008372:	42a1      	cmp	r1, r4
 8008374:	d008      	beq.n	8008388 <memmove+0x28>
 8008376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800837a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800837e:	e7f8      	b.n	8008372 <memmove+0x12>
 8008380:	4601      	mov	r1, r0
 8008382:	4402      	add	r2, r0
 8008384:	428a      	cmp	r2, r1
 8008386:	d100      	bne.n	800838a <memmove+0x2a>
 8008388:	bd10      	pop	{r4, pc}
 800838a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800838e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008392:	e7f7      	b.n	8008384 <memmove+0x24>

08008394 <_sbrk_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	2300      	movs	r3, #0
 8008398:	4d05      	ldr	r5, [pc, #20]	; (80083b0 <_sbrk_r+0x1c>)
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7fa fb24 	bl	80029ec <_sbrk>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_sbrk_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_sbrk_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200006f0 	.word	0x200006f0

080083b4 <memchr>:
 80083b4:	4603      	mov	r3, r0
 80083b6:	b510      	push	{r4, lr}
 80083b8:	b2c9      	uxtb	r1, r1
 80083ba:	4402      	add	r2, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	d101      	bne.n	80083c6 <memchr+0x12>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e003      	b.n	80083ce <memchr+0x1a>
 80083c6:	7804      	ldrb	r4, [r0, #0]
 80083c8:	3301      	adds	r3, #1
 80083ca:	428c      	cmp	r4, r1
 80083cc:	d1f6      	bne.n	80083bc <memchr+0x8>
 80083ce:	bd10      	pop	{r4, pc}

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <_realloc_r>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	4680      	mov	r8, r0
 80083f2:	4614      	mov	r4, r2
 80083f4:	460e      	mov	r6, r1
 80083f6:	b921      	cbnz	r1, 8008402 <_realloc_r+0x16>
 80083f8:	4611      	mov	r1, r2
 80083fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	f7ff bc37 	b.w	8007c70 <_malloc_r>
 8008402:	b92a      	cbnz	r2, 8008410 <_realloc_r+0x24>
 8008404:	f7ff fbcc 	bl	8007ba0 <_free_r>
 8008408:	4625      	mov	r5, r4
 800840a:	4628      	mov	r0, r5
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	f000 f81b 	bl	800844a <_malloc_usable_size_r>
 8008414:	4284      	cmp	r4, r0
 8008416:	4607      	mov	r7, r0
 8008418:	d802      	bhi.n	8008420 <_realloc_r+0x34>
 800841a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800841e:	d812      	bhi.n	8008446 <_realloc_r+0x5a>
 8008420:	4621      	mov	r1, r4
 8008422:	4640      	mov	r0, r8
 8008424:	f7ff fc24 	bl	8007c70 <_malloc_r>
 8008428:	4605      	mov	r5, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	d0ed      	beq.n	800840a <_realloc_r+0x1e>
 800842e:	42bc      	cmp	r4, r7
 8008430:	4622      	mov	r2, r4
 8008432:	4631      	mov	r1, r6
 8008434:	bf28      	it	cs
 8008436:	463a      	movcs	r2, r7
 8008438:	f7ff ffca 	bl	80083d0 <memcpy>
 800843c:	4631      	mov	r1, r6
 800843e:	4640      	mov	r0, r8
 8008440:	f7ff fbae 	bl	8007ba0 <_free_r>
 8008444:	e7e1      	b.n	800840a <_realloc_r+0x1e>
 8008446:	4635      	mov	r5, r6
 8008448:	e7df      	b.n	800840a <_realloc_r+0x1e>

0800844a <_malloc_usable_size_r>:
 800844a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844e:	1f18      	subs	r0, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfbc      	itt	lt
 8008454:	580b      	ldrlt	r3, [r1, r0]
 8008456:	18c0      	addlt	r0, r0, r3
 8008458:	4770      	bx	lr

0800845a <atan2>:
 800845a:	f000 bad1 	b.w	8008a00 <__ieee754_atan2>

0800845e <sqrt>:
 800845e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008460:	4606      	mov	r6, r0
 8008462:	460f      	mov	r7, r1
 8008464:	f000 f9ae 	bl	80087c4 <__ieee754_sqrt>
 8008468:	4632      	mov	r2, r6
 800846a:	4604      	mov	r4, r0
 800846c:	460d      	mov	r5, r1
 800846e:	463b      	mov	r3, r7
 8008470:	4630      	mov	r0, r6
 8008472:	4639      	mov	r1, r7
 8008474:	f7f8 fb36 	bl	8000ae4 <__aeabi_dcmpun>
 8008478:	b990      	cbnz	r0, 80084a0 <sqrt+0x42>
 800847a:	2200      	movs	r2, #0
 800847c:	2300      	movs	r3, #0
 800847e:	4630      	mov	r0, r6
 8008480:	4639      	mov	r1, r7
 8008482:	f7f8 fb07 	bl	8000a94 <__aeabi_dcmplt>
 8008486:	b158      	cbz	r0, 80084a0 <sqrt+0x42>
 8008488:	f7ff fb5e 	bl	8007b48 <__errno>
 800848c:	2321      	movs	r3, #33	; 0x21
 800848e:	2200      	movs	r2, #0
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	f7f8 f9b4 	bl	8000804 <__aeabi_ddiv>
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084a8 <atan>:
 80084a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	4bb6      	ldr	r3, [pc, #728]	; (8008788 <atan+0x2e0>)
 80084ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80084b2:	429e      	cmp	r6, r3
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	468b      	mov	fp, r1
 80084ba:	dd17      	ble.n	80084ec <atan+0x44>
 80084bc:	4bb3      	ldr	r3, [pc, #716]	; (800878c <atan+0x2e4>)
 80084be:	429e      	cmp	r6, r3
 80084c0:	dc01      	bgt.n	80084c6 <atan+0x1e>
 80084c2:	d109      	bne.n	80084d8 <atan+0x30>
 80084c4:	b140      	cbz	r0, 80084d8 <atan+0x30>
 80084c6:	4622      	mov	r2, r4
 80084c8:	462b      	mov	r3, r5
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f7 feb9 	bl	8000244 <__adddf3>
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	e005      	b.n	80084e4 <atan+0x3c>
 80084d8:	f1bb 0f00 	cmp.w	fp, #0
 80084dc:	4cac      	ldr	r4, [pc, #688]	; (8008790 <atan+0x2e8>)
 80084de:	f300 8121 	bgt.w	8008724 <atan+0x27c>
 80084e2:	4dac      	ldr	r5, [pc, #688]	; (8008794 <atan+0x2ec>)
 80084e4:	4620      	mov	r0, r4
 80084e6:	4629      	mov	r1, r5
 80084e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	4baa      	ldr	r3, [pc, #680]	; (8008798 <atan+0x2f0>)
 80084ee:	429e      	cmp	r6, r3
 80084f0:	dc11      	bgt.n	8008516 <atan+0x6e>
 80084f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80084f6:	429e      	cmp	r6, r3
 80084f8:	dc0a      	bgt.n	8008510 <atan+0x68>
 80084fa:	a38b      	add	r3, pc, #556	; (adr r3, 8008728 <atan+0x280>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f7 fea0 	bl	8000244 <__adddf3>
 8008504:	2200      	movs	r2, #0
 8008506:	4ba5      	ldr	r3, [pc, #660]	; (800879c <atan+0x2f4>)
 8008508:	f7f8 fae2 	bl	8000ad0 <__aeabi_dcmpgt>
 800850c:	2800      	cmp	r0, #0
 800850e:	d1e9      	bne.n	80084e4 <atan+0x3c>
 8008510:	f04f 3aff 	mov.w	sl, #4294967295
 8008514:	e027      	b.n	8008566 <atan+0xbe>
 8008516:	f000 f951 	bl	80087bc <fabs>
 800851a:	4ba1      	ldr	r3, [pc, #644]	; (80087a0 <atan+0x2f8>)
 800851c:	4604      	mov	r4, r0
 800851e:	429e      	cmp	r6, r3
 8008520:	460d      	mov	r5, r1
 8008522:	f300 80b8 	bgt.w	8008696 <atan+0x1ee>
 8008526:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800852a:	429e      	cmp	r6, r3
 800852c:	f300 809c 	bgt.w	8008668 <atan+0x1c0>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	f7f7 fe86 	bl	8000244 <__adddf3>
 8008538:	2200      	movs	r2, #0
 800853a:	4b98      	ldr	r3, [pc, #608]	; (800879c <atan+0x2f4>)
 800853c:	f7f7 fe80 	bl	8000240 <__aeabi_dsub>
 8008540:	2200      	movs	r2, #0
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	f7f7 fe79 	bl	8000244 <__adddf3>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 f953 	bl	8000804 <__aeabi_ddiv>
 800855e:	f04f 0a00 	mov.w	sl, #0
 8008562:	4604      	mov	r4, r0
 8008564:	460d      	mov	r5, r1
 8008566:	4622      	mov	r2, r4
 8008568:	462b      	mov	r3, r5
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f7f8 f81f 	bl	80005b0 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4680      	mov	r8, r0
 8008578:	4689      	mov	r9, r1
 800857a:	f7f8 f819 	bl	80005b0 <__aeabi_dmul>
 800857e:	a36c      	add	r3, pc, #432	; (adr r3, 8008730 <atan+0x288>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	f7f8 f812 	bl	80005b0 <__aeabi_dmul>
 800858c:	a36a      	add	r3, pc, #424	; (adr r3, 8008738 <atan+0x290>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f7 fe57 	bl	8000244 <__adddf3>
 8008596:	4632      	mov	r2, r6
 8008598:	463b      	mov	r3, r7
 800859a:	f7f8 f809 	bl	80005b0 <__aeabi_dmul>
 800859e:	a368      	add	r3, pc, #416	; (adr r3, 8008740 <atan+0x298>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f7f7 fe4e 	bl	8000244 <__adddf3>
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	f7f8 f800 	bl	80005b0 <__aeabi_dmul>
 80085b0:	a365      	add	r3, pc, #404	; (adr r3, 8008748 <atan+0x2a0>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fe45 	bl	8000244 <__adddf3>
 80085ba:	4632      	mov	r2, r6
 80085bc:	463b      	mov	r3, r7
 80085be:	f7f7 fff7 	bl	80005b0 <__aeabi_dmul>
 80085c2:	a363      	add	r3, pc, #396	; (adr r3, 8008750 <atan+0x2a8>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f7 fe3c 	bl	8000244 <__adddf3>
 80085cc:	4632      	mov	r2, r6
 80085ce:	463b      	mov	r3, r7
 80085d0:	f7f7 ffee 	bl	80005b0 <__aeabi_dmul>
 80085d4:	a360      	add	r3, pc, #384	; (adr r3, 8008758 <atan+0x2b0>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 fe33 	bl	8000244 <__adddf3>
 80085de:	4642      	mov	r2, r8
 80085e0:	464b      	mov	r3, r9
 80085e2:	f7f7 ffe5 	bl	80005b0 <__aeabi_dmul>
 80085e6:	a35e      	add	r3, pc, #376	; (adr r3, 8008760 <atan+0x2b8>)
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	4680      	mov	r8, r0
 80085ee:	4689      	mov	r9, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f7 ffdc 	bl	80005b0 <__aeabi_dmul>
 80085f8:	a35b      	add	r3, pc, #364	; (adr r3, 8008768 <atan+0x2c0>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fe1f 	bl	8000240 <__aeabi_dsub>
 8008602:	4632      	mov	r2, r6
 8008604:	463b      	mov	r3, r7
 8008606:	f7f7 ffd3 	bl	80005b0 <__aeabi_dmul>
 800860a:	a359      	add	r3, pc, #356	; (adr r3, 8008770 <atan+0x2c8>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fe16 	bl	8000240 <__aeabi_dsub>
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	f7f7 ffca 	bl	80005b0 <__aeabi_dmul>
 800861c:	a356      	add	r3, pc, #344	; (adr r3, 8008778 <atan+0x2d0>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 fe0d 	bl	8000240 <__aeabi_dsub>
 8008626:	4632      	mov	r2, r6
 8008628:	463b      	mov	r3, r7
 800862a:	f7f7 ffc1 	bl	80005b0 <__aeabi_dmul>
 800862e:	a354      	add	r3, pc, #336	; (adr r3, 8008780 <atan+0x2d8>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 fe04 	bl	8000240 <__aeabi_dsub>
 8008638:	4632      	mov	r2, r6
 800863a:	463b      	mov	r3, r7
 800863c:	f7f7 ffb8 	bl	80005b0 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f7 fdfc 	bl	8000244 <__adddf3>
 800864c:	4622      	mov	r2, r4
 800864e:	462b      	mov	r3, r5
 8008650:	f7f7 ffae 	bl	80005b0 <__aeabi_dmul>
 8008654:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	d144      	bne.n	80086e8 <atan+0x240>
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f7 fded 	bl	8000240 <__aeabi_dsub>
 8008666:	e734      	b.n	80084d2 <atan+0x2a>
 8008668:	2200      	movs	r2, #0
 800866a:	4b4c      	ldr	r3, [pc, #304]	; (800879c <atan+0x2f4>)
 800866c:	f7f7 fde8 	bl	8000240 <__aeabi_dsub>
 8008670:	2200      	movs	r2, #0
 8008672:	4606      	mov	r6, r0
 8008674:	460f      	mov	r7, r1
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	4b48      	ldr	r3, [pc, #288]	; (800879c <atan+0x2f4>)
 800867c:	f7f7 fde2 	bl	8000244 <__adddf3>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f8 f8bc 	bl	8000804 <__aeabi_ddiv>
 800868c:	f04f 0a01 	mov.w	sl, #1
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	e767      	b.n	8008566 <atan+0xbe>
 8008696:	4b43      	ldr	r3, [pc, #268]	; (80087a4 <atan+0x2fc>)
 8008698:	429e      	cmp	r6, r3
 800869a:	da1a      	bge.n	80086d2 <atan+0x22a>
 800869c:	2200      	movs	r2, #0
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <atan+0x300>)
 80086a0:	f7f7 fdce 	bl	8000240 <__aeabi_dsub>
 80086a4:	2200      	movs	r2, #0
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	4b3e      	ldr	r3, [pc, #248]	; (80087a8 <atan+0x300>)
 80086b0:	f7f7 ff7e 	bl	80005b0 <__aeabi_dmul>
 80086b4:	2200      	movs	r2, #0
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <atan+0x2f4>)
 80086b8:	f7f7 fdc4 	bl	8000244 <__adddf3>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 f89e 	bl	8000804 <__aeabi_ddiv>
 80086c8:	f04f 0a02 	mov.w	sl, #2
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	e749      	b.n	8008566 <atan+0xbe>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	2000      	movs	r0, #0
 80086d8:	4934      	ldr	r1, [pc, #208]	; (80087ac <atan+0x304>)
 80086da:	f7f8 f893 	bl	8000804 <__aeabi_ddiv>
 80086de:	f04f 0a03 	mov.w	sl, #3
 80086e2:	4604      	mov	r4, r0
 80086e4:	460d      	mov	r5, r1
 80086e6:	e73e      	b.n	8008566 <atan+0xbe>
 80086e8:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <atan+0x308>)
 80086ea:	4e32      	ldr	r6, [pc, #200]	; (80087b4 <atan+0x30c>)
 80086ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 fda4 	bl	8000240 <__aeabi_dsub>
 80086f8:	4622      	mov	r2, r4
 80086fa:	462b      	mov	r3, r5
 80086fc:	f7f7 fda0 	bl	8000240 <__aeabi_dsub>
 8008700:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	e9d6 0100 	ldrd	r0, r1, [r6]
 800870c:	f7f7 fd98 	bl	8000240 <__aeabi_dsub>
 8008710:	f1bb 0f00 	cmp.w	fp, #0
 8008714:	4604      	mov	r4, r0
 8008716:	460d      	mov	r5, r1
 8008718:	f6bf aee4 	bge.w	80084e4 <atan+0x3c>
 800871c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008720:	461d      	mov	r5, r3
 8008722:	e6df      	b.n	80084e4 <atan+0x3c>
 8008724:	4d24      	ldr	r5, [pc, #144]	; (80087b8 <atan+0x310>)
 8008726:	e6dd      	b.n	80084e4 <atan+0x3c>
 8008728:	8800759c 	.word	0x8800759c
 800872c:	7e37e43c 	.word	0x7e37e43c
 8008730:	e322da11 	.word	0xe322da11
 8008734:	3f90ad3a 	.word	0x3f90ad3a
 8008738:	24760deb 	.word	0x24760deb
 800873c:	3fa97b4b 	.word	0x3fa97b4b
 8008740:	a0d03d51 	.word	0xa0d03d51
 8008744:	3fb10d66 	.word	0x3fb10d66
 8008748:	c54c206e 	.word	0xc54c206e
 800874c:	3fb745cd 	.word	0x3fb745cd
 8008750:	920083ff 	.word	0x920083ff
 8008754:	3fc24924 	.word	0x3fc24924
 8008758:	5555550d 	.word	0x5555550d
 800875c:	3fd55555 	.word	0x3fd55555
 8008760:	2c6a6c2f 	.word	0x2c6a6c2f
 8008764:	bfa2b444 	.word	0xbfa2b444
 8008768:	52defd9a 	.word	0x52defd9a
 800876c:	3fadde2d 	.word	0x3fadde2d
 8008770:	af749a6d 	.word	0xaf749a6d
 8008774:	3fb3b0f2 	.word	0x3fb3b0f2
 8008778:	fe231671 	.word	0xfe231671
 800877c:	3fbc71c6 	.word	0x3fbc71c6
 8008780:	9998ebc4 	.word	0x9998ebc4
 8008784:	3fc99999 	.word	0x3fc99999
 8008788:	440fffff 	.word	0x440fffff
 800878c:	7ff00000 	.word	0x7ff00000
 8008790:	54442d18 	.word	0x54442d18
 8008794:	bff921fb 	.word	0xbff921fb
 8008798:	3fdbffff 	.word	0x3fdbffff
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	3ff2ffff 	.word	0x3ff2ffff
 80087a4:	40038000 	.word	0x40038000
 80087a8:	3ff80000 	.word	0x3ff80000
 80087ac:	bff00000 	.word	0xbff00000
 80087b0:	08008c58 	.word	0x08008c58
 80087b4:	08008c38 	.word	0x08008c38
 80087b8:	3ff921fb 	.word	0x3ff921fb

080087bc <fabs>:
 80087bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087c0:	4619      	mov	r1, r3
 80087c2:	4770      	bx	lr

080087c4 <__ieee754_sqrt>:
 80087c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008968 <__ieee754_sqrt+0x1a4>
 80087c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80087d0:	460b      	mov	r3, r1
 80087d2:	4606      	mov	r6, r0
 80087d4:	460d      	mov	r5, r1
 80087d6:	460a      	mov	r2, r1
 80087d8:	4604      	mov	r4, r0
 80087da:	d10e      	bne.n	80087fa <__ieee754_sqrt+0x36>
 80087dc:	4602      	mov	r2, r0
 80087de:	f7f7 fee7 	bl	80005b0 <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4630      	mov	r0, r6
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f7 fd2b 	bl	8000244 <__adddf3>
 80087ee:	4606      	mov	r6, r0
 80087f0:	460d      	mov	r5, r1
 80087f2:	4630      	mov	r0, r6
 80087f4:	4629      	mov	r1, r5
 80087f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	2900      	cmp	r1, #0
 80087fc:	dc0d      	bgt.n	800881a <__ieee754_sqrt+0x56>
 80087fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008802:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008806:	d0f4      	beq.n	80087f2 <__ieee754_sqrt+0x2e>
 8008808:	b139      	cbz	r1, 800881a <__ieee754_sqrt+0x56>
 800880a:	4602      	mov	r2, r0
 800880c:	f7f7 fd18 	bl	8000240 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	f7f7 fff6 	bl	8000804 <__aeabi_ddiv>
 8008818:	e7e9      	b.n	80087ee <__ieee754_sqrt+0x2a>
 800881a:	1512      	asrs	r2, r2, #20
 800881c:	f000 8089 	beq.w	8008932 <__ieee754_sqrt+0x16e>
 8008820:	2500      	movs	r5, #0
 8008822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008826:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800882a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800882e:	07d2      	lsls	r2, r2, #31
 8008830:	bf5c      	itt	pl
 8008832:	005b      	lslpl	r3, r3, #1
 8008834:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008838:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800883c:	bf58      	it	pl
 800883e:	0064      	lslpl	r4, r4, #1
 8008840:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008844:	0062      	lsls	r2, r4, #1
 8008846:	2016      	movs	r0, #22
 8008848:	4629      	mov	r1, r5
 800884a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800884e:	1076      	asrs	r6, r6, #1
 8008850:	190f      	adds	r7, r1, r4
 8008852:	429f      	cmp	r7, r3
 8008854:	bfde      	ittt	le
 8008856:	1bdb      	suble	r3, r3, r7
 8008858:	1939      	addle	r1, r7, r4
 800885a:	192d      	addle	r5, r5, r4
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	3801      	subs	r0, #1
 8008860:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008864:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008868:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800886c:	d1f0      	bne.n	8008850 <__ieee754_sqrt+0x8c>
 800886e:	4604      	mov	r4, r0
 8008870:	2720      	movs	r7, #32
 8008872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008876:	428b      	cmp	r3, r1
 8008878:	eb0c 0e00 	add.w	lr, ip, r0
 800887c:	dc02      	bgt.n	8008884 <__ieee754_sqrt+0xc0>
 800887e:	d113      	bne.n	80088a8 <__ieee754_sqrt+0xe4>
 8008880:	4596      	cmp	lr, r2
 8008882:	d811      	bhi.n	80088a8 <__ieee754_sqrt+0xe4>
 8008884:	f1be 0f00 	cmp.w	lr, #0
 8008888:	eb0e 000c 	add.w	r0, lr, ip
 800888c:	da56      	bge.n	800893c <__ieee754_sqrt+0x178>
 800888e:	2800      	cmp	r0, #0
 8008890:	db54      	blt.n	800893c <__ieee754_sqrt+0x178>
 8008892:	f101 0801 	add.w	r8, r1, #1
 8008896:	1a5b      	subs	r3, r3, r1
 8008898:	4641      	mov	r1, r8
 800889a:	4596      	cmp	lr, r2
 800889c:	bf88      	it	hi
 800889e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80088a2:	eba2 020e 	sub.w	r2, r2, lr
 80088a6:	4464      	add	r4, ip
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	3f01      	subs	r7, #1
 80088ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80088b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80088b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80088b8:	d1dd      	bne.n	8008876 <__ieee754_sqrt+0xb2>
 80088ba:	4313      	orrs	r3, r2
 80088bc:	d01b      	beq.n	80088f6 <__ieee754_sqrt+0x132>
 80088be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800896c <__ieee754_sqrt+0x1a8>
 80088c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008970 <__ieee754_sqrt+0x1ac>
 80088c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80088ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80088ce:	f7f7 fcb7 	bl	8000240 <__aeabi_dsub>
 80088d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4640      	mov	r0, r8
 80088dc:	4649      	mov	r1, r9
 80088de:	f7f8 f8e3 	bl	8000aa8 <__aeabi_dcmple>
 80088e2:	b140      	cbz	r0, 80088f6 <__ieee754_sqrt+0x132>
 80088e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80088e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80088ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80088f0:	d126      	bne.n	8008940 <__ieee754_sqrt+0x17c>
 80088f2:	463c      	mov	r4, r7
 80088f4:	3501      	adds	r5, #1
 80088f6:	106b      	asrs	r3, r5, #1
 80088f8:	0864      	lsrs	r4, r4, #1
 80088fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088fe:	07ea      	lsls	r2, r5, #31
 8008900:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008904:	bf48      	it	mi
 8008906:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800890a:	4620      	mov	r0, r4
 800890c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008910:	e76d      	b.n	80087ee <__ieee754_sqrt+0x2a>
 8008912:	0ae3      	lsrs	r3, r4, #11
 8008914:	3915      	subs	r1, #21
 8008916:	0564      	lsls	r4, r4, #21
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0fa      	beq.n	8008912 <__ieee754_sqrt+0x14e>
 800891c:	02d8      	lsls	r0, r3, #11
 800891e:	d50a      	bpl.n	8008936 <__ieee754_sqrt+0x172>
 8008920:	f1c2 0020 	rsb	r0, r2, #32
 8008924:	fa24 f000 	lsr.w	r0, r4, r0
 8008928:	1e55      	subs	r5, r2, #1
 800892a:	4094      	lsls	r4, r2
 800892c:	4303      	orrs	r3, r0
 800892e:	1b4a      	subs	r2, r1, r5
 8008930:	e776      	b.n	8008820 <__ieee754_sqrt+0x5c>
 8008932:	4611      	mov	r1, r2
 8008934:	e7f0      	b.n	8008918 <__ieee754_sqrt+0x154>
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	3201      	adds	r2, #1
 800893a:	e7ef      	b.n	800891c <__ieee754_sqrt+0x158>
 800893c:	4688      	mov	r8, r1
 800893e:	e7aa      	b.n	8008896 <__ieee754_sqrt+0xd2>
 8008940:	f7f7 fc80 	bl	8000244 <__adddf3>
 8008944:	e9da 8900 	ldrd	r8, r9, [sl]
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f8 f8a0 	bl	8000a94 <__aeabi_dcmplt>
 8008954:	b120      	cbz	r0, 8008960 <__ieee754_sqrt+0x19c>
 8008956:	1ca1      	adds	r1, r4, #2
 8008958:	bf08      	it	eq
 800895a:	3501      	addeq	r5, #1
 800895c:	3402      	adds	r4, #2
 800895e:	e7ca      	b.n	80088f6 <__ieee754_sqrt+0x132>
 8008960:	3401      	adds	r4, #1
 8008962:	f024 0401 	bic.w	r4, r4, #1
 8008966:	e7c6      	b.n	80088f6 <__ieee754_sqrt+0x132>
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	200000f8 	.word	0x200000f8
 8008970:	20000100 	.word	0x20000100

08008974 <round>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800897a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800897e:	2a13      	cmp	r2, #19
 8008980:	460b      	mov	r3, r1
 8008982:	4605      	mov	r5, r0
 8008984:	460c      	mov	r4, r1
 8008986:	dc18      	bgt.n	80089ba <round+0x46>
 8008988:	2a00      	cmp	r2, #0
 800898a:	da09      	bge.n	80089a0 <round+0x2c>
 800898c:	3201      	adds	r2, #1
 800898e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008992:	d103      	bne.n	800899c <round+0x28>
 8008994:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008998:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800899c:	2200      	movs	r2, #0
 800899e:	e029      	b.n	80089f4 <round+0x80>
 80089a0:	4816      	ldr	r0, [pc, #88]	; (80089fc <round+0x88>)
 80089a2:	4110      	asrs	r0, r2
 80089a4:	4001      	ands	r1, r0
 80089a6:	4329      	orrs	r1, r5
 80089a8:	d011      	beq.n	80089ce <round+0x5a>
 80089aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089ae:	fa41 f202 	asr.w	r2, r1, r2
 80089b2:	4413      	add	r3, r2
 80089b4:	ea23 0300 	bic.w	r3, r3, r0
 80089b8:	e7f0      	b.n	800899c <round+0x28>
 80089ba:	2a33      	cmp	r2, #51	; 0x33
 80089bc:	dd0a      	ble.n	80089d4 <round+0x60>
 80089be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80089c2:	d104      	bne.n	80089ce <round+0x5a>
 80089c4:	4602      	mov	r2, r0
 80089c6:	f7f7 fc3d 	bl	8000244 <__adddf3>
 80089ca:	4605      	mov	r5, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	4628      	mov	r0, r5
 80089d0:	4621      	mov	r1, r4
 80089d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80089dc:	40f8      	lsrs	r0, r7
 80089de:	4228      	tst	r0, r5
 80089e0:	d0f5      	beq.n	80089ce <round+0x5a>
 80089e2:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 80089e6:	2201      	movs	r2, #1
 80089e8:	408a      	lsls	r2, r1
 80089ea:	1952      	adds	r2, r2, r5
 80089ec:	bf28      	it	cs
 80089ee:	3301      	addcs	r3, #1
 80089f0:	ea22 0200 	bic.w	r2, r2, r0
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	e7e7      	b.n	80089ca <round+0x56>
 80089fa:	bf00      	nop
 80089fc:	000fffff 	.word	0x000fffff

08008a00 <__ieee754_atan2>:
 8008a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	4617      	mov	r7, r2
 8008a06:	4692      	mov	sl, r2
 8008a08:	4699      	mov	r9, r3
 8008a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a0e:	427b      	negs	r3, r7
 8008a10:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008b90 <__ieee754_atan2+0x190>
 8008a14:	433b      	orrs	r3, r7
 8008a16:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008a1a:	4543      	cmp	r3, r8
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	d809      	bhi.n	8008a36 <__ieee754_atan2+0x36>
 8008a22:	4246      	negs	r6, r0
 8008a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a28:	4306      	orrs	r6, r0
 8008a2a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008a2e:	4546      	cmp	r6, r8
 8008a30:	468e      	mov	lr, r1
 8008a32:	4683      	mov	fp, r0
 8008a34:	d908      	bls.n	8008a48 <__ieee754_atan2+0x48>
 8008a36:	4652      	mov	r2, sl
 8008a38:	464b      	mov	r3, r9
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f7 fc01 	bl	8000244 <__adddf3>
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	e019      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008a48:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008a4c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008a50:	433e      	orrs	r6, r7
 8008a52:	d103      	bne.n	8008a5c <__ieee754_atan2+0x5c>
 8008a54:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	f7ff bd26 	b.w	80084a8 <atan>
 8008a5c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008a60:	f006 0602 	and.w	r6, r6, #2
 8008a64:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008a68:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008a6c:	d10a      	bne.n	8008a84 <__ieee754_atan2+0x84>
 8008a6e:	2e02      	cmp	r6, #2
 8008a70:	d067      	beq.n	8008b42 <__ieee754_atan2+0x142>
 8008a72:	2e03      	cmp	r6, #3
 8008a74:	d102      	bne.n	8008a7c <__ieee754_atan2+0x7c>
 8008a76:	a53a      	add	r5, pc, #232	; (adr r5, 8008b60 <__ieee754_atan2+0x160>)
 8008a78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	4317      	orrs	r7, r2
 8008a86:	d106      	bne.n	8008a96 <__ieee754_atan2+0x96>
 8008a88:	f1be 0f00 	cmp.w	lr, #0
 8008a8c:	da64      	bge.n	8008b58 <__ieee754_atan2+0x158>
 8008a8e:	a536      	add	r5, pc, #216	; (adr r5, 8008b68 <__ieee754_atan2+0x168>)
 8008a90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a94:	e7f2      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008a96:	4542      	cmp	r2, r8
 8008a98:	d10f      	bne.n	8008aba <__ieee754_atan2+0xba>
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f106 36ff 	add.w	r6, r6, #4294967295
 8008aa0:	d107      	bne.n	8008ab2 <__ieee754_atan2+0xb2>
 8008aa2:	2e02      	cmp	r6, #2
 8008aa4:	d851      	bhi.n	8008b4a <__ieee754_atan2+0x14a>
 8008aa6:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <__ieee754_atan2+0x194>)
 8008aa8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008ab0:	e7e4      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008ab2:	2e02      	cmp	r6, #2
 8008ab4:	d84d      	bhi.n	8008b52 <__ieee754_atan2+0x152>
 8008ab6:	4b38      	ldr	r3, [pc, #224]	; (8008b98 <__ieee754_atan2+0x198>)
 8008ab8:	e7f6      	b.n	8008aa8 <__ieee754_atan2+0xa8>
 8008aba:	4543      	cmp	r3, r8
 8008abc:	d0e4      	beq.n	8008a88 <__ieee754_atan2+0x88>
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008ac4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ac8:	da21      	bge.n	8008b0e <__ieee754_atan2+0x10e>
 8008aca:	f1b9 0f00 	cmp.w	r9, #0
 8008ace:	da01      	bge.n	8008ad4 <__ieee754_atan2+0xd4>
 8008ad0:	323c      	adds	r2, #60	; 0x3c
 8008ad2:	db20      	blt.n	8008b16 <__ieee754_atan2+0x116>
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fe92 	bl	8000804 <__aeabi_ddiv>
 8008ae0:	f7ff fe6c 	bl	80087bc <fabs>
 8008ae4:	f7ff fce0 	bl	80084a8 <atan>
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	2e01      	cmp	r6, #1
 8008aee:	d015      	beq.n	8008b1c <__ieee754_atan2+0x11c>
 8008af0:	2e02      	cmp	r6, #2
 8008af2:	d017      	beq.n	8008b24 <__ieee754_atan2+0x124>
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	d0c1      	beq.n	8008a7c <__ieee754_atan2+0x7c>
 8008af8:	a31d      	add	r3, pc, #116	; (adr r3, 8008b70 <__ieee754_atan2+0x170>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f7 fb9d 	bl	8000240 <__aeabi_dsub>
 8008b06:	a31c      	add	r3, pc, #112	; (adr r3, 8008b78 <__ieee754_atan2+0x178>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	e016      	b.n	8008b3c <__ieee754_atan2+0x13c>
 8008b0e:	a51c      	add	r5, pc, #112	; (adr r5, 8008b80 <__ieee754_atan2+0x180>)
 8008b10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b14:	e7ea      	b.n	8008aec <__ieee754_atan2+0xec>
 8008b16:	2400      	movs	r4, #0
 8008b18:	2500      	movs	r5, #0
 8008b1a:	e7e7      	b.n	8008aec <__ieee754_atan2+0xec>
 8008b1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008b20:	461d      	mov	r5, r3
 8008b22:	e7ab      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008b24:	a312      	add	r3, pc, #72	; (adr r3, 8008b70 <__ieee754_atan2+0x170>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7f7 fb87 	bl	8000240 <__aeabi_dsub>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	a110      	add	r1, pc, #64	; (adr r1, 8008b78 <__ieee754_atan2+0x178>)
 8008b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b3c:	f7f7 fb80 	bl	8000240 <__aeabi_dsub>
 8008b40:	e77f      	b.n	8008a42 <__ieee754_atan2+0x42>
 8008b42:	a50d      	add	r5, pc, #52	; (adr r5, 8008b78 <__ieee754_atan2+0x178>)
 8008b44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b48:	e798      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008b4a:	a50f      	add	r5, pc, #60	; (adr r5, 8008b88 <__ieee754_atan2+0x188>)
 8008b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b50:	e794      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008b52:	2400      	movs	r4, #0
 8008b54:	2500      	movs	r5, #0
 8008b56:	e791      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008b58:	a509      	add	r5, pc, #36	; (adr r5, 8008b80 <__ieee754_atan2+0x180>)
 8008b5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b5e:	e78d      	b.n	8008a7c <__ieee754_atan2+0x7c>
 8008b60:	54442d18 	.word	0x54442d18
 8008b64:	c00921fb 	.word	0xc00921fb
 8008b68:	54442d18 	.word	0x54442d18
 8008b6c:	bff921fb 	.word	0xbff921fb
 8008b70:	33145c07 	.word	0x33145c07
 8008b74:	3ca1a626 	.word	0x3ca1a626
 8008b78:	54442d18 	.word	0x54442d18
 8008b7c:	400921fb 	.word	0x400921fb
 8008b80:	54442d18 	.word	0x54442d18
 8008b84:	3ff921fb 	.word	0x3ff921fb
 8008b88:	54442d18 	.word	0x54442d18
 8008b8c:	3fe921fb 	.word	0x3fe921fb
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	08008c78 	.word	0x08008c78
 8008b98:	08008c90 	.word	0x08008c90

08008b9c <_init>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr

08008ba8 <_fini>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr
