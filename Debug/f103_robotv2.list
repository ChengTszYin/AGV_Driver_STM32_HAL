
f103_robotv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008b68  08008b68  00018b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c58  08008c58  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008c58  08008c58  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c58  08008c58  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c5c  08008c5c  00018c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008c60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000108  08008d68  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08008d68  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012413  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddf  00000000  00000000  00032587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00035368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d28  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2eb  00000000  00000000  00037150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ae2  00000000  00000000  0005243b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bf7f  00000000  00000000  00068f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e40  00000000  00000000  00104e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00109cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000108 	.word	0x20000108
 8000204:	00000000 	.word	0x00000000
 8000208:	08008b4c 	.word	0x08008b4c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000010c 	.word	0x2000010c
 8000224:	08008b4c 	.word	0x08008b4c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <reverseBits>:
#ifndef INC_CRC_H_
#define INC_CRC_H_


uint8_t reverseBits(uint8_t value)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e010      	b.n	800109e <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b25a      	sxtb	r2, r3
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	fa41 f303 	asr.w	r3, r1, r3
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddeb      	ble.n	800107c <reverseBits+0x14>
	}
	return result;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 80010cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d049      	beq.n	8001168 <crc8+0xb8>
 80010d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d045      	beq.n	8001168 <crc8+0xb8>
		crc = reverseBits(crc);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffc1 	bl	8001068 <reverseBits>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffba 	bl	8001068 <reverseBits>
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e028      	b.n	8001150 <crc8+0xa0>
			crc ^= data[i];
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	4413      	add	r3, r2
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110a:	4053      	eors	r3, r2
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e016      	b.n	8001144 <crc8+0x94>
 8001116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <crc8+0x82>
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4053      	eors	r3, r2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	e003      	b.n	800113a <crc8+0x8a>
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dde5      	ble.n	8001116 <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	3301      	adds	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3d2      	bcc.n	80010fe <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8001158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800115c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001160:	4053      	eors	r3, r2
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001166:	e056      	b.n	8001216 <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e037      	b.n	80011de <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 800116e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <crc8+0xd8>
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff72 	bl	8001068 <reverseBits>
 8001184:	4603      	mov	r3, r0
 8001186:	e003      	b.n	8001190 <crc8+0xe0>
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001196:	4053      	eors	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e016      	b.n	80011d2 <crc8+0x122>
 80011a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da09      	bge.n	80011c0 <crc8+0x110>
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4053      	eors	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e003      	b.n	80011c8 <crc8+0x118>
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	dde5      	ble.n	80011a4 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3301      	adds	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3c3      	bcc.n	800116e <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80011e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <crc8+0x156>
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff38 	bl	8001068 <reverseBits>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001200:	4053      	eors	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e005      	b.n	8001212 <crc8+0x162>
 8001206:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800120a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800120e:	4053      	eors	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
 800122a:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <checkCRC+0x50>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <checkCRC+0x54>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	2100      	movs	r1, #0
 8001236:	9102      	str	r1, [sp, #8]
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	2231      	movs	r2, #49	; 0x31
 8001240:	2109      	movs	r1, #9
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff34 	bl	80010b0 <crc8>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3309      	adds	r3, #9
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <checkCRC+0x36>
			return 1;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3309      	adds	r3, #9
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <checkCRC+0x44>
			return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <checkCRC+0x46>
		}
	else return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000
 8001278:	20000001 	.word	0x20000001

0800127c <receiveFromBuffer>:

void receiveFromBuffer()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001280:	2219      	movs	r2, #25
 8001282:	4904      	ldr	r1, [pc, #16]	; (8001294 <receiveFromBuffer+0x18>)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <receiveFromBuffer+0x1c>)
 8001286:	f005 fcda 	bl	8006c3e <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <receiveFromBuffer+0x20>)
 800128c:	f000 f834 	bl	80012f8 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000128 	.word	0x20000128
 8001298:	20000428 	.word	0x20000428
 800129c:	2000015c 	.word	0x2000015c

080012a0 <send>:

void send(uint8_t crc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	if(crc)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d011      	beq.n	80012d4 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <send+0x48>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <send+0x4c>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	2100      	movs	r1, #0
 80012ba:	9102      	str	r1, [sp, #8]
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	2231      	movs	r2, #49	; 0x31
 80012c4:	2109      	movs	r1, #9
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <send+0x50>)
 80012c8:	f7ff fef2 	bl	80010b0 <crc8>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <send+0x50>)
 80012d2:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 80012d4:	230a      	movs	r3, #10
 80012d6:	220a      	movs	r2, #10
 80012d8:	4905      	ldr	r1, [pc, #20]	; (80012f0 <send+0x50>)
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <send+0x54>)
 80012dc:	f005 fc2c 	bl	8006b38 <HAL_UART_Transmit>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000001 	.word	0x20000001
 80012f0:	20000174 	.word	0x20000174
 80012f4:	20000428 	.word	0x20000428

080012f8 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if(sizeof(responseBufferH)>0)
	{
		sensor->leftii = responseBufferH[0];
 8001300:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <Parse_DMA_All+0x278>)
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]
		sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <Parse_DMA_All+0x278>)
 800130a:	785a      	ldrb	r2, [r3, #1]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	709a      	strb	r2, [r3, #2]
		uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 8001310:	4b97      	ldr	r3, [pc, #604]	; (8001570 <Parse_DMA_All+0x278>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b95      	ldr	r3, [pc, #596]	; (8001570 <Parse_DMA_All+0x278>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
		short currentR = current;
 8001324:	8afb      	ldrh	r3, [r7, #22]
 8001326:	82bb      	strh	r3, [r7, #20]
		if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
		if (currentR >= 0) {
 8001328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db14      	blt.n	800135a <Parse_DMA_All+0x62>
			sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fccd 	bl	8000cd4 <__aeabi_i2f>
 800133a:	4603      	mov	r3, r0
 800133c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd1b 	bl	8000d7c <__aeabi_fmul>
 8001346:	4603      	mov	r3, r0
 8001348:	498a      	ldr	r1, [pc, #552]	; (8001574 <Parse_DMA_All+0x27c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdca 	bl	8000ee4 <__aeabi_fdiv>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	e013      	b.n	8001382 <Parse_DMA_All+0x8a>
		} else {
			sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800135a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fcb8 	bl	8000cd4 <__aeabi_i2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fd06 	bl	8000d7c <__aeabi_fmul>
 8001370:	4603      	mov	r3, r0
 8001372:	4981      	ldr	r1, [pc, #516]	; (8001578 <Parse_DMA_All+0x280>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdb5 	bl	8000ee4 <__aeabi_fdiv>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
		}
		uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <Parse_DMA_All+0x278>)
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <Parse_DMA_All+0x278>)
 800138c:	795b      	ldrb	r3, [r3, #5]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	827b      	strh	r3, [r7, #18]
		velocityL = velocity;
 8001396:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <Parse_DMA_All+0x284>)
 800139c:	801a      	strh	r2, [r3, #0]
		if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <Parse_DMA_All+0x284>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80013a8:	dd11      	ble.n	80013ce <Parse_DMA_All+0xd6>
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <Parse_DMA_All+0x284>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b70      	ldr	r3, [pc, #448]	; (800157c <Parse_DMA_All+0x284>)
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <Parse_DMA_All+0x284>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <Parse_DMA_All+0x284>)
 80013cc:	801a      	strh	r2, [r3, #0]
		sensor->LeftVelocity = velocityL;
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <Parse_DMA_All+0x284>)
 80013d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	819a      	strh	r2, [r3, #12]
		sensor->Leftwinding_temp = responseBufferH[6];
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <Parse_DMA_All+0x278>)
 80013da:	799a      	ldrb	r2, [r3, #6]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	741a      	strb	r2, [r3, #16]
		sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Parse_DMA_All+0x278>)
 80013e2:	79db      	ldrb	r3, [r3, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc71 	bl	8000ccc <__aeabi_ui2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4964      	ldr	r1, [pc, #400]	; (8001580 <Parse_DMA_All+0x288>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fcc4 	bl	8000d7c <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f882 	bl	8000500 <__aeabi_f2d>
 80013fc:	a35a      	add	r3, pc, #360	; (adr r3, 8001568 <Parse_DMA_All+0x270>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f9ff 	bl	8000804 <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f007 fa89 	bl	8008924 <round>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb79 	bl	8000b10 <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	825a      	strh	r2, [r3, #18]
		sensor->Righterror = responseBufferH[8];
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <Parse_DMA_All+0x278>)
 8001428:	7a1a      	ldrb	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	75da      	strb	r2, [r3, #23]
//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
	}
	if(sizeof(responseBufferL)>0)
	{
		sensor->reightii = responseBufferL[0];
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <Parse_DMA_All+0x28c>)
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	705a      	strb	r2, [r3, #1]
		sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <Parse_DMA_All+0x28c>)
 8001438:	785a      	ldrb	r2, [r3, #1]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	70da      	strb	r2, [r3, #3]
		uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <Parse_DMA_All+0x28c>)
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <Parse_DMA_All+0x28c>)
 8001448:	78db      	ldrb	r3, [r3, #3]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	823b      	strh	r3, [r7, #16]
		short currentR = current;
 8001452:	8a3b      	ldrh	r3, [r7, #16]
 8001454:	81fb      	strh	r3, [r7, #14]
		if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
		if (currentR >= 0) {
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db14      	blt.n	8001488 <Parse_DMA_All+0x190>
			sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 800145e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc36 	bl	8000cd4 <__aeabi_i2f>
 8001468:	4603      	mov	r3, r0
 800146a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc84 	bl	8000d7c <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	493f      	ldr	r1, [pc, #252]	; (8001574 <Parse_DMA_All+0x27c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd33 	bl	8000ee4 <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	e013      	b.n	80014b0 <Parse_DMA_All+0x1b8>
		} else {
			sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc21 	bl	8000cd4 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc6f 	bl	8000d7c <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <Parse_DMA_All+0x280>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd1e 	bl	8000ee4 <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
		}
		uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <Parse_DMA_All+0x28c>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <Parse_DMA_All+0x28c>)
 80014ba:	795b      	ldrb	r3, [r3, #5]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	81bb      	strh	r3, [r7, #12]
		velocityR = velocity;
 80014c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Parse_DMA_All+0x290>)
 80014ca:	801a      	strh	r2, [r3, #0]
		if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <Parse_DMA_All+0x290>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014d6:	dd11      	ble.n	80014fc <Parse_DMA_All+0x204>
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <Parse_DMA_All+0x290>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <Parse_DMA_All+0x290>)
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <Parse_DMA_All+0x290>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <Parse_DMA_All+0x290>)
 80014fa:	801a      	strh	r2, [r3, #0]
		sensor->RightVelocity = velocityR;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <Parse_DMA_All+0x290>)
 80014fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	81da      	strh	r2, [r3, #14]
		sensor->Rightwinding_temp = responseBufferL[6];
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <Parse_DMA_All+0x28c>)
 8001508:	799a      	ldrb	r2, [r3, #6]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	745a      	strb	r2, [r3, #17]
		sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <Parse_DMA_All+0x28c>)
 8001510:	79db      	ldrb	r3, [r3, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbda 	bl	8000ccc <__aeabi_ui2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4919      	ldr	r1, [pc, #100]	; (8001580 <Parse_DMA_All+0x288>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc2d 	bl	8000d7c <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffeb 	bl	8000500 <__aeabi_f2d>
 800152a:	a30f      	add	r3, pc, #60	; (adr r3, 8001568 <Parse_DMA_All+0x270>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f968 	bl	8000804 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f007 f9f2 	bl	8008924 <round>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fae2 	bl	8000b10 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	829a      	strh	r2, [r3, #20]
		sensor->Righterror = responseBufferL[8];
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <Parse_DMA_All+0x28c>)
 8001556:	7a1a      	ldrb	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	75da      	strb	r2, [r3, #23]
//		uint8_t mess[20];
//		sprintf(mess, "RIGHT sensor: %d\n",sensor->RightVelocity);
//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
	}
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	406fe000 	.word	0x406fe000
 8001570:	20000144 	.word	0x20000144
 8001574:	46fffe00 	.word	0x46fffe00
 8001578:	c6fffe00 	.word	0xc6fffe00
 800157c:	20000126 	.word	0x20000126
 8001580:	43b40000 	.word	0x43b40000
 8001584:	20000150 	.word	0x20000150
 8001588:	20000124 	.word	0x20000124

0800158c <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	460b      	mov	r3, r1
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 800159e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80015a6:	dd02      	ble.n	80015ae <setVelocity+0x22>
 80015a8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80015ac:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 80015ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015b2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80015b6:	da02      	bge.n	80015be <setVelocity+0x32>
 80015b8:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 80015bc:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 80015be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80015ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da06      	bge.n	80015e0 <setVelocity+0x54>
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <setVelocity+0x54>
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	425b      	negs	r3, r3
 80015de:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80015e0:	8bfb      	ldrh	r3, [r7, #30]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80015e8:	8bfb      	ldrh	r3, [r7, #30]
 80015ea:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	733b      	strb	r3, [r7, #12]
 80015f0:	2364      	movs	r3, #100	; 0x64
 80015f2:	737b      	strb	r3, [r7, #13]
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	73bb      	strb	r3, [r7, #14]
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	2300      	movs	r3, #0
 80015fe:	743b      	strb	r3, [r7, #16]
 8001600:	2300      	movs	r3, #0
 8001602:	747b      	strb	r3, [r7, #17]
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	74bb      	strb	r3, [r7, #18]
 8001608:	2300      	movs	r3, #0
 800160a:	74fb      	strb	r3, [r7, #19]
 800160c:	2300      	movs	r3, #0
 800160e:	753b      	strb	r3, [r7, #20]
 8001610:	2300      	movs	r3, #0
 8001612:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	e00c      	b.n	8001634 <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4413      	add	r3, r2
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <setVelocity+0xc0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b09      	cmp	r3, #9
 8001638:	ddef      	ble.n	800161a <setVelocity+0x8e>
	}
	send(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fe30 	bl	80012a0 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000174 	.word	0x20000174

08001650 <SR04_Init>:
SR04_PulseType pulse2;
SR04_PulseType pulse3;
SR04_PulseType pulse4;

void SR04_Init()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <SR04_Init+0x40>)
 8001656:	f004 fab5 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <SR04_Init+0x40>)
 800165e:	f004 fb61 	bl	8005d24 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <SR04_Init+0x44>)
 8001664:	f004 faae 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_3);
 8001668:	2108      	movs	r1, #8
 800166a:	480a      	ldr	r0, [pc, #40]	; (8001694 <SR04_Init+0x44>)
 800166c:	f004 fb5a 	bl	8005d24 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <SR04_Init+0x48>)
 8001672:	f004 faa7 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_3);
 8001676:	2108      	movs	r1, #8
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <SR04_Init+0x48>)
 800167a:	f004 fb53 	bl	8005d24 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <SR04_Init+0x4c>)
 8001680:	f004 faa0 	bl	8005bc4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <SR04_Init+0x4c>)
 8001688:	f004 fb4c 	bl	8005d24 <HAL_TIM_IC_Start_IT>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002c0 	.word	0x200002c0
 8001694:	20000308 	.word	0x20000308
 8001698:	20000350 	.word	0x20000350
 800169c:	20000398 	.word	0x20000398

080016a0 <SR04_Start>:
void SR04_Start()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <SR04_Start+0x7c>)
 80016aa:	f002 fd9f 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2102      	movs	r1, #2
 80016b2:	481b      	ldr	r0, [pc, #108]	; (8001720 <SR04_Start+0x80>)
 80016b4:	f002 fd9a 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <SR04_Start+0x80>)
 80016c0:	f002 fd94 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <SR04_Start+0x7c>)
 80016ca:	f002 fd8f 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f001 fe42 	bl	8003358 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2108      	movs	r1, #8
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <SR04_Start+0x7c>)
 80016da:	f002 fd87 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <SR04_Start+0x80>)
 80016e4:	f002 fd82 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <SR04_Start+0x80>)
 80016f0:	f002 fd7c 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <SR04_Start+0x7c>)
 80016fa:	f002 fd77 	bl	80041ec <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <SR04_Start+0x84>)
 8001700:	2201      	movs	r2, #1
 8001702:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <SR04_Start+0x88>)
 8001706:	2201      	movs	r2, #1
 8001708:	731a      	strb	r2, [r3, #12]
	pulse3.rising_flag=1;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <SR04_Start+0x8c>)
 800170c:	2201      	movs	r2, #1
 800170e:	731a      	strb	r2, [r3, #12]
	pulse4.rising_flag=1;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <SR04_Start+0x90>)
 8001712:	2201      	movs	r2, #1
 8001714:	731a      	strb	r2, [r3, #12]
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40011000 	.word	0x40011000
 8001720:	40010c00 	.word	0x40010c00
 8001724:	20000180 	.word	0x20000180
 8001728:	20000190 	.word	0x20000190
 800172c:	200001a0 	.word	0x200001a0
 8001730:	200001b0 	.word	0x200001b0

08001734 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a7b      	ldr	r2, [pc, #492]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d138      	bne.n	80017b6 <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 8001744:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001746:	7b1b      	ldrb	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 800174c:	2100      	movs	r1, #0
 800174e:	4877      	ldr	r0, [pc, #476]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001750:	f004 fe6e 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800175a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 800175c:	4b73      	ldr	r3, [pc, #460]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020a 	bic.w	r2, r2, #10
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800177e:	2200      	movs	r2, #0
 8001780:	731a      	strb	r2, [r3, #12]
 8001782:	e018      	b.n	80017b6 <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8001784:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020a 	bic.w	r2, r2, #10
 8001792:	621a      	str	r2, [r3, #32]
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b64      	ldr	r3, [pc, #400]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a12      	ldr	r2, [r2, #32]
 800179e:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 80017a0:	2100      	movs	r1, #0
 80017a2:	4862      	ldr	r0, [pc, #392]	; (800192c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80017a4:	f004 fe44 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80017ae:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d138      	bne.n	8001830 <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x204>)
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01b      	beq.n	80017fe <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	485a      	ldr	r0, [pc, #360]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017ca:	f004 fe31 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x204>)
 80017d4:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 80017d6:	4b57      	ldr	r3, [pc, #348]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a1a      	ldr	r2, [r3, #32]
 80017dc:	4b55      	ldr	r3, [pc, #340]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e4:	621a      	str	r2, [r3, #32]
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	4b51      	ldr	r3, [pc, #324]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f4:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 80017f6:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x204>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	731a      	strb	r2, [r3, #12]
 80017fc:	e018      	b.n	8001830 <HAL_TIM_IC_CaptureCallback+0xfc>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 80017fe:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b48      	ldr	r3, [pc, #288]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a12      	ldr	r2, [r2, #32]
 8001818:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 800181a:	2108      	movs	r1, #8
 800181c:	4845      	ldr	r0, [pc, #276]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x200>)
 800181e:	f004 fe07 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001828:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x204>)
 800182c:	2201      	movs	r2, #1
 800182e:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim4)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a42      	ldr	r2, [pc, #264]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d138      	bne.n	80018aa <HAL_TIM_IC_CaptureCallback+0x176>
	{
		if(pulse3.rising_flag)
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800183a:	7b1b      	ldrb	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <HAL_TIM_IC_CaptureCallback+0x144>
		{
			pulse3.start = HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_3);
 8001840:	2108      	movs	r1, #8
 8001842:	483e      	ldr	r0, [pc, #248]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001844:	f004 fdf4 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800184e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800185e:	621a      	str	r2, [r3, #32]
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186e:	621a      	str	r2, [r3, #32]
			pulse3.rising_flag = 0;
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001872:	2200      	movs	r2, #0
 8001874:	731a      	strb	r2, [r3, #12]
 8001876:	e018      	b.n	80018aa <HAL_TIM_IC_CaptureCallback+0x176>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a12      	ldr	r2, [r2, #32]
 8001892:	621a      	str	r2, [r3, #32]
			pulse3.end = HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_3);
 8001894:	2108      	movs	r1, #8
 8001896:	4829      	ldr	r0, [pc, #164]	; (800193c <HAL_TIM_IC_CaptureCallback+0x208>)
 8001898:	f004 fdca 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80018a2:	805a      	strh	r2, [r3, #2]
			pulse3.rising_flag = 1;
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim5)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a25      	ldr	r2, [pc, #148]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d138      	bne.n	8001924 <HAL_TIM_IC_CaptureCallback+0x1f0>
	{
		if(pulse4.rising_flag)
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x214>)
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01b      	beq.n	80018f2 <HAL_TIM_IC_CaptureCallback+0x1be>
		{
			pulse4.start = HAL_TIM_ReadCapturedValue(&htim5,TIM_CHANNEL_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	4821      	ldr	r0, [pc, #132]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018be:	f004 fdb7 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x214>)
 80018c8:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_FALLING);
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	621a      	str	r2, [r3, #32]
			pulse4.rising_flag = 0;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x214>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	731a      	strb	r2, [r3, #12]
			pulse4.end = HAL_TIM_ReadCapturedValue(&htim5,TIM_CHANNEL_2);
			pulse4.rising_flag = 1;
		}
	}

}
 80018f0:	e018      	b.n	8001924 <HAL_TIM_IC_CaptureCallback+0x1f0>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a12      	ldr	r2, [r2, #32]
 800190c:	621a      	str	r2, [r3, #32]
			pulse4.end = HAL_TIM_ReadCapturedValue(&htim5,TIM_CHANNEL_2);
 800190e:	2104      	movs	r1, #4
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001912:	f004 fd8d 	bl	8006430 <HAL_TIM_ReadCapturedValue>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x214>)
 800191c:	805a      	strh	r2, [r3, #2]
			pulse4.rising_flag = 1;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001920:	2201      	movs	r2, #1
 8001922:	731a      	strb	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002c0 	.word	0x200002c0
 8001930:	20000180 	.word	0x20000180
 8001934:	20000308 	.word	0x20000308
 8001938:	20000190 	.word	0x20000190
 800193c:	20000350 	.word	0x20000350
 8001940:	200001a0 	.word	0x200001a0
 8001944:	20000398 	.word	0x20000398
 8001948:	200001b0 	.word	0x200001b0

0800194c <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	885a      	ldrh	r2, [r3, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	885a      	ldrh	r2, [r3, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	809a      	strh	r2, [r3, #4]
 8001970:	e00b      	b.n	800198a <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	885a      	ldrh	r2, [r3, #2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001982:	3310      	adds	r3, #16
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a0 	bl	8000cd4 <__aeabi_i2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4910      	ldr	r1, [pc, #64]	; (80019d8 <SR04_Calculate+0x8c>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f9ef 	bl	8000d7c <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <SR04_Calculate+0x90>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f9ea 	bl	8000d7c <__aeabi_fmul>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa98 	bl	8000ee4 <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	490a      	ldr	r1, [pc, #40]	; (80019e0 <SR04_Calculate+0x94>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa93 	bl	8000ee4 <__aeabi_fdiv>
 80019be:	4603      	mov	r3, r0
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <SR04_Calculate+0x94>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa8e 	bl	8000ee4 <__aeabi_fdiv>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	43aa0000 	.word	0x43aa0000
 80019dc:	42c80000 	.word	0x42c80000
 80019e0:	447a0000 	.word	0x447a0000

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_DMA_Init+0x48>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <MX_DMA_Init+0x48>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MX_DMA_Init+0x48>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200f      	movs	r0, #15
 8001a08:	f001 fda1 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f001 fdba 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2010      	movs	r0, #16
 8001a18:	f001 fd99 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a1c:	2010      	movs	r0, #16
 8001a1e:	f001 fdb2 	bl	8003586 <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a30      	ldr	r2, [pc, #192]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_GPIO_Init+0xf4>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2188      	movs	r1, #136	; 0x88
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <MX_GPIO_Init+0xf8>)
 8001aaa:	f002 fb9f 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <MX_GPIO_Init+0xfc>)
 8001ab4:	f002 fb9a 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f240 2102 	movw	r1, #514	; 0x202
 8001abe:	481c      	ldr	r0, [pc, #112]	; (8001b30 <MX_GPIO_Init+0x100>)
 8001ac0:	f002 fb94 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001ac4:	2388      	movs	r3, #136	; 0x88
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_GPIO_Init+0xf8>)
 8001adc:	f002 f9f2 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_GPIO_Init+0xfc>)
 8001af8:	f002 f9e4 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8001afc:	f240 2302 	movw	r3, #514	; 0x202
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_GPIO_Init+0x100>)
 8001b16:	f002 f9d5 	bl	8003ec4 <HAL_GPIO_Init>

}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00

08001b34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f002 fb6d 	bl	8004250 <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 fb01 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200001c0 	.word	0x200001c0
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	00061a80 	.word	0x00061a80

08001b90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_I2C_MspInit+0x70>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d123      	bne.n	8001bf8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_I2C_MspInit+0x78>)
 8001bdc:	f002 f972 	bl	8003ec4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_I2C_MspInit+0x74>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <distance_Calculate>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void distance_Calculate()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <distance_Calculate+0x20>)
 8001c12:	f7ff fe9b 	bl	800194c <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001c16:	4806      	ldr	r0, [pc, #24]	; (8001c30 <distance_Calculate+0x24>)
 8001c18:	f7ff fe98 	bl	800194c <SR04_Calculate>
	SR04_Calculate(&pulse3);
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <distance_Calculate+0x28>)
 8001c1e:	f7ff fe95 	bl	800194c <SR04_Calculate>
	SR04_Calculate(&pulse4);
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <distance_Calculate+0x2c>)
 8001c24:	f7ff fe92 	bl	800194c <SR04_Calculate>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000180 	.word	0x20000180
 8001c30:	20000190 	.word	0x20000190
 8001c34:	200001a0 	.word	0x200001a0
 8001c38:	200001b0 	.word	0x200001b0

08001c3c <buzzer>:

void buzzer()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c40:	2120      	movs	r1, #32
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <buzzer+0x30>)
 8001c44:	f002 faea 	bl	800421c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001c48:	2064      	movs	r0, #100	; 0x64
 8001c4a:	f001 fb85 	bl	8003358 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c4e:	2120      	movs	r1, #32
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <buzzer+0x30>)
 8001c52:	f002 fae3 	bl	800421c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001c56:	2064      	movs	r0, #100	; 0x64
 8001c58:	f001 fb7e 	bl	8003358 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2120      	movs	r1, #32
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <buzzer+0x30>)
 8001c62:	f002 fac3 	bl	80041ec <HAL_GPIO_WritePin>

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40010800 	.word	0x40010800

08001c70 <checksum>:

uint8_t checksum(uint8_t* data, uint8_t len) {
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	73bb      	strb	r3, [r7, #14]
 8001c84:	e009      	b.n	8001c9a <checksum+0x2a>
       crc += data[i];
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4413      	add	r3, r2
 8001c92:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73bb      	strb	r3, [r7, #14]
 8001c9a:	7bba      	ldrb	r2, [r7, #14]
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <checksum+0x16>
    }
    return crc;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	e00b      	b.n	8001cd6 <HostMessageParse+0x26>
	{
		data[i] = receiveBytes[i];
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	3318      	adds	r3, #24
 8001cca:	443b      	add	r3, r7
 8001ccc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d9f0      	bls.n	8001cbe <HostMessageParse+0xe>
	}
	uint8_t checking = checksum(data,8);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffc4 	bl	8001c70 <checksum>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	7dba      	ldrb	r2, [r7, #22]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d117      	bne.n	8001d24 <HostMessageParse+0x74>
	{
		motors.LeftID = data[1];
 8001cf4:	7b7a      	ldrb	r2, [r7, #13]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HostMessageParse+0x88>)
 8001cf8:	701a      	strb	r2, [r3, #0]
		motors.LeftSpeed = (data[2] << 8) | data[3];
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HostMessageParse+0x88>)
 8001d0a:	805a      	strh	r2, [r3, #2]
		motors.RightID = data[4];
 8001d0c:	7c3a      	ldrb	r2, [r7, #16]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HostMessageParse+0x88>)
 8001d10:	705a      	strb	r2, [r3, #1]
		motors.RightSpeed = (data[5] << 8) | data[6];
 8001d12:	7c7b      	ldrb	r3, [r7, #17]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	7cbb      	ldrb	r3, [r7, #18]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HostMessageParse+0x88>)
 8001d22:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8001d24:	2204      	movs	r2, #4
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f005 fedb 	bl	8007ae4 <memset>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000238 	.word	0x20000238

08001d3c <SendToHost>:

void SendToHost(struct motor_sensor_t* wheelsensor)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	uint8_t sendData[30];
	sendData[0] = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	723b      	strb	r3, [r7, #8]
	sendData[1] = wheelsensor->leftii;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	727b      	strb	r3, [r7, #9]
	sendData[2] = ((wheelsensor->LeftVelocity)>>8) & 0xFF;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d54:	121b      	asrs	r3, r3, #8
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	72bb      	strb	r3, [r7, #10]
	sendData[3] = wheelsensor->LeftVelocity & 0xFF;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	72fb      	strb	r3, [r7, #11]
	sendData[4] = wheelsensor->reightii;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	733b      	strb	r3, [r7, #12]
	sendData[5] = ((wheelsensor->RightVelocity)>>8) & 0xFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d72:	121b      	asrs	r3, r3, #8
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	737b      	strb	r3, [r7, #13]
	sendData[6] = wheelsensor->RightVelocity & 0xFF;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	73bb      	strb	r3, [r7, #14]
	sendData[7] = (MPU6050.Accel_X_RAW >> 8) & 0xFF;
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <SendToHost+0x198>)
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	121b      	asrs	r3, r3, #8
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	73fb      	strb	r3, [r7, #15]
	sendData[8] = MPU6050.Accel_X_RAW & 0XFF;
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <SendToHost+0x198>)
 8001d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	743b      	strb	r3, [r7, #16]
	sendData[9] = (MPU6050.Accel_Y_RAW >> 8) & 0XFF;
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <SendToHost+0x198>)
 8001d9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da2:	121b      	asrs	r3, r3, #8
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	747b      	strb	r3, [r7, #17]
	sendData[10] = MPU6050.Accel_Y_RAW & 0xFF;
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <SendToHost+0x198>)
 8001dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	74bb      	strb	r3, [r7, #18]
	sendData[11] = (MPU6050.Accel_Z_RAW >> 8) & 0xFF;
 8001db4:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <SendToHost+0x198>)
 8001db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dba:	121b      	asrs	r3, r3, #8
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	74fb      	strb	r3, [r7, #19]
	sendData[12] = MPU6050.Accel_Z_RAW & 0xFF;
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <SendToHost+0x198>)
 8001dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	753b      	strb	r3, [r7, #20]
	sendData[13] = (MPU6050.Gyro_X_RAW >> 8) & 0XFF;
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <SendToHost+0x198>)
 8001dce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001dd2:	121b      	asrs	r3, r3, #8
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	757b      	strb	r3, [r7, #21]
	sendData[14] = MPU6050.Gyro_X_RAW & 0xFF;
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <SendToHost+0x198>)
 8001ddc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	75bb      	strb	r3, [r7, #22]
	sendData[15] = (MPU6050.Gyro_Y_RAW >> 8) & 0XFF;
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <SendToHost+0x198>)
 8001de6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001dea:	121b      	asrs	r3, r3, #8
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	75fb      	strb	r3, [r7, #23]
	sendData[16] = MPU6050.Gyro_Y_RAW & 0xFF;
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <SendToHost+0x198>)
 8001df4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	763b      	strb	r3, [r7, #24]
	sendData[17] = (MPU6050.Gyro_Z_RAW >> 8) & 0XFF;
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <SendToHost+0x198>)
 8001dfe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001e02:	121b      	asrs	r3, r3, #8
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	767b      	strb	r3, [r7, #25]
	sendData[18] = MPU6050.Gyro_Z_RAW & 0xFF;
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <SendToHost+0x198>)
 8001e0c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	76bb      	strb	r3, [r7, #26]
	sendData[19] = (((int)pulse.distance) >> 8) & 0xFF;
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <SendToHost+0x19c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f8ff 	bl	800101c <__aeabi_f2iz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	121b      	asrs	r3, r3, #8
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	76fb      	strb	r3, [r7, #27]
	sendData[20] = ((int)pulse.distance) & 0xFF;
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <SendToHost+0x19c>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f8f6 	bl	800101c <__aeabi_f2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	773b      	strb	r3, [r7, #28]
	sendData[21] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <SendToHost+0x1a0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f8ee 	bl	800101c <__aeabi_f2iz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	121b      	asrs	r3, r3, #8
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	777b      	strb	r3, [r7, #29]
	sendData[22] = ((int)pulse2.distance) & 0xFF;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <SendToHost+0x1a0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f8e5 	bl	800101c <__aeabi_f2iz>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	77bb      	strb	r3, [r7, #30]
	sendData[23] = (((int)pulse3.distance) >> 8) & 0xFF;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <SendToHost+0x1a4>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f8dd 	bl	800101c <__aeabi_f2iz>
 8001e62:	4603      	mov	r3, r0
 8001e64:	121b      	asrs	r3, r3, #8
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	77fb      	strb	r3, [r7, #31]
	sendData[24] = ((int)pulse3.distance) & 0xFF;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <SendToHost+0x1a4>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f8d4 	bl	800101c <__aeabi_f2iz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f887 3020 	strb.w	r3, [r7, #32]
	sendData[25] = (((int)pulse4.distance) >> 8) & 0xFF;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <SendToHost+0x1a8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f8cb 	bl	800101c <__aeabi_f2iz>
 8001e86:	4603      	mov	r3, r0
 8001e88:	121b      	asrs	r3, r3, #8
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	sendData[26] = ((int)pulse4.distance) & 0xFF;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <SendToHost+0x1a8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f8c1 	bl	800101c <__aeabi_f2iz>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	sendData[27] = checksum(sendData, 28);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	211c      	movs	r1, #28
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fee1 	bl	8001c70 <checksum>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_UART_Transmit(&huart1, sendData, 28, HAL_MAX_DELAY);
 8001eb4:	f107 0108 	add.w	r1, r7, #8
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	221c      	movs	r2, #28
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <SendToHost+0x1ac>)
 8001ec0:	f004 fe3a 	bl	8006b38 <HAL_UART_Transmit>
	HAL_Delay(200);
 8001ec4:	20c8      	movs	r0, #200	; 0xc8
 8001ec6:	f001 fa47 	bl	8003358 <HAL_Delay>
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000240 	.word	0x20000240
 8001ed8:	20000180 	.word	0x20000180
 8001edc:	20000190 	.word	0x20000190
 8001ee0:	200001a0 	.word	0x200001a0
 8001ee4:	200001b0 	.word	0x200001b0
 8001ee8:	200003e0 	.word	0x200003e0

08001eec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d10e      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_UART_RxCpltCallback+0x114>)
 8001efe:	4a41      	ldr	r2, [pc, #260]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f04:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes);
 8001f08:	483d      	ldr	r0, [pc, #244]	; (8002000 <HAL_UART_RxCpltCallback+0x114>)
 8001f0a:	f7ff fed1 	bl	8001cb0 <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001f0e:	2208      	movs	r2, #8
 8001f10:	493c      	ldr	r1, [pc, #240]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f12:	483a      	ldr	r0, [pc, #232]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f14:	f004 fe93 	bl	8006c3e <HAL_UART_Receive_DMA>
				}
			}
			memset(responseBuffer, 0, sizeof(responseBuffer));
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
		}
}
 8001f18:	e06c      	b.n	8001ff4 <HAL_UART_RxCpltCallback+0x108>
	else if(huart==&huart2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d168      	bne.n	8001ff4 <HAL_UART_RxCpltCallback+0x108>
			short len = strlen(responseBuffer);
 8001f22:	483a      	ldr	r0, [pc, #232]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f24:	f7fe f980 	bl	8000228 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	847b      	strh	r3, [r7, #34]	; 0x22
			short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001f2c:	2319      	movs	r3, #25
 8001f2e:	843b      	strh	r3, [r7, #32]
			for(int i=0;i<arraysz;i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e04f      	b.n	8001fd6 <HAL_UART_RxCpltCallback+0xea>
				if(responseBuffer[i]==motors.LeftID)
 8001f36:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_UART_RxCpltCallback+0x124>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11e      	bne.n	8001f84 <HAL_UART_RxCpltCallback+0x98>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	4a30      	ldr	r2, [pc, #192]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f4a:	441a      	add	r2, r3
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	6810      	ldr	r0, [r2, #0]
 8001f52:	6851      	ldr	r1, [r2, #4]
 8001f54:	c303      	stmia	r3!, {r0, r1}
 8001f56:	8912      	ldrh	r2, [r2, #8]
 8001f58:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f960 	bl	8001224 <checkCRC>
 8001f64:	4603      	mov	r3, r0
 8001f66:	77bb      	strb	r3, [r7, #30]
					if(checking)
 8001f68:	7fbb      	ldrb	r3, [r7, #30]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d030      	beq.n	8001fd0 <HAL_UART_RxCpltCallback+0xe4>
						memcpy(responseBufferL, &responseBuffer[i], 10);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f72:	441a      	add	r2, r3
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_UART_RxCpltCallback+0x128>)
 8001f76:	6810      	ldr	r0, [r2, #0]
 8001f78:	6851      	ldr	r1, [r2, #4]
 8001f7a:	6018      	str	r0, [r3, #0]
 8001f7c:	6059      	str	r1, [r3, #4]
 8001f7e:	8912      	ldrh	r2, [r2, #8]
 8001f80:	811a      	strh	r2, [r3, #8]
 8001f82:	e025      	b.n	8001fd0 <HAL_UART_RxCpltCallback+0xe4>
				else if(responseBuffer[i]==motors.RightID)
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	4413      	add	r3, r2
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_UART_RxCpltCallback+0x124>)
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d11d      	bne.n	8001fd0 <HAL_UART_RxCpltCallback+0xe4>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001f98:	441a      	add	r2, r3
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	6810      	ldr	r0, [r2, #0]
 8001fa0:	6851      	ldr	r1, [r2, #4]
 8001fa2:	c303      	stmia	r3!, {r0, r1}
 8001fa4:	8912      	ldrh	r2, [r2, #8]
 8001fa6:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001fa8:	f107 0308 	add.w	r3, r7, #8
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f939 	bl	8001224 <checkCRC>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	77fb      	strb	r3, [r7, #31]
					if(checking)
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_UART_RxCpltCallback+0xe4>
						memcpy(responseBufferH, &responseBuffer[i], 10);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001fc0:	441a      	add	r2, r3
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_UART_RxCpltCallback+0x12c>)
 8001fc4:	6810      	ldr	r0, [r2, #0]
 8001fc6:	6851      	ldr	r1, [r2, #4]
 8001fc8:	6018      	str	r0, [r3, #0]
 8001fca:	6059      	str	r1, [r3, #4]
 8001fcc:	8912      	ldrh	r2, [r2, #8]
 8001fce:	811a      	strh	r2, [r3, #8]
			for(int i=0;i<arraysz;i++)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbaa      	blt.n	8001f36 <HAL_UART_RxCpltCallback+0x4a>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8001fe0:	2219      	movs	r2, #25
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001fe6:	f005 fd7d 	bl	8007ae4 <memset>
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001fea:	2219      	movs	r2, #25
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <HAL_UART_RxCpltCallback+0x120>)
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001ff0:	f004 fe25 	bl	8006c3e <HAL_UART_Receive_DMA>
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200003e0 	.word	0x200003e0
 8002000:	20000214 	.word	0x20000214
 8002004:	2000021c 	.word	0x2000021c
 8002008:	20000428 	.word	0x20000428
 800200c:	20000128 	.word	0x20000128
 8002010:	20000238 	.word	0x20000238
 8002014:	20000150 	.word	0x20000150
 8002018:	20000144 	.word	0x20000144

0800201c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002020:	f001 f938 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002024:	f000 f868 	bl	80020f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002028:	f7ff fd02 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 800202c:	f7ff fcda 	bl	80019e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002030:	f000 ffce 	bl	8002fd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002034:	f000 fff6 	bl	8003024 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002038:	f7ff fd7c 	bl	8001b34 <MX_I2C1_Init>
  MX_TIM2_Init();
 800203c:	f000 fd18 	bl	8002a70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002040:	f000 fd86 	bl	8002b50 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002044:	f000 fdf4 	bl	8002c30 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002048:	f000 fe46 	bl	8002cd8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  SR04_Init();
 800204c:	f7ff fb00 	bl	8001650 <SR04_Init>
  while (MPU6050_Init(&hi2c1) == 1)
 8002050:	e00d      	b.n	800206e <main+0x52>
    {
  	  sprintf(message,"Device not found. Retry...\n");
 8002052:	4921      	ldr	r1, [pc, #132]	; (80020d8 <main+0xbc>)
 8002054:	4821      	ldr	r0, [pc, #132]	; (80020dc <main+0xc0>)
 8002056:	f005 fd25 	bl	8007aa4 <siprintf>
  	  HAL_UART_Transmit(&huart1, message, sizeof(message), HAL_MAX_DELAY);
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	2214      	movs	r2, #20
 8002060:	491e      	ldr	r1, [pc, #120]	; (80020dc <main+0xc0>)
 8002062:	481f      	ldr	r0, [pc, #124]	; (80020e0 <main+0xc4>)
 8002064:	f004 fd68 	bl	8006b38 <HAL_UART_Transmit>
  	  HAL_Delay(100);
 8002068:	2064      	movs	r0, #100	; 0x64
 800206a:	f001 f975 	bl	8003358 <HAL_Delay>
  while (MPU6050_Init(&hi2c1) == 1)
 800206e:	481d      	ldr	r0, [pc, #116]	; (80020e4 <main+0xc8>)
 8002070:	f000 f88c 	bl	800218c <MPU6050_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d0eb      	beq.n	8002052 <main+0x36>
    };
  buzzer();
 800207a:	f7ff fddf 	bl	8001c3c <buzzer>
  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 800207e:	2208      	movs	r2, #8
 8002080:	4919      	ldr	r1, [pc, #100]	; (80020e8 <main+0xcc>)
 8002082:	4817      	ldr	r0, [pc, #92]	; (80020e0 <main+0xc4>)
 8002084:	f004 fddb 	bl	8006c3e <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SR04_Start();
 8002088:	f7ff fb0a 	bl	80016a0 <SR04_Start>
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <main+0xd0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <main+0xd0>)
 8002094:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002098:	2200      	movs	r2, #0
 800209a:	4619      	mov	r1, r3
 800209c:	f7ff fa76 	bl	800158c <setVelocity>
	  HAL_Delay(4);
 80020a0:	2004      	movs	r0, #4
 80020a2:	f001 f959 	bl	8003358 <HAL_Delay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <main+0xd0>)
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	4618      	mov	r0, r3
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <main+0xd0>)
 80020ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff fa69 	bl	800158c <setVelocity>
	  receiveFromBuffer();
 80020ba:	f7ff f8df 	bl	800127c <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor);
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <main+0xd4>)
 80020c0:	f7ff f91a 	bl	80012f8 <Parse_DMA_All>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80020c4:	490b      	ldr	r1, [pc, #44]	; (80020f4 <main+0xd8>)
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <main+0xc8>)
 80020c8:	f000 f8ba 	bl	8002240 <MPU6050_Read_All>
	  distance_Calculate();
 80020cc:	f7ff fd9e 	bl	8001c0c <distance_Calculate>
	  SendToHost(&wheelsensor);
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <main+0xd4>)
 80020d2:	f7ff fe33 	bl	8001d3c <SendToHost>
  {
 80020d6:	e7d7      	b.n	8002088 <main+0x6c>
 80020d8:	08008b68 	.word	0x08008b68
 80020dc:	20000224 	.word	0x20000224
 80020e0:	200003e0 	.word	0x200003e0
 80020e4:	200001c0 	.word	0x200001c0
 80020e8:	2000021c 	.word	0x2000021c
 80020ec:	20000238 	.word	0x20000238
 80020f0:	2000015c 	.word	0x2000015c
 80020f4:	20000240 	.word	0x20000240

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b090      	sub	sp, #64	; 0x40
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	2228      	movs	r2, #40	; 0x28
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fcec 	bl	8007ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800211e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002128:	2301      	movs	r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212c:	2302      	movs	r3, #2
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002136:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	4618      	mov	r0, r3
 8002142:	f003 f8df 	bl	8005304 <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800214c:	f000 f819 	bl	8002182 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002150:	230f      	movs	r3, #15
 8002152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002154:	2302      	movs	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800215c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2102      	movs	r1, #2
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fb4c 	bl	8005808 <HAL_RCC_ClockConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002176:	f000 f804 	bl	8002182 <Error_Handler>
  }
}
 800217a:	bf00      	nop
 800217c:	3740      	adds	r7, #64	; 0x40
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002186:	b672      	cpsid	i
}
 8002188:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218a:	e7fe      	b.n	800218a <Error_Handler+0x8>

0800218c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af04      	add	r7, sp, #16
 8002192:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002194:	2364      	movs	r3, #100	; 0x64
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	2301      	movs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f107 030f 	add.w	r3, r7, #15
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	2275      	movs	r2, #117	; 0x75
 80021a6:	21d0      	movs	r1, #208	; 0xd0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f002 fa8f 	bl	80046cc <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b68      	cmp	r3, #104	; 0x68
 80021b2:	d13d      	bne.n	8002230 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80021b8:	2364      	movs	r3, #100	; 0x64
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	2301      	movs	r3, #1
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	f107 030e 	add.w	r3, r7, #14
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	226b      	movs	r2, #107	; 0x6b
 80021ca:	21d0      	movs	r1, #208	; 0xd0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f002 f983 	bl	80044d8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80021d2:	2307      	movs	r3, #7
 80021d4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	f107 030e 	add.w	r3, r7, #14
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2219      	movs	r2, #25
 80021e8:	21d0      	movs	r1, #208	; 0xd0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f002 f974 	bl	80044d8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 80021f0:	2318      	movs	r3, #24
 80021f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021f4:	2364      	movs	r3, #100	; 0x64
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f107 030e 	add.w	r3, r7, #14
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	221c      	movs	r2, #28
 8002206:	21d0      	movs	r1, #208	; 0xd0
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f002 f965 	bl	80044d8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 800220e:	2318      	movs	r3, #24
 8002210:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002212:	2364      	movs	r3, #100	; 0x64
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	f107 030e 	add.w	r3, r7, #14
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	221b      	movs	r2, #27
 8002224:	21d0      	movs	r1, #208	; 0xd0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f002 f956 	bl	80044d8 <HAL_I2C_Mem_Write>
        return 0;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <MPU6050_Init+0xa6>
    }
    return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	0000      	movs	r0, r0
 800223c:	0000      	movs	r0, r0
	...

08002240 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b094      	sub	sp, #80	; 0x50
 8002246:	af04      	add	r7, sp, #16
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800224c:	2364      	movs	r3, #100	; 0x64
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	230e      	movs	r3, #14
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	223b      	movs	r2, #59	; 0x3b
 800225e:	21d0      	movs	r1, #208	; 0xd0
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 fa33 	bl	80046cc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002266:	7a3b      	ldrb	r3, [r7, #8]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b21a      	sxth	r2, r3
 800226c:	7a7b      	ldrb	r3, [r7, #9]
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21a      	sxth	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002278:	7abb      	ldrb	r3, [r7, #10]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b21a      	sxth	r2, r3
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21a      	sxth	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800228a:	7b3b      	ldrb	r3, [r7, #12]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800229c:	7bbb      	ldrb	r3, [r7, #14]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80022aa:	7c3b      	ldrb	r3, [r7, #16]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	7c7b      	ldrb	r3, [r7, #17]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80022bc:	7cbb      	ldrb	r3, [r7, #18]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80022ce:	7d3b      	ldrb	r3, [r7, #20]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	7d7b      	ldrb	r3, [r7, #21]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21a      	sxth	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8f8 	bl	80004dc <__aeabi_i2d>
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b95      	ldr	r3, [pc, #596]	; (8002548 <MPU6050_Read_All+0x308>)
 80022f2:	f7fe fa87 	bl	8000804 <__aeabi_ddiv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f8e8 	bl	80004dc <__aeabi_i2d>
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <MPU6050_Read_All+0x308>)
 8002312:	f7fe fa77 	bl	8000804 <__aeabi_ddiv>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8d8 	bl	80004dc <__aeabi_i2d>
 800232c:	a380      	add	r3, pc, #512	; (adr r3, 8002530 <MPU6050_Read_All+0x2f0>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe fa67 	bl	8000804 <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002340:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fcc5 	bl	8000cd4 <__aeabi_i2f>
 800234a:	4603      	mov	r3, r0
 800234c:	497f      	ldr	r1, [pc, #508]	; (800254c <MPU6050_Read_All+0x30c>)
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fdc8 	bl	8000ee4 <__aeabi_fdiv>
 8002354:	4603      	mov	r3, r0
 8002356:	497e      	ldr	r1, [pc, #504]	; (8002550 <MPU6050_Read_All+0x310>)
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fc07 	bl	8000b6c <__addsf3>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8b5 	bl	80004dc <__aeabi_i2d>
 8002372:	a371      	add	r3, pc, #452	; (adr r3, 8002538 <MPU6050_Read_All+0x2f8>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe fa44 	bl	8000804 <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8a5 	bl	80004dc <__aeabi_i2d>
 8002392:	a369      	add	r3, pc, #420	; (adr r3, 8002538 <MPU6050_Read_All+0x2f8>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe fa34 	bl	8000804 <__aeabi_ddiv>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f895 	bl	80004dc <__aeabi_i2d>
 80023b2:	a361      	add	r3, pc, #388	; (adr r3, 8002538 <MPU6050_Read_All+0x2f8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe fa24 	bl	8000804 <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80023c6:	f000 ffbd 	bl	8003344 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <MPU6050_Read_All+0x314>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f872 	bl	80004bc <__aeabi_ui2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <MPU6050_Read_All+0x318>)
 80023de:	f7fe fa11 	bl	8000804 <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80023ea:	f000 ffab 	bl	8003344 <HAL_GetTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <MPU6050_Read_All+0x314>)
 80023f2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fa:	461a      	mov	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f85e 	bl	80004dc <__aeabi_i2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f005 ffef 	bl	800840a <sqrt>
 800242c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800243c:	f7fe fb20 	bl	8000a80 <__aeabi_dcmpeq>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d119      	bne.n	800247a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f845 	bl	80004dc <__aeabi_i2d>
 8002452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002456:	f7fe f9d5 	bl	8000804 <__aeabi_ddiv>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f005 fff9 	bl	8008458 <atan>
 8002466:	a336      	add	r3, pc, #216	; (adr r3, 8002540 <MPU6050_Read_All+0x300>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fe f8a0 	bl	80005b0 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002478:	e005      	b.n	8002486 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	425b      	negs	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f824 	bl	80004dc <__aeabi_i2d>
 8002494:	4682      	mov	sl, r0
 8002496:	468b      	mov	fp, r1
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f81c 	bl	80004dc <__aeabi_i2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4650      	mov	r0, sl
 80024aa:	4659      	mov	r1, fp
 80024ac:	f005 ffab 	bl	8008406 <atan2>
 80024b0:	a323      	add	r3, pc, #140	; (adr r3, 8002540 <MPU6050_Read_All+0x300>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f87b 	bl	80005b0 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <MPU6050_Read_All+0x31c>)
 80024c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024cc:	f7fe fae2 	bl	8000a94 <__aeabi_dcmplt>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <MPU6050_Read_All+0x2ac>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <MPU6050_Read_All+0x320>)
 80024e2:	f7fe faf5 	bl	8000ad0 <__aeabi_dcmpgt>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d114      	bne.n	8002516 <MPU6050_Read_All+0x2d6>
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MPU6050_Read_All+0x320>)
 80024f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024f6:	f7fe faeb 	bl	8000ad0 <__aeabi_dcmpgt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d033      	beq.n	8002568 <MPU6050_Read_All+0x328>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MPU6050_Read_All+0x31c>)
 800250c:	f7fe fac2 	bl	8000a94 <__aeabi_dcmplt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d028      	beq.n	8002568 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 8002516:	4913      	ldr	r1, [pc, #76]	; (8002564 <MPU6050_Read_All+0x324>)
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002526:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800252a:	e030      	b.n	800258e <MPU6050_Read_All+0x34e>
 800252c:	f3af 8000 	nop.w
 8002530:	00000000 	.word	0x00000000
 8002534:	40cc2900 	.word	0x40cc2900
 8002538:	00000000 	.word	0x00000000
 800253c:	40606000 	.word	0x40606000
 8002540:	1a63c1f8 	.word	0x1a63c1f8
 8002544:	404ca5dc 	.word	0x404ca5dc
 8002548:	40d00000 	.word	0x40d00000
 800254c:	43aa0000 	.word	0x43aa0000
 8002550:	42121eb8 	.word	0x42121eb8
 8002554:	200002b8 	.word	0x200002b8
 8002558:	408f4000 	.word	0x408f4000
 800255c:	c0568000 	.word	0xc0568000
 8002560:	40568000 	.word	0x40568000
 8002564:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800256e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002576:	e9cd 2300 	strd	r2, r3, [sp]
 800257a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257e:	481c      	ldr	r0, [pc, #112]	; (80025f0 <MPU6050_Read_All+0x3b0>)
 8002580:	f000 f83c 	bl	80025fc <Kalman_getAngle>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002594:	4690      	mov	r8, r2
 8002596:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <MPU6050_Read_All+0x3b4>)
 80025a0:	4640      	mov	r0, r8
 80025a2:	4649      	mov	r1, r9
 80025a4:	f7fe fa94 	bl	8000ad0 <__aeabi_dcmpgt>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025b4:	4614      	mov	r4, r2
 80025b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025ce:	e9cd 2300 	strd	r2, r3, [sp]
 80025d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025d6:	4808      	ldr	r0, [pc, #32]	; (80025f8 <MPU6050_Read_All+0x3b8>)
 80025d8:	f000 f810 	bl	80025fc <Kalman_getAngle>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80025e6:	bf00      	nop
 80025e8:	3740      	adds	r7, #64	; 0x40
 80025ea:	46bd      	mov	sp, r7
 80025ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f0:	20000050 	.word	0x20000050
 80025f4:	40568000 	.word	0x40568000
 80025f8:	20000008 	.word	0x20000008

080025fc <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	b092      	sub	sp, #72	; 0x48
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800260e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002612:	f7fd fe15 	bl	8000240 <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002628:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800262c:	f7fd ffc0 	bl	80005b0 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fd fe04 	bl	8000244 <__adddf3>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002652:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002656:	f7fd ffab 	bl	80005b0 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002668:	f7fd fdea 	bl	8000240 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800267a:	f7fd fde1 	bl	8000240 <__aeabi_dsub>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd fdda 	bl	8000244 <__adddf3>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800269c:	f7fd ff88 	bl	80005b0 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd fdcc 	bl	8000244 <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80026c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026c6:	f7fd ff73 	bl	80005b0 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd fdb5 	bl	8000240 <__aeabi_dsub>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80026ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026f0:	f7fd ff5e 	bl	80005b0 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	f7fd fda0 	bl	8000240 <__aeabi_dsub>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002716:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800271a:	f7fd ff49 	bl	80005b0 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f7fd fd8d 	bl	8000244 <__adddf3>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002740:	f7fd fd80 	bl	8000244 <__adddf3>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002752:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002756:	f7fe f855 	bl	8000804 <__aeabi_ddiv>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800276c:	f7fe f84a 	bl	8000804 <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800277e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002782:	f7fd fd5d 	bl	8000240 <__aeabi_dsub>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002798:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800279c:	f7fd ff08 	bl	80005b0 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd fd4c 	bl	8000244 <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80027bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027c4:	f7fd fef4 	bl	80005b0 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4620      	mov	r0, r4
 80027ce:	4629      	mov	r1, r5
 80027d0:	f7fd fd38 	bl	8000244 <__adddf3>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80027e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80027ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80027f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002800:	f7fd fed6 	bl	80005b0 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fd18 	bl	8000240 <__aeabi_dsub>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002820:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002824:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002828:	f7fd fec2 	bl	80005b0 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fd fd04 	bl	8000240 <__aeabi_dsub>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800284c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002850:	f7fd feae 	bl	80005b0 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	f7fd fcf0 	bl	8000240 <__aeabi_dsub>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002870:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002878:	f7fd fe9a 	bl	80005b0 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fcdc 	bl	8000240 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	3748      	adds	r7, #72	; 0x48
 800289e:	46bd      	mov	sp, r7
 80028a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080028a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_MspInit+0x5c>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_MspInit+0x5c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6193      	str	r3, [r2, #24]
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_MspInit+0x5c>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_MspInit+0x5c>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_MspInit+0x5c>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x5c>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_MspInit+0x60>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_MspInit+0x60>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294e:	f000 fce7 	bl	8003320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA1_Channel5_IRQHandler+0x10>)
 800295e:	f001 f847 	bl	80039f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000470 	.word	0x20000470

0800296c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <DMA1_Channel6_IRQHandler+0x10>)
 8002972:	f001 f83d 	bl	80039f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200004b4 	.word	0x200004b4

08002980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM2_IRQHandler+0x10>)
 8002986:	f003 fae7 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200002c0 	.word	0x200002c0

08002994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM3_IRQHandler+0x10>)
 800299a:	f003 fadd 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000308 	.word	0x20000308

080029a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM4_IRQHandler+0x10>)
 80029ae:	f003 fad3 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000350 	.word	0x20000350

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART1_IRQHandler+0x10>)
 80029c2:	f004 f961 	bl	8006c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200003e0 	.word	0x200003e0

080029d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART2_IRQHandler+0x10>)
 80029d6:	f004 f957 	bl	8006c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000428 	.word	0x20000428

080029e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <TIM5_IRQHandler+0x10>)
 80029ea:	f003 fab5 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000398 	.word	0x20000398

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a28:	f005 f864 	bl	8007af4 <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	220c      	movs	r2, #12
 8002a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e009      	b.n	8002a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <_sbrk+0x64>)
 8002a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	2000c000 	.word	0x2000c000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	200002bc 	.word	0x200002bc
 8002a60:	20000648 	.word	0x20000648

08002a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a76:	f107 0318 	add.w	r3, r7, #24
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a8e:	463b      	mov	r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002aa4:	2247      	movs	r2, #71	; 0x47
 8002aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac2:	4822      	ldr	r0, [pc, #136]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002ac4:	f003 f82e 	bl	8005b24 <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002ace:	f7ff fb58 	bl	8002182 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	4619      	mov	r1, r3
 8002ade:	481b      	ldr	r0, [pc, #108]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002ae0:	f003 fbde 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002aea:	f7ff fb4a 	bl	8002182 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002af0:	f003 f8c8 	bl	8005c84 <HAL_TIM_IC_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002afa:	f7ff fb42 	bl	8002182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480f      	ldr	r0, [pc, #60]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002b0e:	f003 ff45 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002b18:	f7ff fb33 	bl	8002182 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b20:	2301      	movs	r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_TIM2_Init+0xdc>)
 8002b34:	f003 fb18 	bl	8006168 <HAL_TIM_IC_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002b3e:	f7ff fb20 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200002c0 	.word	0x200002c0

08002b50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b6e:	463b      	mov	r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <MX_TIM3_Init+0xdc>)
 8002b7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b82:	2247      	movs	r2, #71	; 0x47
 8002b84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b8c:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba0:	4821      	ldr	r0, [pc, #132]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002ba2:	f002 ffbf 	bl	8005b24 <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002bac:	f7ff fae9 	bl	8002182 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	481a      	ldr	r0, [pc, #104]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002bbe:	f003 fb6f 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bc8:	f7ff fadb 	bl	8002182 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002bcc:	4816      	ldr	r0, [pc, #88]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002bce:	f003 f859 	bl	8005c84 <HAL_TIM_IC_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bd8:	f7ff fad3 	bl	8002182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4619      	mov	r1, r3
 8002bea:	480f      	ldr	r0, [pc, #60]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002bec:	f003 fed6 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002bf6:	f7ff fac4 	bl	8002182 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4805      	ldr	r0, [pc, #20]	; (8002c28 <MX_TIM3_Init+0xd8>)
 8002c12:	f003 faa9 	bl	8006168 <HAL_TIM_IC_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002c1c:	f7ff fab1 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c20:	bf00      	nop
 8002c22:	3728      	adds	r7, #40	; 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000308 	.word	0x20000308
 8002c2c:	40000400 	.word	0x40000400

08002c30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c40:	463b      	mov	r3, r7
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <MX_TIM4_Init+0xa4>)
 8002c50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c54:	2247      	movs	r2, #71	; 0x47
 8002c56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c72:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c74:	f003 f806 	bl	8005c84 <HAL_TIM_IC_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002c7e:	f7ff fa80 	bl	8002182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002c92:	f003 fe83 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c9c:	f7ff fa71 	bl	8002182 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	; (8002cd0 <MX_TIM4_Init+0xa0>)
 8002cb8:	f003 fa56 	bl	8006168 <HAL_TIM_IC_ConfigChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002cc2:	f7ff fa5e 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000350 	.word	0x20000350
 8002cd4:	40000800 	.word	0x40000800

08002cd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cde:	f107 0318 	add.w	r3, r7, #24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d04:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <MX_TIM5_Init+0xdc>)
 8002d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d0a:	2247      	movs	r2, #71	; 0x47
 8002d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d28:	4821      	ldr	r0, [pc, #132]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d2a:	f002 fefb 	bl	8005b24 <HAL_TIM_Base_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002d34:	f7ff fa25 	bl	8002182 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d3e:	f107 0318 	add.w	r3, r7, #24
 8002d42:	4619      	mov	r1, r3
 8002d44:	481a      	ldr	r0, [pc, #104]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d46:	f003 faab 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d50:	f7ff fa17 	bl	8002182 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002d54:	4816      	ldr	r0, [pc, #88]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d56:	f002 ff95 	bl	8005c84 <HAL_TIM_IC_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d60:	f7ff fa0f 	bl	8002182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4619      	mov	r1, r3
 8002d72:	480f      	ldr	r0, [pc, #60]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d74:	f003 fe12 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002d7e:	f7ff fa00 	bl	8002182 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d86:	2301      	movs	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d92:	463b      	mov	r3, r7
 8002d94:	2204      	movs	r2, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_TIM5_Init+0xd8>)
 8002d9a:	f003 f9e5 	bl	8006168 <HAL_TIM_IC_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002da4:	f7ff f9ed 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000398 	.word	0x20000398
 8002db4:	40000c00 	.word	0x40000c00

08002db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d13f      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	61d3      	str	r3, [r2, #28]
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4843      	ldr	r0, [pc, #268]	; (8002f2c <HAL_TIM_Base_MspInit+0x174>)
 8002e1e:	f001 f851 	bl	8003ec4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_TIM_Base_MspInit+0x178>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
 8002e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_TIM_Base_MspInit+0x178>)
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	201c      	movs	r0, #28
 8002e4c:	f000 fb7f 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e50:	201c      	movs	r0, #28
 8002e52:	f000 fb98 	bl	8003586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e56:	e062      	b.n	8002f1e <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a35      	ldr	r2, [pc, #212]	; (8002f34 <HAL_TIM_Base_MspInit+0x17c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d12c      	bne.n	8002ebc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	6193      	str	r3, [r2, #24]
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4824      	ldr	r0, [pc, #144]	; (8002f38 <HAL_TIM_Base_MspInit+0x180>)
 8002ea6:	f001 f80d 	bl	8003ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	201d      	movs	r0, #29
 8002eb0:	f000 fb4d 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eb4:	201d      	movs	r0, #29
 8002eb6:	f000 fb66 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 8002eba:	e030      	b.n	8002f1e <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM5)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_TIM_Base_MspInit+0x184>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d12b      	bne.n	8002f1e <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	61d3      	str	r3, [r2, #28]
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6193      	str	r3, [r2, #24]
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_TIM_Base_MspInit+0x170>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4808      	ldr	r0, [pc, #32]	; (8002f2c <HAL_TIM_Base_MspInit+0x174>)
 8002f0a:	f000 ffdb 	bl	8003ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2032      	movs	r0, #50	; 0x32
 8002f14:	f000 fb1b 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f18:	2032      	movs	r0, #50	; 0x32
 8002f1a:	f000 fb34 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3738      	adds	r7, #56	; 0x38
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010800 	.word	0x40010800
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	40000c00 	.word	0x40000c00

08002f40 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM4)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_TIM_IC_MspInit+0x84>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d12c      	bne.n	8002fba <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	61d3      	str	r3, [r2, #28]
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f7e:	f043 0308 	orr.w	r3, r3, #8
 8002f82:	6193      	str	r3, [r2, #24]
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_TIM_IC_MspInit+0x88>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <HAL_TIM_IC_MspInit+0x8c>)
 8002fa6:	f000 ff8d 	bl	8003ec4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	201e      	movs	r0, #30
 8002fb0:	f000 facd 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fb4:	201e      	movs	r0, #30
 8002fb6:	f000 fae6 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010c00 	.word	0x40010c00

08002fd0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <MX_USART1_UART_Init+0x50>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_USART1_UART_Init+0x4c>)
 8003008:	f003 fd46 	bl	8006a98 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003012:	f7ff f8b6 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200003e0 	.word	0x200003e0
 8003020:	40013800 	.word	0x40013800

08003024 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <MX_USART2_UART_Init+0x50>)
 800302c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 8003030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 800304a:	220c      	movs	r2, #12
 800304c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <MX_USART2_UART_Init+0x4c>)
 800305c:	f003 fd1c 	bl	8006a98 <HAL_UART_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003066:	f7ff f88c 	bl	8002182 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000428 	.word	0x20000428
 8003074:	40004400 	.word	0x40004400

08003078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a65      	ldr	r2, [pc, #404]	; (8003228 <HAL_UART_MspInit+0x1b0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d160      	bne.n	800315a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_UART_MspInit+0x1b4>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a63      	ldr	r2, [pc, #396]	; (800322c <HAL_UART_MspInit+0x1b4>)
 800309e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b61      	ldr	r3, [pc, #388]	; (800322c <HAL_UART_MspInit+0x1b4>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <HAL_UART_MspInit+0x1b4>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a5d      	ldr	r2, [pc, #372]	; (800322c <HAL_UART_MspInit+0x1b4>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b5b      	ldr	r3, [pc, #364]	; (800322c <HAL_UART_MspInit+0x1b4>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	4619      	mov	r1, r3
 80030dc:	4854      	ldr	r0, [pc, #336]	; (8003230 <HAL_UART_MspInit+0x1b8>)
 80030de:	f000 fef1 	bl	8003ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	4619      	mov	r1, r3
 80030f6:	484e      	ldr	r0, [pc, #312]	; (8003230 <HAL_UART_MspInit+0x1b8>)
 80030f8:	f000 fee4 	bl	8003ec4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 80030fe:	4a4e      	ldr	r2, [pc, #312]	; (8003238 <HAL_UART_MspInit+0x1c0>)
 8003100:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003108:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	4b49      	ldr	r3, [pc, #292]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003114:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003120:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003128:	2200      	movs	r2, #0
 800312a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800312c:	4841      	ldr	r0, [pc, #260]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 800312e:	f000 fa45 	bl	80035bc <HAL_DMA_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003138:	f7ff f823 	bl	8002182 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c
 8003142:	4a3c      	ldr	r2, [pc, #240]	; (8003234 <HAL_UART_MspInit+0x1bc>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2100      	movs	r1, #0
 800314c:	2025      	movs	r0, #37	; 0x25
 800314e:	f000 f9fe 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003152:	2025      	movs	r0, #37	; 0x25
 8003154:	f000 fa17 	bl	8003586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003158:	e062      	b.n	8003220 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a37      	ldr	r2, [pc, #220]	; (800323c <HAL_UART_MspInit+0x1c4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d15d      	bne.n	8003220 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003164:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_UART_MspInit+0x1b4>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4a30      	ldr	r2, [pc, #192]	; (800322c <HAL_UART_MspInit+0x1b4>)
 800316a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316e:	61d3      	str	r3, [r2, #28]
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_UART_MspInit+0x1b4>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_UART_MspInit+0x1b4>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_UART_MspInit+0x1b4>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_UART_MspInit+0x1b4>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003194:	2304      	movs	r3, #4
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	4619      	mov	r1, r3
 80031a6:	4822      	ldr	r0, [pc, #136]	; (8003230 <HAL_UART_MspInit+0x1b8>)
 80031a8:	f000 fe8c 	bl	8003ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031ac:	2308      	movs	r3, #8
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f107 0318 	add.w	r3, r7, #24
 80031bc:	4619      	mov	r1, r3
 80031be:	481c      	ldr	r0, [pc, #112]	; (8003230 <HAL_UART_MspInit+0x1b8>)
 80031c0:	f000 fe80 	bl	8003ec4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80031c4:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_UART_MspInit+0x1cc>)
 80031c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031f4:	4812      	ldr	r0, [pc, #72]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 80031f6:	f000 f9e1 	bl	80035bc <HAL_DMA_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003200:	f7fe ffbf 	bl	8002182 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_UART_MspInit+0x1c8>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	2026      	movs	r0, #38	; 0x26
 8003216:	f000 f99a 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800321a:	2026      	movs	r0, #38	; 0x26
 800321c:	f000 f9b3 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 8003220:	bf00      	nop
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40013800 	.word	0x40013800
 800322c:	40021000 	.word	0x40021000
 8003230:	40010800 	.word	0x40010800
 8003234:	20000470 	.word	0x20000470
 8003238:	40020058 	.word	0x40020058
 800323c:	40004400 	.word	0x40004400
 8003240:	200004b4 	.word	0x200004b4
 8003244:	4002006c 	.word	0x4002006c

08003248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003248:	f7ff fc0c 	bl	8002a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800324e:	490c      	ldr	r1, [pc, #48]	; (8003280 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003264:	4c09      	ldr	r4, [pc, #36]	; (800328c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003272:	f004 fc45 	bl	8007b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003276:	f7fe fed1 	bl	800201c <main>
  bx lr
 800327a:	4770      	bx	lr
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8003284:	08008c60 	.word	0x08008c60
  ldr r2, =_sbss
 8003288:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800328c:	20000644 	.word	0x20000644

08003290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC1_2_IRQHandler>
	...

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_Init+0x28>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_Init+0x28>)
 800329e:	f043 0310 	orr.w	r3, r3, #16
 80032a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f000 f947 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032aa:	200f      	movs	r0, #15
 80032ac:	f000 f808 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b0:	f7ff faf8 	bl	80028a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_InitTick+0x54>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_InitTick+0x58>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f95f 	bl	80035a2 <HAL_SYSTICK_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00e      	b.n	800330c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d80a      	bhi.n	800330a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f4:	2200      	movs	r2, #0
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f000 f927 	bl	800354e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_InitTick+0x5c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000098 	.word	0x20000098
 8003318:	200000a0 	.word	0x200000a0
 800331c:	2000009c 	.word	0x2000009c

08003320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x1c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_IncTick+0x20>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_IncTick+0x20>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	200000a0 	.word	0x200000a0
 8003340:	200004f8 	.word	0x200004f8

08003344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <HAL_GetTick+0x10>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	200004f8 	.word	0x200004f8

08003358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fff0 	bl	8003344 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d005      	beq.n	800337e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_Delay+0x44>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800337e:	bf00      	nop
 8003380:	f7ff ffe0 	bl	8003344 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d8f7      	bhi.n	8003380 <HAL_Delay+0x28>
  {
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200000a0 	.word	0x200000a0

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4906      	ldr	r1, [pc, #24]	; (8003438 <__NVIC_EnableIRQ+0x34>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	490c      	ldr	r1, [pc, #48]	; (8003488 <__NVIC_SetPriority+0x4c>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	440b      	add	r3, r1
 8003460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003464:	e00a      	b.n	800347c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <__NVIC_SetPriority+0x50>)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3b04      	subs	r3, #4
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	440b      	add	r3, r1
 800347a:	761a      	strb	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f1c3 0307 	rsb	r3, r3, #7
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf28      	it	cs
 80034ae:	2304      	movcs	r3, #4
 80034b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <NVIC_EncodePriority+0x30>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3b03      	subs	r3, #3
 80034be:	e000      	b.n	80034c2 <NVIC_EncodePriority+0x32>
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	4313      	orrs	r3, r2
         );
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003504:	d301      	bcc.n	800350a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <SysTick_Config+0x40>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003512:	210f      	movs	r1, #15
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f7ff ff90 	bl	800343c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SysTick_Config+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <SysTick_Config+0x40>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000e010 	.word	0xe000e010

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff2d 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff42 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff90 	bl	8003490 <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff5f 	bl	800343c <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff35 	bl	8003404 <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffa2 	bl	80034f4 <SysTick_Config>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e059      	b.n	8003686 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_DMA_Init+0xd4>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d80f      	bhi.n	80035fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_DMA_Init+0xd8>)
 80035e6:	4413      	add	r3, r2
 80035e8:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <HAL_DMA_Init+0xdc>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	009a      	lsls	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_DMA_Init+0xe0>)
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80035fc:	e00e      	b.n	800361c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_DMA_Init+0xe4>)
 8003606:	4413      	add	r3, r2
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_DMA_Init+0xdc>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	009a      	lsls	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <HAL_DMA_Init+0xe8>)
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003632:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40020407 	.word	0x40020407
 8003694:	bffdfff8 	.word	0xbffdfff8
 8003698:	cccccccd 	.word	0xcccccccd
 800369c:	40020000 	.word	0x40020000
 80036a0:	bffdfbf8 	.word	0xbffdfbf8
 80036a4:	40020400 	.word	0x40020400

080036a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_DMA_Start_IT+0x20>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e04b      	b.n	8003760 <HAL_DMA_Start_IT+0xb8>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d13a      	bne.n	8003752 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fbb1 	bl	8003e68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 020e 	orr.w	r2, r2, #14
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00f      	b.n	8003740 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 020a 	orr.w	r2, r2, #10
 800373e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e005      	b.n	800375e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d008      	beq.n	8003792 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2204      	movs	r2, #4
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e020      	b.n	80037d4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020e 	bic.w	r2, r2, #14
 80037a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d005      	beq.n	8003804 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2204      	movs	r2, #4
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e0d6      	b.n	80039b2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 020e 	bic.w	r2, r2, #14
 8003812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b64      	ldr	r3, [pc, #400]	; (80039bc <HAL_DMA_Abort_IT+0x1dc>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d958      	bls.n	80038e2 <HAL_DMA_Abort_IT+0x102>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a62      	ldr	r2, [pc, #392]	; (80039c0 <HAL_DMA_Abort_IT+0x1e0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04f      	beq.n	80038da <HAL_DMA_Abort_IT+0xfa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a61      	ldr	r2, [pc, #388]	; (80039c4 <HAL_DMA_Abort_IT+0x1e4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d048      	beq.n	80038d6 <HAL_DMA_Abort_IT+0xf6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5f      	ldr	r2, [pc, #380]	; (80039c8 <HAL_DMA_Abort_IT+0x1e8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_Abort_IT+0xf0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_DMA_Abort_IT+0x1ec>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d038      	beq.n	80038ca <HAL_DMA_Abort_IT+0xea>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_DMA_Abort_IT+0x1f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d030      	beq.n	80038c4 <HAL_DMA_Abort_IT+0xe4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5b      	ldr	r2, [pc, #364]	; (80039d4 <HAL_DMA_Abort_IT+0x1f4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d028      	beq.n	80038be <HAL_DMA_Abort_IT+0xde>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_DMA_Abort_IT+0x1dc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d020      	beq.n	80038b8 <HAL_DMA_Abort_IT+0xd8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_DMA_Abort_IT+0x1f8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d019      	beq.n	80038b4 <HAL_DMA_Abort_IT+0xd4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a55      	ldr	r2, [pc, #340]	; (80039dc <HAL_DMA_Abort_IT+0x1fc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d012      	beq.n	80038b0 <HAL_DMA_Abort_IT+0xd0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <HAL_DMA_Abort_IT+0x200>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00a      	beq.n	80038aa <HAL_DMA_Abort_IT+0xca>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_DMA_Abort_IT+0x204>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d102      	bne.n	80038a4 <HAL_DMA_Abort_IT+0xc4>
 800389e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a2:	e01b      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a8:	e018      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ae:	e015      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038b0:	2310      	movs	r3, #16
 80038b2:	e013      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e011      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038bc:	e00e      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038c2:	e00b      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c8:	e008      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ce:	e005      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d4:	e002      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038d6:	2310      	movs	r3, #16
 80038d8:	e000      	b.n	80038dc <HAL_DMA_Abort_IT+0xfc>
 80038da:	2301      	movs	r3, #1
 80038dc:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <HAL_DMA_Abort_IT+0x208>)
 80038de:	6053      	str	r3, [r2, #4]
 80038e0:	e057      	b.n	8003992 <HAL_DMA_Abort_IT+0x1b2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <HAL_DMA_Abort_IT+0x1e0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04f      	beq.n	800398c <HAL_DMA_Abort_IT+0x1ac>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <HAL_DMA_Abort_IT+0x1e4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d048      	beq.n	8003988 <HAL_DMA_Abort_IT+0x1a8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a33      	ldr	r2, [pc, #204]	; (80039c8 <HAL_DMA_Abort_IT+0x1e8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Abort_IT+0x1a2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a31      	ldr	r2, [pc, #196]	; (80039cc <HAL_DMA_Abort_IT+0x1ec>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d038      	beq.n	800397c <HAL_DMA_Abort_IT+0x19c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_DMA_Abort_IT+0x1f0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d030      	beq.n	8003976 <HAL_DMA_Abort_IT+0x196>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <HAL_DMA_Abort_IT+0x1f4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d028      	beq.n	8003970 <HAL_DMA_Abort_IT+0x190>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <HAL_DMA_Abort_IT+0x1dc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d020      	beq.n	800396a <HAL_DMA_Abort_IT+0x18a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_DMA_Abort_IT+0x1f8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_DMA_Abort_IT+0x186>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a29      	ldr	r2, [pc, #164]	; (80039dc <HAL_DMA_Abort_IT+0x1fc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d012      	beq.n	8003962 <HAL_DMA_Abort_IT+0x182>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <HAL_DMA_Abort_IT+0x200>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00a      	beq.n	800395c <HAL_DMA_Abort_IT+0x17c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <HAL_DMA_Abort_IT+0x204>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d102      	bne.n	8003956 <HAL_DMA_Abort_IT+0x176>
 8003950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003954:	e01b      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800395a:	e018      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 800395c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003960:	e015      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003962:	2310      	movs	r3, #16
 8003964:	e013      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003966:	2301      	movs	r3, #1
 8003968:	e011      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 800396a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800396e:	e00e      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003974:	e00b      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397a:	e008      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 800397c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003980:	e005      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003986:	e002      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 8003988:	2310      	movs	r3, #16
 800398a:	e000      	b.n	800398e <HAL_DMA_Abort_IT+0x1ae>
 800398c:	2301      	movs	r3, #1
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_DMA_Abort_IT+0x20c>)
 8003990:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    } 
  }
  return status;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40020080 	.word	0x40020080
 80039c0:	40020008 	.word	0x40020008
 80039c4:	4002001c 	.word	0x4002001c
 80039c8:	40020030 	.word	0x40020030
 80039cc:	40020044 	.word	0x40020044
 80039d0:	40020058 	.word	0x40020058
 80039d4:	4002006c 	.word	0x4002006c
 80039d8:	40020408 	.word	0x40020408
 80039dc:	4002041c 	.word	0x4002041c
 80039e0:	40020430 	.word	0x40020430
 80039e4:	40020444 	.word	0x40020444
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020000 	.word	0x40020000

080039f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80f1 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x20c>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80eb 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d958      	bls.n	8003b02 <HAL_DMA_IRQHandler+0x112>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_DMA_IRQHandler+0x1dc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04f      	beq.n	8003afa <HAL_DMA_IRQHandler+0x10a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d048      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x106>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5a      	ldr	r2, [pc, #360]	; (8003bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x100>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d038      	beq.n	8003aea <HAL_DMA_IRQHandler+0xfa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a57      	ldr	r2, [pc, #348]	; (8003bdc <HAL_DMA_IRQHandler+0x1ec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d030      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xf4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d028      	beq.n	8003ade <HAL_DMA_IRQHandler+0xee>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d020      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xe8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_DMA_IRQHandler+0x1f4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d019      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0xe4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a50      	ldr	r2, [pc, #320]	; (8003be8 <HAL_DMA_IRQHandler+0x1f8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d012      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0xe0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4f      	ldr	r2, [pc, #316]	; (8003bec <HAL_DMA_IRQHandler+0x1fc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00a      	beq.n	8003aca <HAL_DMA_IRQHandler+0xda>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <HAL_DMA_IRQHandler+0x200>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d102      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xd4>
 8003abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ac2:	e01b      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ac8:	e018      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ace:	e015      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	e013      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	e011      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003adc:	e00e      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ae2:	e00b      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ae8:	e008      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aee:	e005      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af4:	e002      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	e000      	b.n	8003afc <HAL_DMA_IRQHandler+0x10c>
 8003afa:	2304      	movs	r3, #4
 8003afc:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <HAL_DMA_IRQHandler+0x204>)
 8003afe:	6053      	str	r3, [r2, #4]
 8003b00:	e057      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x1c2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_DMA_IRQHandler+0x1dc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04f      	beq.n	8003bac <HAL_DMA_IRQHandler+0x1bc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d048      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x1b8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x1b2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d038      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1ac>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_IRQHandler+0x1ec>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d030      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x1a6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d028      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x1a0>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d020      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x19a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <HAL_DMA_IRQHandler+0x1f4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x196>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_DMA_IRQHandler+0x1f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d012      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x192>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_DMA_IRQHandler+0x1fc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00a      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x18c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_DMA_IRQHandler+0x200>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d102      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x186>
 8003b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b74:	e01b      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b7a:	e018      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b80:	e015      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b82:	2340      	movs	r3, #64	; 0x40
 8003b84:	e013      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e011      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b8e:	e00e      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b94:	e00b      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b9a:	e008      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ba0:	e005      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba6:	e002      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	e000      	b.n	8003bae <HAL_DMA_IRQHandler+0x1be>
 8003bac:	2304      	movs	r3, #4
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_DMA_IRQHandler+0x208>)
 8003bb0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8136 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003bc4:	e130      	b.n	8003e28 <HAL_DMA_IRQHandler+0x438>
 8003bc6:	bf00      	nop
 8003bc8:	40020080 	.word	0x40020080
 8003bcc:	40020008 	.word	0x40020008
 8003bd0:	4002001c 	.word	0x4002001c
 8003bd4:	40020030 	.word	0x40020030
 8003bd8:	40020044 	.word	0x40020044
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	4002006c 	.word	0x4002006c
 8003be4:	40020408 	.word	0x40020408
 8003be8:	4002041c 	.word	0x4002041c
 8003bec:	40020430 	.word	0x40020430
 8003bf0:	40020444 	.word	0x40020444
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2202      	movs	r2, #2
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80dd 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x3d8>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80d7 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 020a 	bic.w	r2, r2, #10
 8003c36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_DMA_IRQHandler+0x444>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d958      	bls.n	8003cfe <HAL_DMA_IRQHandler+0x30e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a79      	ldr	r2, [pc, #484]	; (8003e38 <HAL_DMA_IRQHandler+0x448>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04f      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x306>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a78      	ldr	r2, [pc, #480]	; (8003e3c <HAL_DMA_IRQHandler+0x44c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d048      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x302>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a76      	ldr	r2, [pc, #472]	; (8003e40 <HAL_DMA_IRQHandler+0x450>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_DMA_IRQHandler+0x2fc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a75      	ldr	r2, [pc, #468]	; (8003e44 <HAL_DMA_IRQHandler+0x454>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d038      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x2f6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a73      	ldr	r2, [pc, #460]	; (8003e48 <HAL_DMA_IRQHandler+0x458>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d030      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x2f0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_DMA_IRQHandler+0x45c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d028      	beq.n	8003cda <HAL_DMA_IRQHandler+0x2ea>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <HAL_DMA_IRQHandler+0x444>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d020      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x2e4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <HAL_DMA_IRQHandler+0x460>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d019      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x2e0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6c      	ldr	r2, [pc, #432]	; (8003e54 <HAL_DMA_IRQHandler+0x464>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d012      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x2dc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <HAL_DMA_IRQHandler+0x468>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00a      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x2d6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_DMA_IRQHandler+0x46c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d102      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0x2d0>
 8003cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cbe:	e01b      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc4:	e018      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cca:	e015      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003ccc:	2320      	movs	r3, #32
 8003cce:	e013      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e011      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd8:	e00e      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cde:	e00b      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce4:	e008      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cea:	e005      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf0:	e002      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e000      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x308>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	4a59      	ldr	r2, [pc, #356]	; (8003e60 <HAL_DMA_IRQHandler+0x470>)
 8003cfa:	6053      	str	r3, [r2, #4]
 8003cfc:	e057      	b.n	8003dae <HAL_DMA_IRQHandler+0x3be>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4d      	ldr	r2, [pc, #308]	; (8003e38 <HAL_DMA_IRQHandler+0x448>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d04f      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x3b8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a4b      	ldr	r2, [pc, #300]	; (8003e3c <HAL_DMA_IRQHandler+0x44c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d048      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x3b4>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_DMA_IRQHandler+0x450>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d040      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x3ae>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a48      	ldr	r2, [pc, #288]	; (8003e44 <HAL_DMA_IRQHandler+0x454>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d038      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x3a8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a47      	ldr	r2, [pc, #284]	; (8003e48 <HAL_DMA_IRQHandler+0x458>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d030      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x3a2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <HAL_DMA_IRQHandler+0x45c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d028      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x39c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <HAL_DMA_IRQHandler+0x444>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d020      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x396>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_DMA_IRQHandler+0x460>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x392>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <HAL_DMA_IRQHandler+0x464>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d012      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x38e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <HAL_DMA_IRQHandler+0x468>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x388>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <HAL_DMA_IRQHandler+0x46c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d102      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x382>
 8003d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d70:	e01b      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d76:	e018      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d7c:	e015      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e013      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e011      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d8a:	e00e      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d90:	e00b      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d96:	e008      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d9c:	e005      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da2:	e002      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003da4:	2320      	movs	r3, #32
 8003da6:	e000      	b.n	8003daa <HAL_DMA_IRQHandler+0x3ba>
 8003da8:	2302      	movs	r3, #2
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <HAL_DMA_IRQHandler+0x474>)
 8003dac:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d034      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dc6:	e02f      	b.n	8003e28 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2208      	movs	r2, #8
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d028      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x43a>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d023      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 020e 	bic.w	r2, r2, #14
 8003df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
    }
  }
  return;
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
}
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40020080 	.word	0x40020080
 8003e38:	40020008 	.word	0x40020008
 8003e3c:	4002001c 	.word	0x4002001c
 8003e40:	40020030 	.word	0x40020030
 8003e44:	40020044 	.word	0x40020044
 8003e48:	40020058 	.word	0x40020058
 8003e4c:	4002006c 	.word	0x4002006c
 8003e50:	40020408 	.word	0x40020408
 8003e54:	4002041c 	.word	0x4002041c
 8003e58:	40020430 	.word	0x40020430
 8003e5c:	40020444 	.word	0x40020444
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020000 	.word	0x40020000

08003e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f202 	lsl.w	r2, r1, r2
 8003e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d108      	bne.n	8003ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ea6:	e007      	b.n	8003eb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b08b      	sub	sp, #44	; 0x2c
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed6:	e179      	b.n	80041cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f040 8168 	bne.w	80041c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a96      	ldr	r2, [pc, #600]	; (8004154 <HAL_GPIO_Init+0x290>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d05e      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f00:	4a94      	ldr	r2, [pc, #592]	; (8004154 <HAL_GPIO_Init+0x290>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d875      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f06:	4a94      	ldr	r2, [pc, #592]	; (8004158 <HAL_GPIO_Init+0x294>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d058      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f0c:	4a92      	ldr	r2, [pc, #584]	; (8004158 <HAL_GPIO_Init+0x294>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d86f      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f12:	4a92      	ldr	r2, [pc, #584]	; (800415c <HAL_GPIO_Init+0x298>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d052      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f18:	4a90      	ldr	r2, [pc, #576]	; (800415c <HAL_GPIO_Init+0x298>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d869      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f1e:	4a90      	ldr	r2, [pc, #576]	; (8004160 <HAL_GPIO_Init+0x29c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04c      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f24:	4a8e      	ldr	r2, [pc, #568]	; (8004160 <HAL_GPIO_Init+0x29c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d863      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f2a:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <HAL_GPIO_Init+0x2a0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d046      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
 8003f30:	4a8c      	ldr	r2, [pc, #560]	; (8004164 <HAL_GPIO_Init+0x2a0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d85d      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f36:	2b12      	cmp	r3, #18
 8003f38:	d82a      	bhi.n	8003f90 <HAL_GPIO_Init+0xcc>
 8003f3a:	2b12      	cmp	r3, #18
 8003f3c:	d859      	bhi.n	8003ff2 <HAL_GPIO_Init+0x12e>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_GPIO_Init+0x80>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fbf 	.word	0x08003fbf
 8003f48:	08003f99 	.word	0x08003f99
 8003f4c:	08003fab 	.word	0x08003fab
 8003f50:	08003fed 	.word	0x08003fed
 8003f54:	08003ff3 	.word	0x08003ff3
 8003f58:	08003ff3 	.word	0x08003ff3
 8003f5c:	08003ff3 	.word	0x08003ff3
 8003f60:	08003ff3 	.word	0x08003ff3
 8003f64:	08003ff3 	.word	0x08003ff3
 8003f68:	08003ff3 	.word	0x08003ff3
 8003f6c:	08003ff3 	.word	0x08003ff3
 8003f70:	08003ff3 	.word	0x08003ff3
 8003f74:	08003ff3 	.word	0x08003ff3
 8003f78:	08003ff3 	.word	0x08003ff3
 8003f7c:	08003ff3 	.word	0x08003ff3
 8003f80:	08003ff3 	.word	0x08003ff3
 8003f84:	08003ff3 	.word	0x08003ff3
 8003f88:	08003fa1 	.word	0x08003fa1
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	4a75      	ldr	r2, [pc, #468]	; (8004168 <HAL_GPIO_Init+0x2a4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f96:	e02c      	b.n	8003ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	623b      	str	r3, [r7, #32]
          break;
 8003f9e:	e029      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	623b      	str	r3, [r7, #32]
          break;
 8003fa8:	e024      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	623b      	str	r3, [r7, #32]
          break;
 8003fb2:	e01f      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	623b      	str	r3, [r7, #32]
          break;
 8003fbc:	e01a      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	623b      	str	r3, [r7, #32]
          break;
 8003fca:	e013      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	611a      	str	r2, [r3, #16]
          break;
 8003fde:	e009      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	615a      	str	r2, [r3, #20]
          break;
 8003fea:	e003      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
          break;
 8003ff0:	e000      	b.n	8003ff4 <HAL_GPIO_Init+0x130>
          break;
 8003ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2bff      	cmp	r3, #255	; 0xff
 8003ff8:	d801      	bhi.n	8003ffe <HAL_GPIO_Init+0x13a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	e001      	b.n	8004002 <HAL_GPIO_Init+0x13e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2bff      	cmp	r3, #255	; 0xff
 8004008:	d802      	bhi.n	8004010 <HAL_GPIO_Init+0x14c>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x152>
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	3b08      	subs	r3, #8
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	210f      	movs	r1, #15
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	401a      	ands	r2, r3
 8004028:	6a39      	ldr	r1, [r7, #32]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	431a      	orrs	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80c1 	beq.w	80041c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004044:	4b49      	ldr	r3, [pc, #292]	; (800416c <HAL_GPIO_Init+0x2a8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a48      	ldr	r2, [pc, #288]	; (800416c <HAL_GPIO_Init+0x2a8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	4b46      	ldr	r3, [pc, #280]	; (800416c <HAL_GPIO_Init+0x2a8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800405c:	4a44      	ldr	r2, [pc, #272]	; (8004170 <HAL_GPIO_Init+0x2ac>)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	3302      	adds	r3, #2
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <HAL_GPIO_Init+0x2b0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01f      	beq.n	80040c8 <HAL_GPIO_Init+0x204>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_GPIO_Init+0x2b4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d019      	beq.n	80040c4 <HAL_GPIO_Init+0x200>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3a      	ldr	r2, [pc, #232]	; (800417c <HAL_GPIO_Init+0x2b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_GPIO_Init+0x1fc>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a39      	ldr	r2, [pc, #228]	; (8004180 <HAL_GPIO_Init+0x2bc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00d      	beq.n	80040bc <HAL_GPIO_Init+0x1f8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a38      	ldr	r2, [pc, #224]	; (8004184 <HAL_GPIO_Init+0x2c0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <HAL_GPIO_Init+0x1f4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a37      	ldr	r2, [pc, #220]	; (8004188 <HAL_GPIO_Init+0x2c4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_GPIO_Init+0x1f0>
 80040b0:	2305      	movs	r3, #5
 80040b2:	e00a      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040b4:	2306      	movs	r3, #6
 80040b6:	e008      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e006      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040bc:	2303      	movs	r3, #3
 80040be:	e004      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e002      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_GPIO_Init+0x206>
 80040c8:	2300      	movs	r3, #0
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	f002 0203 	and.w	r2, r2, #3
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	4093      	lsls	r3, r2
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040da:	4925      	ldr	r1, [pc, #148]	; (8004170 <HAL_GPIO_Init+0x2ac>)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_GPIO_Init+0x2c8>)
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4924      	ldr	r1, [pc, #144]	; (800418c <HAL_GPIO_Init+0x2c8>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_GPIO_Init+0x2c8>)
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	43db      	mvns	r3, r3
 800410a:	4920      	ldr	r1, [pc, #128]	; (800418c <HAL_GPIO_Init+0x2c8>)
 800410c:	4013      	ands	r3, r2
 800410e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_GPIO_Init+0x2c8>)
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	491a      	ldr	r1, [pc, #104]	; (800418c <HAL_GPIO_Init+0x2c8>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_GPIO_Init+0x2c8>)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	43db      	mvns	r3, r3
 8004132:	4916      	ldr	r1, [pc, #88]	; (800418c <HAL_GPIO_Init+0x2c8>)
 8004134:	4013      	ands	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d025      	beq.n	8004190 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_GPIO_Init+0x2c8>)
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4910      	ldr	r1, [pc, #64]	; (800418c <HAL_GPIO_Init+0x2c8>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
 8004150:	e025      	b.n	800419e <HAL_GPIO_Init+0x2da>
 8004152:	bf00      	nop
 8004154:	10320000 	.word	0x10320000
 8004158:	10310000 	.word	0x10310000
 800415c:	10220000 	.word	0x10220000
 8004160:	10210000 	.word	0x10210000
 8004164:	10120000 	.word	0x10120000
 8004168:	10110000 	.word	0x10110000
 800416c:	40021000 	.word	0x40021000
 8004170:	40010000 	.word	0x40010000
 8004174:	40010800 	.word	0x40010800
 8004178:	40010c00 	.word	0x40010c00
 800417c:	40011000 	.word	0x40011000
 8004180:	40011400 	.word	0x40011400
 8004184:	40011800 	.word	0x40011800
 8004188:	40011c00 	.word	0x40011c00
 800418c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_GPIO_Init+0x324>)
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	43db      	mvns	r3, r3
 8004198:	4913      	ldr	r1, [pc, #76]	; (80041e8 <HAL_GPIO_Init+0x324>)
 800419a:	4013      	ands	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_GPIO_Init+0x324>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_GPIO_Init+0x324>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
 80041b6:	e006      	b.n	80041c6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_GPIO_Init+0x324>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	43db      	mvns	r3, r3
 80041c0:	4909      	ldr	r1, [pc, #36]	; (80041e8 <HAL_GPIO_Init+0x324>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	3301      	adds	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f47f ae7e 	bne.w	8003ed8 <HAL_GPIO_Init+0x14>
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	372c      	adds	r7, #44	; 0x2c
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43d9      	mvns	r1, r3
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	400b      	ands	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
	...

08004250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e12b      	b.n	80044ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fc8a 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b4:	f001 fbf0 	bl	8005a98 <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a81      	ldr	r2, [pc, #516]	; (80044c4 <HAL_I2C_Init+0x274>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d807      	bhi.n	80042d4 <HAL_I2C_Init+0x84>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a80      	ldr	r2, [pc, #512]	; (80044c8 <HAL_I2C_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e006      	b.n	80042e2 <HAL_I2C_Init+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <HAL_I2C_Init+0x27c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e7      	b.n	80044ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_I2C_Init+0x280>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_I2C_Init+0x274>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <HAL_I2C_Init+0xd4>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	e009      	b.n	8004338 <HAL_I2C_Init+0xe8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_I2C_Init+0x284>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800434a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	495c      	ldr	r1, [pc, #368]	; (80044c4 <HAL_I2C_Init+0x274>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d819      	bhi.n	800438c <HAL_I2C_Init+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e59      	subs	r1, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800436c:	400b      	ands	r3, r1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_I2C_Init+0x138>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e59      	subs	r1, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	e051      	b.n	800442c <HAL_I2C_Init+0x1dc>
 8004388:	2304      	movs	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x168>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x18e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x196>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044f2:	f7fe ff27 	bl	8003344 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b20      	cmp	r3, #32
 8004502:	f040 80d9 	bne.w	80046b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2319      	movs	r3, #25
 800450c:	2201      	movs	r2, #1
 800450e:	496d      	ldr	r1, [pc, #436]	; (80046c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fcc1 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
 800451e:	e0cc      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_I2C_Mem_Write+0x56>
 800452a:	2302      	movs	r3, #2
 800452c:	e0c5      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d007      	beq.n	8004554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2221      	movs	r2, #33	; 0x21
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004596:	88f8      	ldrh	r0, [r7, #6]
 8004598:	893a      	ldrh	r2, [r7, #8]
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4603      	mov	r3, r0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 faf8 	bl	8004b9c <I2C_RequestMemoryWrite>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d052      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e081      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fd86 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d107      	bne.n	80045de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06b      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_I2C_Mem_Write+0x180>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d017      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1aa      	bne.n	80045b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fd79 	bl	800515c <I2C_WaitOnBTFFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b04      	cmp	r3, #4
 8004676:	d107      	bne.n	8004688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e016      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	00100002 	.word	0x00100002
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7fe fe2b 	bl	8003344 <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 8244 	bne.w	8004b86 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	4982      	ldr	r1, [pc, #520]	; (8004910 <HAL_I2C_Mem_Read+0x244>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fbc5 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e237      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Read+0x5a>
 8004722:	2302      	movs	r3, #2
 8004724:	e230      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a62      	ldr	r2, [pc, #392]	; (8004914 <HAL_I2C_Mem_Read+0x248>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fa92 	bl	8004cc8 <I2C_RequestMemoryRead>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1ec      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e1c0      	b.n	8004b60 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d11e      	bne.n	8004824 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047f6:	b672      	cpsid	i
}
 80047f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004820:	b662      	cpsie	i
}
 8004822:	e035      	b.n	8004890 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b02      	cmp	r3, #2
 800482a:	d11e      	bne.n	800486a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800483c:	b672      	cpsid	i
}
 800483e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004866:	b662      	cpsie	i
}
 8004868:	e012      	b.n	8004890 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004890:	e166      	b.n	8004b60 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b03      	cmp	r3, #3
 8004898:	f200 811f 	bhi.w	8004ada <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d123      	bne.n	80048ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fc9f 	bl	80051ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e167      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ea:	e139      	b.n	8004b60 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d152      	bne.n	800499a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2200      	movs	r2, #0
 80048fc:	4906      	ldr	r1, [pc, #24]	; (8004918 <HAL_I2C_Mem_Read+0x24c>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 faca 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e13c      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
 800490e:	bf00      	nop
 8004910:	00100002 	.word	0x00100002
 8004914:	ffff0000 	.word	0xffff0000
 8004918:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800491c:	b672      	cpsid	i
}
 800491e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004962:	b662      	cpsie	i
}
 8004964:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004998:	e0e2      	b.n	8004b60 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2200      	movs	r2, #0
 80049a2:	497b      	ldr	r1, [pc, #492]	; (8004b90 <HAL_I2C_Mem_Read+0x4c4>)
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa77 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0e9      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049c4:	b672      	cpsid	i
}
 80049c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049fa:	4b66      	ldr	r3, [pc, #408]	; (8004b94 <HAL_I2C_Mem_Read+0x4c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	4a65      	ldr	r2, [pc, #404]	; (8004b98 <HAL_I2C_Mem_Read+0x4cc>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a1a      	lsrs	r2, r3, #8
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00da      	lsls	r2, r3, #3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d118      	bne.n	8004a52 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a42:	b662      	cpsie	i
}
 8004a44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e09a      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d1d9      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004aa2:	b662      	cpsie	i
}
 8004aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad8:	e042      	b.n	8004b60 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fb84 	bl	80051ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e04c      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d118      	bne.n	8004b60 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f ae94 	bne.w	8004892 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	00010004 	.word	0x00010004
 8004b94:	20000098 	.word	0x20000098
 8004b98:	14f8b589 	.word	0x14f8b589

08004b9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	817b      	strh	r3, [r7, #10]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	813b      	strh	r3, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f960 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bec:	d103      	bne.n	8004bf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e05f      	b.n	8004cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bfa:	897b      	ldrh	r3, [r7, #10]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	492d      	ldr	r1, [pc, #180]	; (8004cc4 <I2C_RequestMemoryWrite+0x128>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f9bb 	bl	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04c      	b.n	8004cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa46 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02b      	b.n	8004cba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c68:	893b      	ldrh	r3, [r7, #8]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	e021      	b.n	8004cb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c74:	893b      	ldrh	r3, [r7, #8]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	6a39      	ldr	r1, [r7, #32]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa20 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d107      	bne.n	8004caa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e005      	b.n	8004cba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	00010002 	.word	0x00010002

08004cc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8c2 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d28:	d103      	bne.n	8004d32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0aa      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	4952      	ldr	r1, [pc, #328]	; (8004e94 <I2C_RequestMemoryRead+0x1cc>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f91d 	bl	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e097      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	6a39      	ldr	r1, [r7, #32]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f9a8 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d107      	bne.n	8004d9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e076      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004da4:	893b      	ldrh	r3, [r7, #8]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	611a      	str	r2, [r3, #16]
 8004dae:	e021      	b.n	8004df4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004db0:	893b      	ldrh	r3, [r7, #8]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	6a39      	ldr	r1, [r7, #32]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f982 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d107      	bne.n	8004de6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e050      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dea:	893b      	ldrh	r3, [r7, #8]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df6:	6a39      	ldr	r1, [r7, #32]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f967 	bl	80050cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e035      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f82b 	bl	8004e98 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d103      	bne.n	8004e60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e013      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e64:	897b      	ldrh	r3, [r7, #10]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	6a3a      	ldr	r2, [r7, #32]
 8004e78:	4906      	ldr	r1, [pc, #24]	; (8004e94 <I2C_RequestMemoryRead+0x1cc>)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f886 	bl	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	00010002 	.word	0x00010002

08004e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea8:	e048      	b.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d044      	beq.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe fa47 	bl	8003344 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d139      	bne.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10d      	bne.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	43da      	mvns	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	e00c      	b.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	43da      	mvns	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d116      	bne.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e023      	b.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10d      	bne.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	e00c      	b.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	43da      	mvns	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d093      	beq.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9a:	e071      	b.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d123      	bne.n	8004ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	f043 0204 	orr.w	r2, r3, #4
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e067      	b.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d041      	beq.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffc:	f7fe f9a2 	bl	8003344 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d136      	bne.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d10c      	bne.n	8005036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e00b      	b.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	43da      	mvns	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e021      	b.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10c      	bne.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	43da      	mvns	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e00b      	b.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af6d 	bne.w	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d8:	e034      	b.n	8005144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8e3 	bl	80052a6 <I2C_IsAcknowledgeFailed>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e034      	b.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d028      	beq.n	8005144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f2:	f7fe f927 	bl	8003344 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d302      	bcc.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11d      	bne.n	8005144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d016      	beq.n	8005144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e007      	b.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b80      	cmp	r3, #128	; 0x80
 8005150:	d1c3      	bne.n	80050da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005168:	e034      	b.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f89b 	bl	80052a6 <I2C_IsAcknowledgeFailed>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d028      	beq.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fe f8df 	bl	8003344 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d11d      	bne.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d016      	beq.n	80051d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d1c3      	bne.n	800516a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f8:	e049      	b.n	800528e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b10      	cmp	r3, #16
 8005206:	d119      	bne.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e030      	b.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fe f882 	bl	8003344 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d11d      	bne.n	800528e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d016      	beq.n	800528e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e007      	b.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d1ae      	bne.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052bc:	d11b      	bne.n	80052f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
	...

08005304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e272      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8087 	beq.w	8005432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005324:	4b92      	ldr	r3, [pc, #584]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b04      	cmp	r3, #4
 800532e:	d00c      	beq.n	800534a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005330:	4b8f      	ldr	r3, [pc, #572]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d112      	bne.n	8005362 <HAL_RCC_OscConfig+0x5e>
 800533c:	4b8c      	ldr	r3, [pc, #560]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d10b      	bne.n	8005362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534a:	4b89      	ldr	r3, [pc, #548]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d06c      	beq.n	8005430 <HAL_RCC_OscConfig+0x12c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d168      	bne.n	8005430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e24c      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536a:	d106      	bne.n	800537a <HAL_RCC_OscConfig+0x76>
 800536c:	4b80      	ldr	r3, [pc, #512]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7f      	ldr	r2, [pc, #508]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e02e      	b.n	80053d8 <HAL_RCC_OscConfig+0xd4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0x98>
 8005382:	4b7b      	ldr	r3, [pc, #492]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7a      	ldr	r2, [pc, #488]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b78      	ldr	r3, [pc, #480]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a77      	ldr	r2, [pc, #476]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e01d      	b.n	80053d8 <HAL_RCC_OscConfig+0xd4>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0xbc>
 80053a6:	4b72      	ldr	r3, [pc, #456]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a71      	ldr	r2, [pc, #452]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b6f      	ldr	r3, [pc, #444]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a6e      	ldr	r2, [pc, #440]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e00b      	b.n	80053d8 <HAL_RCC_OscConfig+0xd4>
 80053c0:	4b6b      	ldr	r3, [pc, #428]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6a      	ldr	r2, [pc, #424]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b68      	ldr	r3, [pc, #416]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a67      	ldr	r2, [pc, #412]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fd ffb0 	bl	8003344 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fd ffac 	bl	8003344 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e200      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b5d      	ldr	r3, [pc, #372]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0xe4>
 8005406:	e014      	b.n	8005432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fd ff9c 	bl	8003344 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005410:	f7fd ff98 	bl	8003344 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e1ec      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005422:	4b53      	ldr	r3, [pc, #332]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x10c>
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d063      	beq.n	8005506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800543e:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800544a:	4b49      	ldr	r3, [pc, #292]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	2b08      	cmp	r3, #8
 8005454:	d11c      	bne.n	8005490 <HAL_RCC_OscConfig+0x18c>
 8005456:	4b46      	ldr	r3, [pc, #280]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d116      	bne.n	8005490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005462:	4b43      	ldr	r3, [pc, #268]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_RCC_OscConfig+0x176>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e1c0      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b3d      	ldr	r3, [pc, #244]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4939      	ldr	r1, [pc, #228]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	e03a      	b.n	8005506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005498:	4b36      	ldr	r3, [pc, #216]	; (8005574 <HAL_RCC_OscConfig+0x270>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fd ff51 	bl	8003344 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fd ff4d 	bl	8003344 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e1a1      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b8:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4927      	ldr	r1, [pc, #156]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]
 80054d8:	e015      	b.n	8005506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b26      	ldr	r3, [pc, #152]	; (8005574 <HAL_RCC_OscConfig+0x270>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fd ff30 	bl	8003344 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e8:	f7fd ff2c 	bl	8003344 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e180      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fa:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03a      	beq.n	8005588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d019      	beq.n	800554e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005520:	f7fd ff10 	bl	8003344 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005528:	f7fd ff0c 	bl	8003344 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e160      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <HAL_RCC_OscConfig+0x26c>)
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005546:	2001      	movs	r0, #1
 8005548:	f000 face 	bl	8005ae8 <RCC_Delay>
 800554c:	e01c      	b.n	8005588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005554:	f7fd fef6 	bl	8003344 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555a:	e00f      	b.n	800557c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555c:	f7fd fef2 	bl	8003344 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d908      	bls.n	800557c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e146      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
 8005574:	42420000 	.word	0x42420000
 8005578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557c:	4b92      	ldr	r3, [pc, #584]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e9      	bne.n	800555c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a6 	beq.w	80056e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b8b      	ldr	r3, [pc, #556]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	4b88      	ldr	r3, [pc, #544]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4a87      	ldr	r2, [pc, #540]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b0:	61d3      	str	r3, [r2, #28]
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c2:	4b82      	ldr	r3, [pc, #520]	; (80057cc <HAL_RCC_OscConfig+0x4c8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d118      	bne.n	8005600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ce:	4b7f      	ldr	r3, [pc, #508]	; (80057cc <HAL_RCC_OscConfig+0x4c8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7e      	ldr	r2, [pc, #504]	; (80057cc <HAL_RCC_OscConfig+0x4c8>)
 80055d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055da:	f7fd feb3 	bl	8003344 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e2:	f7fd feaf 	bl	8003344 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b64      	cmp	r3, #100	; 0x64
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e103      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f4:	4b75      	ldr	r3, [pc, #468]	; (80057cc <HAL_RCC_OscConfig+0x4c8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d106      	bne.n	8005616 <HAL_RCC_OscConfig+0x312>
 8005608:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	6213      	str	r3, [r2, #32]
 8005614:	e02d      	b.n	8005672 <HAL_RCC_OscConfig+0x36e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x334>
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	6213      	str	r3, [r2, #32]
 800562a:	4b67      	ldr	r3, [pc, #412]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	4a66      	ldr	r2, [pc, #408]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	6213      	str	r3, [r2, #32]
 8005636:	e01c      	b.n	8005672 <HAL_RCC_OscConfig+0x36e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b05      	cmp	r3, #5
 800563e:	d10c      	bne.n	800565a <HAL_RCC_OscConfig+0x356>
 8005640:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4a60      	ldr	r2, [pc, #384]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005646:	f043 0304 	orr.w	r3, r3, #4
 800564a:	6213      	str	r3, [r2, #32]
 800564c:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	4a5d      	ldr	r2, [pc, #372]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6213      	str	r3, [r2, #32]
 8005658:	e00b      	b.n	8005672 <HAL_RCC_OscConfig+0x36e>
 800565a:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	4a5a      	ldr	r2, [pc, #360]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6213      	str	r3, [r2, #32]
 8005666:	4b58      	ldr	r3, [pc, #352]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	4a57      	ldr	r2, [pc, #348]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d015      	beq.n	80056a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567a:	f7fd fe63 	bl	8003344 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd fe5f 	bl	8003344 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e0b1      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ee      	beq.n	8005682 <HAL_RCC_OscConfig+0x37e>
 80056a4:	e014      	b.n	80056d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a6:	f7fd fe4d 	bl	8003344 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fd fe49 	bl	8003344 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e09b      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c4:	4b40      	ldr	r3, [pc, #256]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ee      	bne.n	80056ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d6:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80056dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8087 	beq.w	80057fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d061      	beq.n	80057bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d146      	bne.n	800578e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005700:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <HAL_RCC_OscConfig+0x4cc>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fd fe1d 	bl	8003344 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fd fe19 	bl	8003344 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e06d      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005720:	4b29      	ldr	r3, [pc, #164]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d108      	bne.n	8005748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4921      	ldr	r1, [pc, #132]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a19      	ldr	r1, [r3, #32]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	430b      	orrs	r3, r1
 800575a:	491b      	ldr	r1, [pc, #108]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_RCC_OscConfig+0x4cc>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fd fded 	bl	8003344 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576e:	f7fd fde9 	bl	8003344 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e03d      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005780:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x46a>
 800578c:	e035      	b.n	80057fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_RCC_OscConfig+0x4cc>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fd fdd6 	bl	8003344 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579c:	f7fd fdd2 	bl	8003344 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e026      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x498>
 80057ba:	e01e      	b.n	80057fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d107      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e019      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
 80057d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_OscConfig+0x500>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000

08005808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0d0      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800581c:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d910      	bls.n	800584c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582a:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 0207 	bic.w	r2, r3, #7
 8005832:	4965      	ldr	r1, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4313      	orrs	r3, r2
 8005838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800586e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	4313      	orrs	r3, r2
 8005898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d040      	beq.n	8005928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d115      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c6:	4b41      	ldr	r3, [pc, #260]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e073      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d6:	4b3d      	ldr	r3, [pc, #244]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e06b      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4936      	ldr	r1, [pc, #216]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058f8:	f7fd fd24 	bl	8003344 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005900:	f7fd fd20 	bl	8003344 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e053      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 020c 	and.w	r2, r3, #12
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	429a      	cmp	r2, r3
 8005926:	d1eb      	bne.n	8005900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005928:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d210      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 0207 	bic.w	r2, r3, #7
 800593e:	4922      	ldr	r1, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f821 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c8>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1cc>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1d0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd fc82 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40022000 	.word	0x40022000
 80059cc:	40021000 	.word	0x40021000
 80059d0:	08008b84 	.word	0x08008b84
 80059d4:	20000098 	.word	0x20000098
 80059d8:	2000009c 	.word	0x2000009c

080059dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x94>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x30>
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x36>
 8005a0a:	e027      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a0e:	613b      	str	r3, [r7, #16]
      break;
 8005a10:	e027      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	0c9b      	lsrs	r3, r3, #18
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a1c:	5cd3      	ldrb	r3, [r2, r3]
 8005a1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	0c5b      	lsrs	r3, r3, #17
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a3e:	fb03 f202 	mul.w	r2, r3, r2
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e004      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	613b      	str	r3, [r7, #16]
      break;
 8005a5a:	e002      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a5e:	613b      	str	r3, [r7, #16]
      break;
 8005a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a62:	693b      	ldr	r3, [r7, #16]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	007a1200 	.word	0x007a1200
 8005a78:	08008b9c 	.word	0x08008b9c
 8005a7c:	08008bac 	.word	0x08008bac
 8005a80:	003d0900 	.word	0x003d0900

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b02      	ldr	r3, [pc, #8]	; (8005a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000098 	.word	0x20000098

08005a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a9c:	f7ff fff2 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4903      	ldr	r1, [pc, #12]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	08008b94 	.word	0x08008b94

08005ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac4:	f7ff ffde 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	0adb      	lsrs	r3, r3, #11
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4903      	ldr	r1, [pc, #12]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	08008b94 	.word	0x08008b94

08005ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <RCC_Delay+0x34>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <RCC_Delay+0x38>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	0a5b      	lsrs	r3, r3, #9
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b04:	bf00      	nop
  }
  while (Delay --);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1e5a      	subs	r2, r3, #1
 8005b0a:	60fa      	str	r2, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f9      	bne.n	8005b04 <RCC_Delay+0x1c>
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	20000098 	.word	0x20000098
 8005b20:	10624dd3 	.word	0x10624dd3

08005b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e041      	b.n	8005bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fd f934 	bl	8002db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f000 fccc 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d001      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e044      	b.n	8005c66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_TIM_Base_Start_IT+0xac>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d00e      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <HAL_TIM_Base_Start_IT+0xb8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x6c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d111      	bne.n	8005c54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d010      	beq.n	8005c64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0201 	orr.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c52:	e007      	b.n	8005c64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00

08005c84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e041      	b.n	8005d1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd f948 	bl	8002f40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f000 fc1c 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_IC_Start_IT+0x1e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e013      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x46>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_IC_Start_IT+0x2e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e00b      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x46>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_IC_Start_IT+0x3e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e003      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x46>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <HAL_TIM_IC_Start_IT+0x58>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e013      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0x80>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d104      	bne.n	8005d8c <HAL_TIM_IC_Start_IT+0x68>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	e00b      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0x80>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d104      	bne.n	8005d9c <HAL_TIM_IC_Start_IT+0x78>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e003      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0x80>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dac:	7b7b      	ldrb	r3, [r7, #13]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0c2      	b.n	8005f3c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_IC_Start_IT+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc4:	e013      	b.n	8005dee <HAL_TIM_IC_Start_IT+0xca>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_IC_Start_IT+0xb2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd4:	e00b      	b.n	8005dee <HAL_TIM_IC_Start_IT+0xca>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_IC_Start_IT+0xc2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de4:	e003      	b.n	8005dee <HAL_TIM_IC_Start_IT+0xca>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_IC_Start_IT+0xda>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dfc:	e013      	b.n	8005e26 <HAL_TIM_IC_Start_IT+0x102>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_IC_Start_IT+0xea>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e0c:	e00b      	b.n	8005e26 <HAL_TIM_IC_Start_IT+0x102>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start_IT+0xfa>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1c:	e003      	b.n	8005e26 <HAL_TIM_IC_Start_IT+0x102>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d841      	bhi.n	8005eb0 <HAL_TIM_IC_Start_IT+0x18c>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <HAL_TIM_IC_Start_IT+0x110>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005eb1 	.word	0x08005eb1
 8005e3c:	08005eb1 	.word	0x08005eb1
 8005e40:	08005eb1 	.word	0x08005eb1
 8005e44:	08005e7b 	.word	0x08005e7b
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005eb1 	.word	0x08005eb1
 8005e50:	08005eb1 	.word	0x08005eb1
 8005e54:	08005e8d 	.word	0x08005e8d
 8005e58:	08005eb1 	.word	0x08005eb1
 8005e5c:	08005eb1 	.word	0x08005eb1
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005e9f 	.word	0x08005e9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0202 	orr.w	r2, r2, #2
 8005e76:	60da      	str	r2, [r3, #12]
      break;
 8005e78:	e01d      	b.n	8005eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0204 	orr.w	r2, r2, #4
 8005e88:	60da      	str	r2, [r3, #12]
      break;
 8005e8a:	e014      	b.n	8005eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	60da      	str	r2, [r3, #12]
      break;
 8005e9c:	e00b      	b.n	8005eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0210 	orr.w	r2, r2, #16
 8005eac:	60da      	str	r2, [r3, #12]
      break;
 8005eae:	e002      	b.n	8005eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13e      	bne.n	8005f3a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fd44 	bl	8006952 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <HAL_TIM_IC_Start_IT+0x220>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d018      	beq.n	8005f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_TIM_IC_Start_IT+0x224>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d00e      	beq.n	8005f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_TIM_IC_Start_IT+0x228>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_TIM_IC_Start_IT+0x22c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <HAL_TIM_IC_Start_IT+0x230>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d111      	bne.n	8005f2a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d010      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f28:	e007      	b.n	8005f3a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00

08005f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0202 	mvn.w	r2, #2
 8005f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fb fbca 	bl	8001734 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa91 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa97 	bl	80064dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0204 	mvn.w	r2, #4
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fba0 	bl	8001734 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa67 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa6d 	bl	80064dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b08      	cmp	r3, #8
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0208 	mvn.w	r2, #8
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb fb76 	bl	8001734 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa3d 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa43 	bl	80064dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d122      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b10      	cmp	r3, #16
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0210 	mvn.w	r2, #16
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2208      	movs	r2, #8
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fb4c 	bl	8001734 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa13 	bl	80064ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa19 	bl	80064dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10e      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0201 	mvn.w	r2, #1
 80060d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9ee 	bl	80064b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b80      	cmp	r3, #128	; 0x80
 80060e8:	d10e      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fcbf 	bl	8006a86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d10e      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d107      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9dd 	bl	80064ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b20      	cmp	r3, #32
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0220 	mvn.w	r2, #32
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fc8a 	bl	8006a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006182:	2302      	movs	r3, #2
 8006184:	e088      	b.n	8006298 <HAL_TIM_IC_ConfigChannel+0x130>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80061a4:	f000 fa26 	bl	80065f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 020c 	bic.w	r2, r2, #12
 80061b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6999      	ldr	r1, [r3, #24]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	619a      	str	r2, [r3, #24]
 80061ca:	e060      	b.n	800628e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d11c      	bne.n	800620c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80061e2:	f000 fa9b 	bl	800671c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6999      	ldr	r1, [r3, #24]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
 800620a:	e040      	b.n	800628e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d11b      	bne.n	800624a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006222:	f000 fae6 	bl	80067f2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 020c 	bic.w	r2, r2, #12
 8006234:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
 8006248:	e021      	b.n	800628e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d11c      	bne.n	800628a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006260:	f000 fb02 	bl	8006868 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006272:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69d9      	ldr	r1, [r3, #28]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	021a      	lsls	r2, r3, #8
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	61da      	str	r2, [r3, #28]
 8006288:	e001      	b.n	800628e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_ConfigClockSource+0x1c>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0b4      	b.n	8006426 <HAL_TIM_ConfigClockSource+0x186>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f4:	d03e      	beq.n	8006374 <HAL_TIM_ConfigClockSource+0xd4>
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fa:	f200 8087 	bhi.w	800640c <HAL_TIM_ConfigClockSource+0x16c>
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006302:	f000 8086 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x172>
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630a:	d87f      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b70      	cmp	r3, #112	; 0x70
 800630e:	d01a      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xa6>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d87b      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d050      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x11a>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d877      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b50      	cmp	r3, #80	; 0x50
 800631e:	d03c      	beq.n	800639a <HAL_TIM_ConfigClockSource+0xfa>
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d873      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d058      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x13a>
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d86f      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b30      	cmp	r3, #48	; 0x30
 800632e:	d064      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d86b      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d060      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d867      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d05c      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d05a      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	e062      	b.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	f000 fadd 	bl	8006914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	609a      	str	r2, [r3, #8]
      break;
 8006372:	e04f      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006384:	f000 fac6 	bl	8006914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006396:	609a      	str	r2, [r3, #8]
      break;
 8006398:	e03c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	461a      	mov	r2, r3
 80063a8:	f000 f98a 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2150      	movs	r1, #80	; 0x50
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa94 	bl	80068e0 <TIM_ITRx_SetConfig>
      break;
 80063b8:	e02c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 f9e4 	bl	8006794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2160      	movs	r1, #96	; 0x60
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fa84 	bl	80068e0 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e01c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 f96a 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2140      	movs	r1, #64	; 0x40
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa74 	bl	80068e0 <TIM_ITRx_SetConfig>
      break;
 80063f8:	e00c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f000 fa6b 	bl	80068e0 <TIM_ITRx_SetConfig>
      break;
 800640a:	e003      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e000      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d831      	bhi.n	80064a8 <HAL_TIM_ReadCapturedValue+0x78>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006481 	.word	0x08006481
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	0800648b 	.word	0x0800648b
 8006460:	080064a9 	.word	0x080064a9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064a9 	.word	0x080064a9
 800646c:	08006495 	.word	0x08006495
 8006470:	080064a9 	.word	0x080064a9
 8006474:	080064a9 	.word	0x080064a9
 8006478:	080064a9 	.word	0x080064a9
 800647c:	0800649f 	.word	0x0800649f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	60fb      	str	r3, [r7, #12]

      break;
 8006488:	e00f      	b.n	80064aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	60fb      	str	r3, [r7, #12]

      break;
 8006492:	e00a      	b.n	80064aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	60fb      	str	r3, [r7, #12]

      break;
 800649c:	e005      	b.n	80064aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	60fb      	str	r3, [r7, #12]

      break;
 80064a6:	e000      	b.n	80064aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064a8:	bf00      	nop
  }

  return tmpreg;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop

080064b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <TIM_Base_SetConfig+0xe0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00f      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d00b      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <TIM_Base_SetConfig+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <TIM_Base_SetConfig+0xec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <TIM_Base_SetConfig+0xf0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d108      	bne.n	8006552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <TIM_Base_SetConfig+0xe0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <TIM_Base_SetConfig+0x82>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00f      	beq.n	8006582 <TIM_Base_SetConfig+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006568:	d00b      	beq.n	8006582 <TIM_Base_SetConfig+0x82>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <TIM_Base_SetConfig+0xe8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_Base_SetConfig+0x82>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <TIM_Base_SetConfig+0xec>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_Base_SetConfig+0x82>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1c      	ldr	r2, [pc, #112]	; (80065f0 <TIM_Base_SetConfig+0xf0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d108      	bne.n	8006594 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <TIM_Base_SetConfig+0xe0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_Base_SetConfig+0xc8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	615a      	str	r2, [r3, #20]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00

080065f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f023 0201 	bic.w	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4a23      	ldr	r2, [pc, #140]	; (80066ac <TIM_TI1_SetConfig+0xb8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_TI1_SetConfig+0x56>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <TIM_TI1_SetConfig+0xbc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_TI1_SetConfig+0x56>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006630:	d00b      	beq.n	800664a <TIM_TI1_SetConfig+0x56>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <TIM_TI1_SetConfig+0xc0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_TI1_SetConfig+0x56>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <TIM_TI1_SetConfig+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_TI1_SetConfig+0x56>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <TIM_TI1_SetConfig+0xc8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d101      	bne.n	800664e <TIM_TI1_SetConfig+0x5a>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <TIM_TI1_SetConfig+0x5c>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e003      	b.n	800666e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	b2db      	uxtb	r3, r3
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f023 030a 	bic.w	r3, r3, #10
 8006688:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 030a 	and.w	r3, r3, #10
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00

080066c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f023 0210 	bic.w	r2, r3, #16
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	031b      	lsls	r3, r3, #12
 8006760:	b29b      	uxth	r3, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800676e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0210 	bic.w	r2, r3, #16
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	031b      	lsls	r3, r3, #12
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b087      	sub	sp, #28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	b2db      	uxtb	r3, r3
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006842:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	031b      	lsls	r3, r3, #12
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	031b      	lsls	r3, r3, #12
 80068c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f043 0307 	orr.w	r3, r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	609a      	str	r2, [r3, #8]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr

08006914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006952:	b480      	push	{r7}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2201      	movs	r2, #1
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	43db      	mvns	r3, r3
 8006974:	401a      	ands	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1a      	ldr	r2, [r3, #32]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	431a      	orrs	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
	...

0800699c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e050      	b.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a14      	ldr	r2, [pc, #80]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10c      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00

08006a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e042      	b.n	8006b30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fc fada 	bl	8003078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2224      	movs	r2, #36	; 0x24
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 ff53 	bl	8007988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d16d      	bne.n	8006c34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Transmit+0x2c>
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e066      	b.n	8006c36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b76:	f7fc fbe5 	bl	8003344 <HAL_GetTick>
 8006b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b90:	d108      	bne.n	8006ba4 <HAL_UART_Transmit+0x6c>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e003      	b.n	8006bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bac:	e02a      	b.n	8006c04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fc1b 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e036      	b.n	8006c36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	3302      	adds	r3, #2
 8006be2:	61bb      	str	r3, [r7, #24]
 8006be4:	e007      	b.n	8006bf6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	781a      	ldrb	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1cf      	bne.n	8006bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2140      	movs	r1, #64	; 0x40
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fbeb 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e006      	b.n	8006c36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d112      	bne.n	8006c7e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Receive_DMA+0x26>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e00b      	b.n	8006c80 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	461a      	mov	r2, r3
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fc2b 	bl	80074d0 <UART_Start_Receive_DMA>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b0ba      	sub	sp, #232	; 0xe8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_UART_IRQHandler+0x66>
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fd90 	bl	800780c <UART_Receive_IT>
      return;
 8006cec:	e25b      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80de 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x22c>
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80d1 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_UART_IRQHandler+0xae>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f043 0201 	orr.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_UART_IRQHandler+0xd2>
 8006d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	f043 0202 	orr.w	r2, r3, #2
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xf6>
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f043 0204 	orr.w	r2, r3, #4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_UART_IRQHandler+0x126>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	f043 0208 	orr.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 81f2 	beq.w	800719c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x14e>
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fd1b 	bl	800780c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <HAL_UART_IRQHandler+0x17a>
 8006dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04f      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fc25 	bl	8007652 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d041      	beq.n	8006e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3314      	adds	r3, #20
 8006e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1d9      	bne.n	8006e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d013      	beq.n	8006e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	4a7e      	ldr	r2, [pc, #504]	; (8007068 <HAL_UART_IRQHandler+0x3e0>)
 8006e70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fc fcb2 	bl	80037e0 <HAL_DMA_Abort_IT>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d016      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e00e      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f99c 	bl	80071d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e00a      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f998 	bl	80071d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e006      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f994 	bl	80071d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006eae:	e175      	b.n	800719c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	bf00      	nop
    return;
 8006eb2:	e173      	b.n	800719c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f040 814f 	bne.w	800715c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8148 	beq.w	800715c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8141 	beq.w	800715c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80b6 	beq.w	800706c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8145 	beq.w	80071a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f080 813e 	bcs.w	80071a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f000 8088 	beq.w	8007048 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1d9      	bne.n	8006f38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fa8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e1      	bne.n	8006f84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fe4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e3      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	330c      	adds	r3, #12
 800700c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007018:	f023 0310 	bic.w	r3, r3, #16
 800701c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800702a:	65ba      	str	r2, [r7, #88]	; 0x58
 800702c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e3      	bne.n	8007006 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	4618      	mov	r0, r3
 8007044:	f7fc fb90 	bl	8003768 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007056:	b29b      	uxth	r3, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8bf 	bl	80071e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007064:	e09c      	b.n	80071a0 <HAL_UART_IRQHandler+0x518>
 8007066:	bf00      	nop
 8007068:	08007717 	.word	0x08007717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007074:	b29b      	uxth	r3, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 808e 	beq.w	80071a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8089 	beq.w	80071a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070b6:	647a      	str	r2, [r7, #68]	; 0x44
 80070b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	623b      	str	r3, [r7, #32]
   return(result);
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ee:	633a      	str	r2, [r7, #48]	; 0x30
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007134:	61fa      	str	r2, [r7, #28]
 8007136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	617b      	str	r3, [r7, #20]
   return(result);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e3      	bne.n	8007110 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800714e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f844 	bl	80071e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800715a:	e023      	b.n	80071a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800715c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <HAL_UART_IRQHandler+0x4f4>
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fae2 	bl	800773e <UART_Transmit_IT>
    return;
 800717a:	e014      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <HAL_UART_IRQHandler+0x51e>
 8007188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fb21 	bl	80077dc <UART_EndTransmit_IT>
    return;
 800719a:	e004      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80071a4:	bf00      	nop
  }
}
 80071a6:	37e8      	adds	r7, #232	; 0xe8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b09c      	sub	sp, #112	; 0x70
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d172      	bne.n	80072fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007216:	2200      	movs	r2, #0
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800722a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007230:	66bb      	str	r3, [r7, #104]	; 0x68
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800723a:	65ba      	str	r2, [r7, #88]	; 0x58
 800723c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	667b      	str	r3, [r7, #100]	; 0x64
 8007266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800726e:	647a      	str	r2, [r7, #68]	; 0x44
 8007270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	623b      	str	r3, [r7, #32]
   return(result);
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007298:	663b      	str	r3, [r7, #96]	; 0x60
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072a2:	633a      	str	r2, [r7, #48]	; 0x30
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d119      	bne.n	80072fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f023 0310 	bic.w	r3, r3, #16
 80072dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	330c      	adds	r3, #12
 80072e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072e6:	61fa      	str	r2, [r7, #28]
 80072e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	617b      	str	r3, [r7, #20]
   return(result);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	2200      	movs	r2, #0
 80072fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	2b01      	cmp	r3, #1
 8007306:	d106      	bne.n	8007316 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800730c:	4619      	mov	r1, r3
 800730e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007310:	f7ff ff67 	bl	80071e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007314:	e002      	b.n	800731c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007316:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007318:	f7fa fde8 	bl	8001eec <HAL_UART_RxCpltCallback>
}
 800731c:	bf00      	nop
 800731e:	3770      	adds	r7, #112	; 0x70
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	2b01      	cmp	r3, #1
 800733e:	d108      	bne.n	8007352 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	b29b      	uxth	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff49 	bl	80071e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007350:	e002      	b.n	8007358 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff ff33 	bl	80071be <HAL_UART_RxHalfCpltCallback>
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b21      	cmp	r3, #33	; 0x21
 8007392:	d108      	bne.n	80073a6 <UART_DMAError+0x46>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073a0:	68b8      	ldr	r0, [r7, #8]
 80073a2:	f000 f92f 	bl	8007604 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b22      	cmp	r3, #34	; 0x22
 80073c6:	d108      	bne.n	80073da <UART_DMAError+0x7a>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073d4:	68b8      	ldr	r0, [r7, #8]
 80073d6:	f000 f93c 	bl	8007652 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	f043 0210 	orr.w	r2, r3, #16
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e6:	68b8      	ldr	r0, [r7, #8]
 80073e8:	f7ff fef2 	bl	80071d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b090      	sub	sp, #64	; 0x40
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007404:	e050      	b.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d04c      	beq.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800740e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <UART_WaitOnFlagUntilTimeout+0x30>
 8007414:	f7fb ff96 	bl	8003344 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007420:	429a      	cmp	r2, r3
 8007422:	d241      	bcs.n	80074a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007444:	637a      	str	r2, [r7, #52]	; 0x34
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e5      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007478:	623a      	str	r2, [r7, #32]
 800747a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	61bb      	str	r3, [r7, #24]
   return(result);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e00f      	b.n	80074c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4013      	ands	r3, r2
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d09f      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3740      	adds	r7, #64	; 0x40
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b098      	sub	sp, #96	; 0x60
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2222      	movs	r2, #34	; 0x22
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	4a3e      	ldr	r2, [pc, #248]	; (80075f8 <UART_Start_Receive_DMA+0x128>)
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007504:	4a3d      	ldr	r2, [pc, #244]	; (80075fc <UART_Start_Receive_DMA+0x12c>)
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750c:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <UART_Start_Receive_DMA+0x130>)
 800750e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	2200      	movs	r2, #0
 8007516:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007518:	f107 0308 	add.w	r3, r7, #8
 800751c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3304      	adds	r3, #4
 8007528:	4619      	mov	r1, r3
 800752a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	f7fc f8ba 	bl	80036a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007534:	2300      	movs	r3, #0
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d019      	beq.n	8007586 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	330c      	adds	r3, #12
 8007558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007568:	65bb      	str	r3, [r7, #88]	; 0x58
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007572:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007574:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e5      	bne.n	8007552 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3314      	adds	r3, #20
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	657b      	str	r3, [r7, #84]	; 0x54
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e5      	bne.n	8007586 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3314      	adds	r3, #20
 80075c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	653b      	str	r3, [r7, #80]	; 0x50
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075da:	627a      	str	r2, [r7, #36]	; 0x24
 80075dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6a39      	ldr	r1, [r7, #32]
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3760      	adds	r7, #96	; 0x60
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	080071f9 	.word	0x080071f9
 80075fc:	08007325 	.word	0x08007325
 8007600:	08007361 	.word	0x08007361

08007604 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	330c      	adds	r3, #12
 8007612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	60bb      	str	r3, [r7, #8]
   return(result);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007622:	61fb      	str	r3, [r7, #28]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	61ba      	str	r2, [r7, #24]
 800762e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	613b      	str	r3, [r7, #16]
   return(result);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007648:	bf00      	nop
 800764a:	3724      	adds	r7, #36	; 0x24
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007652:	b480      	push	{r7}
 8007654:	b095      	sub	sp, #84	; 0x54
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800767a:	643a      	str	r2, [r7, #64]	; 0x40
 800767c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	61fb      	str	r3, [r7, #28]
   return(result);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d119      	bne.n	80076fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f023 0310 	bic.w	r3, r3, #16
 80076e0:	647b      	str	r3, [r7, #68]	; 0x44
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ea:	61ba      	str	r2, [r7, #24]
 80076ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6979      	ldr	r1, [r7, #20]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	613b      	str	r3, [r7, #16]
   return(result);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800770c:	bf00      	nop
 800770e:	3754      	adds	r7, #84	; 0x54
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fd4d 	bl	80071d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b21      	cmp	r3, #33	; 0x21
 8007750:	d13e      	bne.n	80077d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	d114      	bne.n	8007786 <UART_Transmit_IT+0x48>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d110      	bne.n	8007786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	621a      	str	r2, [r3, #32]
 8007784:	e008      	b.n	8007798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6211      	str	r1, [r2, #32]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4619      	mov	r1, r3
 80077a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10f      	bne.n	80077cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e000      	b.n	80077d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077d0:	2302      	movs	r3, #2
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fcd5 	bl	80071ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b22      	cmp	r3, #34	; 0x22
 800781e:	f040 80ae 	bne.w	800797e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d117      	bne.n	800785c <UART_Receive_IT+0x50>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d113      	bne.n	800785c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	b29a      	uxth	r2, r3
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	629a      	str	r2, [r3, #40]	; 0x28
 800785a:	e026      	b.n	80078aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786e:	d007      	beq.n	8007880 <UART_Receive_IT+0x74>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <UART_Receive_IT+0x82>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b2da      	uxtb	r2, r3
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e008      	b.n	80078a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789a:	b2da      	uxtb	r2, r3
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	4619      	mov	r1, r3
 80078b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d15d      	bne.n	800797a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0220 	bic.w	r2, r2, #32
 80078cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	2b01      	cmp	r3, #1
 8007902:	d135      	bne.n	8007970 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	613b      	str	r3, [r7, #16]
   return(result);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f023 0310 	bic.w	r3, r3, #16
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	330c      	adds	r3, #12
 8007928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792a:	623a      	str	r2, [r7, #32]
 800792c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	69f9      	ldr	r1, [r7, #28]
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	61bb      	str	r3, [r7, #24]
   return(result);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e5      	bne.n	800790a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b10      	cmp	r3, #16
 800794a:	d10a      	bne.n	8007962 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff fc3a 	bl	80071e2 <HAL_UARTEx_RxEventCallback>
 800796e:	e002      	b.n	8007976 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fa fabb 	bl	8001eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e002      	b.n	8007980 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3730      	adds	r7, #48	; 0x30
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80079c2:	f023 030c 	bic.w	r3, r3, #12
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	430b      	orrs	r3, r1
 80079ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2c      	ldr	r2, [pc, #176]	; (8007a9c <UART_SetConfig+0x114>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079f0:	f7fe f866 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	e002      	b.n	80079fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079f8:	f7fe f84e 	bl	8005a98 <HAL_RCC_GetPCLK1Freq>
 80079fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009a      	lsls	r2, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <UART_SetConfig+0x118>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	0119      	lsls	r1, r3, #4
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009a      	lsls	r2, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <UART_SetConfig+0x118>)
 8007a36:	fba3 0302 	umull	r0, r3, r3, r2
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	2064      	movs	r0, #100	; 0x64
 8007a3e:	fb00 f303 	mul.w	r3, r0, r3
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	3332      	adds	r3, #50	; 0x32
 8007a48:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <UART_SetConfig+0x118>)
 8007a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a54:	4419      	add	r1, r3
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009a      	lsls	r2, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <UART_SetConfig+0x118>)
 8007a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	2064      	movs	r0, #100	; 0x64
 8007a76:	fb00 f303 	mul.w	r3, r0, r3
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	3332      	adds	r3, #50	; 0x32
 8007a80:	4a07      	ldr	r2, [pc, #28]	; (8007aa0 <UART_SetConfig+0x118>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	440a      	add	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a94:	bf00      	nop
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40013800 	.word	0x40013800
 8007aa0:	51eb851f 	.word	0x51eb851f

08007aa4 <siprintf>:
 8007aa4:	b40e      	push	{r1, r2, r3}
 8007aa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007aaa:	b500      	push	{lr}
 8007aac:	b09c      	sub	sp, #112	; 0x70
 8007aae:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	9006      	str	r0, [sp, #24]
 8007ab4:	9107      	str	r1, [sp, #28]
 8007ab6:	9104      	str	r1, [sp, #16]
 8007ab8:	4808      	ldr	r0, [pc, #32]	; (8007adc <siprintf+0x38>)
 8007aba:	4909      	ldr	r1, [pc, #36]	; (8007ae0 <siprintf+0x3c>)
 8007abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac0:	9105      	str	r1, [sp, #20]
 8007ac2:	6800      	ldr	r0, [r0, #0]
 8007ac4:	a902      	add	r1, sp, #8
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	f000 f98e 	bl	8007de8 <_svfiprintf_r>
 8007acc:	2200      	movs	r2, #0
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	b01c      	add	sp, #112	; 0x70
 8007ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad8:	b003      	add	sp, #12
 8007ada:	4770      	bx	lr
 8007adc:	200000f0 	.word	0x200000f0
 8007ae0:	ffff0208 	.word	0xffff0208

08007ae4 <memset>:
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4402      	add	r2, r0
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d100      	bne.n	8007aee <memset+0xa>
 8007aec:	4770      	bx	lr
 8007aee:	f803 1b01 	strb.w	r1, [r3], #1
 8007af2:	e7f9      	b.n	8007ae8 <memset+0x4>

08007af4 <__errno>:
 8007af4:	4b01      	ldr	r3, [pc, #4]	; (8007afc <__errno+0x8>)
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200000f0 	.word	0x200000f0

08007b00 <__libc_init_array>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	2600      	movs	r6, #0
 8007b04:	4d0c      	ldr	r5, [pc, #48]	; (8007b38 <__libc_init_array+0x38>)
 8007b06:	4c0d      	ldr	r4, [pc, #52]	; (8007b3c <__libc_init_array+0x3c>)
 8007b08:	1b64      	subs	r4, r4, r5
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	42a6      	cmp	r6, r4
 8007b0e:	d109      	bne.n	8007b24 <__libc_init_array+0x24>
 8007b10:	f001 f81c 	bl	8008b4c <_init>
 8007b14:	2600      	movs	r6, #0
 8007b16:	4d0a      	ldr	r5, [pc, #40]	; (8007b40 <__libc_init_array+0x40>)
 8007b18:	4c0a      	ldr	r4, [pc, #40]	; (8007b44 <__libc_init_array+0x44>)
 8007b1a:	1b64      	subs	r4, r4, r5
 8007b1c:	10a4      	asrs	r4, r4, #2
 8007b1e:	42a6      	cmp	r6, r4
 8007b20:	d105      	bne.n	8007b2e <__libc_init_array+0x2e>
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b28:	4798      	blx	r3
 8007b2a:	3601      	adds	r6, #1
 8007b2c:	e7ee      	b.n	8007b0c <__libc_init_array+0xc>
 8007b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b32:	4798      	blx	r3
 8007b34:	3601      	adds	r6, #1
 8007b36:	e7f2      	b.n	8007b1e <__libc_init_array+0x1e>
 8007b38:	08008c58 	.word	0x08008c58
 8007b3c:	08008c58 	.word	0x08008c58
 8007b40:	08008c58 	.word	0x08008c58
 8007b44:	08008c5c 	.word	0x08008c5c

08007b48 <__retarget_lock_acquire_recursive>:
 8007b48:	4770      	bx	lr

08007b4a <__retarget_lock_release_recursive>:
 8007b4a:	4770      	bx	lr

08007b4c <_free_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4605      	mov	r5, r0
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d040      	beq.n	8007bd6 <_free_r+0x8a>
 8007b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b58:	1f0c      	subs	r4, r1, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfb8      	it	lt
 8007b5e:	18e4      	addlt	r4, r4, r3
 8007b60:	f000 f8dc 	bl	8007d1c <__malloc_lock>
 8007b64:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <_free_r+0x8c>)
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	b933      	cbnz	r3, 8007b78 <_free_r+0x2c>
 8007b6a:	6063      	str	r3, [r4, #4]
 8007b6c:	6014      	str	r4, [r2, #0]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b74:	f000 b8d8 	b.w	8007d28 <__malloc_unlock>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d908      	bls.n	8007b8e <_free_r+0x42>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf01      	itttt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	1809      	addeq	r1, r1, r0
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	e7ed      	b.n	8007b6a <_free_r+0x1e>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x4c>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x42>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1850      	adds	r0, r2, r1
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x6c>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	1850      	adds	r0, r2, r1
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1e0      	bne.n	8007b6e <_free_r+0x22>
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4408      	add	r0, r1
 8007bb2:	6010      	str	r0, [r2, #0]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	e7da      	b.n	8007b6e <_free_r+0x22>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x74>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	e7d6      	b.n	8007b6e <_free_r+0x22>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf01      	itttt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	1809      	addeq	r1, r1, r0
 8007bce:	6021      	streq	r1, [r4, #0]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6054      	str	r4, [r2, #4]
 8007bd4:	e7cb      	b.n	8007b6e <_free_r+0x22>
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	2000063c 	.word	0x2000063c

08007bdc <sbrk_aligned>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4e0e      	ldr	r6, [pc, #56]	; (8007c18 <sbrk_aligned+0x3c>)
 8007be0:	460c      	mov	r4, r1
 8007be2:	6831      	ldr	r1, [r6, #0]
 8007be4:	4605      	mov	r5, r0
 8007be6:	b911      	cbnz	r1, 8007bee <sbrk_aligned+0x12>
 8007be8:	f000 fbaa 	bl	8008340 <_sbrk_r>
 8007bec:	6030      	str	r0, [r6, #0]
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 fba5 	bl	8008340 <_sbrk_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d00a      	beq.n	8007c10 <sbrk_aligned+0x34>
 8007bfa:	1cc4      	adds	r4, r0, #3
 8007bfc:	f024 0403 	bic.w	r4, r4, #3
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d007      	beq.n	8007c14 <sbrk_aligned+0x38>
 8007c04:	1a21      	subs	r1, r4, r0
 8007c06:	4628      	mov	r0, r5
 8007c08:	f000 fb9a 	bl	8008340 <_sbrk_r>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d101      	bne.n	8007c14 <sbrk_aligned+0x38>
 8007c10:	f04f 34ff 	mov.w	r4, #4294967295
 8007c14:	4620      	mov	r0, r4
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	20000640 	.word	0x20000640

08007c1c <_malloc_r>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	1ccd      	adds	r5, r1, #3
 8007c22:	f025 0503 	bic.w	r5, r5, #3
 8007c26:	3508      	adds	r5, #8
 8007c28:	2d0c      	cmp	r5, #12
 8007c2a:	bf38      	it	cc
 8007c2c:	250c      	movcc	r5, #12
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	4607      	mov	r7, r0
 8007c32:	db01      	blt.n	8007c38 <_malloc_r+0x1c>
 8007c34:	42a9      	cmp	r1, r5
 8007c36:	d905      	bls.n	8007c44 <_malloc_r+0x28>
 8007c38:	230c      	movs	r3, #12
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d18 <_malloc_r+0xfc>
 8007c48:	f000 f868 	bl	8007d1c <__malloc_lock>
 8007c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c50:	461c      	mov	r4, r3
 8007c52:	bb5c      	cbnz	r4, 8007cac <_malloc_r+0x90>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7ff ffc0 	bl	8007bdc <sbrk_aligned>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	4604      	mov	r4, r0
 8007c60:	d155      	bne.n	8007d0e <_malloc_r+0xf2>
 8007c62:	f8d8 4000 	ldr.w	r4, [r8]
 8007c66:	4626      	mov	r6, r4
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	d145      	bne.n	8007cf8 <_malloc_r+0xdc>
 8007c6c:	2c00      	cmp	r4, #0
 8007c6e:	d048      	beq.n	8007d02 <_malloc_r+0xe6>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	4631      	mov	r1, r6
 8007c74:	4638      	mov	r0, r7
 8007c76:	eb04 0903 	add.w	r9, r4, r3
 8007c7a:	f000 fb61 	bl	8008340 <_sbrk_r>
 8007c7e:	4581      	cmp	r9, r0
 8007c80:	d13f      	bne.n	8007d02 <_malloc_r+0xe6>
 8007c82:	6821      	ldr	r1, [r4, #0]
 8007c84:	4638      	mov	r0, r7
 8007c86:	1a6d      	subs	r5, r5, r1
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7ff ffa7 	bl	8007bdc <sbrk_aligned>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d037      	beq.n	8007d02 <_malloc_r+0xe6>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	442b      	add	r3, r5
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	f8d8 3000 	ldr.w	r3, [r8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d038      	beq.n	8007d12 <_malloc_r+0xf6>
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	42a2      	cmp	r2, r4
 8007ca4:	d12b      	bne.n	8007cfe <_malloc_r+0xe2>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	e00f      	b.n	8007ccc <_malloc_r+0xb0>
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	1b52      	subs	r2, r2, r5
 8007cb0:	d41f      	bmi.n	8007cf2 <_malloc_r+0xd6>
 8007cb2:	2a0b      	cmp	r2, #11
 8007cb4:	d917      	bls.n	8007ce6 <_malloc_r+0xca>
 8007cb6:	1961      	adds	r1, r4, r5
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	6025      	str	r5, [r4, #0]
 8007cbc:	bf18      	it	ne
 8007cbe:	6059      	strne	r1, [r3, #4]
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	bf08      	it	eq
 8007cc4:	f8c8 1000 	streq.w	r1, [r8]
 8007cc8:	5162      	str	r2, [r4, r5]
 8007cca:	604b      	str	r3, [r1, #4]
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f104 060b 	add.w	r6, r4, #11
 8007cd2:	f000 f829 	bl	8007d28 <__malloc_unlock>
 8007cd6:	f026 0607 	bic.w	r6, r6, #7
 8007cda:	1d23      	adds	r3, r4, #4
 8007cdc:	1af2      	subs	r2, r6, r3
 8007cde:	d0ae      	beq.n	8007c3e <_malloc_r+0x22>
 8007ce0:	1b9b      	subs	r3, r3, r6
 8007ce2:	50a3      	str	r3, [r4, r2]
 8007ce4:	e7ab      	b.n	8007c3e <_malloc_r+0x22>
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	d1dd      	bne.n	8007ca8 <_malloc_r+0x8c>
 8007cec:	f8c8 2000 	str.w	r2, [r8]
 8007cf0:	e7ec      	b.n	8007ccc <_malloc_r+0xb0>
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	6864      	ldr	r4, [r4, #4]
 8007cf6:	e7ac      	b.n	8007c52 <_malloc_r+0x36>
 8007cf8:	4634      	mov	r4, r6
 8007cfa:	6876      	ldr	r6, [r6, #4]
 8007cfc:	e7b4      	b.n	8007c68 <_malloc_r+0x4c>
 8007cfe:	4613      	mov	r3, r2
 8007d00:	e7cc      	b.n	8007c9c <_malloc_r+0x80>
 8007d02:	230c      	movs	r3, #12
 8007d04:	4638      	mov	r0, r7
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	f000 f80e 	bl	8007d28 <__malloc_unlock>
 8007d0c:	e797      	b.n	8007c3e <_malloc_r+0x22>
 8007d0e:	6025      	str	r5, [r4, #0]
 8007d10:	e7dc      	b.n	8007ccc <_malloc_r+0xb0>
 8007d12:	605b      	str	r3, [r3, #4]
 8007d14:	deff      	udf	#255	; 0xff
 8007d16:	bf00      	nop
 8007d18:	2000063c 	.word	0x2000063c

08007d1c <__malloc_lock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__malloc_lock+0x8>)
 8007d1e:	f7ff bf13 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	20000638 	.word	0x20000638

08007d28 <__malloc_unlock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__malloc_unlock+0x8>)
 8007d2a:	f7ff bf0e 	b.w	8007b4a <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000638 	.word	0x20000638

08007d34 <__ssputs_r>:
 8007d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	461f      	mov	r7, r3
 8007d3a:	688e      	ldr	r6, [r1, #8]
 8007d3c:	4682      	mov	sl, r0
 8007d3e:	42be      	cmp	r6, r7
 8007d40:	460c      	mov	r4, r1
 8007d42:	4690      	mov	r8, r2
 8007d44:	680b      	ldr	r3, [r1, #0]
 8007d46:	d82c      	bhi.n	8007da2 <__ssputs_r+0x6e>
 8007d48:	898a      	ldrh	r2, [r1, #12]
 8007d4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d4e:	d026      	beq.n	8007d9e <__ssputs_r+0x6a>
 8007d50:	6965      	ldr	r5, [r4, #20]
 8007d52:	6909      	ldr	r1, [r1, #16]
 8007d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d58:	eba3 0901 	sub.w	r9, r3, r1
 8007d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d60:	1c7b      	adds	r3, r7, #1
 8007d62:	444b      	add	r3, r9
 8007d64:	106d      	asrs	r5, r5, #1
 8007d66:	429d      	cmp	r5, r3
 8007d68:	bf38      	it	cc
 8007d6a:	461d      	movcc	r5, r3
 8007d6c:	0553      	lsls	r3, r2, #21
 8007d6e:	d527      	bpl.n	8007dc0 <__ssputs_r+0x8c>
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7ff ff53 	bl	8007c1c <_malloc_r>
 8007d76:	4606      	mov	r6, r0
 8007d78:	b360      	cbz	r0, 8007dd4 <__ssputs_r+0xa0>
 8007d7a:	464a      	mov	r2, r9
 8007d7c:	6921      	ldr	r1, [r4, #16]
 8007d7e:	f000 fafd 	bl	800837c <memcpy>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	6126      	str	r6, [r4, #16]
 8007d90:	444e      	add	r6, r9
 8007d92:	6026      	str	r6, [r4, #0]
 8007d94:	463e      	mov	r6, r7
 8007d96:	6165      	str	r5, [r4, #20]
 8007d98:	eba5 0509 	sub.w	r5, r5, r9
 8007d9c:	60a5      	str	r5, [r4, #8]
 8007d9e:	42be      	cmp	r6, r7
 8007da0:	d900      	bls.n	8007da4 <__ssputs_r+0x70>
 8007da2:	463e      	mov	r6, r7
 8007da4:	4632      	mov	r2, r6
 8007da6:	4641      	mov	r1, r8
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	f000 faaf 	bl	800830c <memmove>
 8007dae:	2000      	movs	r0, #0
 8007db0:	68a3      	ldr	r3, [r4, #8]
 8007db2:	1b9b      	subs	r3, r3, r6
 8007db4:	60a3      	str	r3, [r4, #8]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	4433      	add	r3, r6
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	f000 fae9 	bl	8008398 <_realloc_r>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d1e0      	bne.n	8007d8e <__ssputs_r+0x5a>
 8007dcc:	4650      	mov	r0, sl
 8007dce:	6921      	ldr	r1, [r4, #16]
 8007dd0:	f7ff febc 	bl	8007b4c <_free_r>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	f8ca 3000 	str.w	r3, [sl]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	e7e9      	b.n	8007dbc <__ssputs_r+0x88>

08007de8 <_svfiprintf_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	4698      	mov	r8, r3
 8007dee:	898b      	ldrh	r3, [r1, #12]
 8007df0:	4607      	mov	r7, r0
 8007df2:	061b      	lsls	r3, r3, #24
 8007df4:	460d      	mov	r5, r1
 8007df6:	4614      	mov	r4, r2
 8007df8:	b09d      	sub	sp, #116	; 0x74
 8007dfa:	d50e      	bpl.n	8007e1a <_svfiprintf_r+0x32>
 8007dfc:	690b      	ldr	r3, [r1, #16]
 8007dfe:	b963      	cbnz	r3, 8007e1a <_svfiprintf_r+0x32>
 8007e00:	2140      	movs	r1, #64	; 0x40
 8007e02:	f7ff ff0b 	bl	8007c1c <_malloc_r>
 8007e06:	6028      	str	r0, [r5, #0]
 8007e08:	6128      	str	r0, [r5, #16]
 8007e0a:	b920      	cbnz	r0, 8007e16 <_svfiprintf_r+0x2e>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	e0d0      	b.n	8007fb8 <_svfiprintf_r+0x1d0>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	616b      	str	r3, [r5, #20]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1e:	2320      	movs	r3, #32
 8007e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e24:	2330      	movs	r3, #48	; 0x30
 8007e26:	f04f 0901 	mov.w	r9, #1
 8007e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e2e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007fd0 <_svfiprintf_r+0x1e8>
 8007e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e36:	4623      	mov	r3, r4
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3e:	b10a      	cbz	r2, 8007e44 <_svfiprintf_r+0x5c>
 8007e40:	2a25      	cmp	r2, #37	; 0x25
 8007e42:	d1f9      	bne.n	8007e38 <_svfiprintf_r+0x50>
 8007e44:	ebba 0b04 	subs.w	fp, sl, r4
 8007e48:	d00b      	beq.n	8007e62 <_svfiprintf_r+0x7a>
 8007e4a:	465b      	mov	r3, fp
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff ff6f 	bl	8007d34 <__ssputs_r>
 8007e56:	3001      	adds	r0, #1
 8007e58:	f000 80a9 	beq.w	8007fae <_svfiprintf_r+0x1c6>
 8007e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e5e:	445a      	add	r2, fp
 8007e60:	9209      	str	r2, [sp, #36]	; 0x24
 8007e62:	f89a 3000 	ldrb.w	r3, [sl]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80a1 	beq.w	8007fae <_svfiprintf_r+0x1c6>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e76:	f10a 0a01 	add.w	sl, sl, #1
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e82:	931a      	str	r3, [sp, #104]	; 0x68
 8007e84:	4654      	mov	r4, sl
 8007e86:	2205      	movs	r2, #5
 8007e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8c:	4850      	ldr	r0, [pc, #320]	; (8007fd0 <_svfiprintf_r+0x1e8>)
 8007e8e:	f000 fa67 	bl	8008360 <memchr>
 8007e92:	9a04      	ldr	r2, [sp, #16]
 8007e94:	b9d8      	cbnz	r0, 8007ece <_svfiprintf_r+0xe6>
 8007e96:	06d0      	lsls	r0, r2, #27
 8007e98:	bf44      	itt	mi
 8007e9a:	2320      	movmi	r3, #32
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea0:	0711      	lsls	r1, r2, #28
 8007ea2:	bf44      	itt	mi
 8007ea4:	232b      	movmi	r3, #43	; 0x2b
 8007ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007eae:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb0:	d015      	beq.n	8007ede <_svfiprintf_r+0xf6>
 8007eb2:	4654      	mov	r4, sl
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f04f 0c0a 	mov.w	ip, #10
 8007eba:	9a07      	ldr	r2, [sp, #28]
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ec2:	3b30      	subs	r3, #48	; 0x30
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d94d      	bls.n	8007f64 <_svfiprintf_r+0x17c>
 8007ec8:	b1b0      	cbz	r0, 8007ef8 <_svfiprintf_r+0x110>
 8007eca:	9207      	str	r2, [sp, #28]
 8007ecc:	e014      	b.n	8007ef8 <_svfiprintf_r+0x110>
 8007ece:	eba0 0308 	sub.w	r3, r0, r8
 8007ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	46a2      	mov	sl, r4
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	e7d2      	b.n	8007e84 <_svfiprintf_r+0x9c>
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	1d19      	adds	r1, r3, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfbb      	ittet	lt
 8007eea:	425b      	neglt	r3, r3
 8007eec:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef0:	9307      	strge	r3, [sp, #28]
 8007ef2:	9307      	strlt	r3, [sp, #28]
 8007ef4:	bfb8      	it	lt
 8007ef6:	9204      	strlt	r2, [sp, #16]
 8007ef8:	7823      	ldrb	r3, [r4, #0]
 8007efa:	2b2e      	cmp	r3, #46	; 0x2e
 8007efc:	d10c      	bne.n	8007f18 <_svfiprintf_r+0x130>
 8007efe:	7863      	ldrb	r3, [r4, #1]
 8007f00:	2b2a      	cmp	r3, #42	; 0x2a
 8007f02:	d134      	bne.n	8007f6e <_svfiprintf_r+0x186>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	3402      	adds	r4, #2
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	9203      	str	r2, [sp, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfb8      	it	lt
 8007f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007fd4 <_svfiprintf_r+0x1ec>
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	4650      	mov	r0, sl
 8007f20:	7821      	ldrb	r1, [r4, #0]
 8007f22:	f000 fa1d 	bl	8008360 <memchr>
 8007f26:	b138      	cbz	r0, 8007f38 <_svfiprintf_r+0x150>
 8007f28:	2240      	movs	r2, #64	; 0x40
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	eba0 000a 	sub.w	r0, r0, sl
 8007f30:	4082      	lsls	r2, r0
 8007f32:	4313      	orrs	r3, r2
 8007f34:	3401      	adds	r4, #1
 8007f36:	9304      	str	r3, [sp, #16]
 8007f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3c:	2206      	movs	r2, #6
 8007f3e:	4826      	ldr	r0, [pc, #152]	; (8007fd8 <_svfiprintf_r+0x1f0>)
 8007f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f44:	f000 fa0c 	bl	8008360 <memchr>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d038      	beq.n	8007fbe <_svfiprintf_r+0x1d6>
 8007f4c:	4b23      	ldr	r3, [pc, #140]	; (8007fdc <_svfiprintf_r+0x1f4>)
 8007f4e:	bb1b      	cbnz	r3, 8007f98 <_svfiprintf_r+0x1b0>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	3307      	adds	r3, #7
 8007f54:	f023 0307 	bic.w	r3, r3, #7
 8007f58:	3308      	adds	r3, #8
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5e:	4433      	add	r3, r6
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	e768      	b.n	8007e36 <_svfiprintf_r+0x4e>
 8007f64:	460c      	mov	r4, r1
 8007f66:	2001      	movs	r0, #1
 8007f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f6c:	e7a6      	b.n	8007ebc <_svfiprintf_r+0xd4>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 0c0a 	mov.w	ip, #10
 8007f74:	4619      	mov	r1, r3
 8007f76:	3401      	adds	r4, #1
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f80:	3a30      	subs	r2, #48	; 0x30
 8007f82:	2a09      	cmp	r2, #9
 8007f84:	d903      	bls.n	8007f8e <_svfiprintf_r+0x1a6>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0c6      	beq.n	8007f18 <_svfiprintf_r+0x130>
 8007f8a:	9105      	str	r1, [sp, #20]
 8007f8c:	e7c4      	b.n	8007f18 <_svfiprintf_r+0x130>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	2301      	movs	r3, #1
 8007f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f96:	e7f0      	b.n	8007f7a <_svfiprintf_r+0x192>
 8007f98:	ab03      	add	r3, sp, #12
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <_svfiprintf_r+0x1f8>)
 8007fa2:	a904      	add	r1, sp, #16
 8007fa4:	f3af 8000 	nop.w
 8007fa8:	1c42      	adds	r2, r0, #1
 8007faa:	4606      	mov	r6, r0
 8007fac:	d1d6      	bne.n	8007f5c <_svfiprintf_r+0x174>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	065b      	lsls	r3, r3, #25
 8007fb2:	f53f af2d 	bmi.w	8007e10 <_svfiprintf_r+0x28>
 8007fb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fb8:	b01d      	add	sp, #116	; 0x74
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <_svfiprintf_r+0x1f8>)
 8007fc8:	a904      	add	r1, sp, #16
 8007fca:	f000 f87d 	bl	80080c8 <_printf_i>
 8007fce:	e7eb      	b.n	8007fa8 <_svfiprintf_r+0x1c0>
 8007fd0:	08008bae 	.word	0x08008bae
 8007fd4:	08008bb4 	.word	0x08008bb4
 8007fd8:	08008bb8 	.word	0x08008bb8
 8007fdc:	00000000 	.word	0x00000000
 8007fe0:	08007d35 	.word	0x08007d35

08007fe4 <_printf_common>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	4616      	mov	r6, r2
 8007fea:	4699      	mov	r9, r3
 8007fec:	688a      	ldr	r2, [r1, #8]
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bfb8      	it	lt
 8007ff6:	4613      	movlt	r3, r2
 8007ff8:	6033      	str	r3, [r6, #0]
 8007ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ffe:	460c      	mov	r4, r1
 8008000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008004:	b10a      	cbz	r2, 800800a <_printf_common+0x26>
 8008006:	3301      	adds	r3, #1
 8008008:	6033      	str	r3, [r6, #0]
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	0699      	lsls	r1, r3, #26
 800800e:	bf42      	ittt	mi
 8008010:	6833      	ldrmi	r3, [r6, #0]
 8008012:	3302      	addmi	r3, #2
 8008014:	6033      	strmi	r3, [r6, #0]
 8008016:	6825      	ldr	r5, [r4, #0]
 8008018:	f015 0506 	ands.w	r5, r5, #6
 800801c:	d106      	bne.n	800802c <_printf_common+0x48>
 800801e:	f104 0a19 	add.w	sl, r4, #25
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	6832      	ldr	r2, [r6, #0]
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	42ab      	cmp	r3, r5
 800802a:	dc2b      	bgt.n	8008084 <_printf_common+0xa0>
 800802c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008030:	1e13      	subs	r3, r2, #0
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	bf18      	it	ne
 8008036:	2301      	movne	r3, #1
 8008038:	0692      	lsls	r2, r2, #26
 800803a:	d430      	bmi.n	800809e <_printf_common+0xba>
 800803c:	4649      	mov	r1, r9
 800803e:	4638      	mov	r0, r7
 8008040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008044:	47c0      	blx	r8
 8008046:	3001      	adds	r0, #1
 8008048:	d023      	beq.n	8008092 <_printf_common+0xae>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	6922      	ldr	r2, [r4, #16]
 800804e:	f003 0306 	and.w	r3, r3, #6
 8008052:	2b04      	cmp	r3, #4
 8008054:	bf14      	ite	ne
 8008056:	2500      	movne	r5, #0
 8008058:	6833      	ldreq	r3, [r6, #0]
 800805a:	f04f 0600 	mov.w	r6, #0
 800805e:	bf08      	it	eq
 8008060:	68e5      	ldreq	r5, [r4, #12]
 8008062:	f104 041a 	add.w	r4, r4, #26
 8008066:	bf08      	it	eq
 8008068:	1aed      	subeq	r5, r5, r3
 800806a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800806e:	bf08      	it	eq
 8008070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008074:	4293      	cmp	r3, r2
 8008076:	bfc4      	itt	gt
 8008078:	1a9b      	subgt	r3, r3, r2
 800807a:	18ed      	addgt	r5, r5, r3
 800807c:	42b5      	cmp	r5, r6
 800807e:	d11a      	bne.n	80080b6 <_printf_common+0xd2>
 8008080:	2000      	movs	r0, #0
 8008082:	e008      	b.n	8008096 <_printf_common+0xb2>
 8008084:	2301      	movs	r3, #1
 8008086:	4652      	mov	r2, sl
 8008088:	4649      	mov	r1, r9
 800808a:	4638      	mov	r0, r7
 800808c:	47c0      	blx	r8
 800808e:	3001      	adds	r0, #1
 8008090:	d103      	bne.n	800809a <_printf_common+0xb6>
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	3501      	adds	r5, #1
 800809c:	e7c1      	b.n	8008022 <_printf_common+0x3e>
 800809e:	2030      	movs	r0, #48	; 0x30
 80080a0:	18e1      	adds	r1, r4, r3
 80080a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080ac:	4422      	add	r2, r4
 80080ae:	3302      	adds	r3, #2
 80080b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b4:	e7c2      	b.n	800803c <_printf_common+0x58>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4622      	mov	r2, r4
 80080ba:	4649      	mov	r1, r9
 80080bc:	4638      	mov	r0, r7
 80080be:	47c0      	blx	r8
 80080c0:	3001      	adds	r0, #1
 80080c2:	d0e6      	beq.n	8008092 <_printf_common+0xae>
 80080c4:	3601      	adds	r6, #1
 80080c6:	e7d9      	b.n	800807c <_printf_common+0x98>

080080c8 <_printf_i>:
 80080c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	7e0f      	ldrb	r7, [r1, #24]
 80080ce:	4691      	mov	r9, r2
 80080d0:	2f78      	cmp	r7, #120	; 0x78
 80080d2:	4680      	mov	r8, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	469a      	mov	sl, r3
 80080d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080de:	d807      	bhi.n	80080f0 <_printf_i+0x28>
 80080e0:	2f62      	cmp	r7, #98	; 0x62
 80080e2:	d80a      	bhi.n	80080fa <_printf_i+0x32>
 80080e4:	2f00      	cmp	r7, #0
 80080e6:	f000 80d5 	beq.w	8008294 <_printf_i+0x1cc>
 80080ea:	2f58      	cmp	r7, #88	; 0x58
 80080ec:	f000 80c1 	beq.w	8008272 <_printf_i+0x1aa>
 80080f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080f8:	e03a      	b.n	8008170 <_printf_i+0xa8>
 80080fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080fe:	2b15      	cmp	r3, #21
 8008100:	d8f6      	bhi.n	80080f0 <_printf_i+0x28>
 8008102:	a101      	add	r1, pc, #4	; (adr r1, 8008108 <_printf_i+0x40>)
 8008104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008108:	08008161 	.word	0x08008161
 800810c:	08008175 	.word	0x08008175
 8008110:	080080f1 	.word	0x080080f1
 8008114:	080080f1 	.word	0x080080f1
 8008118:	080080f1 	.word	0x080080f1
 800811c:	080080f1 	.word	0x080080f1
 8008120:	08008175 	.word	0x08008175
 8008124:	080080f1 	.word	0x080080f1
 8008128:	080080f1 	.word	0x080080f1
 800812c:	080080f1 	.word	0x080080f1
 8008130:	080080f1 	.word	0x080080f1
 8008134:	0800827b 	.word	0x0800827b
 8008138:	080081a1 	.word	0x080081a1
 800813c:	08008235 	.word	0x08008235
 8008140:	080080f1 	.word	0x080080f1
 8008144:	080080f1 	.word	0x080080f1
 8008148:	0800829d 	.word	0x0800829d
 800814c:	080080f1 	.word	0x080080f1
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080080f1 	.word	0x080080f1
 8008158:	080080f1 	.word	0x080080f1
 800815c:	0800823d 	.word	0x0800823d
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	602a      	str	r2, [r5, #0]
 8008168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800816c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008170:	2301      	movs	r3, #1
 8008172:	e0a0      	b.n	80082b6 <_printf_i+0x1ee>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	0607      	lsls	r7, r0, #24
 800817a:	f103 0104 	add.w	r1, r3, #4
 800817e:	6029      	str	r1, [r5, #0]
 8008180:	d501      	bpl.n	8008186 <_printf_i+0xbe>
 8008182:	681e      	ldr	r6, [r3, #0]
 8008184:	e003      	b.n	800818e <_printf_i+0xc6>
 8008186:	0646      	lsls	r6, r0, #25
 8008188:	d5fb      	bpl.n	8008182 <_printf_i+0xba>
 800818a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800818e:	2e00      	cmp	r6, #0
 8008190:	da03      	bge.n	800819a <_printf_i+0xd2>
 8008192:	232d      	movs	r3, #45	; 0x2d
 8008194:	4276      	negs	r6, r6
 8008196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819a:	230a      	movs	r3, #10
 800819c:	4859      	ldr	r0, [pc, #356]	; (8008304 <_printf_i+0x23c>)
 800819e:	e012      	b.n	80081c6 <_printf_i+0xfe>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	1d19      	adds	r1, r3, #4
 80081a6:	6029      	str	r1, [r5, #0]
 80081a8:	0605      	lsls	r5, r0, #24
 80081aa:	d501      	bpl.n	80081b0 <_printf_i+0xe8>
 80081ac:	681e      	ldr	r6, [r3, #0]
 80081ae:	e002      	b.n	80081b6 <_printf_i+0xee>
 80081b0:	0641      	lsls	r1, r0, #25
 80081b2:	d5fb      	bpl.n	80081ac <_printf_i+0xe4>
 80081b4:	881e      	ldrh	r6, [r3, #0]
 80081b6:	2f6f      	cmp	r7, #111	; 0x6f
 80081b8:	bf0c      	ite	eq
 80081ba:	2308      	moveq	r3, #8
 80081bc:	230a      	movne	r3, #10
 80081be:	4851      	ldr	r0, [pc, #324]	; (8008304 <_printf_i+0x23c>)
 80081c0:	2100      	movs	r1, #0
 80081c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081c6:	6865      	ldr	r5, [r4, #4]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	bfa8      	it	ge
 80081cc:	6821      	ldrge	r1, [r4, #0]
 80081ce:	60a5      	str	r5, [r4, #8]
 80081d0:	bfa4      	itt	ge
 80081d2:	f021 0104 	bicge.w	r1, r1, #4
 80081d6:	6021      	strge	r1, [r4, #0]
 80081d8:	b90e      	cbnz	r6, 80081de <_printf_i+0x116>
 80081da:	2d00      	cmp	r5, #0
 80081dc:	d04b      	beq.n	8008276 <_printf_i+0x1ae>
 80081de:	4615      	mov	r5, r2
 80081e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80081e4:	fb03 6711 	mls	r7, r3, r1, r6
 80081e8:	5dc7      	ldrb	r7, [r0, r7]
 80081ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081ee:	4637      	mov	r7, r6
 80081f0:	42bb      	cmp	r3, r7
 80081f2:	460e      	mov	r6, r1
 80081f4:	d9f4      	bls.n	80081e0 <_printf_i+0x118>
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d10b      	bne.n	8008212 <_printf_i+0x14a>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	07de      	lsls	r6, r3, #31
 80081fe:	d508      	bpl.n	8008212 <_printf_i+0x14a>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	6861      	ldr	r1, [r4, #4]
 8008204:	4299      	cmp	r1, r3
 8008206:	bfde      	ittt	le
 8008208:	2330      	movle	r3, #48	; 0x30
 800820a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800820e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008212:	1b52      	subs	r2, r2, r5
 8008214:	6122      	str	r2, [r4, #16]
 8008216:	464b      	mov	r3, r9
 8008218:	4621      	mov	r1, r4
 800821a:	4640      	mov	r0, r8
 800821c:	f8cd a000 	str.w	sl, [sp]
 8008220:	aa03      	add	r2, sp, #12
 8008222:	f7ff fedf 	bl	8007fe4 <_printf_common>
 8008226:	3001      	adds	r0, #1
 8008228:	d14a      	bne.n	80082c0 <_printf_i+0x1f8>
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	b004      	add	sp, #16
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f043 0320 	orr.w	r3, r3, #32
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	2778      	movs	r7, #120	; 0x78
 800823e:	4832      	ldr	r0, [pc, #200]	; (8008308 <_printf_i+0x240>)
 8008240:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	6829      	ldr	r1, [r5, #0]
 8008248:	061f      	lsls	r7, r3, #24
 800824a:	f851 6b04 	ldr.w	r6, [r1], #4
 800824e:	d402      	bmi.n	8008256 <_printf_i+0x18e>
 8008250:	065f      	lsls	r7, r3, #25
 8008252:	bf48      	it	mi
 8008254:	b2b6      	uxthmi	r6, r6
 8008256:	07df      	lsls	r7, r3, #31
 8008258:	bf48      	it	mi
 800825a:	f043 0320 	orrmi.w	r3, r3, #32
 800825e:	6029      	str	r1, [r5, #0]
 8008260:	bf48      	it	mi
 8008262:	6023      	strmi	r3, [r4, #0]
 8008264:	b91e      	cbnz	r6, 800826e <_printf_i+0x1a6>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	f023 0320 	bic.w	r3, r3, #32
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	2310      	movs	r3, #16
 8008270:	e7a6      	b.n	80081c0 <_printf_i+0xf8>
 8008272:	4824      	ldr	r0, [pc, #144]	; (8008304 <_printf_i+0x23c>)
 8008274:	e7e4      	b.n	8008240 <_printf_i+0x178>
 8008276:	4615      	mov	r5, r2
 8008278:	e7bd      	b.n	80081f6 <_printf_i+0x12e>
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	6826      	ldr	r6, [r4, #0]
 800827e:	1d18      	adds	r0, r3, #4
 8008280:	6961      	ldr	r1, [r4, #20]
 8008282:	6028      	str	r0, [r5, #0]
 8008284:	0635      	lsls	r5, r6, #24
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	d501      	bpl.n	800828e <_printf_i+0x1c6>
 800828a:	6019      	str	r1, [r3, #0]
 800828c:	e002      	b.n	8008294 <_printf_i+0x1cc>
 800828e:	0670      	lsls	r0, r6, #25
 8008290:	d5fb      	bpl.n	800828a <_printf_i+0x1c2>
 8008292:	8019      	strh	r1, [r3, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	4615      	mov	r5, r2
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	e7bc      	b.n	8008216 <_printf_i+0x14e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2100      	movs	r1, #0
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	681d      	ldr	r5, [r3, #0]
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 f859 	bl	8008360 <memchr>
 80082ae:	b108      	cbz	r0, 80082b4 <_printf_i+0x1ec>
 80082b0:	1b40      	subs	r0, r0, r5
 80082b2:	6060      	str	r0, [r4, #4]
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	2300      	movs	r3, #0
 80082ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082be:	e7aa      	b.n	8008216 <_printf_i+0x14e>
 80082c0:	462a      	mov	r2, r5
 80082c2:	4649      	mov	r1, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	47d0      	blx	sl
 80082ca:	3001      	adds	r0, #1
 80082cc:	d0ad      	beq.n	800822a <_printf_i+0x162>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	079b      	lsls	r3, r3, #30
 80082d2:	d413      	bmi.n	80082fc <_printf_i+0x234>
 80082d4:	68e0      	ldr	r0, [r4, #12]
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	4298      	cmp	r0, r3
 80082da:	bfb8      	it	lt
 80082dc:	4618      	movlt	r0, r3
 80082de:	e7a6      	b.n	800822e <_printf_i+0x166>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4632      	mov	r2, r6
 80082e4:	4649      	mov	r1, r9
 80082e6:	4640      	mov	r0, r8
 80082e8:	47d0      	blx	sl
 80082ea:	3001      	adds	r0, #1
 80082ec:	d09d      	beq.n	800822a <_printf_i+0x162>
 80082ee:	3501      	adds	r5, #1
 80082f0:	68e3      	ldr	r3, [r4, #12]
 80082f2:	9903      	ldr	r1, [sp, #12]
 80082f4:	1a5b      	subs	r3, r3, r1
 80082f6:	42ab      	cmp	r3, r5
 80082f8:	dcf2      	bgt.n	80082e0 <_printf_i+0x218>
 80082fa:	e7eb      	b.n	80082d4 <_printf_i+0x20c>
 80082fc:	2500      	movs	r5, #0
 80082fe:	f104 0619 	add.w	r6, r4, #25
 8008302:	e7f5      	b.n	80082f0 <_printf_i+0x228>
 8008304:	08008bbf 	.word	0x08008bbf
 8008308:	08008bd0 	.word	0x08008bd0

0800830c <memmove>:
 800830c:	4288      	cmp	r0, r1
 800830e:	b510      	push	{r4, lr}
 8008310:	eb01 0402 	add.w	r4, r1, r2
 8008314:	d902      	bls.n	800831c <memmove+0x10>
 8008316:	4284      	cmp	r4, r0
 8008318:	4623      	mov	r3, r4
 800831a:	d807      	bhi.n	800832c <memmove+0x20>
 800831c:	1e43      	subs	r3, r0, #1
 800831e:	42a1      	cmp	r1, r4
 8008320:	d008      	beq.n	8008334 <memmove+0x28>
 8008322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832a:	e7f8      	b.n	800831e <memmove+0x12>
 800832c:	4601      	mov	r1, r0
 800832e:	4402      	add	r2, r0
 8008330:	428a      	cmp	r2, r1
 8008332:	d100      	bne.n	8008336 <memmove+0x2a>
 8008334:	bd10      	pop	{r4, pc}
 8008336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800833e:	e7f7      	b.n	8008330 <memmove+0x24>

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	2300      	movs	r3, #0
 8008344:	4d05      	ldr	r5, [pc, #20]	; (800835c <_sbrk_r+0x1c>)
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa fb54 	bl	80029f8 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000634 	.word	0x20000634

08008360 <memchr>:
 8008360:	4603      	mov	r3, r0
 8008362:	b510      	push	{r4, lr}
 8008364:	b2c9      	uxtb	r1, r1
 8008366:	4402      	add	r2, r0
 8008368:	4293      	cmp	r3, r2
 800836a:	4618      	mov	r0, r3
 800836c:	d101      	bne.n	8008372 <memchr+0x12>
 800836e:	2000      	movs	r0, #0
 8008370:	e003      	b.n	800837a <memchr+0x1a>
 8008372:	7804      	ldrb	r4, [r0, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	428c      	cmp	r4, r1
 8008378:	d1f6      	bne.n	8008368 <memchr+0x8>
 800837a:	bd10      	pop	{r4, pc}

0800837c <memcpy>:
 800837c:	440a      	add	r2, r1
 800837e:	4291      	cmp	r1, r2
 8008380:	f100 33ff 	add.w	r3, r0, #4294967295
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	4770      	bx	lr
 8008388:	b510      	push	{r4, lr}
 800838a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838e:	4291      	cmp	r1, r2
 8008390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008394:	d1f9      	bne.n	800838a <memcpy+0xe>
 8008396:	bd10      	pop	{r4, pc}

08008398 <_realloc_r>:
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	4680      	mov	r8, r0
 800839e:	4614      	mov	r4, r2
 80083a0:	460e      	mov	r6, r1
 80083a2:	b921      	cbnz	r1, 80083ae <_realloc_r+0x16>
 80083a4:	4611      	mov	r1, r2
 80083a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	f7ff bc37 	b.w	8007c1c <_malloc_r>
 80083ae:	b92a      	cbnz	r2, 80083bc <_realloc_r+0x24>
 80083b0:	f7ff fbcc 	bl	8007b4c <_free_r>
 80083b4:	4625      	mov	r5, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083bc:	f000 f81b 	bl	80083f6 <_malloc_usable_size_r>
 80083c0:	4284      	cmp	r4, r0
 80083c2:	4607      	mov	r7, r0
 80083c4:	d802      	bhi.n	80083cc <_realloc_r+0x34>
 80083c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ca:	d812      	bhi.n	80083f2 <_realloc_r+0x5a>
 80083cc:	4621      	mov	r1, r4
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7ff fc24 	bl	8007c1c <_malloc_r>
 80083d4:	4605      	mov	r5, r0
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d0ed      	beq.n	80083b6 <_realloc_r+0x1e>
 80083da:	42bc      	cmp	r4, r7
 80083dc:	4622      	mov	r2, r4
 80083de:	4631      	mov	r1, r6
 80083e0:	bf28      	it	cs
 80083e2:	463a      	movcs	r2, r7
 80083e4:	f7ff ffca 	bl	800837c <memcpy>
 80083e8:	4631      	mov	r1, r6
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7ff fbae 	bl	8007b4c <_free_r>
 80083f0:	e7e1      	b.n	80083b6 <_realloc_r+0x1e>
 80083f2:	4635      	mov	r5, r6
 80083f4:	e7df      	b.n	80083b6 <_realloc_r+0x1e>

080083f6 <_malloc_usable_size_r>:
 80083f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fa:	1f18      	subs	r0, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bfbc      	itt	lt
 8008400:	580b      	ldrlt	r3, [r1, r0]
 8008402:	18c0      	addlt	r0, r0, r3
 8008404:	4770      	bx	lr

08008406 <atan2>:
 8008406:	f000 bad3 	b.w	80089b0 <__ieee754_atan2>

0800840a <sqrt>:
 800840a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f000 f9b0 	bl	8008774 <__ieee754_sqrt>
 8008414:	4632      	mov	r2, r6
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	463b      	mov	r3, r7
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 fb60 	bl	8000ae4 <__aeabi_dcmpun>
 8008424:	b990      	cbnz	r0, 800844c <sqrt+0x42>
 8008426:	2200      	movs	r2, #0
 8008428:	2300      	movs	r3, #0
 800842a:	4630      	mov	r0, r6
 800842c:	4639      	mov	r1, r7
 800842e:	f7f8 fb31 	bl	8000a94 <__aeabi_dcmplt>
 8008432:	b158      	cbz	r0, 800844c <sqrt+0x42>
 8008434:	f7ff fb5e 	bl	8007af4 <__errno>
 8008438:	2321      	movs	r3, #33	; 0x21
 800843a:	2200      	movs	r2, #0
 800843c:	6003      	str	r3, [r0, #0]
 800843e:	2300      	movs	r3, #0
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	f7f8 f9de 	bl	8000804 <__aeabi_ddiv>
 8008448:	4604      	mov	r4, r0
 800844a:	460d      	mov	r5, r1
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008452:	0000      	movs	r0, r0
 8008454:	0000      	movs	r0, r0
	...

08008458 <atan>:
 8008458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	4bb6      	ldr	r3, [pc, #728]	; (8008738 <atan+0x2e0>)
 800845e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008462:	429e      	cmp	r6, r3
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	468b      	mov	fp, r1
 800846a:	dd17      	ble.n	800849c <atan+0x44>
 800846c:	4bb3      	ldr	r3, [pc, #716]	; (800873c <atan+0x2e4>)
 800846e:	429e      	cmp	r6, r3
 8008470:	dc01      	bgt.n	8008476 <atan+0x1e>
 8008472:	d109      	bne.n	8008488 <atan+0x30>
 8008474:	b140      	cbz	r0, 8008488 <atan+0x30>
 8008476:	4622      	mov	r2, r4
 8008478:	462b      	mov	r3, r5
 800847a:	4620      	mov	r0, r4
 800847c:	4629      	mov	r1, r5
 800847e:	f7f7 fee1 	bl	8000244 <__adddf3>
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	e005      	b.n	8008494 <atan+0x3c>
 8008488:	f1bb 0f00 	cmp.w	fp, #0
 800848c:	4cac      	ldr	r4, [pc, #688]	; (8008740 <atan+0x2e8>)
 800848e:	f300 8121 	bgt.w	80086d4 <atan+0x27c>
 8008492:	4dac      	ldr	r5, [pc, #688]	; (8008744 <atan+0x2ec>)
 8008494:	4620      	mov	r0, r4
 8008496:	4629      	mov	r1, r5
 8008498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849c:	4baa      	ldr	r3, [pc, #680]	; (8008748 <atan+0x2f0>)
 800849e:	429e      	cmp	r6, r3
 80084a0:	dc11      	bgt.n	80084c6 <atan+0x6e>
 80084a2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80084a6:	429e      	cmp	r6, r3
 80084a8:	dc0a      	bgt.n	80084c0 <atan+0x68>
 80084aa:	a38b      	add	r3, pc, #556	; (adr r3, 80086d8 <atan+0x280>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f7f7 fec8 	bl	8000244 <__adddf3>
 80084b4:	2200      	movs	r2, #0
 80084b6:	4ba5      	ldr	r3, [pc, #660]	; (800874c <atan+0x2f4>)
 80084b8:	f7f8 fb0a 	bl	8000ad0 <__aeabi_dcmpgt>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1e9      	bne.n	8008494 <atan+0x3c>
 80084c0:	f04f 3aff 	mov.w	sl, #4294967295
 80084c4:	e027      	b.n	8008516 <atan+0xbe>
 80084c6:	f000 f951 	bl	800876c <fabs>
 80084ca:	4ba1      	ldr	r3, [pc, #644]	; (8008750 <atan+0x2f8>)
 80084cc:	4604      	mov	r4, r0
 80084ce:	429e      	cmp	r6, r3
 80084d0:	460d      	mov	r5, r1
 80084d2:	f300 80b8 	bgt.w	8008646 <atan+0x1ee>
 80084d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80084da:	429e      	cmp	r6, r3
 80084dc:	f300 809c 	bgt.w	8008618 <atan+0x1c0>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	f7f7 feae 	bl	8000244 <__adddf3>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4b98      	ldr	r3, [pc, #608]	; (800874c <atan+0x2f4>)
 80084ec:	f7f7 fea8 	bl	8000240 <__aeabi_dsub>
 80084f0:	2200      	movs	r2, #0
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f7 fea1 	bl	8000244 <__adddf3>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4630      	mov	r0, r6
 8008508:	4639      	mov	r1, r7
 800850a:	f7f8 f97b 	bl	8000804 <__aeabi_ddiv>
 800850e:	f04f 0a00 	mov.w	sl, #0
 8008512:	4604      	mov	r4, r0
 8008514:	460d      	mov	r5, r1
 8008516:	4622      	mov	r2, r4
 8008518:	462b      	mov	r3, r5
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	f7f8 f847 	bl	80005b0 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4680      	mov	r8, r0
 8008528:	4689      	mov	r9, r1
 800852a:	f7f8 f841 	bl	80005b0 <__aeabi_dmul>
 800852e:	a36c      	add	r3, pc, #432	; (adr r3, 80086e0 <atan+0x288>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	f7f8 f83a 	bl	80005b0 <__aeabi_dmul>
 800853c:	a36a      	add	r3, pc, #424	; (adr r3, 80086e8 <atan+0x290>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f7 fe7f 	bl	8000244 <__adddf3>
 8008546:	4632      	mov	r2, r6
 8008548:	463b      	mov	r3, r7
 800854a:	f7f8 f831 	bl	80005b0 <__aeabi_dmul>
 800854e:	a368      	add	r3, pc, #416	; (adr r3, 80086f0 <atan+0x298>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f7 fe76 	bl	8000244 <__adddf3>
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	f7f8 f828 	bl	80005b0 <__aeabi_dmul>
 8008560:	a365      	add	r3, pc, #404	; (adr r3, 80086f8 <atan+0x2a0>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f7 fe6d 	bl	8000244 <__adddf3>
 800856a:	4632      	mov	r2, r6
 800856c:	463b      	mov	r3, r7
 800856e:	f7f8 f81f 	bl	80005b0 <__aeabi_dmul>
 8008572:	a363      	add	r3, pc, #396	; (adr r3, 8008700 <atan+0x2a8>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f7f7 fe64 	bl	8000244 <__adddf3>
 800857c:	4632      	mov	r2, r6
 800857e:	463b      	mov	r3, r7
 8008580:	f7f8 f816 	bl	80005b0 <__aeabi_dmul>
 8008584:	a360      	add	r3, pc, #384	; (adr r3, 8008708 <atan+0x2b0>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	f7f7 fe5b 	bl	8000244 <__adddf3>
 800858e:	4642      	mov	r2, r8
 8008590:	464b      	mov	r3, r9
 8008592:	f7f8 f80d 	bl	80005b0 <__aeabi_dmul>
 8008596:	a35e      	add	r3, pc, #376	; (adr r3, 8008710 <atan+0x2b8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	4680      	mov	r8, r0
 800859e:	4689      	mov	r9, r1
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 f804 	bl	80005b0 <__aeabi_dmul>
 80085a8:	a35b      	add	r3, pc, #364	; (adr r3, 8008718 <atan+0x2c0>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	f7f7 fe47 	bl	8000240 <__aeabi_dsub>
 80085b2:	4632      	mov	r2, r6
 80085b4:	463b      	mov	r3, r7
 80085b6:	f7f7 fffb 	bl	80005b0 <__aeabi_dmul>
 80085ba:	a359      	add	r3, pc, #356	; (adr r3, 8008720 <atan+0x2c8>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe3e 	bl	8000240 <__aeabi_dsub>
 80085c4:	4632      	mov	r2, r6
 80085c6:	463b      	mov	r3, r7
 80085c8:	f7f7 fff2 	bl	80005b0 <__aeabi_dmul>
 80085cc:	a356      	add	r3, pc, #344	; (adr r3, 8008728 <atan+0x2d0>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe35 	bl	8000240 <__aeabi_dsub>
 80085d6:	4632      	mov	r2, r6
 80085d8:	463b      	mov	r3, r7
 80085da:	f7f7 ffe9 	bl	80005b0 <__aeabi_dmul>
 80085de:	a354      	add	r3, pc, #336	; (adr r3, 8008730 <atan+0x2d8>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f7 fe2c 	bl	8000240 <__aeabi_dsub>
 80085e8:	4632      	mov	r2, r6
 80085ea:	463b      	mov	r3, r7
 80085ec:	f7f7 ffe0 	bl	80005b0 <__aeabi_dmul>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f7 fe24 	bl	8000244 <__adddf3>
 80085fc:	4622      	mov	r2, r4
 80085fe:	462b      	mov	r3, r5
 8008600:	f7f7 ffd6 	bl	80005b0 <__aeabi_dmul>
 8008604:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	d144      	bne.n	8008698 <atan+0x240>
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f7 fe15 	bl	8000240 <__aeabi_dsub>
 8008616:	e734      	b.n	8008482 <atan+0x2a>
 8008618:	2200      	movs	r2, #0
 800861a:	4b4c      	ldr	r3, [pc, #304]	; (800874c <atan+0x2f4>)
 800861c:	f7f7 fe10 	bl	8000240 <__aeabi_dsub>
 8008620:	2200      	movs	r2, #0
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	4b48      	ldr	r3, [pc, #288]	; (800874c <atan+0x2f4>)
 800862c:	f7f7 fe0a 	bl	8000244 <__adddf3>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f8 f8e4 	bl	8000804 <__aeabi_ddiv>
 800863c:	f04f 0a01 	mov.w	sl, #1
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	e767      	b.n	8008516 <atan+0xbe>
 8008646:	4b43      	ldr	r3, [pc, #268]	; (8008754 <atan+0x2fc>)
 8008648:	429e      	cmp	r6, r3
 800864a:	da1a      	bge.n	8008682 <atan+0x22a>
 800864c:	2200      	movs	r2, #0
 800864e:	4b42      	ldr	r3, [pc, #264]	; (8008758 <atan+0x300>)
 8008650:	f7f7 fdf6 	bl	8000240 <__aeabi_dsub>
 8008654:	2200      	movs	r2, #0
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	4b3e      	ldr	r3, [pc, #248]	; (8008758 <atan+0x300>)
 8008660:	f7f7 ffa6 	bl	80005b0 <__aeabi_dmul>
 8008664:	2200      	movs	r2, #0
 8008666:	4b39      	ldr	r3, [pc, #228]	; (800874c <atan+0x2f4>)
 8008668:	f7f7 fdec 	bl	8000244 <__adddf3>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 f8c6 	bl	8000804 <__aeabi_ddiv>
 8008678:	f04f 0a02 	mov.w	sl, #2
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	e749      	b.n	8008516 <atan+0xbe>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	2000      	movs	r0, #0
 8008688:	4934      	ldr	r1, [pc, #208]	; (800875c <atan+0x304>)
 800868a:	f7f8 f8bb 	bl	8000804 <__aeabi_ddiv>
 800868e:	f04f 0a03 	mov.w	sl, #3
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	e73e      	b.n	8008516 <atan+0xbe>
 8008698:	4b31      	ldr	r3, [pc, #196]	; (8008760 <atan+0x308>)
 800869a:	4e32      	ldr	r6, [pc, #200]	; (8008764 <atan+0x30c>)
 800869c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f7 fdcc 	bl	8000240 <__aeabi_dsub>
 80086a8:	4622      	mov	r2, r4
 80086aa:	462b      	mov	r3, r5
 80086ac:	f7f7 fdc8 	bl	8000240 <__aeabi_dsub>
 80086b0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80086bc:	f7f7 fdc0 	bl	8000240 <__aeabi_dsub>
 80086c0:	f1bb 0f00 	cmp.w	fp, #0
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	f6bf aee4 	bge.w	8008494 <atan+0x3c>
 80086cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086d0:	461d      	mov	r5, r3
 80086d2:	e6df      	b.n	8008494 <atan+0x3c>
 80086d4:	4d24      	ldr	r5, [pc, #144]	; (8008768 <atan+0x310>)
 80086d6:	e6dd      	b.n	8008494 <atan+0x3c>
 80086d8:	8800759c 	.word	0x8800759c
 80086dc:	7e37e43c 	.word	0x7e37e43c
 80086e0:	e322da11 	.word	0xe322da11
 80086e4:	3f90ad3a 	.word	0x3f90ad3a
 80086e8:	24760deb 	.word	0x24760deb
 80086ec:	3fa97b4b 	.word	0x3fa97b4b
 80086f0:	a0d03d51 	.word	0xa0d03d51
 80086f4:	3fb10d66 	.word	0x3fb10d66
 80086f8:	c54c206e 	.word	0xc54c206e
 80086fc:	3fb745cd 	.word	0x3fb745cd
 8008700:	920083ff 	.word	0x920083ff
 8008704:	3fc24924 	.word	0x3fc24924
 8008708:	5555550d 	.word	0x5555550d
 800870c:	3fd55555 	.word	0x3fd55555
 8008710:	2c6a6c2f 	.word	0x2c6a6c2f
 8008714:	bfa2b444 	.word	0xbfa2b444
 8008718:	52defd9a 	.word	0x52defd9a
 800871c:	3fadde2d 	.word	0x3fadde2d
 8008720:	af749a6d 	.word	0xaf749a6d
 8008724:	3fb3b0f2 	.word	0x3fb3b0f2
 8008728:	fe231671 	.word	0xfe231671
 800872c:	3fbc71c6 	.word	0x3fbc71c6
 8008730:	9998ebc4 	.word	0x9998ebc4
 8008734:	3fc99999 	.word	0x3fc99999
 8008738:	440fffff 	.word	0x440fffff
 800873c:	7ff00000 	.word	0x7ff00000
 8008740:	54442d18 	.word	0x54442d18
 8008744:	bff921fb 	.word	0xbff921fb
 8008748:	3fdbffff 	.word	0x3fdbffff
 800874c:	3ff00000 	.word	0x3ff00000
 8008750:	3ff2ffff 	.word	0x3ff2ffff
 8008754:	40038000 	.word	0x40038000
 8008758:	3ff80000 	.word	0x3ff80000
 800875c:	bff00000 	.word	0xbff00000
 8008760:	08008c08 	.word	0x08008c08
 8008764:	08008be8 	.word	0x08008be8
 8008768:	3ff921fb 	.word	0x3ff921fb

0800876c <fabs>:
 800876c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008770:	4619      	mov	r1, r3
 8008772:	4770      	bx	lr

08008774 <__ieee754_sqrt>:
 8008774:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008918 <__ieee754_sqrt+0x1a4>
 8008778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008780:	460b      	mov	r3, r1
 8008782:	4606      	mov	r6, r0
 8008784:	460d      	mov	r5, r1
 8008786:	460a      	mov	r2, r1
 8008788:	4604      	mov	r4, r0
 800878a:	d10e      	bne.n	80087aa <__ieee754_sqrt+0x36>
 800878c:	4602      	mov	r2, r0
 800878e:	f7f7 ff0f 	bl	80005b0 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4630      	mov	r0, r6
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fd53 	bl	8000244 <__adddf3>
 800879e:	4606      	mov	r6, r0
 80087a0:	460d      	mov	r5, r1
 80087a2:	4630      	mov	r0, r6
 80087a4:	4629      	mov	r1, r5
 80087a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	2900      	cmp	r1, #0
 80087ac:	dc0d      	bgt.n	80087ca <__ieee754_sqrt+0x56>
 80087ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80087b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80087b6:	d0f4      	beq.n	80087a2 <__ieee754_sqrt+0x2e>
 80087b8:	b139      	cbz	r1, 80087ca <__ieee754_sqrt+0x56>
 80087ba:	4602      	mov	r2, r0
 80087bc:	f7f7 fd40 	bl	8000240 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	f7f8 f81e 	bl	8000804 <__aeabi_ddiv>
 80087c8:	e7e9      	b.n	800879e <__ieee754_sqrt+0x2a>
 80087ca:	1512      	asrs	r2, r2, #20
 80087cc:	f000 8089 	beq.w	80088e2 <__ieee754_sqrt+0x16e>
 80087d0:	2500      	movs	r5, #0
 80087d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80087da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087de:	07d2      	lsls	r2, r2, #31
 80087e0:	bf5c      	itt	pl
 80087e2:	005b      	lslpl	r3, r3, #1
 80087e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80087e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087ec:	bf58      	it	pl
 80087ee:	0064      	lslpl	r4, r4, #1
 80087f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80087f4:	0062      	lsls	r2, r4, #1
 80087f6:	2016      	movs	r0, #22
 80087f8:	4629      	mov	r1, r5
 80087fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80087fe:	1076      	asrs	r6, r6, #1
 8008800:	190f      	adds	r7, r1, r4
 8008802:	429f      	cmp	r7, r3
 8008804:	bfde      	ittt	le
 8008806:	1bdb      	suble	r3, r3, r7
 8008808:	1939      	addle	r1, r7, r4
 800880a:	192d      	addle	r5, r5, r4
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	3801      	subs	r0, #1
 8008810:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008814:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008818:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800881c:	d1f0      	bne.n	8008800 <__ieee754_sqrt+0x8c>
 800881e:	4604      	mov	r4, r0
 8008820:	2720      	movs	r7, #32
 8008822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008826:	428b      	cmp	r3, r1
 8008828:	eb0c 0e00 	add.w	lr, ip, r0
 800882c:	dc02      	bgt.n	8008834 <__ieee754_sqrt+0xc0>
 800882e:	d113      	bne.n	8008858 <__ieee754_sqrt+0xe4>
 8008830:	4596      	cmp	lr, r2
 8008832:	d811      	bhi.n	8008858 <__ieee754_sqrt+0xe4>
 8008834:	f1be 0f00 	cmp.w	lr, #0
 8008838:	eb0e 000c 	add.w	r0, lr, ip
 800883c:	da56      	bge.n	80088ec <__ieee754_sqrt+0x178>
 800883e:	2800      	cmp	r0, #0
 8008840:	db54      	blt.n	80088ec <__ieee754_sqrt+0x178>
 8008842:	f101 0801 	add.w	r8, r1, #1
 8008846:	1a5b      	subs	r3, r3, r1
 8008848:	4641      	mov	r1, r8
 800884a:	4596      	cmp	lr, r2
 800884c:	bf88      	it	hi
 800884e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008852:	eba2 020e 	sub.w	r2, r2, lr
 8008856:	4464      	add	r4, ip
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	3f01      	subs	r7, #1
 800885c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008860:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008864:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008868:	d1dd      	bne.n	8008826 <__ieee754_sqrt+0xb2>
 800886a:	4313      	orrs	r3, r2
 800886c:	d01b      	beq.n	80088a6 <__ieee754_sqrt+0x132>
 800886e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800891c <__ieee754_sqrt+0x1a8>
 8008872:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008920 <__ieee754_sqrt+0x1ac>
 8008876:	e9da 0100 	ldrd	r0, r1, [sl]
 800887a:	e9db 2300 	ldrd	r2, r3, [fp]
 800887e:	f7f7 fcdf 	bl	8000240 <__aeabi_dsub>
 8008882:	e9da 8900 	ldrd	r8, r9, [sl]
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f8 f90b 	bl	8000aa8 <__aeabi_dcmple>
 8008892:	b140      	cbz	r0, 80088a6 <__ieee754_sqrt+0x132>
 8008894:	e9da 0100 	ldrd	r0, r1, [sl]
 8008898:	e9db 2300 	ldrd	r2, r3, [fp]
 800889c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80088a0:	d126      	bne.n	80088f0 <__ieee754_sqrt+0x17c>
 80088a2:	463c      	mov	r4, r7
 80088a4:	3501      	adds	r5, #1
 80088a6:	106b      	asrs	r3, r5, #1
 80088a8:	0864      	lsrs	r4, r4, #1
 80088aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088ae:	07ea      	lsls	r2, r5, #31
 80088b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088b4:	bf48      	it	mi
 80088b6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80088ba:	4620      	mov	r0, r4
 80088bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80088c0:	e76d      	b.n	800879e <__ieee754_sqrt+0x2a>
 80088c2:	0ae3      	lsrs	r3, r4, #11
 80088c4:	3915      	subs	r1, #21
 80088c6:	0564      	lsls	r4, r4, #21
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0fa      	beq.n	80088c2 <__ieee754_sqrt+0x14e>
 80088cc:	02d8      	lsls	r0, r3, #11
 80088ce:	d50a      	bpl.n	80088e6 <__ieee754_sqrt+0x172>
 80088d0:	f1c2 0020 	rsb	r0, r2, #32
 80088d4:	fa24 f000 	lsr.w	r0, r4, r0
 80088d8:	1e55      	subs	r5, r2, #1
 80088da:	4094      	lsls	r4, r2
 80088dc:	4303      	orrs	r3, r0
 80088de:	1b4a      	subs	r2, r1, r5
 80088e0:	e776      	b.n	80087d0 <__ieee754_sqrt+0x5c>
 80088e2:	4611      	mov	r1, r2
 80088e4:	e7f0      	b.n	80088c8 <__ieee754_sqrt+0x154>
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	3201      	adds	r2, #1
 80088ea:	e7ef      	b.n	80088cc <__ieee754_sqrt+0x158>
 80088ec:	4688      	mov	r8, r1
 80088ee:	e7aa      	b.n	8008846 <__ieee754_sqrt+0xd2>
 80088f0:	f7f7 fca8 	bl	8000244 <__adddf3>
 80088f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f8 f8c8 	bl	8000a94 <__aeabi_dcmplt>
 8008904:	b120      	cbz	r0, 8008910 <__ieee754_sqrt+0x19c>
 8008906:	1ca1      	adds	r1, r4, #2
 8008908:	bf08      	it	eq
 800890a:	3501      	addeq	r5, #1
 800890c:	3402      	adds	r4, #2
 800890e:	e7ca      	b.n	80088a6 <__ieee754_sqrt+0x132>
 8008910:	3401      	adds	r4, #1
 8008912:	f024 0401 	bic.w	r4, r4, #1
 8008916:	e7c6      	b.n	80088a6 <__ieee754_sqrt+0x132>
 8008918:	7ff00000 	.word	0x7ff00000
 800891c:	200000f8 	.word	0x200000f8
 8008920:	20000100 	.word	0x20000100

08008924 <round>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800892a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800892e:	2a13      	cmp	r2, #19
 8008930:	460b      	mov	r3, r1
 8008932:	4605      	mov	r5, r0
 8008934:	460c      	mov	r4, r1
 8008936:	dc18      	bgt.n	800896a <round+0x46>
 8008938:	2a00      	cmp	r2, #0
 800893a:	da09      	bge.n	8008950 <round+0x2c>
 800893c:	3201      	adds	r2, #1
 800893e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008942:	d103      	bne.n	800894c <round+0x28>
 8008944:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008948:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800894c:	2200      	movs	r2, #0
 800894e:	e029      	b.n	80089a4 <round+0x80>
 8008950:	4816      	ldr	r0, [pc, #88]	; (80089ac <round+0x88>)
 8008952:	4110      	asrs	r0, r2
 8008954:	4001      	ands	r1, r0
 8008956:	4329      	orrs	r1, r5
 8008958:	d011      	beq.n	800897e <round+0x5a>
 800895a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800895e:	fa41 f202 	asr.w	r2, r1, r2
 8008962:	4413      	add	r3, r2
 8008964:	ea23 0300 	bic.w	r3, r3, r0
 8008968:	e7f0      	b.n	800894c <round+0x28>
 800896a:	2a33      	cmp	r2, #51	; 0x33
 800896c:	dd0a      	ble.n	8008984 <round+0x60>
 800896e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008972:	d104      	bne.n	800897e <round+0x5a>
 8008974:	4602      	mov	r2, r0
 8008976:	f7f7 fc65 	bl	8000244 <__adddf3>
 800897a:	4605      	mov	r5, r0
 800897c:	460c      	mov	r4, r1
 800897e:	4628      	mov	r0, r5
 8008980:	4621      	mov	r1, r4
 8008982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800898c:	40f8      	lsrs	r0, r7
 800898e:	4228      	tst	r0, r5
 8008990:	d0f5      	beq.n	800897e <round+0x5a>
 8008992:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8008996:	2201      	movs	r2, #1
 8008998:	408a      	lsls	r2, r1
 800899a:	1952      	adds	r2, r2, r5
 800899c:	bf28      	it	cs
 800899e:	3301      	addcs	r3, #1
 80089a0:	ea22 0200 	bic.w	r2, r2, r0
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	e7e7      	b.n	800897a <round+0x56>
 80089aa:	bf00      	nop
 80089ac:	000fffff 	.word	0x000fffff

080089b0 <__ieee754_atan2>:
 80089b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	4617      	mov	r7, r2
 80089b6:	4692      	mov	sl, r2
 80089b8:	4699      	mov	r9, r3
 80089ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089be:	427b      	negs	r3, r7
 80089c0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008b40 <__ieee754_atan2+0x190>
 80089c4:	433b      	orrs	r3, r7
 80089c6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80089ca:	4543      	cmp	r3, r8
 80089cc:	4604      	mov	r4, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	d809      	bhi.n	80089e6 <__ieee754_atan2+0x36>
 80089d2:	4246      	negs	r6, r0
 80089d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089d8:	4306      	orrs	r6, r0
 80089da:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80089de:	4546      	cmp	r6, r8
 80089e0:	468e      	mov	lr, r1
 80089e2:	4683      	mov	fp, r0
 80089e4:	d908      	bls.n	80089f8 <__ieee754_atan2+0x48>
 80089e6:	4652      	mov	r2, sl
 80089e8:	464b      	mov	r3, r9
 80089ea:	4620      	mov	r0, r4
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7f7 fc29 	bl	8000244 <__adddf3>
 80089f2:	4604      	mov	r4, r0
 80089f4:	460d      	mov	r5, r1
 80089f6:	e019      	b.n	8008a2c <__ieee754_atan2+0x7c>
 80089f8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80089fc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008a00:	433e      	orrs	r6, r7
 8008a02:	d103      	bne.n	8008a0c <__ieee754_atan2+0x5c>
 8008a04:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	f7ff bd26 	b.w	8008458 <atan>
 8008a0c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008a10:	f006 0602 	and.w	r6, r6, #2
 8008a14:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008a18:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008a1c:	d10a      	bne.n	8008a34 <__ieee754_atan2+0x84>
 8008a1e:	2e02      	cmp	r6, #2
 8008a20:	d067      	beq.n	8008af2 <__ieee754_atan2+0x142>
 8008a22:	2e03      	cmp	r6, #3
 8008a24:	d102      	bne.n	8008a2c <__ieee754_atan2+0x7c>
 8008a26:	a53a      	add	r5, pc, #232	; (adr r5, 8008b10 <__ieee754_atan2+0x160>)
 8008a28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a34:	4317      	orrs	r7, r2
 8008a36:	d106      	bne.n	8008a46 <__ieee754_atan2+0x96>
 8008a38:	f1be 0f00 	cmp.w	lr, #0
 8008a3c:	da64      	bge.n	8008b08 <__ieee754_atan2+0x158>
 8008a3e:	a536      	add	r5, pc, #216	; (adr r5, 8008b18 <__ieee754_atan2+0x168>)
 8008a40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a44:	e7f2      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008a46:	4542      	cmp	r2, r8
 8008a48:	d10f      	bne.n	8008a6a <__ieee754_atan2+0xba>
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	f106 36ff 	add.w	r6, r6, #4294967295
 8008a50:	d107      	bne.n	8008a62 <__ieee754_atan2+0xb2>
 8008a52:	2e02      	cmp	r6, #2
 8008a54:	d851      	bhi.n	8008afa <__ieee754_atan2+0x14a>
 8008a56:	4b3b      	ldr	r3, [pc, #236]	; (8008b44 <__ieee754_atan2+0x194>)
 8008a58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008a60:	e7e4      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008a62:	2e02      	cmp	r6, #2
 8008a64:	d84d      	bhi.n	8008b02 <__ieee754_atan2+0x152>
 8008a66:	4b38      	ldr	r3, [pc, #224]	; (8008b48 <__ieee754_atan2+0x198>)
 8008a68:	e7f6      	b.n	8008a58 <__ieee754_atan2+0xa8>
 8008a6a:	4543      	cmp	r3, r8
 8008a6c:	d0e4      	beq.n	8008a38 <__ieee754_atan2+0x88>
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008a74:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a78:	da21      	bge.n	8008abe <__ieee754_atan2+0x10e>
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	da01      	bge.n	8008a84 <__ieee754_atan2+0xd4>
 8008a80:	323c      	adds	r2, #60	; 0x3c
 8008a82:	db20      	blt.n	8008ac6 <__ieee754_atan2+0x116>
 8008a84:	4652      	mov	r2, sl
 8008a86:	464b      	mov	r3, r9
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f7f7 feba 	bl	8000804 <__aeabi_ddiv>
 8008a90:	f7ff fe6c 	bl	800876c <fabs>
 8008a94:	f7ff fce0 	bl	8008458 <atan>
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	2e01      	cmp	r6, #1
 8008a9e:	d015      	beq.n	8008acc <__ieee754_atan2+0x11c>
 8008aa0:	2e02      	cmp	r6, #2
 8008aa2:	d017      	beq.n	8008ad4 <__ieee754_atan2+0x124>
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	d0c1      	beq.n	8008a2c <__ieee754_atan2+0x7c>
 8008aa8:	a31d      	add	r3, pc, #116	; (adr r3, 8008b20 <__ieee754_atan2+0x170>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 fbc5 	bl	8000240 <__aeabi_dsub>
 8008ab6:	a31c      	add	r3, pc, #112	; (adr r3, 8008b28 <__ieee754_atan2+0x178>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	e016      	b.n	8008aec <__ieee754_atan2+0x13c>
 8008abe:	a51c      	add	r5, pc, #112	; (adr r5, 8008b30 <__ieee754_atan2+0x180>)
 8008ac0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ac4:	e7ea      	b.n	8008a9c <__ieee754_atan2+0xec>
 8008ac6:	2400      	movs	r4, #0
 8008ac8:	2500      	movs	r5, #0
 8008aca:	e7e7      	b.n	8008a9c <__ieee754_atan2+0xec>
 8008acc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ad0:	461d      	mov	r5, r3
 8008ad2:	e7ab      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008ad4:	a312      	add	r3, pc, #72	; (adr r3, 8008b20 <__ieee754_atan2+0x170>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fbaf 	bl	8000240 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	a110      	add	r1, pc, #64	; (adr r1, 8008b28 <__ieee754_atan2+0x178>)
 8008ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aec:	f7f7 fba8 	bl	8000240 <__aeabi_dsub>
 8008af0:	e77f      	b.n	80089f2 <__ieee754_atan2+0x42>
 8008af2:	a50d      	add	r5, pc, #52	; (adr r5, 8008b28 <__ieee754_atan2+0x178>)
 8008af4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008af8:	e798      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008afa:	a50f      	add	r5, pc, #60	; (adr r5, 8008b38 <__ieee754_atan2+0x188>)
 8008afc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b00:	e794      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008b02:	2400      	movs	r4, #0
 8008b04:	2500      	movs	r5, #0
 8008b06:	e791      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008b08:	a509      	add	r5, pc, #36	; (adr r5, 8008b30 <__ieee754_atan2+0x180>)
 8008b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b0e:	e78d      	b.n	8008a2c <__ieee754_atan2+0x7c>
 8008b10:	54442d18 	.word	0x54442d18
 8008b14:	c00921fb 	.word	0xc00921fb
 8008b18:	54442d18 	.word	0x54442d18
 8008b1c:	bff921fb 	.word	0xbff921fb
 8008b20:	33145c07 	.word	0x33145c07
 8008b24:	3ca1a626 	.word	0x3ca1a626
 8008b28:	54442d18 	.word	0x54442d18
 8008b2c:	400921fb 	.word	0x400921fb
 8008b30:	54442d18 	.word	0x54442d18
 8008b34:	3ff921fb 	.word	0x3ff921fb
 8008b38:	54442d18 	.word	0x54442d18
 8008b3c:	3fe921fb 	.word	0x3fe921fb
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	08008c28 	.word	0x08008c28
 8008b48:	08008c40 	.word	0x08008c40

08008b4c <_init>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr

08008b58 <_fini>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr
