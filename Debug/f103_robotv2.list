
f103_robotv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008ab8  08008ab8  00018ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008ba8  08008ba8  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ba8  08008ba8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008bb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000108  08008cb8  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08008cb8  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012410  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de1  00000000  00000000  00032584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00035368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2c  00000000  00000000  00036430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2f1  00000000  00000000  0003715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b04  00000000  00000000  0005244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bfe5  00000000  00000000  00068f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e50  00000000  00000000  00104f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00109d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000108 	.word	0x20000108
 8000204:	00000000 	.word	0x00000000
 8000208:	08008a9c 	.word	0x08008a9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000010c 	.word	0x2000010c
 8000224:	08008a9c 	.word	0x08008a9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <reverseBits>:
#ifndef INC_CRC_H_
#define INC_CRC_H_


uint8_t reverseBits(uint8_t value)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e010      	b.n	800109e <reverseBits+0x36>
	{
		result = (result << 1) | ((value >> i) & 1);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b25a      	sxtb	r2, r3
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	fa41 f303 	asr.w	r3, r1, r3
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<8; i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddeb      	ble.n	800107c <reverseBits+0x14>
	}
	return result;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <crc8>:



uint8_t crc8(uint8_t* data, size_t length, uint8_t poly, uint8_t init, uint8_t refIn, uint8_t refOut, uint8_t xorOut) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71bb      	strb	r3, [r7, #6]

    uint8_t crc = init;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (refIn && refOut){
 80010cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d049      	beq.n	8001168 <crc8+0xb8>
 80010d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d045      	beq.n	8001168 <crc8+0xb8>
		crc = reverseBits(crc);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffc1 	bl	8001068 <reverseBits>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		poly = reverseBits(poly);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffba 	bl	8001068 <reverseBits>
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
		for (size_t i = 0; i < length; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e028      	b.n	8001150 <crc8+0xa0>
			crc ^= data[i];
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	4413      	add	r3, r2
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110a:	4053      	eors	r3, r2
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x01) ? (crc >> 1) ^ poly : crc >> 1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e016      	b.n	8001144 <crc8+0x94>
 8001116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <crc8+0x82>
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4053      	eors	r3, r2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	e003      	b.n	800113a <crc8+0x8a>
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dde5      	ble.n	8001116 <crc8+0x66>
		for (size_t i = 0; i < length; i++) {
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	3301      	adds	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3d2      	bcc.n	80010fe <crc8+0x4e>
		}
		crc = crc ^ xorOut;
 8001158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800115c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001160:	4053      	eors	r3, r2
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001166:	e056      	b.n	8001216 <crc8+0x166>
	} else {
		for (size_t i = 0; i < length; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e037      	b.n	80011de <crc8+0x12e>
			crc ^= refIn ? reverseBits(data[i]) : data[i];
 800116e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <crc8+0xd8>
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff72 	bl	8001068 <reverseBits>
 8001184:	4603      	mov	r3, r0
 8001186:	e003      	b.n	8001190 <crc8+0xe0>
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001196:	4053      	eors	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (int j = 0; j < 8; j++) crc = (crc & 0x80) ? (crc << 1) ^ poly : crc << 1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e016      	b.n	80011d2 <crc8+0x122>
 80011a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da09      	bge.n	80011c0 <crc8+0x110>
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4053      	eors	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e003      	b.n	80011c8 <crc8+0x118>
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	dde5      	ble.n	80011a4 <crc8+0xf4>
		for (size_t i = 0; i < length; i++) {
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3301      	adds	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3c3      	bcc.n	800116e <crc8+0xbe>
		}
		crc = refOut ? reverseBits(crc) ^ xorOut : crc ^ xorOut;
 80011e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <crc8+0x156>
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff38 	bl	8001068 <reverseBits>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001200:	4053      	eors	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e005      	b.n	8001212 <crc8+0x162>
 8001206:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800120a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800120e:	4053      	eors	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    return crc;
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <checkCRC>:
struct motor_sensor_t wheelsensor;
uint8_t commandBuffer[10];


uint8_t checkCRC(uint8_t *Buffer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
 800122a:	6078      	str	r0, [r7, #4]
	if (crc8(Buffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT) == Buffer[9]){
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <checkCRC+0x50>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <checkCRC+0x54>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	2100      	movs	r1, #0
 8001236:	9102      	str	r1, [sp, #8]
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	2231      	movs	r2, #49	; 0x31
 8001240:	2109      	movs	r1, #9
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff34 	bl	80010b0 <crc8>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3309      	adds	r3, #9
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <checkCRC+0x36>
			return 1;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <checkCRC+0x46>
	}
	else if(Buffer[9]==0x00){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3309      	adds	r3, #9
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <checkCRC+0x44>
			return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <checkCRC+0x46>
		}
	else return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000
 8001278:	20000001 	.word	0x20000001

0800127c <receiveFromBuffer>:

void receiveFromBuffer()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001280:	2219      	movs	r2, #25
 8001282:	4904      	ldr	r1, [pc, #16]	; (8001294 <receiveFromBuffer+0x18>)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <receiveFromBuffer+0x1c>)
 8001286:	f005 fc84 	bl	8006b92 <HAL_UART_Receive_DMA>
	Parse_DMA_All(&wheelsensor);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <receiveFromBuffer+0x20>)
 800128c:	f000 f834 	bl	80012f8 <Parse_DMA_All>
//	HAL_Delay(500);
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000128 	.word	0x20000128
 8001298:	200003c8 	.word	0x200003c8
 800129c:	2000015c 	.word	0x2000015c

080012a0 <send>:

void send(uint8_t crc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	if(crc)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d011      	beq.n	80012d4 <send+0x34>
	{
		commandBuffer[9] = crc8(commandBuffer, 9, CRC8_MAXIM_POLY, CRC8_MAXIM_INIT, CRC8_MAXIM_REFIN, CRC8_MAXIM_REFOUT, CRC8_MAXIM_XOROUT);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <send+0x48>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <send+0x4c>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	2100      	movs	r1, #0
 80012ba:	9102      	str	r1, [sp, #8]
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	2231      	movs	r2, #49	; 0x31
 80012c4:	2109      	movs	r1, #9
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <send+0x50>)
 80012c8:	f7ff fef2 	bl	80010b0 <crc8>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <send+0x50>)
 80012d2:	725a      	strb	r2, [r3, #9]
	}
	HAL_UART_Transmit(&huart2, commandBuffer, sizeof(commandBuffer),10);
 80012d4:	230a      	movs	r3, #10
 80012d6:	220a      	movs	r2, #10
 80012d8:	4905      	ldr	r1, [pc, #20]	; (80012f0 <send+0x50>)
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <send+0x54>)
 80012dc:	f005 fbd6 	bl	8006a8c <HAL_UART_Transmit>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000001 	.word	0x20000001
 80012f0:	20000174 	.word	0x20000174
 80012f4:	200003c8 	.word	0x200003c8

080012f8 <Parse_DMA_All>:
	uint8_t buf[] = {id, 0xA0, 0, 0, 0, 0, 0, 0, 0, mode};
	HAL_UART_Transmit(&huart2, buf, sizeof(buf),10);
}

void Parse_DMA_All(struct motor_sensor_t* sensor)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if(sizeof(responseBufferH)>0)
	{
		sensor->leftii = responseBufferH[0];
 8001300:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <Parse_DMA_All+0x278>)
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]
		sensor->leftMode = (ddsm115_mode_t)responseBufferH[1];
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <Parse_DMA_All+0x278>)
 800130a:	785a      	ldrb	r2, [r3, #1]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	709a      	strb	r2, [r3, #2]
		uint16_t current = (uint16_t)(responseBufferH[2]) << 8 | (uint16_t)(responseBufferH[3]);
 8001310:	4b97      	ldr	r3, [pc, #604]	; (8001570 <Parse_DMA_All+0x278>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b95      	ldr	r3, [pc, #596]	; (8001570 <Parse_DMA_All+0x278>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
		short currentR = current;
 8001324:	8afb      	ldrh	r3, [r7, #22]
 8001326:	82bb      	strh	r3, [r7, #20]
		if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
		if (currentR >= 0) {
 8001328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db14      	blt.n	800135a <Parse_DMA_All+0x62>
			sensor->leftCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 8001330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fccd 	bl	8000cd4 <__aeabi_i2f>
 800133a:	4603      	mov	r3, r0
 800133c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd1b 	bl	8000d7c <__aeabi_fmul>
 8001346:	4603      	mov	r3, r0
 8001348:	498a      	ldr	r1, [pc, #552]	; (8001574 <Parse_DMA_All+0x27c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdca 	bl	8000ee4 <__aeabi_fdiv>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	e013      	b.n	8001382 <Parse_DMA_All+0x8a>
		} else {
			sensor->leftCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 800135a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fcb8 	bl	8000cd4 <__aeabi_i2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fd06 	bl	8000d7c <__aeabi_fmul>
 8001370:	4603      	mov	r3, r0
 8001372:	4981      	ldr	r1, [pc, #516]	; (8001578 <Parse_DMA_All+0x280>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdb5 	bl	8000ee4 <__aeabi_fdiv>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]
		}
		uint16_t velocity = (uint16_t)(responseBufferH[4] << 8 | (uint16_t)(responseBufferH[5]));
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <Parse_DMA_All+0x278>)
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <Parse_DMA_All+0x278>)
 800138c:	795b      	ldrb	r3, [r3, #5]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	827b      	strh	r3, [r7, #18]
		velocityL = velocity;
 8001396:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <Parse_DMA_All+0x284>)
 800139c:	801a      	strh	r2, [r3, #0]
		if (velocityL  > MAX_VELOCITY){ velocityL -= 0xFFFF; velocityL--; }
 800139e:	4b77      	ldr	r3, [pc, #476]	; (800157c <Parse_DMA_All+0x284>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80013a8:	dd11      	ble.n	80013ce <Parse_DMA_All+0xd6>
 80013aa:	4b74      	ldr	r3, [pc, #464]	; (800157c <Parse_DMA_All+0x284>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b70      	ldr	r3, [pc, #448]	; (800157c <Parse_DMA_All+0x284>)
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <Parse_DMA_All+0x284>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <Parse_DMA_All+0x284>)
 80013cc:	801a      	strh	r2, [r3, #0]
		sensor->LeftVelocity = velocityL;
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <Parse_DMA_All+0x284>)
 80013d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	819a      	strh	r2, [r3, #12]
		sensor->Leftwinding_temp = responseBufferH[6];
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <Parse_DMA_All+0x278>)
 80013da:	799a      	ldrb	r2, [r3, #6]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	741a      	strb	r2, [r3, #16]
		sensor->Leftangle = round((float)responseBufferH[7] * (float)MAX_ANGLE / 255.0);
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Parse_DMA_All+0x278>)
 80013e2:	79db      	ldrb	r3, [r3, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc71 	bl	8000ccc <__aeabi_ui2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4964      	ldr	r1, [pc, #400]	; (8001580 <Parse_DMA_All+0x288>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fcc4 	bl	8000d7c <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f882 	bl	8000500 <__aeabi_f2d>
 80013fc:	a35a      	add	r3, pc, #360	; (adr r3, 8001568 <Parse_DMA_All+0x270>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f9ff 	bl	8000804 <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f007 fa31 	bl	8008874 <round>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb79 	bl	8000b10 <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	825a      	strh	r2, [r3, #18]
		sensor->Righterror = responseBufferH[8];
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <Parse_DMA_All+0x278>)
 8001428:	7a1a      	ldrb	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	75da      	strb	r2, [r3, #23]
//		sprintf(mess, "Left sensor: %d\n",sensor->LeftVelocity);
//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
	}
	if(sizeof(responseBufferL)>0)
	{
		sensor->reightii = responseBufferL[0];
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <Parse_DMA_All+0x28c>)
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	705a      	strb	r2, [r3, #1]
		sensor->rightMode = (ddsm115_mode_t)responseBufferL[1];
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <Parse_DMA_All+0x28c>)
 8001438:	785a      	ldrb	r2, [r3, #1]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	70da      	strb	r2, [r3, #3]
		uint16_t current = (uint16_t)(responseBufferL[2]) << 8 | (uint16_t)(responseBufferL[3]);
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <Parse_DMA_All+0x28c>)
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <Parse_DMA_All+0x28c>)
 8001448:	78db      	ldrb	r3, [r3, #3]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	823b      	strh	r3, [r7, #16]
		short currentR = current;
 8001452:	8a3b      	ldrh	r3, [r7, #16]
 8001454:	81fb      	strh	r3, [r7, #14]
		if (currentR  > 32767){ currentR -= 0xFFFF; currentR--; }
		if (currentR >= 0) {
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db14      	blt.n	8001488 <Parse_DMA_All+0x190>
			sensor->rightCurrent = (float)currentR * (float)MAX_CURRENT / 32767.0;
 800145e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc36 	bl	8000cd4 <__aeabi_i2f>
 8001468:	4603      	mov	r3, r0
 800146a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc84 	bl	8000d7c <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	493f      	ldr	r1, [pc, #252]	; (8001574 <Parse_DMA_All+0x27c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd33 	bl	8000ee4 <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	e013      	b.n	80014b0 <Parse_DMA_All+0x1b8>
		} else {
			sensor->rightCurrent = (float)currentR * (float)MIN_CURRENT / -32767.0;
 8001488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc21 	bl	8000cd4 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc6f 	bl	8000d7c <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <Parse_DMA_All+0x280>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd1e 	bl	8000ee4 <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
		}
		uint16_t velocity = (uint16_t)(responseBufferL[4] << 8 | (uint16_t)(responseBufferL[5]));
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <Parse_DMA_All+0x28c>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <Parse_DMA_All+0x28c>)
 80014ba:	795b      	ldrb	r3, [r3, #5]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	81bb      	strh	r3, [r7, #12]
		velocityR = velocity;
 80014c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Parse_DMA_All+0x290>)
 80014ca:	801a      	strh	r2, [r3, #0]
		if (velocityR  > MAX_VELOCITY){ velocityR -= 0xFFFF; velocityR--; }
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <Parse_DMA_All+0x290>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80014d6:	dd11      	ble.n	80014fc <Parse_DMA_All+0x204>
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <Parse_DMA_All+0x290>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <Parse_DMA_All+0x290>)
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <Parse_DMA_All+0x290>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <Parse_DMA_All+0x290>)
 80014fa:	801a      	strh	r2, [r3, #0]
		sensor->RightVelocity = velocityR;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <Parse_DMA_All+0x290>)
 80014fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	81da      	strh	r2, [r3, #14]
		sensor->Rightwinding_temp = responseBufferL[6];
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <Parse_DMA_All+0x28c>)
 8001508:	799a      	ldrb	r2, [r3, #6]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	745a      	strb	r2, [r3, #17]
		sensor->Rightangle = round((float)responseBufferL[7] * (float)MAX_ANGLE / 255.0);
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <Parse_DMA_All+0x28c>)
 8001510:	79db      	ldrb	r3, [r3, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbda 	bl	8000ccc <__aeabi_ui2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4919      	ldr	r1, [pc, #100]	; (8001580 <Parse_DMA_All+0x288>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc2d 	bl	8000d7c <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffeb 	bl	8000500 <__aeabi_f2d>
 800152a:	a30f      	add	r3, pc, #60	; (adr r3, 8001568 <Parse_DMA_All+0x270>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f968 	bl	8000804 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f007 f99a 	bl	8008874 <round>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fae2 	bl	8000b10 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	829a      	strh	r2, [r3, #20]
		sensor->Righterror = responseBufferL[8];
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <Parse_DMA_All+0x28c>)
 8001556:	7a1a      	ldrb	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	75da      	strb	r2, [r3, #23]
//		uint8_t mess[20];
//		sprintf(mess, "RIGHT sensor: %d\n",sensor->RightVelocity);
//		HAL_UART_Transmit(&huart1,mess,sizeof(mess),HAL_MAX_DELAY);
	}
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	406fe000 	.word	0x406fe000
 8001570:	20000144 	.word	0x20000144
 8001574:	46fffe00 	.word	0x46fffe00
 8001578:	c6fffe00 	.word	0xc6fffe00
 800157c:	20000126 	.word	0x20000126
 8001580:	43b40000 	.word	0x43b40000
 8001584:	20000150 	.word	0x20000150
 8001588:	20000124 	.word	0x20000124

0800158c <setVelocity>:

uint8_t setVelocity(uint8_t id, int16_t velocity, uint8_t acceleration)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	460b      	mov	r3, r1
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	71bb      	strb	r3, [r7, #6]
	if(velocity > MAX_VELOCITY) velocity = MAX_VELOCITY;
 800159e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a2:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80015a6:	dd02      	ble.n	80015ae <setVelocity+0x22>
 80015a8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80015ac:	80bb      	strh	r3, [r7, #4]
	if(velocity < MIN_VELOCITY) velocity = MIN_VELOCITY;
 80015ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015b2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80015b6:	da02      	bge.n	80015be <setVelocity+0x32>
 80015b8:	f64f 63b6 	movw	r3, #65206	; 0xfeb6
 80015bc:	80bb      	strh	r3, [r7, #4]
	uint16_t velocityRecalc = abs(velocity);
 80015be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	83fb      	strh	r3, [r7, #30]
	if(velocity < 0 && velocity != 0) velocityRecalc = 0xFFFF - velocityRecalc + 1;
 80015ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da06      	bge.n	80015e0 <setVelocity+0x54>
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <setVelocity+0x54>
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	425b      	negs	r3, r3
 80015de:	83fb      	strh	r3, [r7, #30]
	uint8_t velocityHighByte = (uint8_t)(velocityRecalc >> 8) & 0xFF;
 80015e0:	8bfb      	ldrh	r3, [r7, #30]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	75fb      	strb	r3, [r7, #23]
	uint8_t velocityLowByte = (uint8_t) (velocityRecalc) & 0xFF;
 80015e8:	8bfb      	ldrh	r3, [r7, #30]
 80015ea:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[] = {id, 0x64, velocityHighByte, velocityLowByte, 0, 0, acceleration, 0, 0, 0};
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	733b      	strb	r3, [r7, #12]
 80015f0:	2364      	movs	r3, #100	; 0x64
 80015f2:	737b      	strb	r3, [r7, #13]
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	73bb      	strb	r3, [r7, #14]
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	2300      	movs	r3, #0
 80015fe:	743b      	strb	r3, [r7, #16]
 8001600:	2300      	movs	r3, #0
 8001602:	747b      	strb	r3, [r7, #17]
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	74bb      	strb	r3, [r7, #18]
 8001608:	2300      	movs	r3, #0
 800160a:	74fb      	strb	r3, [r7, #19]
 800160c:	2300      	movs	r3, #0
 800160e:	753b      	strb	r3, [r7, #20]
 8001610:	2300      	movs	r3, #0
 8001612:	757b      	strb	r3, [r7, #21]
	for(int i = 0; i < 10; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	e00c      	b.n	8001634 <setVelocity+0xa8>
	{
		commandBuffer[i] = buf[i];
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4413      	add	r3, r2
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <setVelocity+0xc0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b09      	cmp	r3, #9
 8001638:	ddef      	ble.n	800161a <setVelocity+0x8e>
	}
	send(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fe30 	bl	80012a0 <send>
	//receive();
	//parse(DDSM115_PROTOCOL_V2);
	return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000174 	.word	0x20000174

08001650 <SR04_Init>:

SR04_PulseType pulse;
SR04_PulseType pulse2;

void SR04_Init()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <SR04_Init+0x24>)
 8001656:	f004 fa57 	bl	8005b08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <SR04_Init+0x24>)
 800165e:	f004 fb0b 	bl	8005c78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <SR04_Init+0x28>)
 8001664:	f004 fa50 	bl	8005b08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_3);
 8001668:	2108      	movs	r1, #8
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <SR04_Init+0x28>)
 800166c:	f004 fb04 	bl	8005c78 <HAL_TIM_IC_Start_IT>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002a8 	.word	0x200002a8
 8001678:	200002f0 	.word	0x200002f0

0800167c <SR04_Start>:
void SR04_Start()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2108      	movs	r1, #8
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <SR04_Start+0x44>)
 8001686:	f002 fd54 	bl	8004132 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2102      	movs	r1, #2
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <SR04_Start+0x48>)
 8001690:	f002 fd4f 	bl	8004132 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f001 fdeb 	bl	8003270 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2108      	movs	r1, #8
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <SR04_Start+0x44>)
 80016a0:	f002 fd47 	bl	8004132 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2102      	movs	r1, #2
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <SR04_Start+0x48>)
 80016aa:	f002 fd42 	bl	8004132 <HAL_GPIO_WritePin>
	pulse.rising_flag=1;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SR04_Start+0x4c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	731a      	strb	r2, [r3, #12]
	pulse2.rising_flag=1;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SR04_Start+0x50>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	731a      	strb	r2, [r3, #12]
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	20000180 	.word	0x20000180
 80016cc:	20000190 	.word	0x20000190

080016d0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3e      	ldr	r2, [pc, #248]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d138      	bne.n	8001752 <HAL_TIM_IC_CaptureCallback+0x82>
	{
		if(pulse.rising_flag)
 80016e0:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			pulse.start = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	483a      	ldr	r0, [pc, #232]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016ec:	f004 fe4a 	bl	8006384 <HAL_TIM_ReadCapturedValue>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 80016f6:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 020a 	bic.w	r2, r2, #10
 8001706:	621a      	str	r2, [r3, #32]
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0202 	orr.w	r2, r2, #2
 8001716:	621a      	str	r2, [r3, #32]
			pulse.rising_flag = 0;
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800171a:	2200      	movs	r2, #0
 800171c:	731a      	strb	r2, [r3, #12]
 800171e:	e018      	b.n	8001752 <HAL_TIM_IC_CaptureCallback+0x82>
		}
		else
		{
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 020a 	bic.w	r2, r2, #10
 800172e:	621a      	str	r2, [r3, #32]
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a12      	ldr	r2, [r2, #32]
 800173a:	621a      	str	r2, [r3, #32]
			pulse.end = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);
 800173c:	2100      	movs	r1, #0
 800173e:	4825      	ldr	r0, [pc, #148]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001740:	f004 fe20 	bl	8006384 <HAL_TIM_ReadCapturedValue>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800174a:	805a      	strh	r2, [r3, #2]
			pulse.rising_flag = 1;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800174e:	2201      	movs	r2, #1
 8001750:	731a      	strb	r2, [r3, #12]
		}
	}
	if(htim==&htim3)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d138      	bne.n	80017cc <HAL_TIM_IC_CaptureCallback+0xfc>
	{
		if(pulse2.rising_flag)
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 800175c:	7b1b      	ldrb	r3, [r3, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01b      	beq.n	800179a <HAL_TIM_IC_CaptureCallback+0xca>
		{
			pulse2.start = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 8001762:	2108      	movs	r1, #8
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001766:	f004 fe0d 	bl	8006384 <HAL_TIM_ReadCapturedValue>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001770:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001780:	621a      	str	r2, [r3, #32]
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001790:	621a      	str	r2, [r3, #32]
			pulse2.rising_flag = 0;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001794:	2200      	movs	r2, #0
 8001796:	731a      	strb	r2, [r3, #12]
			pulse2.rising_flag = 1;
		}
	}


}
 8001798:	e018      	b.n	80017cc <HAL_TIM_IC_CaptureCallback+0xfc>
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017a8:	621a      	str	r2, [r3, #32]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a12      	ldr	r2, [r2, #32]
 80017b4:	621a      	str	r2, [r3, #32]
			pulse2.end = HAL_TIM_ReadCapturedValue(&htim3,TIM_CHANNEL_3);
 80017b6:	2108      	movs	r1, #8
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 80017ba:	f004 fde3 	bl	8006384 <HAL_TIM_ReadCapturedValue>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80017c4:	805a      	strh	r2, [r3, #2]
			pulse2.rising_flag = 1;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	731a      	strb	r2, [r3, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200002a8 	.word	0x200002a8
 80017d8:	20000180 	.word	0x20000180
 80017dc:	200002f0 	.word	0x200002f0
 80017e0:	20000190 	.word	0x20000190

080017e4 <SR04_Calculate>:


void SR04_Calculate(SR04_PulseType *pulse)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if(pulse->end > pulse->start)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	885a      	ldrh	r2, [r3, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d908      	bls.n	800180a <SR04_Calculate+0x26>
		pulse->cnt = pulse->end - pulse->start;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	885a      	ldrh	r2, [r3, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	809a      	strh	r2, [r3, #4]
 8001808:	e00b      	b.n	8001822 <SR04_Calculate+0x3e>
	else
		pulse->cnt = SR04_COUNT_PERIOD + pulse->end - pulse->start;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	885a      	ldrh	r2, [r3, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800181a:	3310      	adds	r3, #16
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	809a      	strh	r2, [r3, #4]
	pulse->distance = pulse->cnt * SPEED *100 / 2.0f /1000.0f /1000.0f;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	889b      	ldrh	r3, [r3, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa54 	bl	8000cd4 <__aeabi_i2f>
 800182c:	4603      	mov	r3, r0
 800182e:	4910      	ldr	r1, [pc, #64]	; (8001870 <SR04_Calculate+0x8c>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff faa3 	bl	8000d7c <__aeabi_fmul>
 8001836:	4603      	mov	r3, r0
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <SR04_Calculate+0x90>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fa9e 	bl	8000d7c <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb4c 	bl	8000ee4 <__aeabi_fdiv>
 800184c:	4603      	mov	r3, r0
 800184e:	490a      	ldr	r1, [pc, #40]	; (8001878 <SR04_Calculate+0x94>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb47 	bl	8000ee4 <__aeabi_fdiv>
 8001856:	4603      	mov	r3, r0
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <SR04_Calculate+0x94>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb42 	bl	8000ee4 <__aeabi_fdiv>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	43aa0000 	.word	0x43aa0000
 8001874:	42c80000 	.word	0x42c80000
 8001878:	447a0000 	.word	0x447a0000

0800187c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_DMA_Init+0x68>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <MX_DMA_Init+0x68>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6153      	str	r3, [r2, #20]
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_DMA_Init+0x68>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	200c      	movs	r0, #12
 80018a0:	f001 fde1 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018a4:	200c      	movs	r0, #12
 80018a6:	f001 fdfa 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	200d      	movs	r0, #13
 80018b0:	f001 fdd9 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018b4:	200d      	movs	r0, #13
 80018b6:	f001 fdf2 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200f      	movs	r0, #15
 80018c0:	f001 fdd1 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018c4:	200f      	movs	r0, #15
 80018c6:	f001 fdea 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2010      	movs	r0, #16
 80018d0:	f001 fdc9 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018d4:	2010      	movs	r0, #16
 80018d6:	f001 fde2 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <MX_GPIO_Init+0x108>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a3b      	ldr	r2, [pc, #236]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001902:	f043 0320 	orr.w	r3, r3, #32
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <MX_GPIO_Init+0x108>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <MX_GPIO_Init+0x108>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <MX_GPIO_Init+0x108>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <MX_GPIO_Init+0x108>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <MX_GPIO_Init+0x108>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <MX_GPIO_Init+0x108>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2108      	movs	r1, #8
 8001960:	4824      	ldr	r0, [pc, #144]	; (80019f4 <MX_GPIO_Init+0x10c>)
 8001962:	f002 fbe6 	bl	8004132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2120      	movs	r1, #32
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <MX_GPIO_Init+0x110>)
 800196c:	f002 fbe1 	bl	8004132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2102      	movs	r1, #2
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <MX_GPIO_Init+0x114>)
 8001976:	f002 fbdc 	bl	8004132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800197a:	2308      	movs	r3, #8
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <MX_GPIO_Init+0x10c>)
 8001992:	f002 fa23 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001996:	2320      	movs	r3, #32
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_GPIO_Init+0x110>)
 80019ae:	f002 fa15 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_GPIO_Init+0x114>)
 80019ca:	f002 fa07 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <MX_GPIO_Init+0x114>)
 80019e4:	f002 f9fa 	bl	8003ddc <HAL_GPIO_Init>

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40010c00 	.word	0x40010c00

08001a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C1_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C1_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a3e:	f002 fba9 	bl	8004194 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 fb25 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200001a0 	.word	0x200001a0
 8001a54:	40005400 	.word	0x40005400
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_I2C_MspInit+0x70>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a98:	2312      	movs	r3, #18
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <HAL_I2C_MspInit+0x78>)
 8001aa8:	f002 f998 	bl	8003ddc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_I2C_MspInit+0x74>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010c00 	.word	0x40010c00

08001ad8 <distance_Calculate>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void distance_Calculate()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	SR04_Calculate(&pulse);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <distance_Calculate+0x14>)
 8001ade:	f7ff fe81 	bl	80017e4 <SR04_Calculate>
	SR04_Calculate(&pulse2);
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <distance_Calculate+0x18>)
 8001ae4:	f7ff fe7e 	bl	80017e4 <SR04_Calculate>
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000180 	.word	0x20000180
 8001af0:	20000190 	.word	0x20000190

08001af4 <buzzer>:

void buzzer()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001af8:	2120      	movs	r1, #32
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <buzzer+0x30>)
 8001afc:	f002 fb31 	bl	8004162 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b00:	2064      	movs	r0, #100	; 0x64
 8001b02:	f001 fbb5 	bl	8003270 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b06:	2120      	movs	r1, #32
 8001b08:	4806      	ldr	r0, [pc, #24]	; (8001b24 <buzzer+0x30>)
 8001b0a:	f002 fb2a 	bl	8004162 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b0e:	2064      	movs	r0, #100	; 0x64
 8001b10:	f001 fbae 	bl	8003270 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2120      	movs	r1, #32
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <buzzer+0x30>)
 8001b1a:	f002 fb0a 	bl	8004132 <HAL_GPIO_WritePin>

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010800 	.word	0x40010800

08001b28 <d80nk_read>:

void d80nk_read()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
	GPIO_PinState pinStates[NUM_PROX];
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b32:	481c      	ldr	r0, [pc, #112]	; (8001ba4 <d80nk_read+0x7c>)
 8001b34:	f002 fae6 	bl	8004104 <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	713b      	strb	r3, [r7, #4]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <d80nk_read+0x7c>)
 8001b42:	f002 fadf 	bl	8004104 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	717b      	strb	r3, [r7, #5]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <d80nk_read+0x7c>)
 8001b50:	f002 fad8 	bl	8004104 <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	71bb      	strb	r3, [r7, #6]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5c:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <d80nk_read+0x7c>)
 8001b5e:	f002 fad1 	bl	8004104 <HAL_GPIO_ReadPin>
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<4;i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e013      	b.n	8001b94 <d80nk_read+0x6c>
	{
		if(pinStates[i] == GPIO_PIN_SET)
 8001b6c:	1d3a      	adds	r2, r7, #4
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <d80nk_read+0x5c>
		{
			d80nk_[i] = '0';
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <d80nk_read+0x80>)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2230      	movs	r2, #48	; 0x30
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e004      	b.n	8001b8e <d80nk_read+0x66>

		}
		else
		{
			d80nk_[i] = '1';
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <d80nk_read+0x80>)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	2231      	movs	r2, #49	; 0x31
 8001b8c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	dde8      	ble.n	8001b6c <d80nk_read+0x44>
//			sprintf(message,"Sensor ON\n");
//			HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
		}
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	20000204 	.word	0x20000204

08001bac <checksum>:

uint8_t checksum(uint8_t* data, uint8_t len) {
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73bb      	strb	r3, [r7, #14]
 8001bc0:	e009      	b.n	8001bd6 <checksum+0x2a>
       crc += data[i];
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	4413      	add	r3, r2
 8001bce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len-1; i++) {
 8001bd0:	7bbb      	ldrb	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	73bb      	strb	r3, [r7, #14]
 8001bd6:	7bba      	ldrb	r2, [r7, #14]
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <checksum+0x16>
    }
    return crc;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HostMessageParse>:

void HostMessageParse(uint8_t *receiveBytes)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	for(uint8_t i=0;i<8;i++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
 8001bf8:	e00b      	b.n	8001c12 <HostMessageParse+0x26>
	{
		data[i] = receiveBytes[i];
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	441a      	add	r2, r3
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	3318      	adds	r3, #24
 8001c06:	443b      	add	r3, r7
 8001c08:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d9f0      	bls.n	8001bfa <HostMessageParse+0xe>
	}
	uint8_t checking = checksum(data,8);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffc4 	bl	8001bac <checksum>
 8001c24:	4603      	mov	r3, r0
 8001c26:	75bb      	strb	r3, [r7, #22]
	if(checking==data[7])
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	7dba      	ldrb	r2, [r7, #22]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d117      	bne.n	8001c60 <HostMessageParse+0x74>
	{
		motors.LeftID = data[1];
 8001c30:	7b7a      	ldrb	r2, [r7, #13]
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HostMessageParse+0x88>)
 8001c34:	701a      	strb	r2, [r3, #0]
		motors.LeftSpeed = (data[2] << 8) | data[3];
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HostMessageParse+0x88>)
 8001c46:	805a      	strh	r2, [r3, #2]
		motors.RightID = data[4];
 8001c48:	7c3a      	ldrb	r2, [r7, #16]
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HostMessageParse+0x88>)
 8001c4c:	705a      	strb	r2, [r3, #1]
		motors.RightSpeed = (data[5] << 8) | data[6];
 8001c4e:	7c7b      	ldrb	r3, [r7, #17]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	7cbb      	ldrb	r3, [r7, #18]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HostMessageParse+0x88>)
 8001c5e:	809a      	strh	r2, [r3, #4]
	}
	memset(receiveBytes, 0, sizeof(receiveBytes));
 8001c60:	2204      	movs	r2, #4
 8001c62:	2100      	movs	r1, #0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f005 fee7 	bl	8007a38 <memset>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000021c 	.word	0x2000021c

08001c78 <SendToHost>:

void SendToHost(struct motor_sensor_t* wheelsensor)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	uint8_t sendData[30];
	sendData[0] = 0x00;
 8001c80:	2300      	movs	r3, #0
 8001c82:	723b      	strb	r3, [r7, #8]
	sendData[1] = (wheelsensor->leftii) & 0xFF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	727b      	strb	r3, [r7, #9]
	sendData[2] = ((wheelsensor->LeftVelocity)>>8) & 0xFF;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c90:	121b      	asrs	r3, r3, #8
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	72bb      	strb	r3, [r7, #10]
	sendData[3] = wheelsensor->LeftVelocity & 0xFF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	72fb      	strb	r3, [r7, #11]
	sendData[4] = (wheelsensor->reightii) & 0xFF;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	733b      	strb	r3, [r7, #12]
	sendData[5] = ((wheelsensor->RightVelocity)>>8) & 0xFF;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001cae:	121b      	asrs	r3, r3, #8
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	737b      	strb	r3, [r7, #13]
	sendData[6] = wheelsensor->RightVelocity & 0xFF;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	73bb      	strb	r3, [r7, #14]
	sendData[7] = (MPU6050.Accel_X_RAW >> 8) & 0xFF;
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <SendToHost+0x16c>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	121b      	asrs	r3, r3, #8
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	73fb      	strb	r3, [r7, #15]
	sendData[8] = MPU6050.Accel_X_RAW & 0XFF;
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <SendToHost+0x16c>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	743b      	strb	r3, [r7, #16]
	sendData[9] = (MPU6050.Accel_Y_RAW >> 8) & 0XFF;
 8001cd8:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <SendToHost+0x16c>)
 8001cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cde:	121b      	asrs	r3, r3, #8
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	747b      	strb	r3, [r7, #17]
	sendData[10] = MPU6050.Accel_Y_RAW & 0xFF;
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <SendToHost+0x16c>)
 8001ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	74bb      	strb	r3, [r7, #18]
	sendData[11] = (MPU6050.Accel_Z_RAW >> 8) & 0xFF;
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <SendToHost+0x16c>)
 8001cf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf6:	121b      	asrs	r3, r3, #8
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	74fb      	strb	r3, [r7, #19]
	sendData[12] = MPU6050.Accel_Z_RAW & 0xFF;
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <SendToHost+0x16c>)
 8001d00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	753b      	strb	r3, [r7, #20]
	sendData[13] = (MPU6050.Gyro_X_RAW >> 8) & 0XFF;
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <SendToHost+0x16c>)
 8001d0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d0e:	121b      	asrs	r3, r3, #8
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	757b      	strb	r3, [r7, #21]
	sendData[14] = MPU6050.Gyro_X_RAW & 0xFF;
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <SendToHost+0x16c>)
 8001d18:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	75bb      	strb	r3, [r7, #22]
	sendData[15] = (MPU6050.Gyro_Y_RAW >> 8) & 0XFF;
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <SendToHost+0x16c>)
 8001d22:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d26:	121b      	asrs	r3, r3, #8
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	75fb      	strb	r3, [r7, #23]
	sendData[16] = MPU6050.Gyro_Y_RAW & 0xFF;
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <SendToHost+0x16c>)
 8001d30:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	763b      	strb	r3, [r7, #24]
	sendData[17] = (MPU6050.Gyro_Z_RAW >> 8) & 0XFF;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <SendToHost+0x16c>)
 8001d3a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d3e:	121b      	asrs	r3, r3, #8
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	767b      	strb	r3, [r7, #25]
	sendData[18] = MPU6050.Gyro_Z_RAW & 0xFF;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <SendToHost+0x16c>)
 8001d48:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	76bb      	strb	r3, [r7, #26]
	sendData[19] = (((int)pulse.distance) >> 8) & 0xFF;
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <SendToHost+0x170>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f961 	bl	800101c <__aeabi_f2iz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	121b      	asrs	r3, r3, #8
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	76fb      	strb	r3, [r7, #27]
	sendData[20] = ((int)pulse.distance) & 0xFF;
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <SendToHost+0x170>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f958 	bl	800101c <__aeabi_f2iz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	773b      	strb	r3, [r7, #28]
	sendData[21] = (((int)pulse2.distance) >> 8) & 0xFF;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <SendToHost+0x174>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f950 	bl	800101c <__aeabi_f2iz>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	121b      	asrs	r3, r3, #8
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	777b      	strb	r3, [r7, #29]
	sendData[22] = ((int)pulse2.distance) & 0xFF;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <SendToHost+0x174>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f947 	bl	800101c <__aeabi_f2iz>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	77bb      	strb	r3, [r7, #30]
	sendData[23] = d80nk_[0] & 0xFF;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <SendToHost+0x178>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	77fb      	strb	r3, [r7, #31]
	sendData[24] = d80nk_[1] & 0xFF;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <SendToHost+0x178>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	f887 3020 	strb.w	r3, [r7, #32]
	sendData[25] = d80nk_[2] & 0xFF;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <SendToHost+0x178>)
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	sendData[26] = d80nk_[3] & 0xFF;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <SendToHost+0x178>)
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	sendData[27] = checksum(sendData, 28);
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	211c      	movs	r1, #28
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fef7 	bl	8001bac <checksum>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_UART_Transmit(&huart1, sendData, 28, HAL_MAX_DELAY);
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	221c      	movs	r2, #28
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <SendToHost+0x17c>)
 8001dd0:	f004 fe5c 	bl	8006a8c <HAL_UART_Transmit>
	HAL_Delay(200);
 8001dd4:	20c8      	movs	r0, #200	; 0xc8
 8001dd6:	f001 fa4b 	bl	8003270 <HAL_Delay>
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000228 	.word	0x20000228
 8001de8:	20000180 	.word	0x20000180
 8001dec:	20000190 	.word	0x20000190
 8001df0:	20000204 	.word	0x20000204
 8001df4:	20000380 	.word	0x20000380

08001df8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a41      	ldr	r2, [pc, #260]	; (8001f08 <HAL_UART_RxCpltCallback+0x110>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10e      	bne.n	8001e26 <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(receiveBytes, receiveBuff, sizeof(receiveBuff));
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_UART_RxCpltCallback+0x114>)
 8001e0a:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_UART_RxCpltCallback+0x118>)
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	e883 0003 	stmia.w	r3, {r0, r1}
		HostMessageParse(receiveBytes);
 8001e14:	483d      	ldr	r0, [pc, #244]	; (8001f0c <HAL_UART_RxCpltCallback+0x114>)
 8001e16:	f7ff fee9 	bl	8001bec <HostMessageParse>
		HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	493c      	ldr	r1, [pc, #240]	; (8001f10 <HAL_UART_RxCpltCallback+0x118>)
 8001e1e:	483a      	ldr	r0, [pc, #232]	; (8001f08 <HAL_UART_RxCpltCallback+0x110>)
 8001e20:	f004 feb7 	bl	8006b92 <HAL_UART_Receive_DMA>
				}
			}
			memset(responseBuffer, 0, sizeof(responseBuffer));
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
		}
}
 8001e24:	e06c      	b.n	8001f00 <HAL_UART_RxCpltCallback+0x108>
	else if(huart==&huart2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_UART_RxCpltCallback+0x11c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d168      	bne.n	8001f00 <HAL_UART_RxCpltCallback+0x108>
			short len = strlen(responseBuffer);
 8001e2e:	483a      	ldr	r0, [pc, #232]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001e30:	f7fe f9fa 	bl	8000228 <strlen>
 8001e34:	4603      	mov	r3, r0
 8001e36:	847b      	strh	r3, [r7, #34]	; 0x22
			short arraysz=sizeof(responseBuffer)/sizeof(*responseBuffer);
 8001e38:	2319      	movs	r3, #25
 8001e3a:	843b      	strh	r3, [r7, #32]
			for(int i=0;i<arraysz;i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e04f      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xea>
				if(responseBuffer[i]==motors.LeftID)
 8001e42:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	4413      	add	r3, r2
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_UART_RxCpltCallback+0x124>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d11e      	bne.n	8001e90 <HAL_UART_RxCpltCallback+0x98>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001e56:	441a      	add	r2, r3
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	6810      	ldr	r0, [r2, #0]
 8001e5e:	6851      	ldr	r1, [r2, #4]
 8001e60:	c303      	stmia	r3!, {r0, r1}
 8001e62:	8912      	ldrh	r2, [r2, #8]
 8001e64:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9da 	bl	8001224 <checkCRC>
 8001e70:	4603      	mov	r3, r0
 8001e72:	77bb      	strb	r3, [r7, #30]
					if(checking)
 8001e74:	7fbb      	ldrb	r3, [r7, #30]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d030      	beq.n	8001edc <HAL_UART_RxCpltCallback+0xe4>
						memcpy(responseBufferL, &responseBuffer[i], 10);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001e7e:	441a      	add	r2, r3
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_UART_RxCpltCallback+0x128>)
 8001e82:	6810      	ldr	r0, [r2, #0]
 8001e84:	6851      	ldr	r1, [r2, #4]
 8001e86:	6018      	str	r0, [r3, #0]
 8001e88:	6059      	str	r1, [r3, #4]
 8001e8a:	8912      	ldrh	r2, [r2, #8]
 8001e8c:	811a      	strh	r2, [r3, #8]
 8001e8e:	e025      	b.n	8001edc <HAL_UART_RxCpltCallback+0xe4>
				else if(responseBuffer[i]==motors.RightID)
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	4413      	add	r3, r2
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_UART_RxCpltCallback+0x124>)
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d11d      	bne.n	8001edc <HAL_UART_RxCpltCallback+0xe4>
					memcpy(sigmentBuffer, &responseBuffer[i], 10);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001ea4:	441a      	add	r2, r3
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	6810      	ldr	r0, [r2, #0]
 8001eac:	6851      	ldr	r1, [r2, #4]
 8001eae:	c303      	stmia	r3!, {r0, r1}
 8001eb0:	8912      	ldrh	r2, [r2, #8]
 8001eb2:	801a      	strh	r2, [r3, #0]
					uint8_t checking = checkCRC(&sigmentBuffer);
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f9b3 	bl	8001224 <checkCRC>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	77fb      	strb	r3, [r7, #31]
					if(checking)
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_UART_RxCpltCallback+0xe4>
						memcpy(responseBufferH, &responseBuffer[i], 10);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001ecc:	441a      	add	r2, r3
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_UART_RxCpltCallback+0x12c>)
 8001ed0:	6810      	ldr	r0, [r2, #0]
 8001ed2:	6851      	ldr	r1, [r2, #4]
 8001ed4:	6018      	str	r0, [r3, #0]
 8001ed6:	6059      	str	r1, [r3, #4]
 8001ed8:	8912      	ldrh	r2, [r2, #8]
 8001eda:	811a      	strh	r2, [r3, #8]
			for(int i=0;i<arraysz;i++)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	3301      	adds	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbaa      	blt.n	8001e42 <HAL_UART_RxCpltCallback+0x4a>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8001eec:	2219      	movs	r2, #25
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001ef2:	f005 fda1 	bl	8007a38 <memset>
			HAL_UART_Receive_DMA(&huart2, responseBuffer, 25);
 8001ef6:	2219      	movs	r2, #25
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <HAL_UART_RxCpltCallback+0x120>)
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <HAL_UART_RxCpltCallback+0x11c>)
 8001efc:	f004 fe49 	bl	8006b92 <HAL_UART_Receive_DMA>
}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000380 	.word	0x20000380
 8001f0c:	200001f4 	.word	0x200001f4
 8001f10:	200001fc 	.word	0x200001fc
 8001f14:	200003c8 	.word	0x200003c8
 8001f18:	20000128 	.word	0x20000128
 8001f1c:	2000021c 	.word	0x2000021c
 8001f20:	20000150 	.word	0x20000150
 8001f24:	20000144 	.word	0x20000144

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2c:	f001 f93e 	bl	80031ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f30:	f000 f86c 	bl	800200c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f34:	f7ff fcd8 	bl	80018e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f38:	f7ff fca0 	bl	800187c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f3c:	f000 ff0e 	bl	8002d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f40:	f000 ff36 	bl	8002db0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f44:	f7ff fd5c 	bl	8001a00 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f48:	f000 fd2e 	bl	80029a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f4c:	f000 fd9c 	bl	8002a88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f50:	f000 fe0a 	bl	8002b68 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001f54:	f000 ff56 	bl	8002e04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SR04_Init();
 8001f58:	f7ff fb7a 	bl	8001650 <SR04_Init>
  while (MPU6050_Init(&hi2c1) == 1)
 8001f5c:	e00d      	b.n	8001f7a <main+0x52>
    {
  	  sprintf(message,"Device not found. Retry...\n");
 8001f5e:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <main+0xc0>)
 8001f60:	4822      	ldr	r0, [pc, #136]	; (8001fec <main+0xc4>)
 8001f62:	f005 fd49 	bl	80079f8 <siprintf>
  	  HAL_UART_Transmit(&huart3, message, sizeof(message), HAL_MAX_DELAY);
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	491f      	ldr	r1, [pc, #124]	; (8001fec <main+0xc4>)
 8001f6e:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <main+0xc8>)
 8001f70:	f004 fd8c 	bl	8006a8c <HAL_UART_Transmit>
  	  HAL_Delay(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 f97b 	bl	8003270 <HAL_Delay>
  while (MPU6050_Init(&hi2c1) == 1)
 8001f7a:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <main+0xcc>)
 8001f7c:	f000 f890 	bl	80020a0 <MPU6050_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d0eb      	beq.n	8001f5e <main+0x36>
    };
  buzzer();
 8001f86:	f7ff fdb5 	bl	8001af4 <buzzer>
  HAL_UART_Receive_DMA(&huart1,receiveBuff,sizeof(receiveBuff));
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	491a      	ldr	r1, [pc, #104]	; (8001ff8 <main+0xd0>)
 8001f8e:	481b      	ldr	r0, [pc, #108]	; (8001ffc <main+0xd4>)
 8001f90:	f004 fdff 	bl	8006b92 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SR04_Start();
 8001f94:	f7ff fb72 	bl	800167c <SR04_Start>
	  d80nk_read();
 8001f98:	f7ff fdc6 	bl	8001b28 <d80nk_read>
	  setVelocity(motors.LeftID, motors.LeftSpeed, 0);
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <main+0xd8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <main+0xd8>)
 8001fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7ff faee 	bl	800158c <setVelocity>
	  HAL_Delay(4);
 8001fb0:	2004      	movs	r0, #4
 8001fb2:	f001 f95d 	bl	8003270 <HAL_Delay>
	  setVelocity(motors.RightID, motors.RightSpeed, 0);
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <main+0xd8>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <main+0xd8>)
 8001fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7ff fae1 	bl	800158c <setVelocity>
	  receiveFromBuffer();
 8001fca:	f7ff f957 	bl	800127c <receiveFromBuffer>
	  Parse_DMA_All(&wheelsensor);
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <main+0xdc>)
 8001fd0:	f7ff f992 	bl	80012f8 <Parse_DMA_All>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <main+0xe0>)
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <main+0xcc>)
 8001fd8:	f000 f8ba 	bl	8002150 <MPU6050_Read_All>
	  distance_Calculate();
 8001fdc:	f7ff fd7c 	bl	8001ad8 <distance_Calculate>
	  SendToHost(&wheelsensor);
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <main+0xdc>)
 8001fe2:	f7ff fe49 	bl	8001c78 <SendToHost>
  {
 8001fe6:	e7d5      	b.n	8001f94 <main+0x6c>
 8001fe8:	08008ab8 	.word	0x08008ab8
 8001fec:	20000208 	.word	0x20000208
 8001ff0:	20000410 	.word	0x20000410
 8001ff4:	200001a0 	.word	0x200001a0
 8001ff8:	200001fc 	.word	0x200001fc
 8001ffc:	20000380 	.word	0x20000380
 8002000:	2000021c 	.word	0x2000021c
 8002004:	2000015c 	.word	0x2000015c
 8002008:	20000228 	.word	0x20000228

0800200c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b090      	sub	sp, #64	; 0x40
 8002010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002012:	f107 0318 	add.w	r3, r7, #24
 8002016:	2228      	movs	r2, #40	; 0x28
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f005 fd0c 	bl	8007a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800203c:	2301      	movs	r3, #1
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002040:	2302      	movs	r3, #2
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800204a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	4618      	mov	r0, r3
 8002056:	f003 f8f7 	bl	8005248 <HAL_RCC_OscConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002060:	f000 f819 	bl	8002096 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002064:	230f      	movs	r3, #15
 8002066:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002068:	2302      	movs	r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2102      	movs	r1, #2
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fb64 	bl	800574c <HAL_RCC_ClockConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800208a:	f000 f804 	bl	8002096 <Error_Handler>
  }
}
 800208e:	bf00      	nop
 8002090:	3740      	adds	r7, #64	; 0x40
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209a:	b672      	cpsid	i
}
 800209c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209e:	e7fe      	b.n	800209e <Error_Handler+0x8>

080020a0 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80020a8:	2364      	movs	r3, #100	; 0x64
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2301      	movs	r3, #1
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	f107 030f 	add.w	r3, r7, #15
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	2275      	movs	r2, #117	; 0x75
 80020ba:	21d0      	movs	r1, #208	; 0xd0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 faa7 	bl	8004610 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b68      	cmp	r3, #104	; 0x68
 80020c6:	d13d      	bne.n	8002144 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	2301      	movs	r3, #1
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	f107 030e 	add.w	r3, r7, #14
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	226b      	movs	r2, #107	; 0x6b
 80020de:	21d0      	movs	r1, #208	; 0xd0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f002 f99b 	bl	800441c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80020e6:	2307      	movs	r3, #7
 80020e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80020ea:	2364      	movs	r3, #100	; 0x64
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	2301      	movs	r3, #1
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f107 030e 	add.w	r3, r7, #14
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2219      	movs	r2, #25
 80020fc:	21d0      	movs	r1, #208	; 0xd0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f002 f98c 	bl	800441c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 8002104:	2318      	movs	r3, #24
 8002106:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	f107 030e 	add.w	r3, r7, #14
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	221c      	movs	r2, #28
 800211a:	21d0      	movs	r1, #208	; 0xd0
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f002 f97d 	bl	800441c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8002122:	2318      	movs	r3, #24
 8002124:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2301      	movs	r3, #1
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	f107 030e 	add.w	r3, r7, #14
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2301      	movs	r3, #1
 8002136:	221b      	movs	r2, #27
 8002138:	21d0      	movs	r1, #208	; 0xd0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f002 f96e 	bl	800441c <HAL_I2C_Mem_Write>
        return 0;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <MPU6050_Init+0xa6>
    }
    return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <MPU6050_Read_All>:
	DataStruct->last_gyro_x_angle = x_gyro;
	DataStruct->last_gyro_y_angle = y_gyro;
	DataStruct->last_gyro_z_angle = z_gyro;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002154:	b094      	sub	sp, #80	; 0x50
 8002156:	af04      	add	r7, sp, #16
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    int16_t rx,ry,rz,ggx,ggy,ggz;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	230e      	movs	r3, #14
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	223b      	movs	r2, #59	; 0x3b
 800216e:	21d0      	movs	r1, #208	; 0xd0
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f002 fa4d 	bl	8004610 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002176:	7a3b      	ldrb	r3, [r7, #8]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21a      	sxth	r2, r3
 800217c:	7a7b      	ldrb	r3, [r7, #9]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21a      	sxth	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002188:	7abb      	ldrb	r3, [r7, #10]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21a      	sxth	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800219a:	7b3b      	ldrb	r3, [r7, #12]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	7b7b      	ldrb	r3, [r7, #13]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80021ba:	7c3b      	ldrb	r3, [r7, #16]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	b21a      	sxth	r2, r3
 80021c0:	7c7b      	ldrb	r3, [r7, #17]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80021cc:	7cbb      	ldrb	r3, [r7, #18]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21a      	sxth	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80021de:	7d3b      	ldrb	r3, [r7, #20]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	7d7b      	ldrb	r3, [r7, #21]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f970 	bl	80004dc <__aeabi_i2d>
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b95      	ldr	r3, [pc, #596]	; (8002458 <MPU6050_Read_All+0x308>)
 8002202:	f7fe faff 	bl	8000804 <__aeabi_ddiv>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f960 	bl	80004dc <__aeabi_i2d>
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <MPU6050_Read_All+0x308>)
 8002222:	f7fe faef 	bl	8000804 <__aeabi_ddiv>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f950 	bl	80004dc <__aeabi_i2d>
 800223c:	a380      	add	r3, pc, #512	; (adr r3, 8002440 <MPU6050_Read_All+0x2f0>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe fadf 	bl	8000804 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	6839      	ldr	r1, [r7, #0]
 800224c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002250:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fd3d 	bl	8000cd4 <__aeabi_i2f>
 800225a:	4603      	mov	r3, r0
 800225c:	497f      	ldr	r1, [pc, #508]	; (800245c <MPU6050_Read_All+0x30c>)
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe40 	bl	8000ee4 <__aeabi_fdiv>
 8002264:	4603      	mov	r3, r0
 8002266:	497e      	ldr	r1, [pc, #504]	; (8002460 <MPU6050_Read_All+0x310>)
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fc7f 	bl	8000b6c <__addsf3>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f92d 	bl	80004dc <__aeabi_i2d>
 8002282:	a371      	add	r3, pc, #452	; (adr r3, 8002448 <MPU6050_Read_All+0x2f8>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe fabc 	bl	8000804 <__aeabi_ddiv>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	6839      	ldr	r1, [r7, #0]
 8002292:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f91d 	bl	80004dc <__aeabi_i2d>
 80022a2:	a369      	add	r3, pc, #420	; (adr r3, 8002448 <MPU6050_Read_All+0x2f8>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe faac 	bl	8000804 <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f90d 	bl	80004dc <__aeabi_i2d>
 80022c2:	a361      	add	r3, pc, #388	; (adr r3, 8002448 <MPU6050_Read_All+0x2f8>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe fa9c 	bl	8000804 <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80022d6:	f000 ffc1 	bl	800325c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <MPU6050_Read_All+0x314>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f8ea 	bl	80004bc <__aeabi_ui2d>
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <MPU6050_Read_All+0x318>)
 80022ee:	f7fe fa89 	bl	8000804 <__aeabi_ddiv>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80022fa:	f000 ffaf 	bl	800325c <HAL_GetTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <MPU6050_Read_All+0x314>)
 8002302:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	fb03 f202 	mul.w	r2, r3, r2
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800231c:	4619      	mov	r1, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f8d6 	bl	80004dc <__aeabi_i2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f006 f811 	bl	800835e <sqrt>
 800233c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800234c:	f7fe fb98 	bl	8000a80 <__aeabi_dcmpeq>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8bd 	bl	80004dc <__aeabi_i2d>
 8002362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002366:	f7fe fa4d 	bl	8000804 <__aeabi_ddiv>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f006 f819 	bl	80083a8 <atan>
 8002376:	a336      	add	r3, pc, #216	; (adr r3, 8002450 <MPU6050_Read_All+0x300>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fe f918 	bl	80005b0 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002388:	e005      	b.n	8002396 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239c:	425b      	negs	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f89c 	bl	80004dc <__aeabi_i2d>
 80023a4:	4682      	mov	sl, r0
 80023a6:	468b      	mov	fp, r1
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f894 	bl	80004dc <__aeabi_i2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4650      	mov	r0, sl
 80023ba:	4659      	mov	r1, fp
 80023bc:	f005 ffcd 	bl	800835a <atan2>
 80023c0:	a323      	add	r3, pc, #140	; (adr r3, 8002450 <MPU6050_Read_All+0x300>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fe f8f3 	bl	80005b0 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <MPU6050_Read_All+0x31c>)
 80023d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023dc:	f7fe fb5a 	bl	8000a94 <__aeabi_dcmplt>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <MPU6050_Read_All+0x2ac>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MPU6050_Read_All+0x320>)
 80023f2:	f7fe fb6d 	bl	8000ad0 <__aeabi_dcmpgt>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <MPU6050_Read_All+0x2d6>
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MPU6050_Read_All+0x320>)
 8002402:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002406:	f7fe fb63 	bl	8000ad0 <__aeabi_dcmpgt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d033      	beq.n	8002478 <MPU6050_Read_All+0x328>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MPU6050_Read_All+0x31c>)
 800241c:	f7fe fb3a 	bl	8000a94 <__aeabi_dcmplt>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <MPU6050_Read_All+0x328>
        KalmanY.angle = pitch;
 8002426:	4913      	ldr	r1, [pc, #76]	; (8002474 <MPU6050_Read_All+0x324>)
 8002428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800242c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002436:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800243a:	e030      	b.n	800249e <MPU6050_Read_All+0x34e>
 800243c:	f3af 8000 	nop.w
 8002440:	00000000 	.word	0x00000000
 8002444:	40cc2900 	.word	0x40cc2900
 8002448:	00000000 	.word	0x00000000
 800244c:	40606000 	.word	0x40606000
 8002450:	1a63c1f8 	.word	0x1a63c1f8
 8002454:	404ca5dc 	.word	0x404ca5dc
 8002458:	40d00000 	.word	0x40d00000
 800245c:	43aa0000 	.word	0x43aa0000
 8002460:	42121eb8 	.word	0x42121eb8
 8002464:	200002a0 	.word	0x200002a0
 8002468:	408f4000 	.word	0x408f4000
 800246c:	c0568000 	.word	0xc0568000
 8002470:	40568000 	.word	0x40568000
 8002474:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800247e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002486:	e9cd 2300 	strd	r2, r3, [sp]
 800248a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800248e:	481c      	ldr	r0, [pc, #112]	; (8002500 <MPU6050_Read_All+0x3b0>)
 8002490:	f000 f83c 	bl	800250c <Kalman_getAngle>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80024a4:	4690      	mov	r8, r2
 80024a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <MPU6050_Read_All+0x3b4>)
 80024b0:	4640      	mov	r0, r8
 80024b2:	4649      	mov	r1, r9
 80024b4:	f7fe fb0c 	bl	8000ad0 <__aeabi_dcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80024c4:	4614      	mov	r4, r2
 80024c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024de:	e9cd 2300 	strd	r2, r3, [sp]
 80024e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024e6:	4808      	ldr	r0, [pc, #32]	; (8002508 <MPU6050_Read_All+0x3b8>)
 80024e8:	f000 f810 	bl	800250c <Kalman_getAngle>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80024f6:	bf00      	nop
 80024f8:	3740      	adds	r7, #64	; 0x40
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002500:	20000050 	.word	0x20000050
 8002504:	40568000 	.word	0x40568000
 8002508:	20000008 	.word	0x20000008

0800250c <Kalman_getAngle>:
    // Update the saved data with the latest values
    set_last_read_angle_data(I2Cx, DataStruct,timer, angle_x, angle_y, angle_z, unfiltered_gyro_angle_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b092      	sub	sp, #72	; 0x48
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800251e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002522:	f7fd fe8d 	bl	8000240 <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002534:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002538:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800253c:	f7fe f838 	bl	80005b0 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd fe7c 	bl	8000244 <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002562:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002566:	f7fe f823 	bl	80005b0 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002578:	f7fd fe62 	bl	8000240 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800258a:	f7fd fe59 	bl	8000240 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fd fe52 	bl	8000244 <__adddf3>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80025ac:	f7fe f800 	bl	80005b0 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fd fe44 	bl	8000244 <__adddf3>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80025d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80025d6:	f7fd ffeb 	bl	80005b0 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fd fe2d 	bl	8000240 <__aeabi_dsub>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80025fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002600:	f7fd ffd6 	bl	80005b0 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fe18 	bl	8000240 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002626:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800262a:	f7fd ffc1 	bl	80005b0 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe05 	bl	8000244 <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002650:	f7fd fdf8 	bl	8000244 <__adddf3>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002662:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002666:	f7fe f8cd 	bl	8000804 <__aeabi_ddiv>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800267c:	f7fe f8c2 	bl	8000804 <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800268e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002692:	f7fd fdd5 	bl	8000240 <__aeabi_dsub>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026ac:	f7fd ff80 	bl	80005b0 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fd fdc4 	bl	8000244 <__adddf3>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80026cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026d4:	f7fd ff6c 	bl	80005b0 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd fdb0 	bl	8000244 <__adddf3>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	68f9      	ldr	r1, [r7, #12]
 80026ea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80026f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026fe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800270c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002710:	f7fd ff4e 	bl	80005b0 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd fd90 	bl	8000240 <__aeabi_dsub>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002730:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002734:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002738:	f7fd ff3a 	bl	80005b0 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f7fd fd7c 	bl	8000240 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002758:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800275c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002760:	f7fd ff26 	bl	80005b0 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f7fd fd68 	bl	8000240 <__aeabi_dsub>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002780:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002784:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002788:	f7fd ff12 	bl	80005b0 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4620      	mov	r0, r4
 8002792:	4629      	mov	r1, r5
 8002794:	f7fd fd54 	bl	8000240 <__aeabi_dsub>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	3748      	adds	r7, #72	; 0x48
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_MspInit+0x5c>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_MspInit+0x5c>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6193      	str	r3, [r2, #24]
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_MspInit+0x5c>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_MspInit+0x5c>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_MspInit+0x5c>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_MspInit+0x5c>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_MspInit+0x60>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_MspInit+0x60>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000
 8002814:	40010000 	.word	0x40010000

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285e:	f000 fceb 	bl	8003238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <DMA1_Channel2_IRQHandler+0x10>)
 800286e:	f001 f84b 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000524 	.word	0x20000524

0800287c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <DMA1_Channel3_IRQHandler+0x10>)
 8002882:	f001 f841 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200004e0 	.word	0x200004e0

08002890 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA1_Channel5_IRQHandler+0x10>)
 8002896:	f001 f837 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000458 	.word	0x20000458

080028a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <DMA1_Channel6_IRQHandler+0x10>)
 80028aa:	f001 f82d 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000049c 	.word	0x2000049c

080028b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM2_IRQHandler+0x10>)
 80028be:	f003 faf5 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200002a8 	.word	0x200002a8

080028cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM3_IRQHandler+0x10>)
 80028d2:	f003 faeb 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200002f0 	.word	0x200002f0

080028e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <TIM4_IRQHandler+0x10>)
 80028e6:	f003 fae1 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000338 	.word	0x20000338

080028f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <USART1_IRQHandler+0x10>)
 80028fa:	f004 f96f 	bl	8006bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000380 	.word	0x20000380

08002908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <USART2_IRQHandler+0x10>)
 800290e:	f004 f965 	bl	8006bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200003c8 	.word	0x200003c8

0800291c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <USART3_IRQHandler+0x10>)
 8002922:	f004 f95b 	bl	8006bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000410 	.word	0x20000410

08002930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <_sbrk+0x5c>)
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <_sbrk+0x60>)
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <_sbrk+0x64>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <_sbrk+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002960:	f005 f872 	bl	8007a48 <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	e009      	b.n	8002984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <_sbrk+0x64>)
 8002980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000c000 	.word	0x2000c000
 8002990:	00000400 	.word	0x00000400
 8002994:	200002a4 	.word	0x200002a4
 8002998:	200006b8 	.word	0x200006b8

0800299c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ae:	f107 0318 	add.w	r3, r7, #24
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029dc:	2247      	movs	r2, #71	; 0x47
 80029de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029fa:	4822      	ldr	r0, [pc, #136]	; (8002a84 <MX_TIM2_Init+0xdc>)
 80029fc:	f003 f834 	bl	8005a68 <HAL_TIM_Base_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002a06:	f7ff fb46 	bl	8002096 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	4619      	mov	r1, r3
 8002a16:	481b      	ldr	r0, [pc, #108]	; (8002a84 <MX_TIM2_Init+0xdc>)
 8002a18:	f003 fbec 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a22:	f7ff fb38 	bl	8002096 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002a26:	4817      	ldr	r0, [pc, #92]	; (8002a84 <MX_TIM2_Init+0xdc>)
 8002a28:	f003 f8ce 	bl	8005bc8 <HAL_TIM_IC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a32:	f7ff fb30 	bl	8002096 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4619      	mov	r1, r3
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <MX_TIM2_Init+0xdc>)
 8002a46:	f003 ff53 	bl	80068f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002a50:	f7ff fb21 	bl	8002096 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	2200      	movs	r2, #0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_TIM2_Init+0xdc>)
 8002a6c:	f003 fb26 	bl	80060bc <HAL_TIM_IC_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002a76:	f7ff fb0e 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002a8 	.word	0x200002a8

08002a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0318 	add.w	r3, r7, #24
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <MX_TIM3_Init+0xdc>)
 8002ab6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002aba:	2247      	movs	r2, #71	; 0x47
 8002abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002ada:	f002 ffc5 	bl	8005a68 <HAL_TIM_Base_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002ae4:	f7ff fad7 	bl	8002096 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	4619      	mov	r1, r3
 8002af4:	481a      	ldr	r0, [pc, #104]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002af6:	f003 fb7d 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b00:	f7ff fac9 	bl	8002096 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b04:	4816      	ldr	r0, [pc, #88]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002b06:	f003 f85f 	bl	8005bc8 <HAL_TIM_IC_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b10:	f7ff fac1 	bl	8002096 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4619      	mov	r1, r3
 8002b22:	480f      	ldr	r0, [pc, #60]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002b24:	f003 fee4 	bl	80068f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002b2e:	f7ff fab2 	bl	8002096 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b32:	2300      	movs	r3, #0
 8002b34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b36:	2301      	movs	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	2208      	movs	r2, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_TIM3_Init+0xd8>)
 8002b4a:	f003 fab7 	bl	80060bc <HAL_TIM_IC_ConfigChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002b54:	f7ff fa9f 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	3728      	adds	r7, #40	; 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	200002f0 	.word	0x200002f0
 8002b64:	40000400 	.word	0x40000400

08002b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <MX_TIM4_Init+0x98>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002baa:	4814      	ldr	r0, [pc, #80]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002bac:	f002 ff5c 	bl	8005a68 <HAL_TIM_Base_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002bb6:	f7ff fa6e 	bl	8002096 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002bc8:	f003 fb14 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002bd2:	f7ff fa60 	bl	8002096 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bde:	463b      	mov	r3, r7
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <MX_TIM4_Init+0x94>)
 8002be4:	f003 fe84 	bl	80068f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002bee:	f7ff fa52 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000338 	.word	0x20000338
 8002c00:	40000800 	.word	0x40000800

08002c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d13f      	bne.n	8002ca4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	61d3      	str	r3, [r2, #28]
 8002c30:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6193      	str	r3, [r2, #24]
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	4837      	ldr	r0, [pc, #220]	; (8002d48 <HAL_TIM_Base_MspInit+0x144>)
 8002c6a:	f001 f8b7 	bl	8003ddc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_TIM_Base_MspInit+0x148>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8c:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <HAL_TIM_Base_MspInit+0x148>)
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	201c      	movs	r0, #28
 8002c98:	f000 fbe5 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c9c:	201c      	movs	r0, #28
 8002c9e:	f000 fbfe 	bl	800349e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ca2:	e04a      	b.n	8002d3a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <HAL_TIM_Base_MspInit+0x14c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12c      	bne.n	8002d08 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	61d3      	str	r3, [r2, #28]
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6193      	str	r3, [r2, #24]
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4818      	ldr	r0, [pc, #96]	; (8002d54 <HAL_TIM_Base_MspInit+0x150>)
 8002cf2:	f001 f873 	bl	8003ddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	201d      	movs	r0, #29
 8002cfc:	f000 fbb3 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d00:	201d      	movs	r0, #29
 8002d02:	f000 fbcc 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 8002d06:	e018      	b.n	8002d3a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_TIM_Base_MspInit+0x154>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_TIM_Base_MspInit+0x140>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	201e      	movs	r0, #30
 8002d30:	f000 fb99 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d34:	201e      	movs	r0, #30
 8002d36:	f000 fbb2 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3730      	adds	r7, #48	; 0x30
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40010c00 	.word	0x40010c00
 8002d58:	40000800 	.word	0x40000800

08002d5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <MX_USART1_UART_Init+0x50>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <MX_USART1_UART_Init+0x4c>)
 8002d94:	f003 fe2a 	bl	80069ec <HAL_UART_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d9e:	f7ff f97a 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000380 	.word	0x20000380
 8002dac:	40013800 	.word	0x40013800

08002db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <MX_USART2_UART_Init+0x50>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de8:	f003 fe00 	bl	80069ec <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002df2:	f7ff f950 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200003c8 	.word	0x200003c8
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <MX_USART3_UART_Init+0x50>)
 8002e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e3a:	4805      	ldr	r0, [pc, #20]	; (8002e50 <MX_USART3_UART_Init+0x4c>)
 8002e3c:	f003 fdd6 	bl	80069ec <HAL_UART_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e46:	f7ff f926 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000410 	.word	0x20000410
 8002e54:	40004800 	.word	0x40004800

08002e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0320 	add.w	r3, r7, #32
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a64      	ldr	r2, [pc, #400]	; (8003004 <HAL_UART_MspInit+0x1ac>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d160      	bne.n	8002f3a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e78:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a62      	ldr	r2, [pc, #392]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b60      	ldr	r3, [pc, #384]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e90:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a5c      	ldr	r2, [pc, #368]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0320 	add.w	r3, r7, #32
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4853      	ldr	r0, [pc, #332]	; (800300c <HAL_UART_MspInit+0x1b4>)
 8002ebe:	f000 ff8d 	bl	8003ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	484d      	ldr	r0, [pc, #308]	; (800300c <HAL_UART_MspInit+0x1b4>)
 8002ed8:	f000 ff80 	bl	8003ddc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002ede:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <HAL_UART_MspInit+0x1bc>)
 8002ee0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee2:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eee:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efa:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f06:	4b42      	ldr	r3, [pc, #264]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f0c:	4840      	ldr	r0, [pc, #256]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002f0e:	f000 fae1 	bl	80034d4 <HAL_DMA_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002f18:	f7ff f8bd 	bl	8002096 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f22:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <HAL_UART_MspInit+0x1b8>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2025      	movs	r0, #37	; 0x25
 8002f2e:	f000 fa9a 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f32:	2025      	movs	r0, #37	; 0x25
 8002f34:	f000 fab3 	bl	800349e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f38:	e100      	b.n	800313c <HAL_UART_MspInit+0x2e4>
  else if(uartHandle->Instance==USART2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a36      	ldr	r2, [pc, #216]	; (8003018 <HAL_UART_MspInit+0x1c0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d16f      	bne.n	8003024 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_UART_MspInit+0x1b0>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f74:	2304      	movs	r3, #4
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	4619      	mov	r1, r3
 8002f86:	4821      	ldr	r0, [pc, #132]	; (800300c <HAL_UART_MspInit+0x1b4>)
 8002f88:	f000 ff28 	bl	8003ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0320 	add.w	r3, r7, #32
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	481b      	ldr	r0, [pc, #108]	; (800300c <HAL_UART_MspInit+0x1b4>)
 8002fa0:	f000 ff1c 	bl	8003ddc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <HAL_UART_MspInit+0x1c8>)
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fd4:	4811      	ldr	r0, [pc, #68]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fd6:	f000 fa7d 	bl	80034d4 <HAL_DMA_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002fe0:	f7ff f859 	bl	8002096 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_UART_MspInit+0x1c4>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2026      	movs	r0, #38	; 0x26
 8002ff6:	f000 fa36 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ffa:	2026      	movs	r0, #38	; 0x26
 8002ffc:	f000 fa4f 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 8003000:	e09c      	b.n	800313c <HAL_UART_MspInit+0x2e4>
 8003002:	bf00      	nop
 8003004:	40013800 	.word	0x40013800
 8003008:	40021000 	.word	0x40021000
 800300c:	40010800 	.word	0x40010800
 8003010:	20000458 	.word	0x20000458
 8003014:	40020058 	.word	0x40020058
 8003018:	40004400 	.word	0x40004400
 800301c:	2000049c 	.word	0x2000049c
 8003020:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a46      	ldr	r2, [pc, #280]	; (8003144 <HAL_UART_MspInit+0x2ec>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f040 8086 	bne.w	800313c <HAL_UART_MspInit+0x2e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003030:	4b45      	ldr	r3, [pc, #276]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a44      	ldr	r2, [pc, #272]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 8003036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4a3e      	ldr	r2, [pc, #248]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 800304e:	f043 0308 	orr.w	r3, r3, #8
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_UART_MspInit+0x2f0>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306e:	f107 0320 	add.w	r3, r7, #32
 8003072:	4619      	mov	r1, r3
 8003074:	4835      	ldr	r0, [pc, #212]	; (800314c <HAL_UART_MspInit+0x2f4>)
 8003076:	f000 feb1 	bl	8003ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800307a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0320 	add.w	r3, r7, #32
 800308c:	4619      	mov	r1, r3
 800308e:	482f      	ldr	r0, [pc, #188]	; (800314c <HAL_UART_MspInit+0x2f4>)
 8003090:	f000 fea4 	bl	8003ddc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 8003096:	4a2f      	ldr	r2, [pc, #188]	; (8003154 <HAL_UART_MspInit+0x2fc>)
 8003098:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030c4:	4822      	ldr	r0, [pc, #136]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030c6:	f000 fa05 	bl	80034d4 <HAL_DMA_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_MspInit+0x27c>
      Error_Handler();
 80030d0:	f7fe ffe1 	bl	8002096 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <HAL_UART_MspInit+0x2f8>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_UART_MspInit+0x300>)
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_UART_MspInit+0x304>)
 80030e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_UART_MspInit+0x300>)
 80030e8:	2210      	movs	r2, #16
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_UART_MspInit+0x300>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f2:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_UART_MspInit+0x300>)
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_UART_MspInit+0x300>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_UART_MspInit+0x300>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_UART_MspInit+0x300>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_UART_MspInit+0x300>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003110:	4811      	ldr	r0, [pc, #68]	; (8003158 <HAL_UART_MspInit+0x300>)
 8003112:	f000 f9df 	bl	80034d4 <HAL_DMA_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 800311c:	f7fe ffbb 	bl	8002096 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <HAL_UART_MspInit+0x300>)
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
 8003126:	4a0c      	ldr	r2, [pc, #48]	; (8003158 <HAL_UART_MspInit+0x300>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2027      	movs	r0, #39	; 0x27
 8003132:	f000 f998 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003136:	2027      	movs	r0, #39	; 0x27
 8003138:	f000 f9b1 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40004800 	.word	0x40004800
 8003148:	40021000 	.word	0x40021000
 800314c:	40010c00 	.word	0x40010c00
 8003150:	200004e0 	.word	0x200004e0
 8003154:	40020030 	.word	0x40020030
 8003158:	20000524 	.word	0x20000524
 800315c:	4002001c 	.word	0x4002001c

08003160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003160:	f7ff fc1c 	bl	800299c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003164:	480b      	ldr	r0, [pc, #44]	; (8003194 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003166:	490c      	ldr	r1, [pc, #48]	; (8003198 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003168:	4a0c      	ldr	r2, [pc, #48]	; (800319c <LoopFillZerobss+0x16>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800316c:	e002      	b.n	8003174 <LoopCopyDataInit>

0800316e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003172:	3304      	adds	r3, #4

08003174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003178:	d3f9      	bcc.n	800316e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800317c:	4c09      	ldr	r4, [pc, #36]	; (80031a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003180:	e001      	b.n	8003186 <LoopFillZerobss>

08003182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003184:	3204      	adds	r2, #4

08003186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003188:	d3fb      	bcc.n	8003182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800318a:	f004 fc63 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800318e:	f7fe fecb 	bl	8001f28 <main>
  bx lr
 8003192:	4770      	bx	lr
  ldr r0, =_sdata
 8003194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003198:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800319c:	08008bb0 	.word	0x08008bb0
  ldr r2, =_sbss
 80031a0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80031a4:	200006b4 	.word	0x200006b4

080031a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC1_2_IRQHandler>
	...

080031ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_Init+0x28>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_Init+0x28>)
 80031b6:	f043 0310 	orr.w	r3, r3, #16
 80031ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031bc:	2003      	movs	r0, #3
 80031be:	f000 f947 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c2:	200f      	movs	r0, #15
 80031c4:	f000 f808 	bl	80031d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c8:	f7ff faf4 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40022000 	.word	0x40022000

080031d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x54>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x58>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f95f 	bl	80034ba <HAL_SYSTICK_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00e      	b.n	8003224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d80a      	bhi.n	8003222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320c:	2200      	movs	r2, #0
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f000 f927 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_InitTick+0x5c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000098 	.word	0x20000098
 8003230:	200000a0 	.word	0x200000a0
 8003234:	2000009c 	.word	0x2000009c

08003238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_IncTick+0x1c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_IncTick+0x20>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4a03      	ldr	r2, [pc, #12]	; (8003258 <HAL_IncTick+0x20>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	200000a0 	.word	0x200000a0
 8003258:	20000568 	.word	0x20000568

0800325c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <HAL_GetTick+0x10>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	20000568 	.word	0x20000568

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fff0 	bl	800325c <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffe0 	bl	800325c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200000a0 	.word	0x200000a0

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <__NVIC_EnableIRQ+0x34>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	; (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	; (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff90 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff2d 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff42 	bl	8003300 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff90 	bl	80033a8 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5f 	bl	8003354 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff35 	bl	800331c <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e059      	b.n	800359e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_DMA_Init+0xd4>)
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d80f      	bhi.n	8003516 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_DMA_Init+0xd8>)
 80034fe:	4413      	add	r3, r2
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_DMA_Init+0xdc>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	009a      	lsls	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_DMA_Init+0xe0>)
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
 8003514:	e00e      	b.n	8003534 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_DMA_Init+0xe4>)
 800351e:	4413      	add	r3, r2
 8003520:	4a23      	ldr	r2, [pc, #140]	; (80035b0 <HAL_DMA_Init+0xdc>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_DMA_Init+0xe8>)
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800354a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800354e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40020407 	.word	0x40020407
 80035ac:	bffdfff8 	.word	0xbffdfff8
 80035b0:	cccccccd 	.word	0xcccccccd
 80035b4:	40020000 	.word	0x40020000
 80035b8:	bffdfbf8 	.word	0xbffdfbf8
 80035bc:	40020400 	.word	0x40020400

080035c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Start_IT+0x20>
 80035dc:	2302      	movs	r3, #2
 80035de:	e04b      	b.n	8003678 <HAL_DMA_Start_IT+0xb8>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d13a      	bne.n	800366a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbb1 	bl	8003d80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 020e 	orr.w	r2, r2, #14
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e00f      	b.n	8003658 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 020a 	orr.w	r2, r2, #10
 8003656:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e005      	b.n	8003676 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d008      	beq.n	80036aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2204      	movs	r2, #4
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e020      	b.n	80036ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 020e 	bic.w	r2, r2, #14
 80036b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d005      	beq.n	800371c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	e0d6      	b.n	80038ca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 020e 	bic.w	r2, r2, #14
 800372a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d958      	bls.n	80037fa <HAL_DMA_Abort_IT+0x102>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a62      	ldr	r2, [pc, #392]	; (80038d8 <HAL_DMA_Abort_IT+0x1e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04f      	beq.n	80037f2 <HAL_DMA_Abort_IT+0xfa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a61      	ldr	r2, [pc, #388]	; (80038dc <HAL_DMA_Abort_IT+0x1e4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d048      	beq.n	80037ee <HAL_DMA_Abort_IT+0xf6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5f      	ldr	r2, [pc, #380]	; (80038e0 <HAL_DMA_Abort_IT+0x1e8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_Abort_IT+0xf0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_DMA_Abort_IT+0x1ec>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d038      	beq.n	80037e2 <HAL_DMA_Abort_IT+0xea>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_DMA_Abort_IT+0x1f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d030      	beq.n	80037dc <HAL_DMA_Abort_IT+0xe4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a5b      	ldr	r2, [pc, #364]	; (80038ec <HAL_DMA_Abort_IT+0x1f4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d028      	beq.n	80037d6 <HAL_DMA_Abort_IT+0xde>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_DMA_Abort_IT+0x1dc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d020      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xd8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a57      	ldr	r2, [pc, #348]	; (80038f0 <HAL_DMA_Abort_IT+0x1f8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d019      	beq.n	80037cc <HAL_DMA_Abort_IT+0xd4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a55      	ldr	r2, [pc, #340]	; (80038f4 <HAL_DMA_Abort_IT+0x1fc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d012      	beq.n	80037c8 <HAL_DMA_Abort_IT+0xd0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a54      	ldr	r2, [pc, #336]	; (80038f8 <HAL_DMA_Abort_IT+0x200>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00a      	beq.n	80037c2 <HAL_DMA_Abort_IT+0xca>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_DMA_Abort_IT+0x204>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d102      	bne.n	80037bc <HAL_DMA_Abort_IT+0xc4>
 80037b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ba:	e01b      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c0:	e018      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c6:	e015      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037c8:	2310      	movs	r3, #16
 80037ca:	e013      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e011      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d4:	e00e      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037da:	e00b      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037e0:	e008      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e6:	e005      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ec:	e002      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037ee:	2310      	movs	r3, #16
 80037f0:	e000      	b.n	80037f4 <HAL_DMA_Abort_IT+0xfc>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4a42      	ldr	r2, [pc, #264]	; (8003900 <HAL_DMA_Abort_IT+0x208>)
 80037f6:	6053      	str	r3, [r2, #4]
 80037f8:	e057      	b.n	80038aa <HAL_DMA_Abort_IT+0x1b2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a36      	ldr	r2, [pc, #216]	; (80038d8 <HAL_DMA_Abort_IT+0x1e0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04f      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x1ac>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a34      	ldr	r2, [pc, #208]	; (80038dc <HAL_DMA_Abort_IT+0x1e4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d048      	beq.n	80038a0 <HAL_DMA_Abort_IT+0x1a8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <HAL_DMA_Abort_IT+0x1e8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_Abort_IT+0x1a2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <HAL_DMA_Abort_IT+0x1ec>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d038      	beq.n	8003894 <HAL_DMA_Abort_IT+0x19c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <HAL_DMA_Abort_IT+0x1f0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d030      	beq.n	800388e <HAL_DMA_Abort_IT+0x196>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <HAL_DMA_Abort_IT+0x1f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d028      	beq.n	8003888 <HAL_DMA_Abort_IT+0x190>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_DMA_Abort_IT+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d020      	beq.n	8003882 <HAL_DMA_Abort_IT+0x18a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <HAL_DMA_Abort_IT+0x1f8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d019      	beq.n	800387e <HAL_DMA_Abort_IT+0x186>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_DMA_Abort_IT+0x1fc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d012      	beq.n	800387a <HAL_DMA_Abort_IT+0x182>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_DMA_Abort_IT+0x200>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00a      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a26      	ldr	r2, [pc, #152]	; (80038fc <HAL_DMA_Abort_IT+0x204>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d102      	bne.n	800386e <HAL_DMA_Abort_IT+0x176>
 8003868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386c:	e01b      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 800386e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003872:	e018      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 8003874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003878:	e015      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 800387a:	2310      	movs	r3, #16
 800387c:	e013      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 800387e:	2301      	movs	r3, #1
 8003880:	e011      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 8003882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003886:	e00e      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 8003888:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800388c:	e00b      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 800388e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003892:	e008      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	e005      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 800389a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389e:	e002      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 80038a0:	2310      	movs	r3, #16
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_Abort_IT+0x1ae>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_DMA_Abort_IT+0x20c>)
 80038a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
    } 
  }
  return status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40020080 	.word	0x40020080
 80038d8:	40020008 	.word	0x40020008
 80038dc:	4002001c 	.word	0x4002001c
 80038e0:	40020030 	.word	0x40020030
 80038e4:	40020044 	.word	0x40020044
 80038e8:	40020058 	.word	0x40020058
 80038ec:	4002006c 	.word	0x4002006c
 80038f0:	40020408 	.word	0x40020408
 80038f4:	4002041c 	.word	0x4002041c
 80038f8:	40020430 	.word	0x40020430
 80038fc:	40020444 	.word	0x40020444
 8003900:	40020400 	.word	0x40020400
 8003904:	40020000 	.word	0x40020000

08003908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2204      	movs	r2, #4
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80f1 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x20c>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80eb 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d958      	bls.n	8003a1a <HAL_DMA_IRQHandler+0x112>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <HAL_DMA_IRQHandler+0x1dc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d04f      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x10a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a5c      	ldr	r2, [pc, #368]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d048      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x106>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a5a      	ldr	r2, [pc, #360]	; (8003aec <HAL_DMA_IRQHandler+0x1e4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d040      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x100>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a59      	ldr	r2, [pc, #356]	; (8003af0 <HAL_DMA_IRQHandler+0x1e8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d038      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xfa>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_DMA_IRQHandler+0x1ec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d030      	beq.n	80039fc <HAL_DMA_IRQHandler+0xf4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_DMA_IRQHandler+0x1f0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d028      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xee>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d020      	beq.n	80039f0 <HAL_DMA_IRQHandler+0xe8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a52      	ldr	r2, [pc, #328]	; (8003afc <HAL_DMA_IRQHandler+0x1f4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d019      	beq.n	80039ec <HAL_DMA_IRQHandler+0xe4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_DMA_IRQHandler+0x1f8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d012      	beq.n	80039e8 <HAL_DMA_IRQHandler+0xe0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_DMA_IRQHandler+0x1fc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00a      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xda>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a4d      	ldr	r2, [pc, #308]	; (8003b08 <HAL_DMA_IRQHandler+0x200>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d102      	bne.n	80039dc <HAL_DMA_IRQHandler+0xd4>
 80039d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039da:	e01b      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039e0:	e018      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e6:	e015      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039e8:	2340      	movs	r3, #64	; 0x40
 80039ea:	e013      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e011      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039f4:	e00e      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039fa:	e00b      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 80039fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a00:	e008      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 8003a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a06:	e005      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 8003a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0c:	e002      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 8003a0e:	2340      	movs	r3, #64	; 0x40
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0x10c>
 8003a12:	2304      	movs	r3, #4
 8003a14:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <HAL_DMA_IRQHandler+0x204>)
 8003a16:	6053      	str	r3, [r2, #4]
 8003a18:	e057      	b.n	8003aca <HAL_DMA_IRQHandler+0x1c2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_DMA_IRQHandler+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d04f      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x1bc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2f      	ldr	r2, [pc, #188]	; (8003ae8 <HAL_DMA_IRQHandler+0x1e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d048      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x1b8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <HAL_DMA_IRQHandler+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d040      	beq.n	8003aba <HAL_DMA_IRQHandler+0x1b2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <HAL_DMA_IRQHandler+0x1e8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d038      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x1ac>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2b      	ldr	r2, [pc, #172]	; (8003af4 <HAL_DMA_IRQHandler+0x1ec>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d030      	beq.n	8003aae <HAL_DMA_IRQHandler+0x1a6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <HAL_DMA_IRQHandler+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d028      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x1a0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d020      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x19a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a25      	ldr	r2, [pc, #148]	; (8003afc <HAL_DMA_IRQHandler+0x1f4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d019      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x196>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a24      	ldr	r2, [pc, #144]	; (8003b00 <HAL_DMA_IRQHandler+0x1f8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d012      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x192>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_DMA_IRQHandler+0x1fc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x18c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_DMA_IRQHandler+0x200>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d102      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x186>
 8003a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a8c:	e01b      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003a8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a92:	e018      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a98:	e015      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	e013      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e011      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003aa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003aa6:	e00e      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aac:	e00b      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003aae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ab2:	e008      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ab8:	e005      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003abe:	e002      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003ac0:	2340      	movs	r3, #64	; 0x40
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x1be>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <HAL_DMA_IRQHandler+0x208>)
 8003ac8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8136 	beq.w	8003d40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003adc:	e130      	b.n	8003d40 <HAL_DMA_IRQHandler+0x438>
 8003ade:	bf00      	nop
 8003ae0:	40020080 	.word	0x40020080
 8003ae4:	40020008 	.word	0x40020008
 8003ae8:	4002001c 	.word	0x4002001c
 8003aec:	40020030 	.word	0x40020030
 8003af0:	40020044 	.word	0x40020044
 8003af4:	40020058 	.word	0x40020058
 8003af8:	4002006c 	.word	0x4002006c
 8003afc:	40020408 	.word	0x40020408
 8003b00:	4002041c 	.word	0x4002041c
 8003b04:	40020430 	.word	0x40020430
 8003b08:	40020444 	.word	0x40020444
 8003b0c:	40020400 	.word	0x40020400
 8003b10:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2202      	movs	r2, #2
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80dd 	beq.w	8003ce0 <HAL_DMA_IRQHandler+0x3d8>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80d7 	beq.w	8003ce0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 020a 	bic.w	r2, r2, #10
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <HAL_DMA_IRQHandler+0x444>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d958      	bls.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a79      	ldr	r2, [pc, #484]	; (8003d50 <HAL_DMA_IRQHandler+0x448>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d04f      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x306>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a78      	ldr	r2, [pc, #480]	; (8003d54 <HAL_DMA_IRQHandler+0x44c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d048      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x302>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <HAL_DMA_IRQHandler+0x450>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d040      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x2fc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <HAL_DMA_IRQHandler+0x454>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d038      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2f6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a73      	ldr	r2, [pc, #460]	; (8003d60 <HAL_DMA_IRQHandler+0x458>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d030      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x2f0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	; (8003d64 <HAL_DMA_IRQHandler+0x45c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d028      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x2ea>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a69      	ldr	r2, [pc, #420]	; (8003d4c <HAL_DMA_IRQHandler+0x444>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d020      	beq.n	8003bec <HAL_DMA_IRQHandler+0x2e4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_DMA_IRQHandler+0x460>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d019      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2e0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6c      	ldr	r2, [pc, #432]	; (8003d6c <HAL_DMA_IRQHandler+0x464>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d012      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <HAL_DMA_IRQHandler+0x468>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00a      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2d6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a69      	ldr	r2, [pc, #420]	; (8003d74 <HAL_DMA_IRQHandler+0x46c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d102      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x2d0>
 8003bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd6:	e01b      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bdc:	e018      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003be2:	e015      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003be4:	2320      	movs	r3, #32
 8003be6:	e013      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e011      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf0:	e00e      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bf6:	e00b      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfc:	e008      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c02:	e005      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c08:	e002      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e000      	b.n	8003c10 <HAL_DMA_IRQHandler+0x308>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <HAL_DMA_IRQHandler+0x470>)
 8003c12:	6053      	str	r3, [r2, #4]
 8003c14:	e057      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x3be>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_DMA_IRQHandler+0x448>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04f      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x3b8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <HAL_DMA_IRQHandler+0x44c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d048      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x3b4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_DMA_IRQHandler+0x450>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d040      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x3ae>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_DMA_IRQHandler+0x454>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d038      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x3a8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a47      	ldr	r2, [pc, #284]	; (8003d60 <HAL_DMA_IRQHandler+0x458>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d030      	beq.n	8003caa <HAL_DMA_IRQHandler+0x3a2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a45      	ldr	r2, [pc, #276]	; (8003d64 <HAL_DMA_IRQHandler+0x45c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d028      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x39c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3d      	ldr	r2, [pc, #244]	; (8003d4c <HAL_DMA_IRQHandler+0x444>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d020      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x396>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a41      	ldr	r2, [pc, #260]	; (8003d68 <HAL_DMA_IRQHandler+0x460>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x392>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <HAL_DMA_IRQHandler+0x464>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d012      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x38e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3e      	ldr	r2, [pc, #248]	; (8003d70 <HAL_DMA_IRQHandler+0x468>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00a      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x388>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3d      	ldr	r2, [pc, #244]	; (8003d74 <HAL_DMA_IRQHandler+0x46c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d102      	bne.n	8003c8a <HAL_DMA_IRQHandler+0x382>
 8003c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c88:	e01b      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8e:	e018      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c94:	e015      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003c96:	2320      	movs	r3, #32
 8003c98:	e013      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e011      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca2:	e00e      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003ca4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ca8:	e00b      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cae:	e008      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cb4:	e005      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cba:	e002      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x3ba>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <HAL_DMA_IRQHandler+0x474>)
 8003cc4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d034      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cde:	e02f      	b.n	8003d40 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d028      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x43a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d023      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 020e 	bic.w	r2, r2, #14
 8003d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2101      	movs	r1, #1
 8003d14:	fa01 f202 	lsl.w	r2, r1, r2
 8003d18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
    }
  }
  return;
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
}
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40020080 	.word	0x40020080
 8003d50:	40020008 	.word	0x40020008
 8003d54:	4002001c 	.word	0x4002001c
 8003d58:	40020030 	.word	0x40020030
 8003d5c:	40020044 	.word	0x40020044
 8003d60:	40020058 	.word	0x40020058
 8003d64:	4002006c 	.word	0x4002006c
 8003d68:	40020408 	.word	0x40020408
 8003d6c:	4002041c 	.word	0x4002041c
 8003d70:	40020430 	.word	0x40020430
 8003d74:	40020444 	.word	0x40020444
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40020000 	.word	0x40020000

08003d80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d108      	bne.n	8003dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dbe:	e007      	b.n	8003dd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dee:	e179      	b.n	80040e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003df0:	2201      	movs	r2, #1
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8168 	bne.w	80040de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a96      	ldr	r2, [pc, #600]	; (800406c <HAL_GPIO_Init+0x290>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d05e      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e18:	4a94      	ldr	r2, [pc, #592]	; (800406c <HAL_GPIO_Init+0x290>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d875      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e1e:	4a94      	ldr	r2, [pc, #592]	; (8004070 <HAL_GPIO_Init+0x294>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d058      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e24:	4a92      	ldr	r2, [pc, #584]	; (8004070 <HAL_GPIO_Init+0x294>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d86f      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e2a:	4a92      	ldr	r2, [pc, #584]	; (8004074 <HAL_GPIO_Init+0x298>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d052      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e30:	4a90      	ldr	r2, [pc, #576]	; (8004074 <HAL_GPIO_Init+0x298>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d869      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e36:	4a90      	ldr	r2, [pc, #576]	; (8004078 <HAL_GPIO_Init+0x29c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04c      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e3c:	4a8e      	ldr	r2, [pc, #568]	; (8004078 <HAL_GPIO_Init+0x29c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d863      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e42:	4a8e      	ldr	r2, [pc, #568]	; (800407c <HAL_GPIO_Init+0x2a0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d046      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
 8003e48:	4a8c      	ldr	r2, [pc, #560]	; (800407c <HAL_GPIO_Init+0x2a0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d85d      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e4e:	2b12      	cmp	r3, #18
 8003e50:	d82a      	bhi.n	8003ea8 <HAL_GPIO_Init+0xcc>
 8003e52:	2b12      	cmp	r3, #18
 8003e54:	d859      	bhi.n	8003f0a <HAL_GPIO_Init+0x12e>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_GPIO_Init+0x80>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003ed7 	.word	0x08003ed7
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003ec3 	.word	0x08003ec3
 8003e68:	08003f05 	.word	0x08003f05
 8003e6c:	08003f0b 	.word	0x08003f0b
 8003e70:	08003f0b 	.word	0x08003f0b
 8003e74:	08003f0b 	.word	0x08003f0b
 8003e78:	08003f0b 	.word	0x08003f0b
 8003e7c:	08003f0b 	.word	0x08003f0b
 8003e80:	08003f0b 	.word	0x08003f0b
 8003e84:	08003f0b 	.word	0x08003f0b
 8003e88:	08003f0b 	.word	0x08003f0b
 8003e8c:	08003f0b 	.word	0x08003f0b
 8003e90:	08003f0b 	.word	0x08003f0b
 8003e94:	08003f0b 	.word	0x08003f0b
 8003e98:	08003f0b 	.word	0x08003f0b
 8003e9c:	08003f0b 	.word	0x08003f0b
 8003ea0:	08003eb9 	.word	0x08003eb9
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	4a75      	ldr	r2, [pc, #468]	; (8004080 <HAL_GPIO_Init+0x2a4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003eae:	e02c      	b.n	8003f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	623b      	str	r3, [r7, #32]
          break;
 8003eb6:	e029      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	623b      	str	r3, [r7, #32]
          break;
 8003ec0:	e024      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	623b      	str	r3, [r7, #32]
          break;
 8003eca:	e01f      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	623b      	str	r3, [r7, #32]
          break;
 8003ed4:	e01a      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ede:	2304      	movs	r3, #4
 8003ee0:	623b      	str	r3, [r7, #32]
          break;
 8003ee2:	e013      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eec:	2308      	movs	r3, #8
 8003eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	611a      	str	r2, [r3, #16]
          break;
 8003ef6:	e009      	b.n	8003f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ef8:	2308      	movs	r3, #8
 8003efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	615a      	str	r2, [r3, #20]
          break;
 8003f02:	e003      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
          break;
 8003f08:	e000      	b.n	8003f0c <HAL_GPIO_Init+0x130>
          break;
 8003f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d801      	bhi.n	8003f16 <HAL_GPIO_Init+0x13a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	e001      	b.n	8003f1a <HAL_GPIO_Init+0x13e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2bff      	cmp	r3, #255	; 0xff
 8003f20:	d802      	bhi.n	8003f28 <HAL_GPIO_Init+0x14c>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	e002      	b.n	8003f2e <HAL_GPIO_Init+0x152>
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	3b08      	subs	r3, #8
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	210f      	movs	r1, #15
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80c1 	beq.w	80040de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <HAL_GPIO_Init+0x2a8>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4a48      	ldr	r2, [pc, #288]	; (8004084 <HAL_GPIO_Init+0x2a8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6193      	str	r3, [r2, #24]
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_GPIO_Init+0x2a8>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f74:	4a44      	ldr	r2, [pc, #272]	; (8004088 <HAL_GPIO_Init+0x2ac>)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a3c      	ldr	r2, [pc, #240]	; (800408c <HAL_GPIO_Init+0x2b0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01f      	beq.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_GPIO_Init+0x2b4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d019      	beq.n	8003fdc <HAL_GPIO_Init+0x200>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3a      	ldr	r2, [pc, #232]	; (8004094 <HAL_GPIO_Init+0x2b8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <HAL_GPIO_Init+0x1fc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_GPIO_Init+0x2bc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_GPIO_Init+0x1f8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_GPIO_Init+0x2c0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <HAL_GPIO_Init+0x1f4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <HAL_GPIO_Init+0x2c4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_GPIO_Init+0x1f0>
 8003fc8:	2305      	movs	r3, #5
 8003fca:	e00a      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fcc:	2306      	movs	r3, #6
 8003fce:	e008      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	e006      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e004      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e002      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_GPIO_Init+0x206>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe4:	f002 0203 	and.w	r2, r2, #3
 8003fe8:	0092      	lsls	r2, r2, #2
 8003fea:	4093      	lsls	r3, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ff2:	4925      	ldr	r1, [pc, #148]	; (8004088 <HAL_GPIO_Init+0x2ac>)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	4924      	ldr	r1, [pc, #144]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	608b      	str	r3, [r1, #8]
 8004018:	e006      	b.n	8004028 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	43db      	mvns	r3, r3
 8004022:	4920      	ldr	r1, [pc, #128]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8004024:	4013      	ands	r3, r2
 8004026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	491a      	ldr	r1, [pc, #104]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
 8004040:	e006      	b.n	8004050 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	43db      	mvns	r3, r3
 800404a:	4916      	ldr	r1, [pc, #88]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 800404c:	4013      	ands	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d025      	beq.n	80040a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4910      	ldr	r1, [pc, #64]	; (80040a4 <HAL_GPIO_Init+0x2c8>)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
 8004068:	e025      	b.n	80040b6 <HAL_GPIO_Init+0x2da>
 800406a:	bf00      	nop
 800406c:	10320000 	.word	0x10320000
 8004070:	10310000 	.word	0x10310000
 8004074:	10220000 	.word	0x10220000
 8004078:	10210000 	.word	0x10210000
 800407c:	10120000 	.word	0x10120000
 8004080:	10110000 	.word	0x10110000
 8004084:	40021000 	.word	0x40021000
 8004088:	40010000 	.word	0x40010000
 800408c:	40010800 	.word	0x40010800
 8004090:	40010c00 	.word	0x40010c00
 8004094:	40011000 	.word	0x40011000
 8004098:	40011400 	.word	0x40011400
 800409c:	40011800 	.word	0x40011800
 80040a0:	40011c00 	.word	0x40011c00
 80040a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	4913      	ldr	r1, [pc, #76]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	490e      	ldr	r1, [pc, #56]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
 80040ce:	e006      	b.n	80040de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	4909      	ldr	r1, [pc, #36]	; (8004100 <HAL_GPIO_Init+0x324>)
 80040da:	4013      	ands	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	3301      	adds	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f ae7e 	bne.w	8003df0 <HAL_GPIO_Init+0x14>
  }
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	372c      	adds	r7, #44	; 0x2c
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40010400 	.word	0x40010400

08004104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	e001      	b.n	8004126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	807b      	strh	r3, [r7, #2]
 800413e:	4613      	mov	r3, r2
 8004140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004142:	787b      	ldrb	r3, [r7, #1]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004148:	887a      	ldrh	r2, [r7, #2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800414e:	e003      	b.n	8004158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	041a      	lsls	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	611a      	str	r2, [r3, #16]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004174:	887a      	ldrh	r2, [r7, #2]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	041a      	lsls	r2, r3, #16
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43d9      	mvns	r1, r3
 8004180:	887b      	ldrh	r3, [r7, #2]
 8004182:	400b      	ands	r3, r1
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e12b      	b.n	80043fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fc4e 	bl	8001a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f8:	f001 fbf0 	bl	80059dc <HAL_RCC_GetPCLK1Freq>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4a81      	ldr	r2, [pc, #516]	; (8004408 <HAL_I2C_Init+0x274>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d807      	bhi.n	8004218 <HAL_I2C_Init+0x84>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a80      	ldr	r2, [pc, #512]	; (800440c <HAL_I2C_Init+0x278>)
 800420c:	4293      	cmp	r3, r2
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e006      	b.n	8004226 <HAL_I2C_Init+0x92>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a7d      	ldr	r2, [pc, #500]	; (8004410 <HAL_I2C_Init+0x27c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	bf94      	ite	ls
 8004220:	2301      	movls	r3, #1
 8004222:	2300      	movhi	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0e7      	b.n	80043fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_I2C_Init+0x280>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0c9b      	lsrs	r3, r3, #18
 8004238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_I2C_Init+0x274>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d802      	bhi.n	8004268 <HAL_I2C_Init+0xd4>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	e009      	b.n	800427c <HAL_I2C_Init+0xe8>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a69      	ldr	r2, [pc, #420]	; (8004418 <HAL_I2C_Init+0x284>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	3301      	adds	r3, #1
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800428e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	495c      	ldr	r1, [pc, #368]	; (8004408 <HAL_I2C_Init+0x274>)
 8004298:	428b      	cmp	r3, r1
 800429a:	d819      	bhi.n	80042d0 <HAL_I2C_Init+0x13c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1e59      	subs	r1, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042aa:	1c59      	adds	r1, r3, #1
 80042ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042b0:	400b      	ands	r3, r1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_I2C_Init+0x138>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1e59      	subs	r1, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	e051      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 80042cc:	2304      	movs	r3, #4
 80042ce:	e04f      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <HAL_I2C_Init+0x168>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e58      	subs	r0, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	440b      	add	r3, r1
 80042e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e012      	b.n	8004322 <HAL_I2C_Init+0x18e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e58      	subs	r0, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	0099      	lsls	r1, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004312:	3301      	adds	r3, #1
 8004314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Init+0x196>
 8004326:	2301      	movs	r3, #1
 8004328:	e022      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <HAL_I2C_Init+0x1bc>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1e58      	subs	r0, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	440b      	add	r3, r1
 8004340:	fbb0 f3f3 	udiv	r3, r0, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434e:	e00f      	b.n	8004370 <HAL_I2C_Init+0x1dc>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e58      	subs	r0, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	0099      	lsls	r1, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	fbb0 f3f3 	udiv	r3, r0, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	6809      	ldr	r1, [r1, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800439e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6911      	ldr	r1, [r2, #16]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	4311      	orrs	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	000186a0 	.word	0x000186a0
 800440c:	001e847f 	.word	0x001e847f
 8004410:	003d08ff 	.word	0x003d08ff
 8004414:	431bde83 	.word	0x431bde83
 8004418:	10624dd3 	.word	0x10624dd3

0800441c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004436:	f7fe ff11 	bl	800325c <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b20      	cmp	r3, #32
 8004446:	f040 80d9 	bne.w	80045fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2319      	movs	r3, #25
 8004450:	2201      	movs	r2, #1
 8004452:	496d      	ldr	r1, [pc, #436]	; (8004608 <HAL_I2C_Mem_Write+0x1ec>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fcc1 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
 8004462:	e0cc      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_I2C_Mem_Write+0x56>
 800446e:	2302      	movs	r3, #2
 8004470:	e0c5      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d007      	beq.n	8004498 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2221      	movs	r2, #33	; 0x21
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a4d      	ldr	r2, [pc, #308]	; (800460c <HAL_I2C_Mem_Write+0x1f0>)
 80044d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044da:	88f8      	ldrh	r0, [r7, #6]
 80044dc:	893a      	ldrh	r2, [r7, #8]
 80044de:	8979      	ldrh	r1, [r7, #10]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	4603      	mov	r3, r0
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 faf8 	bl	8004ae0 <I2C_RequestMemoryWrite>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d052      	beq.n	800459c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e081      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fd86 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b04      	cmp	r3, #4
 8004510:	d107      	bne.n	8004522 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06b      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d11b      	bne.n	800459c <HAL_I2C_Mem_Write+0x180>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1aa      	bne.n	80044fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fd79 	bl	80050a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e016      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	00100002 	.word	0x00100002
 800460c:	ffff0000 	.word	0xffff0000

08004610 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	461a      	mov	r2, r3
 800461e:	4603      	mov	r3, r0
 8004620:	817b      	strh	r3, [r7, #10]
 8004622:	460b      	mov	r3, r1
 8004624:	813b      	strh	r3, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800462e:	f7fe fe15 	bl	800325c <HAL_GetTick>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b20      	cmp	r3, #32
 800463e:	f040 8244 	bne.w	8004aca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2319      	movs	r3, #25
 8004648:	2201      	movs	r2, #1
 800464a:	4982      	ldr	r1, [pc, #520]	; (8004854 <HAL_I2C_Mem_Read+0x244>)
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fbc5 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
 800465a:	e237      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_I2C_Mem_Read+0x5a>
 8004666:	2302      	movs	r3, #2
 8004668:	e230      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d007      	beq.n	8004690 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2222      	movs	r2, #34	; 0x22
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a62      	ldr	r2, [pc, #392]	; (8004858 <HAL_I2C_Mem_Read+0x248>)
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046d2:	88f8      	ldrh	r0, [r7, #6]
 80046d4:	893a      	ldrh	r2, [r7, #8]
 80046d6:	8979      	ldrh	r1, [r7, #10]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4603      	mov	r3, r0
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa92 	bl	8004c0c <I2C_RequestMemoryRead>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e1ec      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d113      	bne.n	8004722 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e1c0      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	2b01      	cmp	r3, #1
 8004728:	d11e      	bne.n	8004768 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800473a:	b672      	cpsid	i
}
 800473c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004764:	b662      	cpsie	i
}
 8004766:	e035      	b.n	80047d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b02      	cmp	r3, #2
 800476e:	d11e      	bne.n	80047ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004780:	b672      	cpsid	i
}
 8004782:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047aa:	b662      	cpsie	i
}
 80047ac:	e012      	b.n	80047d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80047d4:	e166      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b03      	cmp	r3, #3
 80047dc:	f200 811f 	bhi.w	8004a1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d123      	bne.n	8004830 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fc9f 	bl	8005130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e167      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800482e:	e139      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b02      	cmp	r3, #2
 8004836:	d152      	bne.n	80048de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2200      	movs	r2, #0
 8004840:	4906      	ldr	r1, [pc, #24]	; (800485c <HAL_I2C_Mem_Read+0x24c>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 faca 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e13c      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
 8004852:	bf00      	nop
 8004854:	00100002 	.word	0x00100002
 8004858:	ffff0000 	.word	0xffff0000
 800485c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004860:	b672      	cpsid	i
}
 8004862:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80048a6:	b662      	cpsie	i
}
 80048a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048dc:	e0e2      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2200      	movs	r2, #0
 80048e6:	497b      	ldr	r1, [pc, #492]	; (8004ad4 <HAL_I2C_Mem_Read+0x4c4>)
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fa77 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0e9      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004906:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004908:	b672      	cpsid	i
}
 800490a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800493e:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <HAL_I2C_Mem_Read+0x4c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	4a65      	ldr	r2, [pc, #404]	; (8004adc <HAL_I2C_Mem_Read+0x4cc>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0a1a      	lsrs	r2, r3, #8
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00da      	lsls	r2, r3, #3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	3b01      	subs	r3, #1
 800495c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d118      	bne.n	8004996 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004986:	b662      	cpsie	i
}
 8004988:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e09a      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d1d9      	bne.n	8004958 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049e6:	b662      	cpsie	i
}
 80049e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a1c:	e042      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fb84 	bl	8005130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e04c      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d118      	bne.n	8004aa4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f ae94 	bne.w	80047d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00010004 	.word	0x00010004
 8004ad8:	20000098 	.word	0x20000098
 8004adc:	14f8b589 	.word	0x14f8b589

08004ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	817b      	strh	r3, [r7, #10]
 8004af2:	460b      	mov	r3, r1
 8004af4:	813b      	strh	r3, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f960 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b30:	d103      	bne.n	8004b3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e05f      	b.n	8004bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	492d      	ldr	r1, [pc, #180]	; (8004c08 <I2C_RequestMemoryWrite+0x128>)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f9bb 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e04c      	b.n	8004bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fa46 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e02b      	b.n	8004bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bac:	893b      	ldrh	r3, [r7, #8]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	e021      	b.n	8004bfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb8:	893b      	ldrh	r3, [r7, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fa20 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d107      	bne.n	8004bee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e005      	b.n	8004bfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf2:	893b      	ldrh	r3, [r7, #8]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	00010002 	.word	0x00010002

08004c0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	817b      	strh	r3, [r7, #10]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	813b      	strh	r3, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8c2 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d103      	bne.n	8004c76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0aa      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	4952      	ldr	r1, [pc, #328]	; (8004dd8 <I2C_RequestMemoryRead+0x1cc>)
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f91d 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e097      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	6a39      	ldr	r1, [r7, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f9a8 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d107      	bne.n	8004cde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e076      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce8:	893b      	ldrh	r3, [r7, #8]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	e021      	b.n	8004d38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	6a39      	ldr	r1, [r7, #32]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f982 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d107      	bne.n	8004d2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e050      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	6a39      	ldr	r1, [r7, #32]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f967 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d107      	bne.n	8004d60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e035      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f82b 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d103      	bne.n	8004da4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e013      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004da8:	897b      	ldrh	r3, [r7, #10]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	6a3a      	ldr	r2, [r7, #32]
 8004dbc:	4906      	ldr	r1, [pc, #24]	; (8004dd8 <I2C_RequestMemoryRead+0x1cc>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f886 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	00010002 	.word	0x00010002

08004ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	e048      	b.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d044      	beq.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe fa31 	bl	800325c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d139      	bne.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d10d      	bne.n	8004e32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	e00c      	b.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	43da      	mvns	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d116      	bne.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e023      	b.n	8004ec8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	0c1b      	lsrs	r3, r3, #16
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10d      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	43da      	mvns	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	e00c      	b.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	43da      	mvns	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d093      	beq.n	8004dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ede:	e071      	b.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d123      	bne.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e067      	b.n	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d041      	beq.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fe f98c 	bl	800325c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d136      	bne.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10c      	bne.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e00b      	b.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e021      	b.n	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10c      	bne.n	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e00b      	b.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	f47f af6d 	bne.w	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800501c:	e034      	b.n	8005088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f8e3 	bl	80051ea <I2C_IsAcknowledgeFailed>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e034      	b.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d028      	beq.n	8005088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fe f911 	bl	800325c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d11d      	bne.n	8005088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d016      	beq.n	8005088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e007      	b.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d1c3      	bne.n	800501e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ac:	e034      	b.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f89b 	bl	80051ea <I2C_IsAcknowledgeFailed>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e034      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d028      	beq.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c6:	f7fe f8c9 	bl	800325c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11d      	bne.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d016      	beq.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e007      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d1c3      	bne.n	80050ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800513c:	e049      	b.n	80051d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d119      	bne.n	8005180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0210 	mvn.w	r2, #16
 8005154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e030      	b.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fe f86c 	bl	800325c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d11d      	bne.n	80051d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d016      	beq.n	80051d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e007      	b.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d1ae      	bne.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d11b      	bne.n	800523a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800520a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f043 0204 	orr.w	r2, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr
	...

08005248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e272      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8087 	beq.w	8005376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005268:	4b92      	ldr	r3, [pc, #584]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b04      	cmp	r3, #4
 8005272:	d00c      	beq.n	800528e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005274:	4b8f      	ldr	r3, [pc, #572]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d112      	bne.n	80052a6 <HAL_RCC_OscConfig+0x5e>
 8005280:	4b8c      	ldr	r3, [pc, #560]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d10b      	bne.n	80052a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528e:	4b89      	ldr	r3, [pc, #548]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d06c      	beq.n	8005374 <HAL_RCC_OscConfig+0x12c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d168      	bne.n	8005374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e24c      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ae:	d106      	bne.n	80052be <HAL_RCC_OscConfig+0x76>
 80052b0:	4b80      	ldr	r3, [pc, #512]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7f      	ldr	r2, [pc, #508]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e02e      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0x98>
 80052c6:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7a      	ldr	r2, [pc, #488]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b78      	ldr	r3, [pc, #480]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a77      	ldr	r2, [pc, #476]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0xbc>
 80052ea:	4b72      	ldr	r3, [pc, #456]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a71      	ldr	r2, [pc, #452]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6e      	ldr	r2, [pc, #440]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 8005304:	4b6b      	ldr	r3, [pc, #428]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6a      	ldr	r2, [pc, #424]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fd ff9a 	bl	800325c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800532c:	f7fd ff96 	bl	800325c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e200      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xe4>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fd ff86 	bl	800325c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005354:	f7fd ff82 	bl	800325c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1ec      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x10c>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d063      	beq.n	800544a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005382:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x18c>
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x176>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e1c0      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4939      	ldr	r1, [pc, #228]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e03a      	b.n	800544a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fd ff3b 	bl	800325c <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fd ff37 	bl	800325c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1a1      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4927      	ldr	r1, [pc, #156]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fd ff1a 	bl	800325c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542c:	f7fd ff16 	bl	800325c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e180      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03a      	beq.n	80054cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d019      	beq.n	8005492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCC_OscConfig+0x274>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005464:	f7fd fefa 	bl	800325c <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546c:	f7fd fef6 	bl	800325c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e160      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800548a:	2001      	movs	r0, #1
 800548c:	f000 face 	bl	8005a2c <RCC_Delay>
 8005490:	e01c      	b.n	80054cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_RCC_OscConfig+0x274>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fd fee0 	bl	800325c <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a0:	f7fd fedc 	bl	800325c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e146      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	42420000 	.word	0x42420000
 80054bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c0:	4b92      	ldr	r3, [pc, #584]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e9      	bne.n	80054a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a6 	beq.w	8005626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b8b      	ldr	r3, [pc, #556]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4a87      	ldr	r2, [pc, #540]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	61d3      	str	r3, [r2, #28]
 80054f6:	4b85      	ldr	r3, [pc, #532]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b82      	ldr	r3, [pc, #520]	; (8005710 <HAL_RCC_OscConfig+0x4c8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b7f      	ldr	r3, [pc, #508]	; (8005710 <HAL_RCC_OscConfig+0x4c8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7e      	ldr	r2, [pc, #504]	; (8005710 <HAL_RCC_OscConfig+0x4c8>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fd fe9d 	bl	800325c <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fd fe99 	bl	800325c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e103      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b75      	ldr	r3, [pc, #468]	; (8005710 <HAL_RCC_OscConfig+0x4c8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x312>
 800554c:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4a6e      	ldr	r2, [pc, #440]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6213      	str	r3, [r2, #32]
 8005558:	e02d      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x334>
 8005562:	4b6a      	ldr	r3, [pc, #424]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4a69      	ldr	r2, [pc, #420]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	4b67      	ldr	r3, [pc, #412]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4a66      	ldr	r2, [pc, #408]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	6213      	str	r3, [r2, #32]
 800557a:	e01c      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d10c      	bne.n	800559e <HAL_RCC_OscConfig+0x356>
 8005584:	4b61      	ldr	r3, [pc, #388]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a60      	ldr	r2, [pc, #384]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800558a:	f043 0304 	orr.w	r3, r3, #4
 800558e:	6213      	str	r3, [r2, #32]
 8005590:	4b5e      	ldr	r3, [pc, #376]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	4a5d      	ldr	r2, [pc, #372]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6213      	str	r3, [r2, #32]
 800559c:	e00b      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800559e:	4b5b      	ldr	r3, [pc, #364]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	4a5a      	ldr	r2, [pc, #360]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6213      	str	r3, [r2, #32]
 80055aa:	4b58      	ldr	r3, [pc, #352]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	f023 0304 	bic.w	r3, r3, #4
 80055b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fd fe4d 	bl	800325c <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fd fe49 	bl	800325c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0b1      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	4b4b      	ldr	r3, [pc, #300]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCC_OscConfig+0x37e>
 80055e8:	e014      	b.n	8005614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ea:	f7fd fe37 	bl	800325c <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fd fe33 	bl	800325c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e09b      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005608:	4b40      	ldr	r3, [pc, #256]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8087 	beq.w	800573e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	2b08      	cmp	r3, #8
 800563a:	d061      	beq.n	8005700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d146      	bne.n	80056d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005644:	4b33      	ldr	r3, [pc, #204]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564a:	f7fd fe07 	bl	800325c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005652:	f7fd fe03 	bl	800325c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e06d      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005664:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005678:	d108      	bne.n	800568c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4921      	ldr	r1, [pc, #132]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568c:	4b1f      	ldr	r3, [pc, #124]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a19      	ldr	r1, [r3, #32]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	430b      	orrs	r3, r1
 800569e:	491b      	ldr	r1, [pc, #108]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fd fdd7 	bl	800325c <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fd fdd3 	bl	800325c <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e03d      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x46a>
 80056d0:	e035      	b.n	800573e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <HAL_RCC_OscConfig+0x4cc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd fdc0 	bl	800325c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fdbc 	bl	800325c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e026      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x498>
 80056fe:	e01e      	b.n	800573e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e019      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
 800570c:	40021000 	.word	0x40021000
 8005710:	40007000 	.word	0x40007000
 8005714:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_OscConfig+0x500>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	429a      	cmp	r2, r3
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000

0800574c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0d0      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b67      	ldr	r3, [pc, #412]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 0207 	bic.w	r2, r3, #7
 8005776:	4965      	ldr	r1, [pc, #404]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b63      	ldr	r3, [pc, #396]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b8      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b59      	ldr	r3, [pc, #356]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a58      	ldr	r2, [pc, #352]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c0:	4b53      	ldr	r3, [pc, #332]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a52      	ldr	r2, [pc, #328]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057cc:	4b50      	ldr	r3, [pc, #320]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	494d      	ldr	r1, [pc, #308]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d040      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d115      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e073      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e06b      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b39      	ldr	r3, [pc, #228]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4936      	ldr	r1, [pc, #216]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fd fd0e 	bl	800325c <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fd fd0a 	bl	800325c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e053      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d210      	bcs.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	4922      	ldr	r1, [pc, #136]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4916      	ldr	r1, [pc, #88]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	490e      	ldr	r1, [pc, #56]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058da:	f000 f821 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	490a      	ldr	r1, [pc, #40]	; (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058ec:	5ccb      	ldrb	r3, [r1, r3]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <HAL_RCC_ClockConfig+0x1cc>)
 80058f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1d0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fc6c 	bl	80031d8 <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40022000 	.word	0x40022000
 8005910:	40021000 	.word	0x40021000
 8005914:	08008ad4 	.word	0x08008ad4
 8005918:	20000098 	.word	0x20000098
 800591c:	2000009c 	.word	0x2000009c

08005920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800593a:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b04      	cmp	r3, #4
 8005948:	d002      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x30>
 800594a:	2b08      	cmp	r3, #8
 800594c:	d003      	beq.n	8005956 <HAL_RCC_GetSysClockFreq+0x36>
 800594e:	e027      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005952:	613b      	str	r3, [r7, #16]
      break;
 8005954:	e027      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	0c9b      	lsrs	r3, r3, #18
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005960:	5cd3      	ldrb	r3, [r2, r3]
 8005962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	0c5b      	lsrs	r3, r3, #17
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	4a11      	ldr	r2, [pc, #68]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800597a:	5cd3      	ldrb	r3, [r2, r3]
 800597c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005982:	fb03 f202 	mul.w	r2, r3, r2
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e004      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
      break;
 800599e:	e002      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80059a2:	613b      	str	r3, [r7, #16]
      break;
 80059a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a6:	693b      	ldr	r3, [r7, #16]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
 80059b8:	007a1200 	.word	0x007a1200
 80059bc:	08008aec 	.word	0x08008aec
 80059c0:	08008afc 	.word	0x08008afc
 80059c4:	003d0900 	.word	0x003d0900

080059c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	20000098 	.word	0x20000098

080059dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059e0:	f7ff fff2 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	4903      	ldr	r1, [pc, #12]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f2:	5ccb      	ldrb	r3, [r1, r3]
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000
 8005a00:	08008ae4 	.word	0x08008ae4

08005a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a08:	f7ff ffde 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	0adb      	lsrs	r3, r3, #11
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4903      	ldr	r1, [pc, #12]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1a:	5ccb      	ldrb	r3, [r1, r3]
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40021000 	.word	0x40021000
 8005a28:	08008ae4 	.word	0x08008ae4

08005a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCC_Delay+0x34>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <RCC_Delay+0x38>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a48:	bf00      	nop
  }
  while (Delay --);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f9      	bne.n	8005a48 <RCC_Delay+0x1c>
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	20000098 	.word	0x20000098
 8005a64:	10624dd3 	.word	0x10624dd3

08005a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e041      	b.n	8005afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fd f8b8 	bl	8002c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f000 fcd4 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e044      	b.n	8005baa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xac>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d00e      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIM_Base_Start_IT+0xb4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d111      	bne.n	8005b98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d010      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	e007      	b.n	8005ba8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00

08005bc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e041      	b.n	8005c5e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f839 	bl	8005c66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 fc24 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_IC_Start_IT+0x1e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e013      	b.n	8005cbe <HAL_TIM_IC_Start_IT+0x46>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_IC_Start_IT+0x2e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e00b      	b.n	8005cbe <HAL_TIM_IC_Start_IT+0x46>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_IC_Start_IT+0x3e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	e003      	b.n	8005cbe <HAL_TIM_IC_Start_IT+0x46>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <HAL_TIM_IC_Start_IT+0x58>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e013      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x80>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d104      	bne.n	8005ce0 <HAL_TIM_IC_Start_IT+0x68>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e00b      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x80>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d104      	bne.n	8005cf0 <HAL_TIM_IC_Start_IT+0x78>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	e003      	b.n	8005cf8 <HAL_TIM_IC_Start_IT+0x80>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d00:	7b7b      	ldrb	r3, [r7, #13]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e0c2      	b.n	8005e90 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_IC_Start_IT+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d18:	e013      	b.n	8005d42 <HAL_TIM_IC_Start_IT+0xca>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_IC_Start_IT+0xb2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	e00b      	b.n	8005d42 <HAL_TIM_IC_Start_IT+0xca>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_IC_Start_IT+0xc2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d38:	e003      	b.n	8005d42 <HAL_TIM_IC_Start_IT+0xca>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_IC_Start_IT+0xda>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	e013      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x102>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_IC_Start_IT+0xea>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	e00b      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x102>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_IC_Start_IT+0xfa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d70:	e003      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x102>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	d841      	bhi.n	8005e04 <HAL_TIM_IC_Start_IT+0x18c>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_TIM_IC_Start_IT+0x110>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005e05 	.word	0x08005e05
 8005d90:	08005e05 	.word	0x08005e05
 8005d94:	08005e05 	.word	0x08005e05
 8005d98:	08005dcf 	.word	0x08005dcf
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005e05 	.word	0x08005e05
 8005da4:	08005e05 	.word	0x08005e05
 8005da8:	08005de1 	.word	0x08005de1
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005df3 	.word	0x08005df3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0202 	orr.w	r2, r2, #2
 8005dca:	60da      	str	r2, [r3, #12]
      break;
 8005dcc:	e01d      	b.n	8005e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0204 	orr.w	r2, r2, #4
 8005ddc:	60da      	str	r2, [r3, #12]
      break;
 8005dde:	e014      	b.n	8005e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	60da      	str	r2, [r3, #12]
      break;
 8005df0:	e00b      	b.n	8005e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0210 	orr.w	r2, r2, #16
 8005e00:	60da      	str	r2, [r3, #12]
      break;
 8005e02:	e002      	b.n	8005e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	73fb      	strb	r3, [r7, #15]
      break;
 8005e08:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d13e      	bne.n	8005e8e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd44 	bl	80068a6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_TIM_IC_Start_IT+0x220>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0x1e2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <HAL_TIM_IC_Start_IT+0x224>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0x1e2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3a:	d00e      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0x1e2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <HAL_TIM_IC_Start_IT+0x228>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0x1e2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_TIM_IC_Start_IT+0x22c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0x1e2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <HAL_TIM_IC_Start_IT+0x230>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d111      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d010      	beq.n	8005e8e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	e007      	b.n	8005e8e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00

08005eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0202 	mvn.w	r2, #2
 8005ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb fbee 	bl	80016d0 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa91 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa97 	bl	8006430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d122      	bne.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d11b      	bne.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0204 	mvn.w	r2, #4
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fbc4 	bl	80016d0 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa67 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa6d 	bl	8006430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d122      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d11b      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0208 	mvn.w	r2, #8
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fb9a 	bl	80016d0 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa3d 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa43 	bl	8006430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d122      	bne.n	8006004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d11b      	bne.n	8006004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0210 	mvn.w	r2, #16
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb fb70 	bl	80016d0 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa13 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fa19 	bl	8006430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0201 	mvn.w	r2, #1
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9ee 	bl	800640c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d10e      	bne.n	800605c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d107      	bne.n	800605c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fcbf 	bl	80069da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d107      	bne.n	8006088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9dd 	bl	8006442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b20      	cmp	r3, #32
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d107      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0220 	mvn.w	r2, #32
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fc8a 	bl	80069c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_TIM_IC_ConfigChannel+0x1e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e088      	b.n	80061ec <HAL_TIM_IC_ConfigChannel+0x130>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80060f8:	f000 fa26 	bl	8006548 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 020c 	bic.w	r2, r2, #12
 800610a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6999      	ldr	r1, [r3, #24]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e060      	b.n	80061e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b04      	cmp	r3, #4
 8006124:	d11c      	bne.n	8006160 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006136:	f000 fa9b 	bl	8006670 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006148:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6999      	ldr	r1, [r3, #24]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	021a      	lsls	r2, r3, #8
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
 800615e:	e040      	b.n	80061e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d11b      	bne.n	800619e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006176:	f000 fae6 	bl	8006746 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 020c 	bic.w	r2, r2, #12
 8006188:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69d9      	ldr	r1, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	61da      	str	r2, [r3, #28]
 800619c:	e021      	b.n	80061e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	d11c      	bne.n	80061de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061b4:	f000 fb02 	bl	80067bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69d9      	ldr	r1, [r3, #28]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	021a      	lsls	r2, r3, #8
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	61da      	str	r2, [r3, #28]
 80061dc:	e001      	b.n	80061e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIM_ConfigClockSource+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e0b4      	b.n	800637a <HAL_TIM_ConfigClockSource+0x186>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006248:	d03e      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0xd4>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624e:	f200 8087 	bhi.w	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	f000 8086 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x172>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	d87f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b70      	cmp	r3, #112	; 0x70
 8006262:	d01a      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xa6>
 8006264:	2b70      	cmp	r3, #112	; 0x70
 8006266:	d87b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b60      	cmp	r3, #96	; 0x60
 800626a:	d050      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x11a>
 800626c:	2b60      	cmp	r3, #96	; 0x60
 800626e:	d877      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b50      	cmp	r3, #80	; 0x50
 8006272:	d03c      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0xfa>
 8006274:	2b50      	cmp	r3, #80	; 0x50
 8006276:	d873      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d058      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x13a>
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d86f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b30      	cmp	r3, #48	; 0x30
 8006282:	d064      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006284:	2b30      	cmp	r3, #48	; 0x30
 8006286:	d86b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d060      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d867      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b10      	cmp	r3, #16
 8006296:	d05a      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	e062      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062aa:	f000 fadd 	bl	8006868 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
      break;
 80062c6:	e04f      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d8:	f000 fac6 	bl	8006868 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ea:	609a      	str	r2, [r3, #8]
      break;
 80062ec:	e03c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 f98a 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2150      	movs	r1, #80	; 0x50
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fa94 	bl	8006834 <TIM_ITRx_SetConfig>
      break;
 800630c:	e02c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	461a      	mov	r2, r3
 800631c:	f000 f9e4 	bl	80066e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2160      	movs	r1, #96	; 0x60
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa84 	bl	8006834 <TIM_ITRx_SetConfig>
      break;
 800632c:	e01c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	461a      	mov	r2, r3
 800633c:	f000 f96a 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa74 	bl	8006834 <TIM_ITRx_SetConfig>
      break;
 800634c:	e00c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 fa6b 	bl	8006834 <TIM_ITRx_SetConfig>
      break;
 800635e:	e003      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e000      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b0c      	cmp	r3, #12
 8006396:	d831      	bhi.n	80063fc <HAL_TIM_ReadCapturedValue+0x78>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	080063fd 	.word	0x080063fd
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	080063f3 	.word	0x080063f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	60fb      	str	r3, [r7, #12]

      break;
 80063dc:	e00f      	b.n	80063fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	60fb      	str	r3, [r7, #12]

      break;
 80063e6:	e00a      	b.n	80063fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	60fb      	str	r3, [r7, #12]

      break;
 80063f0:	e005      	b.n	80063fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	60fb      	str	r3, [r7, #12]

      break;
 80063fa:	e000      	b.n	80063fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80063fc:	bf00      	nop
  }

  return tmpreg;
 80063fe:	68fb      	ldr	r3, [r7, #12]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a33      	ldr	r2, [pc, #204]	; (8006534 <TIM_Base_SetConfig+0xe0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a32      	ldr	r2, [pc, #200]	; (8006538 <TIM_Base_SetConfig+0xe4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <TIM_Base_SetConfig+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <TIM_Base_SetConfig+0xec>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <TIM_Base_SetConfig+0xf0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <TIM_Base_SetConfig+0xe0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <TIM_Base_SetConfig+0x82>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a21      	ldr	r2, [pc, #132]	; (8006538 <TIM_Base_SetConfig+0xe4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00f      	beq.n	80064d6 <TIM_Base_SetConfig+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d00b      	beq.n	80064d6 <TIM_Base_SetConfig+0x82>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a1e      	ldr	r2, [pc, #120]	; (800653c <TIM_Base_SetConfig+0xe8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d007      	beq.n	80064d6 <TIM_Base_SetConfig+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <TIM_Base_SetConfig+0xec>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_Base_SetConfig+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <TIM_Base_SetConfig+0xf0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d108      	bne.n	80064e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <TIM_Base_SetConfig+0xe0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0xc8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <TIM_Base_SetConfig+0xe4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d103      	bne.n	8006524 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	615a      	str	r2, [r3, #20]
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40013400 	.word	0x40013400
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00

08006548 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0201 	bic.w	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a23      	ldr	r2, [pc, #140]	; (8006600 <TIM_TI1_SetConfig+0xb8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <TIM_TI1_SetConfig+0x56>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <TIM_TI1_SetConfig+0xbc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_TI1_SetConfig+0x56>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d00b      	beq.n	800659e <TIM_TI1_SetConfig+0x56>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <TIM_TI1_SetConfig+0xc0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_TI1_SetConfig+0x56>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a1e      	ldr	r2, [pc, #120]	; (800660c <TIM_TI1_SetConfig+0xc4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_TI1_SetConfig+0x56>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <TIM_TI1_SetConfig+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <TIM_TI1_SetConfig+0x5a>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <TIM_TI1_SetConfig+0x5c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e003      	b.n	80065c2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f023 030a 	bic.w	r3, r3, #10
 80065dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 030a 	and.w	r3, r3, #10
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40013400 	.word	0x40013400
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00

08006614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 030a 	bic.w	r3, r3, #10
 8006650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0210 	bic.w	r2, r3, #16
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	031b      	lsls	r3, r3, #12
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	031b      	lsls	r3, r3, #12
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006782:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	b2db      	uxtb	r3, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	031b      	lsls	r3, r3, #12
 8006800:	b29b      	uxth	r3, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800680e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	031b      	lsls	r3, r3, #12
 8006814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	f043 0307 	orr.w	r3, r3, #7
 8006856:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	609a      	str	r2, [r3, #8]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	431a      	orrs	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2201      	movs	r2, #1
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	401a      	ands	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	fa01 f303 	lsl.w	r3, r1, r3
 80068de:	431a      	orrs	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006904:	2302      	movs	r3, #2
 8006906:	e050      	b.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d00e      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10c      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00

080069c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e042      	b.n	8006a84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fc fa20 	bl	8002e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2224      	movs	r2, #36	; 0x24
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 ff53 	bl	80078dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d16d      	bne.n	8006b88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Transmit+0x2c>
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e066      	b.n	8006b8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aca:	f7fc fbc7 	bl	800325c <HAL_GetTick>
 8006ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	88fa      	ldrh	r2, [r7, #6]
 8006ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d108      	bne.n	8006af8 <HAL_UART_Transmit+0x6c>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e003      	b.n	8006b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b00:	e02a      	b.n	8006b58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fc1b 	bl	8007348 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e036      	b.n	8006b8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	3302      	adds	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e007      	b.n	8006b4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1cf      	bne.n	8006b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2140      	movs	r1, #64	; 0x40
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fbeb 	bl	8007348 <UART_WaitOnFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e006      	b.n	8006b8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d112      	bne.n	8006bd2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_UART_Receive_DMA+0x26>
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e00b      	b.n	8006bd4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fc2b 	bl	8007424 <UART_Start_Receive_DMA>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	e000      	b.n	8006bd4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b0ba      	sub	sp, #232	; 0xe8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10f      	bne.n	8006c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <HAL_UART_IRQHandler+0x66>
 8006c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fd90 	bl	8007760 <UART_Receive_IT>
      return;
 8006c40:	e25b      	b.n	80070fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80de 	beq.w	8006e08 <HAL_UART_IRQHandler+0x22c>
 8006c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80d1 	beq.w	8006e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <HAL_UART_IRQHandler+0xae>
 8006c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <HAL_UART_IRQHandler+0xd2>
 8006c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	f043 0202 	orr.w	r2, r3, #2
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <HAL_UART_IRQHandler+0xf6>
 8006cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	f043 0204 	orr.w	r2, r3, #4
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <HAL_UART_IRQHandler+0x126>
 8006cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	f043 0208 	orr.w	r2, r3, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 81f2 	beq.w	80070f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_UART_IRQHandler+0x14e>
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fd1b 	bl	8007760 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <HAL_UART_IRQHandler+0x17a>
 8006d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d04f      	beq.n	8006df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc25 	bl	80075a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d041      	beq.n	8006dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1d9      	bne.n	8006d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d013      	beq.n	8006de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	4a7e      	ldr	r2, [pc, #504]	; (8006fbc <HAL_UART_IRQHandler+0x3e0>)
 8006dc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fc fc94 	bl	80036f8 <HAL_DMA_Abort_IT>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d016      	beq.n	8006e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e00e      	b.n	8006e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f99c 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	e00a      	b.n	8006e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f998 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	e006      	b.n	8006e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f994 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006e02:	e175      	b.n	80070f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	bf00      	nop
    return;
 8006e06:	e173      	b.n	80070f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 814f 	bne.w	80070b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8148 	beq.w	80070b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8141 	beq.w	80070b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80b6 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8145 	beq.w	80070f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e72:	429a      	cmp	r2, r3
 8006e74:	f080 813e 	bcs.w	80070f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	f000 8088 	beq.w	8006f9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006eb8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ec4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1d9      	bne.n	8006e8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006efc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e1      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3314      	adds	r3, #20
 8006f1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e3      	bne.n	8006f14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6c:	f023 0310 	bic.w	r3, r3, #16
 8006f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e3      	bne.n	8006f5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fc fb72 	bl	8003680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8bf 	bl	8007136 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fb8:	e09c      	b.n	80070f4 <HAL_UART_IRQHandler+0x518>
 8006fba:	bf00      	nop
 8006fbc:	0800766b 	.word	0x0800766b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 808e 	beq.w	80070f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8089 	beq.w	80070f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800700a:	647a      	str	r2, [r7, #68]	; 0x44
 800700c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	623b      	str	r3, [r7, #32]
   return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007042:	633a      	str	r2, [r7, #48]	; 0x30
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	60fb      	str	r3, [r7, #12]
   return(result);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0310 	bic.w	r3, r3, #16
 800707a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007088:	61fa      	str	r2, [r7, #28]
 800708a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	69b9      	ldr	r1, [r7, #24]
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	617b      	str	r3, [r7, #20]
   return(result);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e3      	bne.n	8007064 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f844 	bl	8007136 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070ae:	e023      	b.n	80070f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_UART_IRQHandler+0x4f4>
 80070bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fae2 	bl	8007692 <UART_Transmit_IT>
    return;
 80070ce:	e014      	b.n	80070fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <HAL_UART_IRQHandler+0x51e>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb21 	bl	8007730 <UART_EndTransmit_IT>
    return;
 80070ee:	e004      	b.n	80070fa <HAL_UART_IRQHandler+0x51e>
    return;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <HAL_UART_IRQHandler+0x51e>
      return;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <HAL_UART_IRQHandler+0x51e>
      return;
 80070f8:	bf00      	nop
  }
}
 80070fa:	37e8      	adds	r7, #232	; 0xe8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr

08007136 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b09c      	sub	sp, #112	; 0x70
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d172      	bne.n	800724e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716a:	2200      	movs	r2, #0
 800716c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800717e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007184:	66bb      	str	r3, [r7, #104]	; 0x68
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330c      	adds	r3, #12
 800718c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800718e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007190:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800719c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071c2:	647a      	str	r2, [r7, #68]	; 0x44
 80071c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	623b      	str	r3, [r7, #32]
   return(result);
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ec:	663b      	str	r3, [r7, #96]	; 0x60
 80071ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071f6:	633a      	str	r2, [r7, #48]	; 0x30
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800720a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	2b01      	cmp	r3, #1
 8007218:	d119      	bne.n	800724e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60fb      	str	r3, [r7, #12]
   return(result);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f023 0310 	bic.w	r3, r3, #16
 8007230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800723a:	61fa      	str	r2, [r7, #28]
 800723c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	69b9      	ldr	r1, [r7, #24]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	617b      	str	r3, [r7, #20]
   return(result);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	2200      	movs	r2, #0
 8007252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800725c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007260:	4619      	mov	r1, r3
 8007262:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007264:	f7ff ff67 	bl	8007136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007268:	e002      	b.n	8007270 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800726a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800726c:	f7fa fdc4 	bl	8001df8 <HAL_UART_RxCpltCallback>
}
 8007270:	bf00      	nop
 8007272:	3770      	adds	r7, #112	; 0x70
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	2b01      	cmp	r3, #1
 8007292:	d108      	bne.n	80072a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	4619      	mov	r1, r3
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff ff49 	bl	8007136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072a4:	e002      	b.n	80072ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff ff33 	bl	8007112 <HAL_UART_RxHalfCpltCallback>
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bf14      	ite	ne
 80072d4:	2301      	movne	r3, #1
 80072d6:	2300      	moveq	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b21      	cmp	r3, #33	; 0x21
 80072e6:	d108      	bne.n	80072fa <UART_DMAError+0x46>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072f4:	68b8      	ldr	r0, [r7, #8]
 80072f6:	f000 f92f 	bl	8007558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b22      	cmp	r3, #34	; 0x22
 800731a:	d108      	bne.n	800732e <UART_DMAError+0x7a>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 f93c 	bl	80075a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f043 0210 	orr.w	r2, r3, #16
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733a:	68b8      	ldr	r0, [r7, #8]
 800733c:	f7ff fef2 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b090      	sub	sp, #64	; 0x40
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007358:	e050      	b.n	80073fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d04c      	beq.n	80073fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <UART_WaitOnFlagUntilTimeout+0x30>
 8007368:	f7fb ff78 	bl	800325c <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007374:	429a      	cmp	r2, r3
 8007376:	d241      	bcs.n	80073fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007398:	637a      	str	r2, [r7, #52]	; 0x34
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800739e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3314      	adds	r3, #20
 80073b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	613b      	str	r3, [r7, #16]
   return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3314      	adds	r3, #20
 80073ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073cc:	623a      	str	r2, [r7, #32]
 80073ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e00f      	b.n	800741c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4013      	ands	r3, r2
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	429a      	cmp	r2, r3
 8007418:	d09f      	beq.n	800735a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3740      	adds	r7, #64	; 0x40
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b098      	sub	sp, #96	; 0x60
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2222      	movs	r2, #34	; 0x22
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	4a3e      	ldr	r2, [pc, #248]	; (800754c <UART_Start_Receive_DMA+0x128>)
 8007452:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	4a3d      	ldr	r2, [pc, #244]	; (8007550 <UART_Start_Receive_DMA+0x12c>)
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	4a3c      	ldr	r2, [pc, #240]	; (8007554 <UART_Start_Receive_DMA+0x130>)
 8007462:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007468:	2200      	movs	r2, #0
 800746a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800746c:	f107 0308 	add.w	r3, r7, #8
 8007470:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	f7fc f89c 	bl	80035c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d019      	beq.n	80074da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80074cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80074d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	f043 0301 	orr.w	r3, r3, #1
 80074f0:	657b      	str	r3, [r7, #84]	; 0x54
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e5      	bne.n	80074da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	617b      	str	r3, [r7, #20]
   return(result);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007524:	653b      	str	r3, [r7, #80]	; 0x50
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3314      	adds	r3, #20
 800752c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800752e:	627a      	str	r2, [r7, #36]	; 0x24
 8007530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6a39      	ldr	r1, [r7, #32]
 8007534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	61fb      	str	r3, [r7, #28]
   return(result);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3760      	adds	r7, #96	; 0x60
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	0800714d 	.word	0x0800714d
 8007550:	08007279 	.word	0x08007279
 8007554:	080072b5 	.word	0x080072b5

08007558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b089      	sub	sp, #36	; 0x24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	61ba      	str	r2, [r7, #24]
 8007582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	613b      	str	r3, [r7, #16]
   return(result);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800759c:	bf00      	nop
 800759e:	3724      	adds	r7, #36	; 0x24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b095      	sub	sp, #84	; 0x54
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ce:	643a      	str	r2, [r7, #64]	; 0x40
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e5      	bne.n	80075ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3314      	adds	r3, #20
 8007600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e5      	bne.n	80075e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	2b01      	cmp	r3, #1
 800761c:	d119      	bne.n	8007652 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	60bb      	str	r3, [r7, #8]
   return(result);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f023 0310 	bic.w	r3, r3, #16
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	61ba      	str	r2, [r7, #24]
 8007640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6979      	ldr	r1, [r7, #20]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	613b      	str	r3, [r7, #16]
   return(result);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e5      	bne.n	800761e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007660:	bf00      	nop
 8007662:	3754      	adds	r7, #84	; 0x54
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fd4d 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d13e      	bne.n	8007724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ae:	d114      	bne.n	80076da <UART_Transmit_IT+0x48>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d110      	bne.n	80076da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]
 80076d8:	e008      	b.n	80076ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	1c59      	adds	r1, r3, #1
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6211      	str	r1, [r2, #32]
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4619      	mov	r1, r3
 80076fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800770e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007746:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fcd5 	bl	8007100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	; 0x30
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b22      	cmp	r3, #34	; 0x22
 8007772:	f040 80ae 	bne.w	80078d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777e:	d117      	bne.n	80077b0 <UART_Receive_IT+0x50>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d113      	bne.n	80077b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	1c9a      	adds	r2, r3, #2
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
 80077ae:	e026      	b.n	80077fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	d007      	beq.n	80077d4 <UART_Receive_IT+0x74>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <UART_Receive_IT+0x82>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e008      	b.n	80077f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4619      	mov	r1, r3
 800780c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800780e:	2b00      	cmp	r3, #0
 8007810:	d15d      	bne.n	80078ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0220 	bic.w	r2, r2, #32
 8007820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0201 	bic.w	r2, r2, #1
 8007840:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	2b01      	cmp	r3, #1
 8007856:	d135      	bne.n	80078c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	623a      	str	r2, [r7, #32]
 8007880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	69f9      	ldr	r1, [r7, #28]
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	61bb      	str	r3, [r7, #24]
   return(result);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b10      	cmp	r3, #16
 800789e:	d10a      	bne.n	80078b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fc3a 	bl	8007136 <HAL_UARTEx_RxEventCallback>
 80078c2:	e002      	b.n	80078ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fa fa97 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e002      	b.n	80078d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3730      	adds	r7, #48	; 0x30
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007916:	f023 030c 	bic.w	r3, r3, #12
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	430b      	orrs	r3, r1
 8007922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <UART_SetConfig+0x114>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d103      	bne.n	800794c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007944:	f7fe f85e 	bl	8005a04 <HAL_RCC_GetPCLK2Freq>
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	e002      	b.n	8007952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800794c:	f7fe f846 	bl	80059dc <HAL_RCC_GetPCLK1Freq>
 8007950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009a      	lsls	r2, r3, #2
 800795c:	441a      	add	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	4a22      	ldr	r2, [pc, #136]	; (80079f4 <UART_SetConfig+0x118>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	0119      	lsls	r1, r3, #4
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009a      	lsls	r2, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	fbb2 f2f3 	udiv	r2, r2, r3
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <UART_SetConfig+0x118>)
 800798a:	fba3 0302 	umull	r0, r3, r3, r2
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	2064      	movs	r0, #100	; 0x64
 8007992:	fb00 f303 	mul.w	r3, r0, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	3332      	adds	r3, #50	; 0x32
 800799c:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <UART_SetConfig+0x118>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a8:	4419      	add	r1, r3
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009a      	lsls	r2, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <UART_SetConfig+0x118>)
 80079c2:	fba3 0302 	umull	r0, r3, r3, r2
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	2064      	movs	r0, #100	; 0x64
 80079ca:	fb00 f303 	mul.w	r3, r0, r3
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	3332      	adds	r3, #50	; 0x32
 80079d4:	4a07      	ldr	r2, [pc, #28]	; (80079f4 <UART_SetConfig+0x118>)
 80079d6:	fba2 2303 	umull	r2, r3, r2, r3
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	440a      	add	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	40013800 	.word	0x40013800
 80079f4:	51eb851f 	.word	0x51eb851f

080079f8 <siprintf>:
 80079f8:	b40e      	push	{r1, r2, r3}
 80079fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079fe:	b500      	push	{lr}
 8007a00:	b09c      	sub	sp, #112	; 0x70
 8007a02:	ab1d      	add	r3, sp, #116	; 0x74
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	9006      	str	r0, [sp, #24]
 8007a08:	9107      	str	r1, [sp, #28]
 8007a0a:	9104      	str	r1, [sp, #16]
 8007a0c:	4808      	ldr	r0, [pc, #32]	; (8007a30 <siprintf+0x38>)
 8007a0e:	4909      	ldr	r1, [pc, #36]	; (8007a34 <siprintf+0x3c>)
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	9105      	str	r1, [sp, #20]
 8007a16:	6800      	ldr	r0, [r0, #0]
 8007a18:	a902      	add	r1, sp, #8
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	f000 f98e 	bl	8007d3c <_svfiprintf_r>
 8007a20:	2200      	movs	r2, #0
 8007a22:	9b02      	ldr	r3, [sp, #8]
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	b01c      	add	sp, #112	; 0x70
 8007a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a2c:	b003      	add	sp, #12
 8007a2e:	4770      	bx	lr
 8007a30:	200000f0 	.word	0x200000f0
 8007a34:	ffff0208 	.word	0xffff0208

08007a38 <memset>:
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4402      	add	r2, r0
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <memset+0xa>
 8007a40:	4770      	bx	lr
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f9      	b.n	8007a3c <memset+0x4>

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200000f0 	.word	0x200000f0

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	2600      	movs	r6, #0
 8007a58:	4d0c      	ldr	r5, [pc, #48]	; (8007a8c <__libc_init_array+0x38>)
 8007a5a:	4c0d      	ldr	r4, [pc, #52]	; (8007a90 <__libc_init_array+0x3c>)
 8007a5c:	1b64      	subs	r4, r4, r5
 8007a5e:	10a4      	asrs	r4, r4, #2
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	f001 f81a 	bl	8008a9c <_init>
 8007a68:	2600      	movs	r6, #0
 8007a6a:	4d0a      	ldr	r5, [pc, #40]	; (8007a94 <__libc_init_array+0x40>)
 8007a6c:	4c0a      	ldr	r4, [pc, #40]	; (8007a98 <__libc_init_array+0x44>)
 8007a6e:	1b64      	subs	r4, r4, r5
 8007a70:	10a4      	asrs	r4, r4, #2
 8007a72:	42a6      	cmp	r6, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7c:	4798      	blx	r3
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a86:	4798      	blx	r3
 8007a88:	3601      	adds	r6, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	08008ba8 	.word	0x08008ba8
 8007a90:	08008ba8 	.word	0x08008ba8
 8007a94:	08008ba8 	.word	0x08008ba8
 8007a98:	08008bac 	.word	0x08008bac

08007a9c <__retarget_lock_acquire_recursive>:
 8007a9c:	4770      	bx	lr

08007a9e <__retarget_lock_release_recursive>:
 8007a9e:	4770      	bx	lr

08007aa0 <_free_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d040      	beq.n	8007b2a <_free_r+0x8a>
 8007aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aac:	1f0c      	subs	r4, r1, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	18e4      	addlt	r4, r4, r3
 8007ab4:	f000 f8dc 	bl	8007c70 <__malloc_lock>
 8007ab8:	4a1c      	ldr	r2, [pc, #112]	; (8007b2c <_free_r+0x8c>)
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	b933      	cbnz	r3, 8007acc <_free_r+0x2c>
 8007abe:	6063      	str	r3, [r4, #4]
 8007ac0:	6014      	str	r4, [r2, #0]
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac8:	f000 b8d8 	b.w	8007c7c <__malloc_unlock>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d908      	bls.n	8007ae2 <_free_r+0x42>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	1821      	adds	r1, r4, r0
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	bf01      	itttt	eq
 8007ad8:	6819      	ldreq	r1, [r3, #0]
 8007ada:	685b      	ldreq	r3, [r3, #4]
 8007adc:	1809      	addeq	r1, r1, r0
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	e7ed      	b.n	8007abe <_free_r+0x1e>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	b10b      	cbz	r3, 8007aec <_free_r+0x4c>
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d9fa      	bls.n	8007ae2 <_free_r+0x42>
 8007aec:	6811      	ldr	r1, [r2, #0]
 8007aee:	1850      	adds	r0, r2, r1
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d10b      	bne.n	8007b0c <_free_r+0x6c>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	4401      	add	r1, r0
 8007af8:	1850      	adds	r0, r2, r1
 8007afa:	4283      	cmp	r3, r0
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	d1e0      	bne.n	8007ac2 <_free_r+0x22>
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4408      	add	r0, r1
 8007b06:	6010      	str	r0, [r2, #0]
 8007b08:	6053      	str	r3, [r2, #4]
 8007b0a:	e7da      	b.n	8007ac2 <_free_r+0x22>
 8007b0c:	d902      	bls.n	8007b14 <_free_r+0x74>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	e7d6      	b.n	8007ac2 <_free_r+0x22>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	1821      	adds	r1, r4, r0
 8007b18:	428b      	cmp	r3, r1
 8007b1a:	bf01      	itttt	eq
 8007b1c:	6819      	ldreq	r1, [r3, #0]
 8007b1e:	685b      	ldreq	r3, [r3, #4]
 8007b20:	1809      	addeq	r1, r1, r0
 8007b22:	6021      	streq	r1, [r4, #0]
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	6054      	str	r4, [r2, #4]
 8007b28:	e7cb      	b.n	8007ac2 <_free_r+0x22>
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	200006ac 	.word	0x200006ac

08007b30 <sbrk_aligned>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4e0e      	ldr	r6, [pc, #56]	; (8007b6c <sbrk_aligned+0x3c>)
 8007b34:	460c      	mov	r4, r1
 8007b36:	6831      	ldr	r1, [r6, #0]
 8007b38:	4605      	mov	r5, r0
 8007b3a:	b911      	cbnz	r1, 8007b42 <sbrk_aligned+0x12>
 8007b3c:	f000 fbaa 	bl	8008294 <_sbrk_r>
 8007b40:	6030      	str	r0, [r6, #0]
 8007b42:	4621      	mov	r1, r4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fba5 	bl	8008294 <_sbrk_r>
 8007b4a:	1c43      	adds	r3, r0, #1
 8007b4c:	d00a      	beq.n	8007b64 <sbrk_aligned+0x34>
 8007b4e:	1cc4      	adds	r4, r0, #3
 8007b50:	f024 0403 	bic.w	r4, r4, #3
 8007b54:	42a0      	cmp	r0, r4
 8007b56:	d007      	beq.n	8007b68 <sbrk_aligned+0x38>
 8007b58:	1a21      	subs	r1, r4, r0
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 fb9a 	bl	8008294 <_sbrk_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	d101      	bne.n	8007b68 <sbrk_aligned+0x38>
 8007b64:	f04f 34ff 	mov.w	r4, #4294967295
 8007b68:	4620      	mov	r0, r4
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	200006b0 	.word	0x200006b0

08007b70 <_malloc_r>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	1ccd      	adds	r5, r1, #3
 8007b76:	f025 0503 	bic.w	r5, r5, #3
 8007b7a:	3508      	adds	r5, #8
 8007b7c:	2d0c      	cmp	r5, #12
 8007b7e:	bf38      	it	cc
 8007b80:	250c      	movcc	r5, #12
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	4607      	mov	r7, r0
 8007b86:	db01      	blt.n	8007b8c <_malloc_r+0x1c>
 8007b88:	42a9      	cmp	r1, r5
 8007b8a:	d905      	bls.n	8007b98 <_malloc_r+0x28>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	2600      	movs	r6, #0
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4630      	mov	r0, r6
 8007b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c6c <_malloc_r+0xfc>
 8007b9c:	f000 f868 	bl	8007c70 <__malloc_lock>
 8007ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba4:	461c      	mov	r4, r3
 8007ba6:	bb5c      	cbnz	r4, 8007c00 <_malloc_r+0x90>
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4638      	mov	r0, r7
 8007bac:	f7ff ffc0 	bl	8007b30 <sbrk_aligned>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	d155      	bne.n	8007c62 <_malloc_r+0xf2>
 8007bb6:	f8d8 4000 	ldr.w	r4, [r8]
 8007bba:	4626      	mov	r6, r4
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	d145      	bne.n	8007c4c <_malloc_r+0xdc>
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	d048      	beq.n	8007c56 <_malloc_r+0xe6>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4638      	mov	r0, r7
 8007bca:	eb04 0903 	add.w	r9, r4, r3
 8007bce:	f000 fb61 	bl	8008294 <_sbrk_r>
 8007bd2:	4581      	cmp	r9, r0
 8007bd4:	d13f      	bne.n	8007c56 <_malloc_r+0xe6>
 8007bd6:	6821      	ldr	r1, [r4, #0]
 8007bd8:	4638      	mov	r0, r7
 8007bda:	1a6d      	subs	r5, r5, r1
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7ff ffa7 	bl	8007b30 <sbrk_aligned>
 8007be2:	3001      	adds	r0, #1
 8007be4:	d037      	beq.n	8007c56 <_malloc_r+0xe6>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	442b      	add	r3, r5
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d038      	beq.n	8007c66 <_malloc_r+0xf6>
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	42a2      	cmp	r2, r4
 8007bf8:	d12b      	bne.n	8007c52 <_malloc_r+0xe2>
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	e00f      	b.n	8007c20 <_malloc_r+0xb0>
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	1b52      	subs	r2, r2, r5
 8007c04:	d41f      	bmi.n	8007c46 <_malloc_r+0xd6>
 8007c06:	2a0b      	cmp	r2, #11
 8007c08:	d917      	bls.n	8007c3a <_malloc_r+0xca>
 8007c0a:	1961      	adds	r1, r4, r5
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	6025      	str	r5, [r4, #0]
 8007c10:	bf18      	it	ne
 8007c12:	6059      	strne	r1, [r3, #4]
 8007c14:	6863      	ldr	r3, [r4, #4]
 8007c16:	bf08      	it	eq
 8007c18:	f8c8 1000 	streq.w	r1, [r8]
 8007c1c:	5162      	str	r2, [r4, r5]
 8007c1e:	604b      	str	r3, [r1, #4]
 8007c20:	4638      	mov	r0, r7
 8007c22:	f104 060b 	add.w	r6, r4, #11
 8007c26:	f000 f829 	bl	8007c7c <__malloc_unlock>
 8007c2a:	f026 0607 	bic.w	r6, r6, #7
 8007c2e:	1d23      	adds	r3, r4, #4
 8007c30:	1af2      	subs	r2, r6, r3
 8007c32:	d0ae      	beq.n	8007b92 <_malloc_r+0x22>
 8007c34:	1b9b      	subs	r3, r3, r6
 8007c36:	50a3      	str	r3, [r4, r2]
 8007c38:	e7ab      	b.n	8007b92 <_malloc_r+0x22>
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	6862      	ldr	r2, [r4, #4]
 8007c3e:	d1dd      	bne.n	8007bfc <_malloc_r+0x8c>
 8007c40:	f8c8 2000 	str.w	r2, [r8]
 8007c44:	e7ec      	b.n	8007c20 <_malloc_r+0xb0>
 8007c46:	4623      	mov	r3, r4
 8007c48:	6864      	ldr	r4, [r4, #4]
 8007c4a:	e7ac      	b.n	8007ba6 <_malloc_r+0x36>
 8007c4c:	4634      	mov	r4, r6
 8007c4e:	6876      	ldr	r6, [r6, #4]
 8007c50:	e7b4      	b.n	8007bbc <_malloc_r+0x4c>
 8007c52:	4613      	mov	r3, r2
 8007c54:	e7cc      	b.n	8007bf0 <_malloc_r+0x80>
 8007c56:	230c      	movs	r3, #12
 8007c58:	4638      	mov	r0, r7
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	f000 f80e 	bl	8007c7c <__malloc_unlock>
 8007c60:	e797      	b.n	8007b92 <_malloc_r+0x22>
 8007c62:	6025      	str	r5, [r4, #0]
 8007c64:	e7dc      	b.n	8007c20 <_malloc_r+0xb0>
 8007c66:	605b      	str	r3, [r3, #4]
 8007c68:	deff      	udf	#255	; 0xff
 8007c6a:	bf00      	nop
 8007c6c:	200006ac 	.word	0x200006ac

08007c70 <__malloc_lock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__malloc_lock+0x8>)
 8007c72:	f7ff bf13 	b.w	8007a9c <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	200006a8 	.word	0x200006a8

08007c7c <__malloc_unlock>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__malloc_unlock+0x8>)
 8007c7e:	f7ff bf0e 	b.w	8007a9e <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	200006a8 	.word	0x200006a8

08007c88 <__ssputs_r>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	461f      	mov	r7, r3
 8007c8e:	688e      	ldr	r6, [r1, #8]
 8007c90:	4682      	mov	sl, r0
 8007c92:	42be      	cmp	r6, r7
 8007c94:	460c      	mov	r4, r1
 8007c96:	4690      	mov	r8, r2
 8007c98:	680b      	ldr	r3, [r1, #0]
 8007c9a:	d82c      	bhi.n	8007cf6 <__ssputs_r+0x6e>
 8007c9c:	898a      	ldrh	r2, [r1, #12]
 8007c9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ca2:	d026      	beq.n	8007cf2 <__ssputs_r+0x6a>
 8007ca4:	6965      	ldr	r5, [r4, #20]
 8007ca6:	6909      	ldr	r1, [r1, #16]
 8007ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cac:	eba3 0901 	sub.w	r9, r3, r1
 8007cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cb4:	1c7b      	adds	r3, r7, #1
 8007cb6:	444b      	add	r3, r9
 8007cb8:	106d      	asrs	r5, r5, #1
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	bf38      	it	cc
 8007cbe:	461d      	movcc	r5, r3
 8007cc0:	0553      	lsls	r3, r2, #21
 8007cc2:	d527      	bpl.n	8007d14 <__ssputs_r+0x8c>
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7ff ff53 	bl	8007b70 <_malloc_r>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	b360      	cbz	r0, 8007d28 <__ssputs_r+0xa0>
 8007cce:	464a      	mov	r2, r9
 8007cd0:	6921      	ldr	r1, [r4, #16]
 8007cd2:	f000 fafd 	bl	80082d0 <memcpy>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	6126      	str	r6, [r4, #16]
 8007ce4:	444e      	add	r6, r9
 8007ce6:	6026      	str	r6, [r4, #0]
 8007ce8:	463e      	mov	r6, r7
 8007cea:	6165      	str	r5, [r4, #20]
 8007cec:	eba5 0509 	sub.w	r5, r5, r9
 8007cf0:	60a5      	str	r5, [r4, #8]
 8007cf2:	42be      	cmp	r6, r7
 8007cf4:	d900      	bls.n	8007cf8 <__ssputs_r+0x70>
 8007cf6:	463e      	mov	r6, r7
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	f000 faaf 	bl	8008260 <memmove>
 8007d02:	2000      	movs	r0, #0
 8007d04:	68a3      	ldr	r3, [r4, #8]
 8007d06:	1b9b      	subs	r3, r3, r6
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	4433      	add	r3, r6
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	462a      	mov	r2, r5
 8007d16:	f000 fae9 	bl	80082ec <_realloc_r>
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d1e0      	bne.n	8007ce2 <__ssputs_r+0x5a>
 8007d20:	4650      	mov	r0, sl
 8007d22:	6921      	ldr	r1, [r4, #16]
 8007d24:	f7ff febc 	bl	8007aa0 <_free_r>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	f8ca 3000 	str.w	r3, [sl]
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	e7e9      	b.n	8007d10 <__ssputs_r+0x88>

08007d3c <_svfiprintf_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4698      	mov	r8, r3
 8007d42:	898b      	ldrh	r3, [r1, #12]
 8007d44:	4607      	mov	r7, r0
 8007d46:	061b      	lsls	r3, r3, #24
 8007d48:	460d      	mov	r5, r1
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	b09d      	sub	sp, #116	; 0x74
 8007d4e:	d50e      	bpl.n	8007d6e <_svfiprintf_r+0x32>
 8007d50:	690b      	ldr	r3, [r1, #16]
 8007d52:	b963      	cbnz	r3, 8007d6e <_svfiprintf_r+0x32>
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	f7ff ff0b 	bl	8007b70 <_malloc_r>
 8007d5a:	6028      	str	r0, [r5, #0]
 8007d5c:	6128      	str	r0, [r5, #16]
 8007d5e:	b920      	cbnz	r0, 8007d6a <_svfiprintf_r+0x2e>
 8007d60:	230c      	movs	r3, #12
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e0d0      	b.n	8007f0c <_svfiprintf_r+0x1d0>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	616b      	str	r3, [r5, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	2320      	movs	r3, #32
 8007d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d78:	2330      	movs	r3, #48	; 0x30
 8007d7a:	f04f 0901 	mov.w	r9, #1
 8007d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d82:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007f24 <_svfiprintf_r+0x1e8>
 8007d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8a:	4623      	mov	r3, r4
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d92:	b10a      	cbz	r2, 8007d98 <_svfiprintf_r+0x5c>
 8007d94:	2a25      	cmp	r2, #37	; 0x25
 8007d96:	d1f9      	bne.n	8007d8c <_svfiprintf_r+0x50>
 8007d98:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9c:	d00b      	beq.n	8007db6 <_svfiprintf_r+0x7a>
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4622      	mov	r2, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ff6f 	bl	8007c88 <__ssputs_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	f000 80a9 	beq.w	8007f02 <_svfiprintf_r+0x1c6>
 8007db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db2:	445a      	add	r2, fp
 8007db4:	9209      	str	r2, [sp, #36]	; 0x24
 8007db6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80a1 	beq.w	8007f02 <_svfiprintf_r+0x1c6>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dca:	f10a 0a01 	add.w	sl, sl, #1
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2205      	movs	r2, #5
 8007ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de0:	4850      	ldr	r0, [pc, #320]	; (8007f24 <_svfiprintf_r+0x1e8>)
 8007de2:	f000 fa67 	bl	80082b4 <memchr>
 8007de6:	9a04      	ldr	r2, [sp, #16]
 8007de8:	b9d8      	cbnz	r0, 8007e22 <_svfiprintf_r+0xe6>
 8007dea:	06d0      	lsls	r0, r2, #27
 8007dec:	bf44      	itt	mi
 8007dee:	2320      	movmi	r3, #32
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df4:	0711      	lsls	r1, r2, #28
 8007df6:	bf44      	itt	mi
 8007df8:	232b      	movmi	r3, #43	; 0x2b
 8007dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007e02:	2b2a      	cmp	r3, #42	; 0x2a
 8007e04:	d015      	beq.n	8007e32 <_svfiprintf_r+0xf6>
 8007e06:	4654      	mov	r4, sl
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	9a07      	ldr	r2, [sp, #28]
 8007e10:	4621      	mov	r1, r4
 8007e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e16:	3b30      	subs	r3, #48	; 0x30
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	d94d      	bls.n	8007eb8 <_svfiprintf_r+0x17c>
 8007e1c:	b1b0      	cbz	r0, 8007e4c <_svfiprintf_r+0x110>
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e014      	b.n	8007e4c <_svfiprintf_r+0x110>
 8007e22:	eba0 0308 	sub.w	r3, r0, r8
 8007e26:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	e7d2      	b.n	8007dd8 <_svfiprintf_r+0x9c>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9103      	str	r1, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	425b      	neglt	r3, r3
 8007e40:	f042 0202 	orrlt.w	r2, r2, #2
 8007e44:	9307      	strge	r3, [sp, #28]
 8007e46:	9307      	strlt	r3, [sp, #28]
 8007e48:	bfb8      	it	lt
 8007e4a:	9204      	strlt	r2, [sp, #16]
 8007e4c:	7823      	ldrb	r3, [r4, #0]
 8007e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e50:	d10c      	bne.n	8007e6c <_svfiprintf_r+0x130>
 8007e52:	7863      	ldrb	r3, [r4, #1]
 8007e54:	2b2a      	cmp	r3, #42	; 0x2a
 8007e56:	d134      	bne.n	8007ec2 <_svfiprintf_r+0x186>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	3402      	adds	r4, #2
 8007e5c:	1d1a      	adds	r2, r3, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	9203      	str	r2, [sp, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfb8      	it	lt
 8007e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007f28 <_svfiprintf_r+0x1ec>
 8007e70:	2203      	movs	r2, #3
 8007e72:	4650      	mov	r0, sl
 8007e74:	7821      	ldrb	r1, [r4, #0]
 8007e76:	f000 fa1d 	bl	80082b4 <memchr>
 8007e7a:	b138      	cbz	r0, 8007e8c <_svfiprintf_r+0x150>
 8007e7c:	2240      	movs	r2, #64	; 0x40
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	eba0 000a 	sub.w	r0, r0, sl
 8007e84:	4082      	lsls	r2, r0
 8007e86:	4313      	orrs	r3, r2
 8007e88:	3401      	adds	r4, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e90:	2206      	movs	r2, #6
 8007e92:	4826      	ldr	r0, [pc, #152]	; (8007f2c <_svfiprintf_r+0x1f0>)
 8007e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e98:	f000 fa0c 	bl	80082b4 <memchr>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d038      	beq.n	8007f12 <_svfiprintf_r+0x1d6>
 8007ea0:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <_svfiprintf_r+0x1f4>)
 8007ea2:	bb1b      	cbnz	r3, 8007eec <_svfiprintf_r+0x1b0>
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	3307      	adds	r3, #7
 8007ea8:	f023 0307 	bic.w	r3, r3, #7
 8007eac:	3308      	adds	r3, #8
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	4433      	add	r3, r6
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	e768      	b.n	8007d8a <_svfiprintf_r+0x4e>
 8007eb8:	460c      	mov	r4, r1
 8007eba:	2001      	movs	r0, #1
 8007ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec0:	e7a6      	b.n	8007e10 <_svfiprintf_r+0xd4>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f04f 0c0a 	mov.w	ip, #10
 8007ec8:	4619      	mov	r1, r3
 8007eca:	3401      	adds	r4, #1
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed4:	3a30      	subs	r2, #48	; 0x30
 8007ed6:	2a09      	cmp	r2, #9
 8007ed8:	d903      	bls.n	8007ee2 <_svfiprintf_r+0x1a6>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0c6      	beq.n	8007e6c <_svfiprintf_r+0x130>
 8007ede:	9105      	str	r1, [sp, #20]
 8007ee0:	e7c4      	b.n	8007e6c <_svfiprintf_r+0x130>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eea:	e7f0      	b.n	8007ece <_svfiprintf_r+0x192>
 8007eec:	ab03      	add	r3, sp, #12
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007ef6:	a904      	add	r1, sp, #16
 8007ef8:	f3af 8000 	nop.w
 8007efc:	1c42      	adds	r2, r0, #1
 8007efe:	4606      	mov	r6, r0
 8007f00:	d1d6      	bne.n	8007eb0 <_svfiprintf_r+0x174>
 8007f02:	89ab      	ldrh	r3, [r5, #12]
 8007f04:	065b      	lsls	r3, r3, #25
 8007f06:	f53f af2d 	bmi.w	8007d64 <_svfiprintf_r+0x28>
 8007f0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f0c:	b01d      	add	sp, #116	; 0x74
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	ab03      	add	r3, sp, #12
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	462a      	mov	r2, r5
 8007f18:	4638      	mov	r0, r7
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007f1c:	a904      	add	r1, sp, #16
 8007f1e:	f000 f87d 	bl	800801c <_printf_i>
 8007f22:	e7eb      	b.n	8007efc <_svfiprintf_r+0x1c0>
 8007f24:	08008afe 	.word	0x08008afe
 8007f28:	08008b04 	.word	0x08008b04
 8007f2c:	08008b08 	.word	0x08008b08
 8007f30:	00000000 	.word	0x00000000
 8007f34:	08007c89 	.word	0x08007c89

08007f38 <_printf_common>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	4699      	mov	r9, r3
 8007f40:	688a      	ldr	r2, [r1, #8]
 8007f42:	690b      	ldr	r3, [r1, #16]
 8007f44:	4607      	mov	r7, r0
 8007f46:	4293      	cmp	r3, r2
 8007f48:	bfb8      	it	lt
 8007f4a:	4613      	movlt	r3, r2
 8007f4c:	6033      	str	r3, [r6, #0]
 8007f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f52:	460c      	mov	r4, r1
 8007f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f58:	b10a      	cbz	r2, 8007f5e <_printf_common+0x26>
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	6033      	str	r3, [r6, #0]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	0699      	lsls	r1, r3, #26
 8007f62:	bf42      	ittt	mi
 8007f64:	6833      	ldrmi	r3, [r6, #0]
 8007f66:	3302      	addmi	r3, #2
 8007f68:	6033      	strmi	r3, [r6, #0]
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	f015 0506 	ands.w	r5, r5, #6
 8007f70:	d106      	bne.n	8007f80 <_printf_common+0x48>
 8007f72:	f104 0a19 	add.w	sl, r4, #25
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	6832      	ldr	r2, [r6, #0]
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	42ab      	cmp	r3, r5
 8007f7e:	dc2b      	bgt.n	8007fd8 <_printf_common+0xa0>
 8007f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f84:	1e13      	subs	r3, r2, #0
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	2301      	movne	r3, #1
 8007f8c:	0692      	lsls	r2, r2, #26
 8007f8e:	d430      	bmi.n	8007ff2 <_printf_common+0xba>
 8007f90:	4649      	mov	r1, r9
 8007f92:	4638      	mov	r0, r7
 8007f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f98:	47c0      	blx	r8
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d023      	beq.n	8007fe6 <_printf_common+0xae>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6922      	ldr	r2, [r4, #16]
 8007fa2:	f003 0306 	and.w	r3, r3, #6
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	bf14      	ite	ne
 8007faa:	2500      	movne	r5, #0
 8007fac:	6833      	ldreq	r3, [r6, #0]
 8007fae:	f04f 0600 	mov.w	r6, #0
 8007fb2:	bf08      	it	eq
 8007fb4:	68e5      	ldreq	r5, [r4, #12]
 8007fb6:	f104 041a 	add.w	r4, r4, #26
 8007fba:	bf08      	it	eq
 8007fbc:	1aed      	subeq	r5, r5, r3
 8007fbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007fc2:	bf08      	it	eq
 8007fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	bfc4      	itt	gt
 8007fcc:	1a9b      	subgt	r3, r3, r2
 8007fce:	18ed      	addgt	r5, r5, r3
 8007fd0:	42b5      	cmp	r5, r6
 8007fd2:	d11a      	bne.n	800800a <_printf_common+0xd2>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	e008      	b.n	8007fea <_printf_common+0xb2>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4652      	mov	r2, sl
 8007fdc:	4649      	mov	r1, r9
 8007fde:	4638      	mov	r0, r7
 8007fe0:	47c0      	blx	r8
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d103      	bne.n	8007fee <_printf_common+0xb6>
 8007fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fee:	3501      	adds	r5, #1
 8007ff0:	e7c1      	b.n	8007f76 <_printf_common+0x3e>
 8007ff2:	2030      	movs	r0, #48	; 0x30
 8007ff4:	18e1      	adds	r1, r4, r3
 8007ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008000:	4422      	add	r2, r4
 8008002:	3302      	adds	r3, #2
 8008004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008008:	e7c2      	b.n	8007f90 <_printf_common+0x58>
 800800a:	2301      	movs	r3, #1
 800800c:	4622      	mov	r2, r4
 800800e:	4649      	mov	r1, r9
 8008010:	4638      	mov	r0, r7
 8008012:	47c0      	blx	r8
 8008014:	3001      	adds	r0, #1
 8008016:	d0e6      	beq.n	8007fe6 <_printf_common+0xae>
 8008018:	3601      	adds	r6, #1
 800801a:	e7d9      	b.n	8007fd0 <_printf_common+0x98>

0800801c <_printf_i>:
 800801c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	7e0f      	ldrb	r7, [r1, #24]
 8008022:	4691      	mov	r9, r2
 8008024:	2f78      	cmp	r7, #120	; 0x78
 8008026:	4680      	mov	r8, r0
 8008028:	460c      	mov	r4, r1
 800802a:	469a      	mov	sl, r3
 800802c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800802e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008032:	d807      	bhi.n	8008044 <_printf_i+0x28>
 8008034:	2f62      	cmp	r7, #98	; 0x62
 8008036:	d80a      	bhi.n	800804e <_printf_i+0x32>
 8008038:	2f00      	cmp	r7, #0
 800803a:	f000 80d5 	beq.w	80081e8 <_printf_i+0x1cc>
 800803e:	2f58      	cmp	r7, #88	; 0x58
 8008040:	f000 80c1 	beq.w	80081c6 <_printf_i+0x1aa>
 8008044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800804c:	e03a      	b.n	80080c4 <_printf_i+0xa8>
 800804e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008052:	2b15      	cmp	r3, #21
 8008054:	d8f6      	bhi.n	8008044 <_printf_i+0x28>
 8008056:	a101      	add	r1, pc, #4	; (adr r1, 800805c <_printf_i+0x40>)
 8008058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080c9 	.word	0x080080c9
 8008064:	08008045 	.word	0x08008045
 8008068:	08008045 	.word	0x08008045
 800806c:	08008045 	.word	0x08008045
 8008070:	08008045 	.word	0x08008045
 8008074:	080080c9 	.word	0x080080c9
 8008078:	08008045 	.word	0x08008045
 800807c:	08008045 	.word	0x08008045
 8008080:	08008045 	.word	0x08008045
 8008084:	08008045 	.word	0x08008045
 8008088:	080081cf 	.word	0x080081cf
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008189 	.word	0x08008189
 8008094:	08008045 	.word	0x08008045
 8008098:	08008045 	.word	0x08008045
 800809c:	080081f1 	.word	0x080081f1
 80080a0:	08008045 	.word	0x08008045
 80080a4:	080080f5 	.word	0x080080f5
 80080a8:	08008045 	.word	0x08008045
 80080ac:	08008045 	.word	0x08008045
 80080b0:	08008191 	.word	0x08008191
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	602a      	str	r2, [r5, #0]
 80080bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0a0      	b.n	800820a <_printf_i+0x1ee>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	0607      	lsls	r7, r0, #24
 80080ce:	f103 0104 	add.w	r1, r3, #4
 80080d2:	6029      	str	r1, [r5, #0]
 80080d4:	d501      	bpl.n	80080da <_printf_i+0xbe>
 80080d6:	681e      	ldr	r6, [r3, #0]
 80080d8:	e003      	b.n	80080e2 <_printf_i+0xc6>
 80080da:	0646      	lsls	r6, r0, #25
 80080dc:	d5fb      	bpl.n	80080d6 <_printf_i+0xba>
 80080de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	da03      	bge.n	80080ee <_printf_i+0xd2>
 80080e6:	232d      	movs	r3, #45	; 0x2d
 80080e8:	4276      	negs	r6, r6
 80080ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ee:	230a      	movs	r3, #10
 80080f0:	4859      	ldr	r0, [pc, #356]	; (8008258 <_printf_i+0x23c>)
 80080f2:	e012      	b.n	800811a <_printf_i+0xfe>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	1d19      	adds	r1, r3, #4
 80080fa:	6029      	str	r1, [r5, #0]
 80080fc:	0605      	lsls	r5, r0, #24
 80080fe:	d501      	bpl.n	8008104 <_printf_i+0xe8>
 8008100:	681e      	ldr	r6, [r3, #0]
 8008102:	e002      	b.n	800810a <_printf_i+0xee>
 8008104:	0641      	lsls	r1, r0, #25
 8008106:	d5fb      	bpl.n	8008100 <_printf_i+0xe4>
 8008108:	881e      	ldrh	r6, [r3, #0]
 800810a:	2f6f      	cmp	r7, #111	; 0x6f
 800810c:	bf0c      	ite	eq
 800810e:	2308      	moveq	r3, #8
 8008110:	230a      	movne	r3, #10
 8008112:	4851      	ldr	r0, [pc, #324]	; (8008258 <_printf_i+0x23c>)
 8008114:	2100      	movs	r1, #0
 8008116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800811a:	6865      	ldr	r5, [r4, #4]
 800811c:	2d00      	cmp	r5, #0
 800811e:	bfa8      	it	ge
 8008120:	6821      	ldrge	r1, [r4, #0]
 8008122:	60a5      	str	r5, [r4, #8]
 8008124:	bfa4      	itt	ge
 8008126:	f021 0104 	bicge.w	r1, r1, #4
 800812a:	6021      	strge	r1, [r4, #0]
 800812c:	b90e      	cbnz	r6, 8008132 <_printf_i+0x116>
 800812e:	2d00      	cmp	r5, #0
 8008130:	d04b      	beq.n	80081ca <_printf_i+0x1ae>
 8008132:	4615      	mov	r5, r2
 8008134:	fbb6 f1f3 	udiv	r1, r6, r3
 8008138:	fb03 6711 	mls	r7, r3, r1, r6
 800813c:	5dc7      	ldrb	r7, [r0, r7]
 800813e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008142:	4637      	mov	r7, r6
 8008144:	42bb      	cmp	r3, r7
 8008146:	460e      	mov	r6, r1
 8008148:	d9f4      	bls.n	8008134 <_printf_i+0x118>
 800814a:	2b08      	cmp	r3, #8
 800814c:	d10b      	bne.n	8008166 <_printf_i+0x14a>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	07de      	lsls	r6, r3, #31
 8008152:	d508      	bpl.n	8008166 <_printf_i+0x14a>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	6861      	ldr	r1, [r4, #4]
 8008158:	4299      	cmp	r1, r3
 800815a:	bfde      	ittt	le
 800815c:	2330      	movle	r3, #48	; 0x30
 800815e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008162:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008166:	1b52      	subs	r2, r2, r5
 8008168:	6122      	str	r2, [r4, #16]
 800816a:	464b      	mov	r3, r9
 800816c:	4621      	mov	r1, r4
 800816e:	4640      	mov	r0, r8
 8008170:	f8cd a000 	str.w	sl, [sp]
 8008174:	aa03      	add	r2, sp, #12
 8008176:	f7ff fedf 	bl	8007f38 <_printf_common>
 800817a:	3001      	adds	r0, #1
 800817c:	d14a      	bne.n	8008214 <_printf_i+0x1f8>
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	b004      	add	sp, #16
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	f043 0320 	orr.w	r3, r3, #32
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	2778      	movs	r7, #120	; 0x78
 8008192:	4832      	ldr	r0, [pc, #200]	; (800825c <_printf_i+0x240>)
 8008194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	6829      	ldr	r1, [r5, #0]
 800819c:	061f      	lsls	r7, r3, #24
 800819e:	f851 6b04 	ldr.w	r6, [r1], #4
 80081a2:	d402      	bmi.n	80081aa <_printf_i+0x18e>
 80081a4:	065f      	lsls	r7, r3, #25
 80081a6:	bf48      	it	mi
 80081a8:	b2b6      	uxthmi	r6, r6
 80081aa:	07df      	lsls	r7, r3, #31
 80081ac:	bf48      	it	mi
 80081ae:	f043 0320 	orrmi.w	r3, r3, #32
 80081b2:	6029      	str	r1, [r5, #0]
 80081b4:	bf48      	it	mi
 80081b6:	6023      	strmi	r3, [r4, #0]
 80081b8:	b91e      	cbnz	r6, 80081c2 <_printf_i+0x1a6>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	f023 0320 	bic.w	r3, r3, #32
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	2310      	movs	r3, #16
 80081c4:	e7a6      	b.n	8008114 <_printf_i+0xf8>
 80081c6:	4824      	ldr	r0, [pc, #144]	; (8008258 <_printf_i+0x23c>)
 80081c8:	e7e4      	b.n	8008194 <_printf_i+0x178>
 80081ca:	4615      	mov	r5, r2
 80081cc:	e7bd      	b.n	800814a <_printf_i+0x12e>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	6826      	ldr	r6, [r4, #0]
 80081d2:	1d18      	adds	r0, r3, #4
 80081d4:	6961      	ldr	r1, [r4, #20]
 80081d6:	6028      	str	r0, [r5, #0]
 80081d8:	0635      	lsls	r5, r6, #24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	d501      	bpl.n	80081e2 <_printf_i+0x1c6>
 80081de:	6019      	str	r1, [r3, #0]
 80081e0:	e002      	b.n	80081e8 <_printf_i+0x1cc>
 80081e2:	0670      	lsls	r0, r6, #25
 80081e4:	d5fb      	bpl.n	80081de <_printf_i+0x1c2>
 80081e6:	8019      	strh	r1, [r3, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	4615      	mov	r5, r2
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	e7bc      	b.n	800816a <_printf_i+0x14e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	2100      	movs	r1, #0
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	681d      	ldr	r5, [r3, #0]
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f859 	bl	80082b4 <memchr>
 8008202:	b108      	cbz	r0, 8008208 <_printf_i+0x1ec>
 8008204:	1b40      	subs	r0, r0, r5
 8008206:	6060      	str	r0, [r4, #4]
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	2300      	movs	r3, #0
 800820e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008212:	e7aa      	b.n	800816a <_printf_i+0x14e>
 8008214:	462a      	mov	r2, r5
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	47d0      	blx	sl
 800821e:	3001      	adds	r0, #1
 8008220:	d0ad      	beq.n	800817e <_printf_i+0x162>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	079b      	lsls	r3, r3, #30
 8008226:	d413      	bmi.n	8008250 <_printf_i+0x234>
 8008228:	68e0      	ldr	r0, [r4, #12]
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	4298      	cmp	r0, r3
 800822e:	bfb8      	it	lt
 8008230:	4618      	movlt	r0, r3
 8008232:	e7a6      	b.n	8008182 <_printf_i+0x166>
 8008234:	2301      	movs	r3, #1
 8008236:	4632      	mov	r2, r6
 8008238:	4649      	mov	r1, r9
 800823a:	4640      	mov	r0, r8
 800823c:	47d0      	blx	sl
 800823e:	3001      	adds	r0, #1
 8008240:	d09d      	beq.n	800817e <_printf_i+0x162>
 8008242:	3501      	adds	r5, #1
 8008244:	68e3      	ldr	r3, [r4, #12]
 8008246:	9903      	ldr	r1, [sp, #12]
 8008248:	1a5b      	subs	r3, r3, r1
 800824a:	42ab      	cmp	r3, r5
 800824c:	dcf2      	bgt.n	8008234 <_printf_i+0x218>
 800824e:	e7eb      	b.n	8008228 <_printf_i+0x20c>
 8008250:	2500      	movs	r5, #0
 8008252:	f104 0619 	add.w	r6, r4, #25
 8008256:	e7f5      	b.n	8008244 <_printf_i+0x228>
 8008258:	08008b0f 	.word	0x08008b0f
 800825c:	08008b20 	.word	0x08008b20

08008260 <memmove>:
 8008260:	4288      	cmp	r0, r1
 8008262:	b510      	push	{r4, lr}
 8008264:	eb01 0402 	add.w	r4, r1, r2
 8008268:	d902      	bls.n	8008270 <memmove+0x10>
 800826a:	4284      	cmp	r4, r0
 800826c:	4623      	mov	r3, r4
 800826e:	d807      	bhi.n	8008280 <memmove+0x20>
 8008270:	1e43      	subs	r3, r0, #1
 8008272:	42a1      	cmp	r1, r4
 8008274:	d008      	beq.n	8008288 <memmove+0x28>
 8008276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800827a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800827e:	e7f8      	b.n	8008272 <memmove+0x12>
 8008280:	4601      	mov	r1, r0
 8008282:	4402      	add	r2, r0
 8008284:	428a      	cmp	r2, r1
 8008286:	d100      	bne.n	800828a <memmove+0x2a>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800828e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008292:	e7f7      	b.n	8008284 <memmove+0x24>

08008294 <_sbrk_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	2300      	movs	r3, #0
 8008298:	4d05      	ldr	r5, [pc, #20]	; (80082b0 <_sbrk_r+0x1c>)
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7fa fb46 	bl	8002930 <_sbrk>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_sbrk_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_sbrk_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200006a4 	.word	0x200006a4

080082b4 <memchr>:
 80082b4:	4603      	mov	r3, r0
 80082b6:	b510      	push	{r4, lr}
 80082b8:	b2c9      	uxtb	r1, r1
 80082ba:	4402      	add	r2, r0
 80082bc:	4293      	cmp	r3, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	d101      	bne.n	80082c6 <memchr+0x12>
 80082c2:	2000      	movs	r0, #0
 80082c4:	e003      	b.n	80082ce <memchr+0x1a>
 80082c6:	7804      	ldrb	r4, [r0, #0]
 80082c8:	3301      	adds	r3, #1
 80082ca:	428c      	cmp	r4, r1
 80082cc:	d1f6      	bne.n	80082bc <memchr+0x8>
 80082ce:	bd10      	pop	{r4, pc}

080082d0 <memcpy>:
 80082d0:	440a      	add	r2, r1
 80082d2:	4291      	cmp	r1, r2
 80082d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d8:	d100      	bne.n	80082dc <memcpy+0xc>
 80082da:	4770      	bx	lr
 80082dc:	b510      	push	{r4, lr}
 80082de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e2:	4291      	cmp	r1, r2
 80082e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e8:	d1f9      	bne.n	80082de <memcpy+0xe>
 80082ea:	bd10      	pop	{r4, pc}

080082ec <_realloc_r>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4680      	mov	r8, r0
 80082f2:	4614      	mov	r4, r2
 80082f4:	460e      	mov	r6, r1
 80082f6:	b921      	cbnz	r1, 8008302 <_realloc_r+0x16>
 80082f8:	4611      	mov	r1, r2
 80082fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	f7ff bc37 	b.w	8007b70 <_malloc_r>
 8008302:	b92a      	cbnz	r2, 8008310 <_realloc_r+0x24>
 8008304:	f7ff fbcc 	bl	8007aa0 <_free_r>
 8008308:	4625      	mov	r5, r4
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f000 f81b 	bl	800834a <_malloc_usable_size_r>
 8008314:	4284      	cmp	r4, r0
 8008316:	4607      	mov	r7, r0
 8008318:	d802      	bhi.n	8008320 <_realloc_r+0x34>
 800831a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800831e:	d812      	bhi.n	8008346 <_realloc_r+0x5a>
 8008320:	4621      	mov	r1, r4
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff fc24 	bl	8007b70 <_malloc_r>
 8008328:	4605      	mov	r5, r0
 800832a:	2800      	cmp	r0, #0
 800832c:	d0ed      	beq.n	800830a <_realloc_r+0x1e>
 800832e:	42bc      	cmp	r4, r7
 8008330:	4622      	mov	r2, r4
 8008332:	4631      	mov	r1, r6
 8008334:	bf28      	it	cs
 8008336:	463a      	movcs	r2, r7
 8008338:	f7ff ffca 	bl	80082d0 <memcpy>
 800833c:	4631      	mov	r1, r6
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fbae 	bl	8007aa0 <_free_r>
 8008344:	e7e1      	b.n	800830a <_realloc_r+0x1e>
 8008346:	4635      	mov	r5, r6
 8008348:	e7df      	b.n	800830a <_realloc_r+0x1e>

0800834a <_malloc_usable_size_r>:
 800834a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834e:	1f18      	subs	r0, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	bfbc      	itt	lt
 8008354:	580b      	ldrlt	r3, [r1, r0]
 8008356:	18c0      	addlt	r0, r0, r3
 8008358:	4770      	bx	lr

0800835a <atan2>:
 800835a:	f000 bad1 	b.w	8008900 <__ieee754_atan2>

0800835e <sqrt>:
 800835e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	f000 f9ae 	bl	80086c4 <__ieee754_sqrt>
 8008368:	4632      	mov	r2, r6
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
 800836e:	463b      	mov	r3, r7
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 fbb6 	bl	8000ae4 <__aeabi_dcmpun>
 8008378:	b990      	cbnz	r0, 80083a0 <sqrt+0x42>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 fb87 	bl	8000a94 <__aeabi_dcmplt>
 8008386:	b158      	cbz	r0, 80083a0 <sqrt+0x42>
 8008388:	f7ff fb5e 	bl	8007a48 <__errno>
 800838c:	2321      	movs	r3, #33	; 0x21
 800838e:	2200      	movs	r2, #0
 8008390:	6003      	str	r3, [r0, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	4610      	mov	r0, r2
 8008396:	4619      	mov	r1, r3
 8008398:	f7f8 fa34 	bl	8000804 <__aeabi_ddiv>
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083a8 <atan>:
 80083a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4bb6      	ldr	r3, [pc, #728]	; (8008688 <atan+0x2e0>)
 80083ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80083b2:	429e      	cmp	r6, r3
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	468b      	mov	fp, r1
 80083ba:	dd17      	ble.n	80083ec <atan+0x44>
 80083bc:	4bb3      	ldr	r3, [pc, #716]	; (800868c <atan+0x2e4>)
 80083be:	429e      	cmp	r6, r3
 80083c0:	dc01      	bgt.n	80083c6 <atan+0x1e>
 80083c2:	d109      	bne.n	80083d8 <atan+0x30>
 80083c4:	b140      	cbz	r0, 80083d8 <atan+0x30>
 80083c6:	4622      	mov	r2, r4
 80083c8:	462b      	mov	r3, r5
 80083ca:	4620      	mov	r0, r4
 80083cc:	4629      	mov	r1, r5
 80083ce:	f7f7 ff39 	bl	8000244 <__adddf3>
 80083d2:	4604      	mov	r4, r0
 80083d4:	460d      	mov	r5, r1
 80083d6:	e005      	b.n	80083e4 <atan+0x3c>
 80083d8:	f1bb 0f00 	cmp.w	fp, #0
 80083dc:	4cac      	ldr	r4, [pc, #688]	; (8008690 <atan+0x2e8>)
 80083de:	f300 8121 	bgt.w	8008624 <atan+0x27c>
 80083e2:	4dac      	ldr	r5, [pc, #688]	; (8008694 <atan+0x2ec>)
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	4baa      	ldr	r3, [pc, #680]	; (8008698 <atan+0x2f0>)
 80083ee:	429e      	cmp	r6, r3
 80083f0:	dc11      	bgt.n	8008416 <atan+0x6e>
 80083f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80083f6:	429e      	cmp	r6, r3
 80083f8:	dc0a      	bgt.n	8008410 <atan+0x68>
 80083fa:	a38b      	add	r3, pc, #556	; (adr r3, 8008628 <atan+0x280>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f7 ff20 	bl	8000244 <__adddf3>
 8008404:	2200      	movs	r2, #0
 8008406:	4ba5      	ldr	r3, [pc, #660]	; (800869c <atan+0x2f4>)
 8008408:	f7f8 fb62 	bl	8000ad0 <__aeabi_dcmpgt>
 800840c:	2800      	cmp	r0, #0
 800840e:	d1e9      	bne.n	80083e4 <atan+0x3c>
 8008410:	f04f 3aff 	mov.w	sl, #4294967295
 8008414:	e027      	b.n	8008466 <atan+0xbe>
 8008416:	f000 f951 	bl	80086bc <fabs>
 800841a:	4ba1      	ldr	r3, [pc, #644]	; (80086a0 <atan+0x2f8>)
 800841c:	4604      	mov	r4, r0
 800841e:	429e      	cmp	r6, r3
 8008420:	460d      	mov	r5, r1
 8008422:	f300 80b8 	bgt.w	8008596 <atan+0x1ee>
 8008426:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800842a:	429e      	cmp	r6, r3
 800842c:	f300 809c 	bgt.w	8008568 <atan+0x1c0>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	f7f7 ff06 	bl	8000244 <__adddf3>
 8008438:	2200      	movs	r2, #0
 800843a:	4b98      	ldr	r3, [pc, #608]	; (800869c <atan+0x2f4>)
 800843c:	f7f7 ff00 	bl	8000240 <__aeabi_dsub>
 8008440:	2200      	movs	r2, #0
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f7 fef9 	bl	8000244 <__adddf3>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 f9d3 	bl	8000804 <__aeabi_ddiv>
 800845e:	f04f 0a00 	mov.w	sl, #0
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	4622      	mov	r2, r4
 8008468:	462b      	mov	r3, r5
 800846a:	4620      	mov	r0, r4
 800846c:	4629      	mov	r1, r5
 800846e:	f7f8 f89f 	bl	80005b0 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4680      	mov	r8, r0
 8008478:	4689      	mov	r9, r1
 800847a:	f7f8 f899 	bl	80005b0 <__aeabi_dmul>
 800847e:	a36c      	add	r3, pc, #432	; (adr r3, 8008630 <atan+0x288>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	f7f8 f892 	bl	80005b0 <__aeabi_dmul>
 800848c:	a36a      	add	r3, pc, #424	; (adr r3, 8008638 <atan+0x290>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 fed7 	bl	8000244 <__adddf3>
 8008496:	4632      	mov	r2, r6
 8008498:	463b      	mov	r3, r7
 800849a:	f7f8 f889 	bl	80005b0 <__aeabi_dmul>
 800849e:	a368      	add	r3, pc, #416	; (adr r3, 8008640 <atan+0x298>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f7 fece 	bl	8000244 <__adddf3>
 80084a8:	4632      	mov	r2, r6
 80084aa:	463b      	mov	r3, r7
 80084ac:	f7f8 f880 	bl	80005b0 <__aeabi_dmul>
 80084b0:	a365      	add	r3, pc, #404	; (adr r3, 8008648 <atan+0x2a0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f7 fec5 	bl	8000244 <__adddf3>
 80084ba:	4632      	mov	r2, r6
 80084bc:	463b      	mov	r3, r7
 80084be:	f7f8 f877 	bl	80005b0 <__aeabi_dmul>
 80084c2:	a363      	add	r3, pc, #396	; (adr r3, 8008650 <atan+0x2a8>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f7 febc 	bl	8000244 <__adddf3>
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	f7f8 f86e 	bl	80005b0 <__aeabi_dmul>
 80084d4:	a360      	add	r3, pc, #384	; (adr r3, 8008658 <atan+0x2b0>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f7 feb3 	bl	8000244 <__adddf3>
 80084de:	4642      	mov	r2, r8
 80084e0:	464b      	mov	r3, r9
 80084e2:	f7f8 f865 	bl	80005b0 <__aeabi_dmul>
 80084e6:	a35e      	add	r3, pc, #376	; (adr r3, 8008660 <atan+0x2b8>)
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	4680      	mov	r8, r0
 80084ee:	4689      	mov	r9, r1
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	f7f8 f85c 	bl	80005b0 <__aeabi_dmul>
 80084f8:	a35b      	add	r3, pc, #364	; (adr r3, 8008668 <atan+0x2c0>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	f7f7 fe9f 	bl	8000240 <__aeabi_dsub>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f8 f853 	bl	80005b0 <__aeabi_dmul>
 800850a:	a359      	add	r3, pc, #356	; (adr r3, 8008670 <atan+0x2c8>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f7 fe96 	bl	8000240 <__aeabi_dsub>
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	f7f8 f84a 	bl	80005b0 <__aeabi_dmul>
 800851c:	a356      	add	r3, pc, #344	; (adr r3, 8008678 <atan+0x2d0>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f7 fe8d 	bl	8000240 <__aeabi_dsub>
 8008526:	4632      	mov	r2, r6
 8008528:	463b      	mov	r3, r7
 800852a:	f7f8 f841 	bl	80005b0 <__aeabi_dmul>
 800852e:	a354      	add	r3, pc, #336	; (adr r3, 8008680 <atan+0x2d8>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f7 fe84 	bl	8000240 <__aeabi_dsub>
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	f7f8 f838 	bl	80005b0 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4640      	mov	r0, r8
 8008546:	4649      	mov	r1, r9
 8008548:	f7f7 fe7c 	bl	8000244 <__adddf3>
 800854c:	4622      	mov	r2, r4
 800854e:	462b      	mov	r3, r5
 8008550:	f7f8 f82e 	bl	80005b0 <__aeabi_dmul>
 8008554:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	d144      	bne.n	80085e8 <atan+0x240>
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 fe6d 	bl	8000240 <__aeabi_dsub>
 8008566:	e734      	b.n	80083d2 <atan+0x2a>
 8008568:	2200      	movs	r2, #0
 800856a:	4b4c      	ldr	r3, [pc, #304]	; (800869c <atan+0x2f4>)
 800856c:	f7f7 fe68 	bl	8000240 <__aeabi_dsub>
 8008570:	2200      	movs	r2, #0
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	4b48      	ldr	r3, [pc, #288]	; (800869c <atan+0x2f4>)
 800857c:	f7f7 fe62 	bl	8000244 <__adddf3>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 f93c 	bl	8000804 <__aeabi_ddiv>
 800858c:	f04f 0a01 	mov.w	sl, #1
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	e767      	b.n	8008466 <atan+0xbe>
 8008596:	4b43      	ldr	r3, [pc, #268]	; (80086a4 <atan+0x2fc>)
 8008598:	429e      	cmp	r6, r3
 800859a:	da1a      	bge.n	80085d2 <atan+0x22a>
 800859c:	2200      	movs	r2, #0
 800859e:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <atan+0x300>)
 80085a0:	f7f7 fe4e 	bl	8000240 <__aeabi_dsub>
 80085a4:	2200      	movs	r2, #0
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	4620      	mov	r0, r4
 80085ac:	4629      	mov	r1, r5
 80085ae:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <atan+0x300>)
 80085b0:	f7f7 fffe 	bl	80005b0 <__aeabi_dmul>
 80085b4:	2200      	movs	r2, #0
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <atan+0x2f4>)
 80085b8:	f7f7 fe44 	bl	8000244 <__adddf3>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f7f8 f91e 	bl	8000804 <__aeabi_ddiv>
 80085c8:	f04f 0a02 	mov.w	sl, #2
 80085cc:	4604      	mov	r4, r0
 80085ce:	460d      	mov	r5, r1
 80085d0:	e749      	b.n	8008466 <atan+0xbe>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	2000      	movs	r0, #0
 80085d8:	4934      	ldr	r1, [pc, #208]	; (80086ac <atan+0x304>)
 80085da:	f7f8 f913 	bl	8000804 <__aeabi_ddiv>
 80085de:	f04f 0a03 	mov.w	sl, #3
 80085e2:	4604      	mov	r4, r0
 80085e4:	460d      	mov	r5, r1
 80085e6:	e73e      	b.n	8008466 <atan+0xbe>
 80085e8:	4b31      	ldr	r3, [pc, #196]	; (80086b0 <atan+0x308>)
 80085ea:	4e32      	ldr	r6, [pc, #200]	; (80086b4 <atan+0x30c>)
 80085ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	f7f7 fe24 	bl	8000240 <__aeabi_dsub>
 80085f8:	4622      	mov	r2, r4
 80085fa:	462b      	mov	r3, r5
 80085fc:	f7f7 fe20 	bl	8000240 <__aeabi_dsub>
 8008600:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9d6 0100 	ldrd	r0, r1, [r6]
 800860c:	f7f7 fe18 	bl	8000240 <__aeabi_dsub>
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f6bf aee4 	bge.w	80083e4 <atan+0x3c>
 800861c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008620:	461d      	mov	r5, r3
 8008622:	e6df      	b.n	80083e4 <atan+0x3c>
 8008624:	4d24      	ldr	r5, [pc, #144]	; (80086b8 <atan+0x310>)
 8008626:	e6dd      	b.n	80083e4 <atan+0x3c>
 8008628:	8800759c 	.word	0x8800759c
 800862c:	7e37e43c 	.word	0x7e37e43c
 8008630:	e322da11 	.word	0xe322da11
 8008634:	3f90ad3a 	.word	0x3f90ad3a
 8008638:	24760deb 	.word	0x24760deb
 800863c:	3fa97b4b 	.word	0x3fa97b4b
 8008640:	a0d03d51 	.word	0xa0d03d51
 8008644:	3fb10d66 	.word	0x3fb10d66
 8008648:	c54c206e 	.word	0xc54c206e
 800864c:	3fb745cd 	.word	0x3fb745cd
 8008650:	920083ff 	.word	0x920083ff
 8008654:	3fc24924 	.word	0x3fc24924
 8008658:	5555550d 	.word	0x5555550d
 800865c:	3fd55555 	.word	0x3fd55555
 8008660:	2c6a6c2f 	.word	0x2c6a6c2f
 8008664:	bfa2b444 	.word	0xbfa2b444
 8008668:	52defd9a 	.word	0x52defd9a
 800866c:	3fadde2d 	.word	0x3fadde2d
 8008670:	af749a6d 	.word	0xaf749a6d
 8008674:	3fb3b0f2 	.word	0x3fb3b0f2
 8008678:	fe231671 	.word	0xfe231671
 800867c:	3fbc71c6 	.word	0x3fbc71c6
 8008680:	9998ebc4 	.word	0x9998ebc4
 8008684:	3fc99999 	.word	0x3fc99999
 8008688:	440fffff 	.word	0x440fffff
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	54442d18 	.word	0x54442d18
 8008694:	bff921fb 	.word	0xbff921fb
 8008698:	3fdbffff 	.word	0x3fdbffff
 800869c:	3ff00000 	.word	0x3ff00000
 80086a0:	3ff2ffff 	.word	0x3ff2ffff
 80086a4:	40038000 	.word	0x40038000
 80086a8:	3ff80000 	.word	0x3ff80000
 80086ac:	bff00000 	.word	0xbff00000
 80086b0:	08008b58 	.word	0x08008b58
 80086b4:	08008b38 	.word	0x08008b38
 80086b8:	3ff921fb 	.word	0x3ff921fb

080086bc <fabs>:
 80086bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086c0:	4619      	mov	r1, r3
 80086c2:	4770      	bx	lr

080086c4 <__ieee754_sqrt>:
 80086c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008868 <__ieee754_sqrt+0x1a4>
 80086c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80086d0:	460b      	mov	r3, r1
 80086d2:	4606      	mov	r6, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	460a      	mov	r2, r1
 80086d8:	4604      	mov	r4, r0
 80086da:	d10e      	bne.n	80086fa <__ieee754_sqrt+0x36>
 80086dc:	4602      	mov	r2, r0
 80086de:	f7f7 ff67 	bl	80005b0 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4630      	mov	r0, r6
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f7 fdab 	bl	8000244 <__adddf3>
 80086ee:	4606      	mov	r6, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	4630      	mov	r0, r6
 80086f4:	4629      	mov	r1, r5
 80086f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fa:	2900      	cmp	r1, #0
 80086fc:	dc0d      	bgt.n	800871a <__ieee754_sqrt+0x56>
 80086fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008702:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008706:	d0f4      	beq.n	80086f2 <__ieee754_sqrt+0x2e>
 8008708:	b139      	cbz	r1, 800871a <__ieee754_sqrt+0x56>
 800870a:	4602      	mov	r2, r0
 800870c:	f7f7 fd98 	bl	8000240 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	f7f8 f876 	bl	8000804 <__aeabi_ddiv>
 8008718:	e7e9      	b.n	80086ee <__ieee754_sqrt+0x2a>
 800871a:	1512      	asrs	r2, r2, #20
 800871c:	f000 8089 	beq.w	8008832 <__ieee754_sqrt+0x16e>
 8008720:	2500      	movs	r5, #0
 8008722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008726:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800872a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800872e:	07d2      	lsls	r2, r2, #31
 8008730:	bf5c      	itt	pl
 8008732:	005b      	lslpl	r3, r3, #1
 8008734:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008738:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800873c:	bf58      	it	pl
 800873e:	0064      	lslpl	r4, r4, #1
 8008740:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008744:	0062      	lsls	r2, r4, #1
 8008746:	2016      	movs	r0, #22
 8008748:	4629      	mov	r1, r5
 800874a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800874e:	1076      	asrs	r6, r6, #1
 8008750:	190f      	adds	r7, r1, r4
 8008752:	429f      	cmp	r7, r3
 8008754:	bfde      	ittt	le
 8008756:	1bdb      	suble	r3, r3, r7
 8008758:	1939      	addle	r1, r7, r4
 800875a:	192d      	addle	r5, r5, r4
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	3801      	subs	r0, #1
 8008760:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008764:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008768:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800876c:	d1f0      	bne.n	8008750 <__ieee754_sqrt+0x8c>
 800876e:	4604      	mov	r4, r0
 8008770:	2720      	movs	r7, #32
 8008772:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008776:	428b      	cmp	r3, r1
 8008778:	eb0c 0e00 	add.w	lr, ip, r0
 800877c:	dc02      	bgt.n	8008784 <__ieee754_sqrt+0xc0>
 800877e:	d113      	bne.n	80087a8 <__ieee754_sqrt+0xe4>
 8008780:	4596      	cmp	lr, r2
 8008782:	d811      	bhi.n	80087a8 <__ieee754_sqrt+0xe4>
 8008784:	f1be 0f00 	cmp.w	lr, #0
 8008788:	eb0e 000c 	add.w	r0, lr, ip
 800878c:	da56      	bge.n	800883c <__ieee754_sqrt+0x178>
 800878e:	2800      	cmp	r0, #0
 8008790:	db54      	blt.n	800883c <__ieee754_sqrt+0x178>
 8008792:	f101 0801 	add.w	r8, r1, #1
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	4641      	mov	r1, r8
 800879a:	4596      	cmp	lr, r2
 800879c:	bf88      	it	hi
 800879e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80087a2:	eba2 020e 	sub.w	r2, r2, lr
 80087a6:	4464      	add	r4, ip
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	3f01      	subs	r7, #1
 80087ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80087b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80087b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80087b8:	d1dd      	bne.n	8008776 <__ieee754_sqrt+0xb2>
 80087ba:	4313      	orrs	r3, r2
 80087bc:	d01b      	beq.n	80087f6 <__ieee754_sqrt+0x132>
 80087be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800886c <__ieee754_sqrt+0x1a8>
 80087c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008870 <__ieee754_sqrt+0x1ac>
 80087c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80087ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80087ce:	f7f7 fd37 	bl	8000240 <__aeabi_dsub>
 80087d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f8 f963 	bl	8000aa8 <__aeabi_dcmple>
 80087e2:	b140      	cbz	r0, 80087f6 <__ieee754_sqrt+0x132>
 80087e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80087e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80087ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80087f0:	d126      	bne.n	8008840 <__ieee754_sqrt+0x17c>
 80087f2:	463c      	mov	r4, r7
 80087f4:	3501      	adds	r5, #1
 80087f6:	106b      	asrs	r3, r5, #1
 80087f8:	0864      	lsrs	r4, r4, #1
 80087fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087fe:	07ea      	lsls	r2, r5, #31
 8008800:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008804:	bf48      	it	mi
 8008806:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800880a:	4620      	mov	r0, r4
 800880c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008810:	e76d      	b.n	80086ee <__ieee754_sqrt+0x2a>
 8008812:	0ae3      	lsrs	r3, r4, #11
 8008814:	3915      	subs	r1, #21
 8008816:	0564      	lsls	r4, r4, #21
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0fa      	beq.n	8008812 <__ieee754_sqrt+0x14e>
 800881c:	02d8      	lsls	r0, r3, #11
 800881e:	d50a      	bpl.n	8008836 <__ieee754_sqrt+0x172>
 8008820:	f1c2 0020 	rsb	r0, r2, #32
 8008824:	fa24 f000 	lsr.w	r0, r4, r0
 8008828:	1e55      	subs	r5, r2, #1
 800882a:	4094      	lsls	r4, r2
 800882c:	4303      	orrs	r3, r0
 800882e:	1b4a      	subs	r2, r1, r5
 8008830:	e776      	b.n	8008720 <__ieee754_sqrt+0x5c>
 8008832:	4611      	mov	r1, r2
 8008834:	e7f0      	b.n	8008818 <__ieee754_sqrt+0x154>
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	3201      	adds	r2, #1
 800883a:	e7ef      	b.n	800881c <__ieee754_sqrt+0x158>
 800883c:	4688      	mov	r8, r1
 800883e:	e7aa      	b.n	8008796 <__ieee754_sqrt+0xd2>
 8008840:	f7f7 fd00 	bl	8000244 <__adddf3>
 8008844:	e9da 8900 	ldrd	r8, r9, [sl]
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f8 f920 	bl	8000a94 <__aeabi_dcmplt>
 8008854:	b120      	cbz	r0, 8008860 <__ieee754_sqrt+0x19c>
 8008856:	1ca1      	adds	r1, r4, #2
 8008858:	bf08      	it	eq
 800885a:	3501      	addeq	r5, #1
 800885c:	3402      	adds	r4, #2
 800885e:	e7ca      	b.n	80087f6 <__ieee754_sqrt+0x132>
 8008860:	3401      	adds	r4, #1
 8008862:	f024 0401 	bic.w	r4, r4, #1
 8008866:	e7c6      	b.n	80087f6 <__ieee754_sqrt+0x132>
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	200000f8 	.word	0x200000f8
 8008870:	20000100 	.word	0x20000100

08008874 <round>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800887a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800887e:	2a13      	cmp	r2, #19
 8008880:	460b      	mov	r3, r1
 8008882:	4605      	mov	r5, r0
 8008884:	460c      	mov	r4, r1
 8008886:	dc18      	bgt.n	80088ba <round+0x46>
 8008888:	2a00      	cmp	r2, #0
 800888a:	da09      	bge.n	80088a0 <round+0x2c>
 800888c:	3201      	adds	r2, #1
 800888e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008892:	d103      	bne.n	800889c <round+0x28>
 8008894:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008898:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800889c:	2200      	movs	r2, #0
 800889e:	e029      	b.n	80088f4 <round+0x80>
 80088a0:	4816      	ldr	r0, [pc, #88]	; (80088fc <round+0x88>)
 80088a2:	4110      	asrs	r0, r2
 80088a4:	4001      	ands	r1, r0
 80088a6:	4329      	orrs	r1, r5
 80088a8:	d011      	beq.n	80088ce <round+0x5a>
 80088aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80088ae:	fa41 f202 	asr.w	r2, r1, r2
 80088b2:	4413      	add	r3, r2
 80088b4:	ea23 0300 	bic.w	r3, r3, r0
 80088b8:	e7f0      	b.n	800889c <round+0x28>
 80088ba:	2a33      	cmp	r2, #51	; 0x33
 80088bc:	dd0a      	ble.n	80088d4 <round+0x60>
 80088be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80088c2:	d104      	bne.n	80088ce <round+0x5a>
 80088c4:	4602      	mov	r2, r0
 80088c6:	f7f7 fcbd 	bl	8000244 <__adddf3>
 80088ca:	4605      	mov	r5, r0
 80088cc:	460c      	mov	r4, r1
 80088ce:	4628      	mov	r0, r5
 80088d0:	4621      	mov	r1, r4
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80088dc:	40f8      	lsrs	r0, r7
 80088de:	4228      	tst	r0, r5
 80088e0:	d0f5      	beq.n	80088ce <round+0x5a>
 80088e2:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 80088e6:	2201      	movs	r2, #1
 80088e8:	408a      	lsls	r2, r1
 80088ea:	1952      	adds	r2, r2, r5
 80088ec:	bf28      	it	cs
 80088ee:	3301      	addcs	r3, #1
 80088f0:	ea22 0200 	bic.w	r2, r2, r0
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	e7e7      	b.n	80088ca <round+0x56>
 80088fa:	bf00      	nop
 80088fc:	000fffff 	.word	0x000fffff

08008900 <__ieee754_atan2>:
 8008900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	4617      	mov	r7, r2
 8008906:	4692      	mov	sl, r2
 8008908:	4699      	mov	r9, r3
 800890a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800890e:	427b      	negs	r3, r7
 8008910:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008a90 <__ieee754_atan2+0x190>
 8008914:	433b      	orrs	r3, r7
 8008916:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800891a:	4543      	cmp	r3, r8
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	d809      	bhi.n	8008936 <__ieee754_atan2+0x36>
 8008922:	4246      	negs	r6, r0
 8008924:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008928:	4306      	orrs	r6, r0
 800892a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800892e:	4546      	cmp	r6, r8
 8008930:	468e      	mov	lr, r1
 8008932:	4683      	mov	fp, r0
 8008934:	d908      	bls.n	8008948 <__ieee754_atan2+0x48>
 8008936:	4652      	mov	r2, sl
 8008938:	464b      	mov	r3, r9
 800893a:	4620      	mov	r0, r4
 800893c:	4629      	mov	r1, r5
 800893e:	f7f7 fc81 	bl	8000244 <__adddf3>
 8008942:	4604      	mov	r4, r0
 8008944:	460d      	mov	r5, r1
 8008946:	e019      	b.n	800897c <__ieee754_atan2+0x7c>
 8008948:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800894c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008950:	433e      	orrs	r6, r7
 8008952:	d103      	bne.n	800895c <__ieee754_atan2+0x5c>
 8008954:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	f7ff bd26 	b.w	80083a8 <atan>
 800895c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008960:	f006 0602 	and.w	r6, r6, #2
 8008964:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008968:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800896c:	d10a      	bne.n	8008984 <__ieee754_atan2+0x84>
 800896e:	2e02      	cmp	r6, #2
 8008970:	d067      	beq.n	8008a42 <__ieee754_atan2+0x142>
 8008972:	2e03      	cmp	r6, #3
 8008974:	d102      	bne.n	800897c <__ieee754_atan2+0x7c>
 8008976:	a53a      	add	r5, pc, #232	; (adr r5, 8008a60 <__ieee754_atan2+0x160>)
 8008978:	e9d5 4500 	ldrd	r4, r5, [r5]
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	4317      	orrs	r7, r2
 8008986:	d106      	bne.n	8008996 <__ieee754_atan2+0x96>
 8008988:	f1be 0f00 	cmp.w	lr, #0
 800898c:	da64      	bge.n	8008a58 <__ieee754_atan2+0x158>
 800898e:	a536      	add	r5, pc, #216	; (adr r5, 8008a68 <__ieee754_atan2+0x168>)
 8008990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008994:	e7f2      	b.n	800897c <__ieee754_atan2+0x7c>
 8008996:	4542      	cmp	r2, r8
 8008998:	d10f      	bne.n	80089ba <__ieee754_atan2+0xba>
 800899a:	4293      	cmp	r3, r2
 800899c:	f106 36ff 	add.w	r6, r6, #4294967295
 80089a0:	d107      	bne.n	80089b2 <__ieee754_atan2+0xb2>
 80089a2:	2e02      	cmp	r6, #2
 80089a4:	d851      	bhi.n	8008a4a <__ieee754_atan2+0x14a>
 80089a6:	4b3b      	ldr	r3, [pc, #236]	; (8008a94 <__ieee754_atan2+0x194>)
 80089a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089b0:	e7e4      	b.n	800897c <__ieee754_atan2+0x7c>
 80089b2:	2e02      	cmp	r6, #2
 80089b4:	d84d      	bhi.n	8008a52 <__ieee754_atan2+0x152>
 80089b6:	4b38      	ldr	r3, [pc, #224]	; (8008a98 <__ieee754_atan2+0x198>)
 80089b8:	e7f6      	b.n	80089a8 <__ieee754_atan2+0xa8>
 80089ba:	4543      	cmp	r3, r8
 80089bc:	d0e4      	beq.n	8008988 <__ieee754_atan2+0x88>
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80089c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089c8:	da21      	bge.n	8008a0e <__ieee754_atan2+0x10e>
 80089ca:	f1b9 0f00 	cmp.w	r9, #0
 80089ce:	da01      	bge.n	80089d4 <__ieee754_atan2+0xd4>
 80089d0:	323c      	adds	r2, #60	; 0x3c
 80089d2:	db20      	blt.n	8008a16 <__ieee754_atan2+0x116>
 80089d4:	4652      	mov	r2, sl
 80089d6:	464b      	mov	r3, r9
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 ff12 	bl	8000804 <__aeabi_ddiv>
 80089e0:	f7ff fe6c 	bl	80086bc <fabs>
 80089e4:	f7ff fce0 	bl	80083a8 <atan>
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	2e01      	cmp	r6, #1
 80089ee:	d015      	beq.n	8008a1c <__ieee754_atan2+0x11c>
 80089f0:	2e02      	cmp	r6, #2
 80089f2:	d017      	beq.n	8008a24 <__ieee754_atan2+0x124>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	d0c1      	beq.n	800897c <__ieee754_atan2+0x7c>
 80089f8:	a31d      	add	r3, pc, #116	; (adr r3, 8008a70 <__ieee754_atan2+0x170>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f7 fc1d 	bl	8000240 <__aeabi_dsub>
 8008a06:	a31c      	add	r3, pc, #112	; (adr r3, 8008a78 <__ieee754_atan2+0x178>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	e016      	b.n	8008a3c <__ieee754_atan2+0x13c>
 8008a0e:	a51c      	add	r5, pc, #112	; (adr r5, 8008a80 <__ieee754_atan2+0x180>)
 8008a10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a14:	e7ea      	b.n	80089ec <__ieee754_atan2+0xec>
 8008a16:	2400      	movs	r4, #0
 8008a18:	2500      	movs	r5, #0
 8008a1a:	e7e7      	b.n	80089ec <__ieee754_atan2+0xec>
 8008a1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008a20:	461d      	mov	r5, r3
 8008a22:	e7ab      	b.n	800897c <__ieee754_atan2+0x7c>
 8008a24:	a312      	add	r3, pc, #72	; (adr r3, 8008a70 <__ieee754_atan2+0x170>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc07 	bl	8000240 <__aeabi_dsub>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	a110      	add	r1, pc, #64	; (adr r1, 8008a78 <__ieee754_atan2+0x178>)
 8008a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3c:	f7f7 fc00 	bl	8000240 <__aeabi_dsub>
 8008a40:	e77f      	b.n	8008942 <__ieee754_atan2+0x42>
 8008a42:	a50d      	add	r5, pc, #52	; (adr r5, 8008a78 <__ieee754_atan2+0x178>)
 8008a44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a48:	e798      	b.n	800897c <__ieee754_atan2+0x7c>
 8008a4a:	a50f      	add	r5, pc, #60	; (adr r5, 8008a88 <__ieee754_atan2+0x188>)
 8008a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a50:	e794      	b.n	800897c <__ieee754_atan2+0x7c>
 8008a52:	2400      	movs	r4, #0
 8008a54:	2500      	movs	r5, #0
 8008a56:	e791      	b.n	800897c <__ieee754_atan2+0x7c>
 8008a58:	a509      	add	r5, pc, #36	; (adr r5, 8008a80 <__ieee754_atan2+0x180>)
 8008a5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a5e:	e78d      	b.n	800897c <__ieee754_atan2+0x7c>
 8008a60:	54442d18 	.word	0x54442d18
 8008a64:	c00921fb 	.word	0xc00921fb
 8008a68:	54442d18 	.word	0x54442d18
 8008a6c:	bff921fb 	.word	0xbff921fb
 8008a70:	33145c07 	.word	0x33145c07
 8008a74:	3ca1a626 	.word	0x3ca1a626
 8008a78:	54442d18 	.word	0x54442d18
 8008a7c:	400921fb 	.word	0x400921fb
 8008a80:	54442d18 	.word	0x54442d18
 8008a84:	3ff921fb 	.word	0x3ff921fb
 8008a88:	54442d18 	.word	0x54442d18
 8008a8c:	3fe921fb 	.word	0x3fe921fb
 8008a90:	7ff00000 	.word	0x7ff00000
 8008a94:	08008b78 	.word	0x08008b78
 8008a98:	08008b90 	.word	0x08008b90

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr
